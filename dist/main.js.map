{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","React","render","ReactModule","createElement","document","getElementById","./src/index","react","react-dom",2,"process","invariant","CSSCore","addClass","element","className","test","env","NODE_ENV","undefined","classList","add","hasClass","removeClass","remove","replace","RegExp","conditionClass","bool","contains","indexOf","this","./invariant","_process",3,"emptyFunction","EventListener","listen","target","eventType","callback","addEventListener","removeEventListener","attachEvent","detachEvent","capture","console","error","registerDefault","./emptyFunction",4,"canUseDOM","window","ExecutionEnvironment","canUseWorkers","Worker","canUseEventListeners","canUseViewport","screen","isInWorker",5,"camelize","string","_hyphenPattern","_","character","toUpperCase",6,"camelizeStyleName","msPattern","./camelize",7,"containsNode","_x","_x2","_again","_function","outerNode","innerNode","isTextNode","parentNode","compareDocumentPosition","./isTextNode",8,"hasArrayNature","obj","nodeType","Array","isArray","createArrayFromMixed","slice","toArray","./toArray",9,"getNodeName","markup","nodeNameMatch","match","nodeNamePattern","toLowerCase","createNodesFromMarkup","handleScript","node","dummyNode","nodeName","wrap","getMarkupWrap","innerHTML","wrapDepth","lastChild","scripts","getElementsByTagName","forEach","nodes","childNodes","removeChild","./ExecutionEnvironment","./createArrayFromMixed","./getMarkupWrap",10,"makeEmptyFunction","arg","thatReturns","thatReturnsFalse","thatReturnsTrue","thatReturnsNull","thatReturnsThis","thatReturnsArgument",11,"emptyObject","Object","freeze",12,"focusNode","focus",13,"getActiveElement","activeElement","body",14,"markupWrap","hasOwnProperty","shouldWrap","firstChild","selectWrap","tableWrap","trWrap","svgWrap","*","area","col","legend","param","tr","optgroup","option","caption","colgroup","tbody","tfoot","thead","td","th","svgElements",15,"getUnboundedScrollPosition","scrollable","x","pageXOffset","documentElement","scrollLeft","y","pageYOffset","scrollTop",16,"hyphenate","_uppercasePattern",17,"hyphenateStyleName","./hyphenate",18,"condition","format","b","c","d","args","argIndex","name","framesToPop",19,"isNode","object","Node",20,"./isNode",21,"keyMirror","key","ret",22,"keyOf","oneKeyObj",23,"mapObject","context","result","prototype",24,"memoizeStringOnly","cache",25,"performance","msPerformance","webkitPerformance",26,"performanceNow","now","Date","./performance",27,"shallowEqual","objA","objB","keysA","keys","keysB","bHasOwnProperty","bind",28,"ii",29,"warning","_len","arguments","_key","message",30,"drainQueue","draining","currentQueue","len","queue","noop","nextTick","fun","push","setTimeout","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask",31,"react/lib/ReactCSSTransitionGroup",32,"react/lib/ReactDOM",33,"ReactMount","findDOMNode","Mixin","componentDidMount","props","autoFocus","AutoFocusUtils","focusDOMComponent","getNode","_rootNodeID","./ReactMount","./findDOMNode","fbjs/lib/focusNode",34,"isPresto","opera","parseInt","isKeypressCommand","nativeEvent","ctrlKey","altKey","metaKey","getCompositionEventType","topLevelType","topLevelTypes","topCompositionStart","eventTypes","compositionStart","topCompositionEnd","compositionEnd","topCompositionUpdate","compositionUpdate","isFallbackCompositionStart","topKeyDown","keyCode","START_KEYCODE","isFallbackCompositionEnd","topKeyUp","END_KEYCODES","topKeyPress","topMouseDown","topBlur","getDataFromCustomEvent","detail","data","extractCompositionEvent","topLevelTarget","topLevelTargetID","nativeEventTarget","fallbackData","canUseCompositionEvent","currentComposition","useFallbackCompositionData","getData","FallbackCompositionState","getPooled","event","SyntheticCompositionEvent","customData","EventPropagators","accumulateTwoPhaseDispatches","getNativeBeforeInputChars","which","SPACEBAR_CODE","hasSpaceKeypress","SPACEBAR_CHAR","topTextInput","chars","getFallbackBeforeInputChars","release","topPaste","String","fromCharCode","extractBeforeInputEvent","canUseTextInputEvent","SyntheticInputEvent","beforeInput","EventConstants","documentMode","phasedRegistrationNames","bubbled","onBeforeInput","captured","onBeforeInputCapture","dependencies","onCompositionEnd","onCompositionEndCapture","onCompositionStart","onCompositionStartCapture","onCompositionUpdate","onCompositionUpdateCapture","BeforeInputEventPlugin","extractEvents","./EventConstants","./EventPropagators","./FallbackCompositionState","./SyntheticCompositionEvent","./SyntheticInputEvent","fbjs/lib/ExecutionEnvironment","fbjs/lib/keyOf",35,"prefixKey","prefix","charAt","substring","isUnitlessNumber","animationIterationCount","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","stopOpacity","strokeDashoffset","strokeOpacity","strokeWidth","prefixes","prop","shorthandPropertyExpansions","background","backgroundAttachment","backgroundColor","backgroundImage","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundPosition","border","borderWidth","borderStyle","borderColor","borderBottom","borderBottomWidth","borderBottomStyle","borderBottomColor","borderLeft","borderLeftWidth","borderLeftStyle","borderLeftColor","borderRight","borderRightWidth","borderRightStyle","borderRightColor","borderTop","borderTopWidth","borderTopStyle","borderTopColor","font","fontStyle","fontVariant","fontSize","fontFamily","outline","outlineWidth","outlineStyle","outlineColor","CSSProperty",36,"ReactPerf","dangerousStyleValue","processStyleName","styleName","hasShorthandPropertyBug","styleFloatAccessor","tempStyle","style","cssFloat","badVendoredStyleNamePattern","badStyleValueWithSemicolonPattern","warnedStyleNames","warnedStyleValues","warnHyphenatedStyleName","warnBadVendoredStyleName","warnStyleValueWithSemicolon","value","warnValidStyle","CSSPropertyOperations","createMarkupForStyles","styles","serialized","styleValue","setValueForStyles","expansion","individualStyleName","measureMethods","./CSSProperty","./ReactPerf","./dangerousStyleValue","fbjs/lib/camelizeStyleName","fbjs/lib/hyphenateStyleName","fbjs/lib/memoizeStringOnly","fbjs/lib/warning",37,"CallbackQueue","_callbacks","_contexts","PooledClass","assign","enqueue","notifyAll","callbacks","contexts","reset","destructor","addPoolingTo","./Object.assign","./PooledClass","fbjs/lib/invariant",38,"shouldUseChangeEvent","elem","type","manualDispatchChangeEvent","SyntheticEvent","change","activeElementID","getEventTarget","ReactUpdates","batchedUpdates","runEventInBatch","EventPluginHub","enqueueEvents","processEventQueue","startWatchingForChangeEventIE8","targetID","stopWatchingForChangeEventIE8","getTargetIDForChangeEvent","topChange","handleEventsForChangeEventIE8","topFocus","startWatchingForValueChange","activeElementValue","activeElementValueProp","getOwnPropertyDescriptor","constructor","defineProperty","newValueProp","handlePropertyChange","stopWatchingForValueChange","propertyName","srcElement","getTargetIDForInputEvent","topInput","handleEventsForInputEventIE","getTargetIDForInputEventIE","topSelectionChange","shouldUseClickEvent","getTargetIDForClickEvent","topClick","isEventSupported","isTextInputElement","onChange","onChangeCapture","doesChangeEventBubble","isInputEventSupported","get","set","val","ChangeEventPlugin","getTargetIDFunc","handleEventFunc","./EventPluginHub","./ReactUpdates","./SyntheticEvent","./getEventTarget","./isEventSupported","./isTextInputElement",39,"nextReactRootIndex","ClientReactRootIndex","createReactRootIndex",40,"insertChildAt","childNode","index","beforeChild","item","insertBefore","Danger","ReactMultiChildUpdateTypes","setInnerHTML","setTextContent","DOMChildrenOperations","dangerouslyReplaceNodeWithMarkup","updateTextContent","processUpdates","updates","markupList","update","initialChildren","updatedChildren","MOVE_EXISTING","REMOVE_NODE","updatedIndex","fromIndex","updatedChild","parentID","renderedMarkup","dangerouslyRenderMarkup","j","k","INSERT_MARKUP","markupIndex","toIndex","SET_MARKUP","content","TEXT_CONTENT","./Danger","./ReactMultiChildUpdateTypes","./setInnerHTML","./setTextContent",41,"checkMask","bitmask","DOMPropertyInjection","MUST_USE_ATTRIBUTE","MUST_USE_PROPERTY","HAS_SIDE_EFFECTS","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","injectDOMPropertyConfig","domPropertyConfig","Injection","Properties","DOMAttributeNamespaces","DOMAttributeNames","DOMPropertyNames","DOMMutationMethods","isCustomAttribute","DOMProperty","_isCustomAttributeFunctions","propName","properties","lowerCased","propConfig","propertyInfo","attributeName","attributeNamespace","mutationMethod","mustUseAttribute","mustUseProperty","hasSideEffects","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","getPossibleStandardName","defaultValueCache","ID_ATTRIBUTE_NAME","isCustomAttributeFn","getDefaultValueForProperty","testElement","nodeDefaults","injection",42,"isAttributeNameSafe","validatedAttributeNameCache","illegalAttributeNameCache","VALID_ATTRIBUTE_NAME_REGEX","shouldIgnoreValue","isNaN","quoteAttributeValueForBrowser","reactProps","children","dangerouslySetInnerHTML","ref","warnedProperties","warnUnknownProperty","lowerCasedName","standardName","DOMPropertyOperations","createMarkupForID","id","setAttributeForID","setAttribute","createMarkupForProperty","createMarkupForCustomAttribute","setValueForProperty","deleteValueForProperty","namespace","setAttributeNS","setValueForAttribute","removeAttribute","defaultValue","./DOMProperty","./quoteAttributeValueForBrowser",43,"OPEN_TAG_NAME_EXP","RESULT_INDEX_ATTR","markupByNodeName","resultList","resultListAssignmentCount","resultIndex","markupListByNodeName","renderNodes","join","renderNode","hasAttribute","getAttribute","oldChild","tagName","newChild","replaceChild","fbjs/lib/createNodesFromMarkup","fbjs/lib/emptyFunction","fbjs/lib/getMarkupWrap",44,"DefaultEventPluginOrder","ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","SelectEventPlugin",45,"SyntheticMouseEvent","getFirstReactDOM","mouseEnter","registrationName","onMouseEnter","topMouseOut","topMouseOver","mouseLeave","onMouseLeave","extractedEvents","relatedTarget","fromElement","win","doc","ownerDocument","defaultView","parentWindow","from","to","fromID","toID","toElement","getID","leave","enter","accumulateEnterLeaveDispatches","./SyntheticMouseEvent",46,"PropagationPhases","topAbort","topCanPlay","topCanPlayThrough","topContextMenu","topCopy","topCut","topDoubleClick","topDrag","topDragEnd","topDragEnter","topDragExit","topDragLeave","topDragOver","topDragStart","topDrop","topDurationChange","topEmptied","topEncrypted","topEnded","topError","topLoad","topLoadedData","topLoadedMetadata","topLoadStart","topMouseMove","topMouseUp","topPause","topPlay","topPlaying","topProgress","topRateChange","topReset","topScroll","topSeeked","topSeeking","topStalled","topSubmit","topSuspend","topTimeUpdate","topTouchCancel","topTouchEnd","topTouchMove","topTouchStart","topVolumeChange","topWaiting","topWheel","fbjs/lib/keyMirror",47,"validateInstanceHandle","valid","InstanceHandle","traverseTwoPhase","traverseEnterLeave","EventPluginRegistry","EventPluginUtils","ReactErrorUtils","accumulateInto","forEachAccumulated","listenerBank","eventQueue","executeDispatchesAndRelease","simulated","executeDispatchesInOrder","isPersistent","executeDispatchesAndReleaseSimulated","executeDispatchesAndReleaseTopLevel","injectMount","injectInstanceHandle","InjectedInstanceHandle","getInstanceHandle","injectEventPluginOrder","injectEventPluginsByName","eventNameDispatchConfigs","registrationNameModules","putListener","listener","bankForRegistrationName","PluginModule","didPutListener","getListener","deleteListener","willDeleteListener","deleteAllListeners","events","plugins","possiblePlugin","processingEventQueue","rethrowCaughtError","__purge","__getListenerBank","./EventPluginRegistry","./EventPluginUtils","./ReactErrorUtils","./accumulateInto","./forEachAccumulated",48,"recomputePluginOrdering","EventPluginOrder","pluginName","namesToPlugins","pluginIndex","publishedEvents","eventName","publishEventForPlugin","dispatchConfig","phaseName","phasedRegistrationName","publishRegistrationName","registrationNameDependencies","InjectedEventPluginOrder","injectedNamesToPlugins","isOrderingDirty","getPluginModuleForEvent","phase","_resetEventPlugins",49,"isEndish","isMoveish","isStartish","executeDispatch","domID","currentTarget","Mount","invokeGuardedCallbackWithCatch","invokeGuardedCallback","dispatchListeners","_dispatchListeners","dispatchIDs","_dispatchIDs","validateEventDispatches","isPropagationStopped","executeDispatchesInOrderStopAtTrueImpl","executeDispatchesInOrderStopAtTrue","executeDirectDispatch","dispatchListener","dispatchID","res","hasDispatches","InjectedMount","listenersIsArr","idsIsArr","IDsLen","listenersLen",50,"listenerAtPhase","propagationPhase","accumulateDirectionalDispatches","upwards","accumulateTwoPhaseDispatchesSingle","dispatchMarker","accumulateTwoPhaseDispatchesSingleSkipTarget","traverseTwoPhaseSkipTarget","accumulateDispatches","ignoredDirection","accumulateDirectDispatchesSingle","accumulateTwoPhaseDispatchesSkipTarget","accumulateDirectDispatches",51,"root","_root","_startText","getText","_fallbackText","getTextContentAccessor","start","end","startValue","startLength","endValue","endLength","minEnd","sliceTail","./getTextContentAccessor",52,"hasSVG","implementation","hasFeature","HTMLDOMPropertyConfig","accept","acceptCharset","accessKey","action","allowFullScreen","allowTransparency","alt","async","autoComplete","autoPlay","cellPadding","cellSpacing","charSet","challenge","checked","classID","cols","colSpan","contentEditable","contextMenu","controls","coords","crossOrigin","dateTime","default","defer","disabled","download","draggable","encType","form","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","icon","inputMode","integrity","is","keyParams","keyType","kind","label","lang","list","loop","low","manifest","marginHeight","marginWidth","max","maxLength","media","mediaGroup","method","min","minLength","multiple","muted","nonce","noValidate","open","optimum","pattern","placeholder","poster","preload","radioGroup","readOnly","rel","required","reversed","role","rows","rowSpan","sandbox","scope","scoped","scrolling","seamless","selected","shape","size","sizes","span","spellCheck","src","srcDoc","srcLang","srcSet","step","summary","tabIndex","useMap","width","wmode","about","datatype","inlist","property","resource","typeof","vocab","autoCapitalize","autoCorrect","autoSave","color","itemProp","itemScope","itemType","itemID","itemRef","results","security","unselectable",53,"_assertSingleLink","inputProps","checkedLink","valueLink","_assertValueLink","_assertCheckedLink","getDeclarationErrorAddendum","owner","getName","ReactPropTypes","ReactPropTypeLocations","hasReadOnlyValue","button","checkbox","image","radio","submit","propTypes","componentName","func","loggedTypeFailures","LinkedValueUtils","checkPropTypes","addendum","getValue","getChecked","executeOnChange","requestChange","./ReactPropTypeLocations","./ReactPropTypes",54,"sources","TypeError","nextIndex","nextSource",55,"oneArgumentPooler","copyFieldsFrom","Klass","instancePool","instance","pop","twoArgumentPooler","a1","a2","threeArgumentPooler","a3","fourArgumentPooler","a4","fiveArgumentPooler","a5","standardReleaser","poolSize","DEFAULT_POOL_SIZE","DEFAULT_POOLER","CopyConstructor","pooler","NewKlass",56,"ReactDOM","ReactDOMServer","ReactIsomorphic","deprecated","unmountComponentAtNode","renderToString","renderToStaticMarkup","__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","./ReactDOM","./ReactDOMServer","./ReactIsomorphic","./deprecated",57,"ReactInstanceMap","didWarnKey","ReactBrowserComponentMixin","getDOMNode","./ReactInstanceMap",58,"getListeningForDocument","mountAt","topListenersIDKey","reactTopListenersCounter","alreadyListeningTo","ReactEventEmitterMixin","ViewportMetrics","isMonitoringScrollValue","topEventMapping","Math","random","ReactBrowserEventEmitter","ReactEventListener","injectReactEventListener","setHandleTopLevel","handleTopLevel","setEnabled","enabled","isEnabled","listenTo","contentDocumentHandle","isListening","dependency","trapBubbledEvent","trapCapturedEvent","WINDOW_HANDLE","handlerBaseName","handle","ensureScrollValueMonitoring","refresh","refreshScrollValues","monitorScrollValue","./ReactEventEmitterMixin","./ViewportMetrics",59,"createTransitionTimeoutPropValidator","transitionType","timeoutPropName","enabledPropName","ReactTransitionGroup","ReactCSSTransitionGroupChild","ReactCSSTransitionGroup","createClass","displayName","transitionName","transitionAppear","PropTypes","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","getDefaultProps","_wrapChild","child","appear","appearTimeout","enterTimeout","leaveTimeout","childFactory","./React","./ReactCSSTransitionGroupChild","./ReactTransitionGroup",60,"ReactTransitionEvents","onlyChild","TICK","oneOfType","active","enterActive","leaveActive","appearActive","isRequired","number","transition","animationType","finishCallback","userSpecifiedDelay","activeClassName","timeout","endListener","clearTimeout","removeEndEventListener","queueClass","transitionTimeouts","addEndEventListener","classNameQueue","flushClassNameQueue","isMounted","componentWillMount","componentWillUnmount","componentWillAppear","done","componentWillEnter","componentWillLeave","./ReactTransitionEvents","./onlyChild","fbjs/lib/CSSCore",61,"instantiateChild","childInstances","keyUnique","instantiateReactComponent","ReactReconciler","shouldUpdateReactComponent","traverseAllChildren","ReactChildReconciler","instantiateChildren","nestedChildNodes","transaction","updateChildren","prevChildren","nextChildren","prevChild","prevElement","_currentElement","nextElement","receiveComponent","unmountComponent","nextChildInstance","unmountChildren","renderedChildren","renderedChild","./ReactReconciler","./instantiateReactComponent","./shouldUpdateReactComponent","./traverseAllChildren",62,"escapeUserProvidedKey","text","userProvidedKeyEscapeRegex","ForEachBookKeeping","forEachFunction","forEachContext","count","forEachSingleChild","bookKeeping","forEachChildren","forEachFunc","traverseContext","MapBookKeeping","mapResult","keyPrefix","mapFunction","mapContext","mapSingleChildIntoContext","childKey","mappedChild","mapIntoWithKeyPrefixInternal","ReactElement","isValidElement","cloneAndReplaceKey","array","escapedPrefix","mapChildren","forEachSingleChildDummy","countChildren","ReactChildren","map","./ReactElement",63,"warnSetProps","warnedSetProps","validateTypeDef","Constructor","typeDef","location","ReactPropTypeLocationNames","validateMethodOverride","proto","specPolicy","ReactClassInterface","ReactClassMixin","SpecPolicy","OVERRIDE_BASE","DEFINE_MANY","DEFINE_MANY_MERGED","mixSpecIntoComponent","spec","MIXINS_KEY","RESERVED_SPEC_KEYS","mixins","isReactClassMethod","isAlreadyDefined","isFunction","shouldAutoBind","autobind","__reactAutoBindMap","createMergedResultFunction","createChainedFunction","mixStaticSpecIntoComponent","statics","isReserved","isInherited","mergeIntoWithNoDuplicateKeys","one","two","apply","bindAutoBindMethod","component","boundMethod","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","_bind","newThis","reboundMethod","bindAutoBindMethods","autoBindKey","ReactComponent","ReactNoopUpdateQueue","DEFINE_ONCE","injectedMixins","contextTypes","childContextTypes","getInitialState","getChildContext","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","updateComponent","childContext","replaceState","newState","updater","enqueueReplaceState","enqueueCallback","setProps","partialProps","enqueueSetProps","replaceProps","newProps","enqueueReplaceProps","ReactClassComponent","ReactClass","refs","state","initialState","_isMockFunction","defaultProps","isReactClassApproved","componentShouldUpdate","componentWillRecieveProps","methodName","injectMixin","mixin","./ReactComponent","./ReactNoopUpdateQueue","./ReactPropTypeLocationNames","fbjs/lib/emptyObject",64,"canDefineProperty","isReactComponent","setState","partialState","enqueueSetState","forceUpdate","enqueueForceUpdate","deprecatedAPIs","defineDeprecationWarning","info","fnName","./canDefineProperty",65,"ReactDOMIDOperations","ReactComponentBrowserEnvironment","processChildrenUpdates","dangerouslyProcessChildrenUpdates","replaceNodeWithMarkupByID","dangerouslyReplaceNodeWithMarkupByID","unmountIDFromEnvironment","rootNodeID","purgeID","./ReactDOMIDOperations",66,"injected","ReactComponentEnvironment","injectEnvironment","environment",67,"_owner","StatelessComponent","Component","ReactCurrentOwner","ReactUpdateQueue","nextMountID","ReactCompositeComponentMixin","construct","_instance","_pendingElement","_pendingStateQueue","_pendingReplaceState","_pendingForceUpdate","_renderedComponent","_context","_mountOrder","_topLevelWrapper","_pendingCallbacks","mountComponent","rootID","inst","renderedElement","publicProps","_processProps","publicContext","_processContext","canInstantiate","current","componentDidUnmount","_processPendingState","_renderValidatedComponent","_instantiateReactComponent","_processChildContext","getReactMountReady","_maskContext","maskedContext","contextName","_checkPropTypes","currentContext","ex","nextContext","prevContext","performUpdateIfNecessary","prevParentElement","nextParentElement","prevUnmaskedContext","nextUnmaskedContext","nextProps","nextState","shouldUpdate","_performComponentUpdate","partial","unmaskedContext","prevProps","prevState","hasComponentDidUpdate","Boolean","_updateRenderedComponent","prevComponentInstance","prevRenderedElement","nextRenderedElement","thisID","prevComponentID","nextMarkup","_replaceNodeWithMarkupByID","_renderValidatedComponentWithoutOwnerOrContext","renderedComponent","attachRef","getPublicInstance","publicComponentInstance","detachRef","ReactCompositeComponent","./ReactComponentEnvironment","./ReactCurrentOwner","./ReactUpdateQueue",68,69,"ReactDOMTextComponent","ReactDefaultInjection","ReactInstanceHandles","ReactVersion","renderSubtreeIntoContainer","inject","measure","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","__REACT_DEVTOOLS_GLOBAL_HOOK__","CurrentOwner","InstanceHandles","Reconciler","TextComponent","top","self","navigator","userAgent","debug","ieCompatibilityMode","expectedFeatures","every","Function","split","trim","create","./ReactDOMTextComponent","./ReactDefaultInjection","./ReactInstanceHandles","./ReactVersion","./renderSubtreeIntoContainer",70,"mouseListenerNames","onClick","onDoubleClick","onMouseDown","onMouseMove","onMouseUp","onClickCapture","onDoubleClickCapture","onMouseDownCapture","onMouseMoveCapture","onMouseUpCapture","ReactDOMButton","getNativeProps","nativeProps",71,"internalInstance","legacyGetDOMNode","_reactInternalComponent","legacyIsMounted","legacySetStateEtc","legacySetProps","enqueueSetPropsInternal","enqueueCallbackInternal","legacyReplaceProps","enqueueReplacePropsInternal","friendlyStringify","pairs","keyEscaped","JSON","stringify","checkAndWarnForMutatedStyle","style1","style2","ownerName","_tag","hash","styleMutationWarning","assertValidProps","voidElementTags","HTML","enqueuePutListener","container","findReactContainerForID","ELEMENT_NODE_TYPE","listenerToPut","trapBubbledEventsLocal","_wrapperState","listeners","mediaEvents","mountReadyInputWrapper","ReactDOMInput","mountReadyWrapper","postUpdateSelectWrapper","ReactDOMSelect","postUpdateWrapper","validateDangerousTag","tag","validatedTagCache","VALID_TAG_REGEX","processChildContextDev","validateDOMNesting","ancestorInfoContextKey","updatedAncestorInfo","isCustomComponent","ReactDOMComponent","_renderedChildren","_previousStyle","_previousStyleCopy","_nodeWithLegacyProperties","_unprocessedContextDev","_processedContextDev","legacyPropsDescriptor","ReactDOMOption","ReactDOMTextarea","ReactMultiChild","escapeTextContentForBrowser","CONTENT_TYPES","CHILDREN","STYLE","__html","enumerable","omittedCloseTags","base","br","embed","hr","img","input","keygen","link","meta","source","track","wbr","newlineEatingTags","listing","pre","textarea","menuitem","mountWrapper","processChildContext","mountImage","useCreateElement","ownerDocumentContextKey","el","_updateDOMProperties","_createInitialChildren","tagOpen","_createOpenTagMarkupAndPutListeners","tagContent","_createContentMarkup","propKey","propValue","markupForID","contentToUse","childrenToUse","mountImages","mountChildren","appendChild","lastProps","updateWrapper","_updateDOMChildren","styleUpdates","lastStyle","nextProp","lastProp","lastContent","nextContent","lastHtml","nextHtml","lastChildren","lastHasContentOrHtml","nextHasContentOrHtml","updateMarkup","unmountWrapper","defineProperties","./AutoFocusUtils","./CSSPropertyOperations","./DOMPropertyOperations","./ReactBrowserEventEmitter","./ReactComponentBrowserEnvironment","./ReactDOMButton","./ReactDOMInput","./ReactDOMOption","./ReactDOMSelect","./ReactDOMTextarea","./ReactMultiChild","./escapeTextContentForBrowser","./validateDOMNesting","fbjs/lib/shallowEqual",72,"createDOMFactory","ReactElementValidator","createFactory","ReactDOMFactories","abbr","address","article","aside","audio","bdi","bdo","big","blockquote","canvas","cite","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","fieldset","figcaption","figure","footer","h1","h2","h3","h4","h5","h6","head","header","hgroup","html","iframe","ins","kbd","li","main","mark","menu","meter","nav","noscript","ol","output","p","picture","progress","q","rp","rt","ruby","samp","script","section","select","small","strong","sub","sup","table","time","ul","var","video","circle","clipPath","defs","ellipse","g","line","linearGradient","mask","path","polygon","polyline","radialGradient","rect","stop","svg","tspan","./ReactElementValidator","fbjs/lib/mapObject",73,"ReactDOMFeatureFlags",74,"INVALID_PROPERTY_ERRORS","updatePropertyByID","./DOMChildrenOperations",75,"forceUpdateIfMounted","_handleChange","returnValue","asap","rootNode","queryRoot","group","querySelectorAll","otherNode","otherID","otherInstance","instancesByReactID","defaultChecked","initialValue","initialChecked","./LinkedValueUtils",76,"valueContextKey","selectValue","./ReactChildren",77,"updateOptionsIfPendingUpdateAndMounted","pendingUpdate","updateOptions","checkSelectPropTypes","valuePropNames","selectedValue","options","toString","wasMultiple",78,"isCollapsed","anchorNode","anchorOffset","focusOffset","getIEOffsets","selection","selectedRange","createRange","selectedLength","fromStart","duplicate","moveToElementText","setEndPoint","startOffset","endOffset","getModernOffsets","getSelection","rangeCount","currentRange","getRangeAt","startContainer","endContainer","isSelectionCollapsed","rangeLength","tempRange","cloneRange","selectNodeContents","setEnd","isTempRangeCollapsed","detectionRange","setStart","isBackward","collapsed","setIEOffsets","offsets","range","moveStart","moveEnd","setModernOffsets","extend","temp","startMarker","getNodeForCharacterOffset","endMarker","offset","removeAllRanges","addRange","useIEOffsets","ReactDOMSelection","getOffsets","setOffsets","./getNodeForCharacterOffset",79,"ReactServerRendering","./ReactServerRendering",80,"_stringText","_mountIndex","escapedText","nextText","nextStringText",81,82,"ReactDefaultBatchingStrategyTransaction","reinitializeTransaction","Transaction","RESET_BATCHED_UPDATES","initialize","close","ReactDefaultBatchingStrategy","isBatchingUpdates","FLUSH_BATCHED_UPDATES","flushBatchedUpdates","TRANSACTION_WRAPPERS","getTransactionWrappers","alreadyBatchingUpdates","perform","./Transaction",83,"alreadyInjected","ReactInjection","EventEmitter","NativeComponent","injectGenericComponentClass","injectTextComponentClass","Class","SVGDOMPropertyConfig","EmptyComponent","injectEmptyComponent","Updates","injectReconcileTransaction","ReactReconcileTransaction","injectBatchingStrategy","RootIndex","injectCreateReactRootIndex","ServerReactRootIndex","url","ReactDefaultPerf","./BeforeInputEventPlugin","./ChangeEventPlugin","./ClientReactRootIndex","./DefaultEventPluginOrder","./EnterLeaveEventPlugin","./HTMLDOMPropertyConfig","./ReactBrowserComponentMixin","./ReactDOMComponent","./ReactDefaultBatchingStrategy","./ReactDefaultPerf","./ReactEventListener","./ReactInjection","./ReactReconcileTransaction","./SVGDOMPropertyConfig","./SelectEventPlugin","./ServerReactRootIndex","./SimpleEventPlugin",84,"roundFloat","floor","addValue","ReactDefaultPerfAnalysis","_allMeasurements","_mountStack","_injected","injectMeasure","enableMeasure","getLastMeasurements","printExclusive","measurements","getExclusiveSummary","Component class name","Total inclusive time (ms)","inclusive","Exclusive mount time (ms)","exclusive","Exclusive render time (ms)","Mount time per instance (ms)","Render time per instance (ms)","Instances","printInclusive","getInclusiveSummary","Owner > component","Inclusive time (ms)","log","getTotalTime","toFixed","getMeasurementsSummaryMap","Wasted time (ms)","printWasted","printDOM","getDOMSummary","_recordWrite","totalTime","writes","moduleName","rv","counts","displayNames","created","mountID","writeArgs","textContent","TopLevelWrapper","isRender","isMount","mountStack","entry","subMountTime","./ReactDefaultPerfAnalysis","fbjs/lib/performanceNow",85,"measurement","items","write","DOM_OPERATION_TYPES","candidates","allIDs","arr","DONT_CARE_THRESHOLD","sort","onlyClean","inclusiveKey","cleanComponents","getUnchangedComponents","dirtyLeafIDs","isDirty","_mountImageIntoNode","replaceNodeWithMarkup",86,"REACT_ELEMENT_TYPE","Symbol","RESERVED_PROPS","__self","__source","$$typeof","_store","configurable","writable","validated","_self","_source","config","childrenLength","childArray","factory","oldElement","newKey","newElement","cloneAndReplaceProps","cloneElement",87,"validateExplicitKey","parentType","addenda","getAddendaForKeyUse","parentOrOwner","childOwner","messageType","parentName","memoizer","ownerHasKeyUseWarning","validateChildKeys","iteratorFn","getIteratorFn","entries","iterator","next","validatePropTypes","componentClass","validType","validatedFactory","./getIteratorFn",88,"registerNullComponentID","ReactEmptyComponentRegistry","placeholderElement","ReactEmptyComponentInjection","ReactEmptyComponent","instantiate","deregisterNullComponentID","./ReactEmptyComponentRegistry",89,"isNullComponentID","nullComponentIDsRegistry",90,"caughtError","dispatchEvent","createEvent","fakeNode","boundFunc","evtType","evt","initEvent",91,"runEventQueueInBatch",92,"findParent","nodeID","getReactRootIDFromNodeID","parent","TopLevelCallbackBookKeeping","ancestors","handleTopLevelImpl","handleTopLevelWithoutPath","ancestor","_handleTopLevel","scrollValueMonitor","cb","scrollPosition","_enabled","fbjs/lib/EventListener","fbjs/lib/getUnboundedScrollPosition",93,"ReactNativeComponent","ReactRootIndex","Perf","./ReactClass","./ReactEmptyComponent","./ReactNativeComponent","./ReactRootIndex",94,"isInDocument","ReactInputSelection","hasSelectionCapabilities","getSelectionInformation","focusedElem","selectionRange","restoreSelection","priorSelectionInformation","curFocusedElem","priorFocusedElem","priorSelectionRange","setSelection","selectionStart","selectionEnd","parentElement","createTextRange","collapse","./ReactDOMSelection","fbjs/lib/containsNode","fbjs/lib/getActiveElement",95,"getReactRootIDString","SEPARATOR","isBoundary","isValidID","isAncestorIDOf","ancestorID","descendantID","getParentID","substr","lastIndexOf","getNextDescendantID","destinationID","SEPARATOR_LENGTH","getFirstCommonAncestorID","oneID","twoID","lastCommonMarkerIndex","longestCommonID","traverseParentPath","skipFirst","skipLast","traverseUp","depth","traverse","MAX_TREE_DEPTH","createReactRootID","createReactID","leaveID","enterID","upArg","downArg","traverseAncestors","_getNextDescendantID",96,"_reactInternalInstance","has",97,"Children","only","createMixin","DOM","__spread","./ReactDOMFactories",98,"adler32","TAG_END","ReactMarkupChecksum","CHECKSUM_ATTR_NAME","addChecksumToMarkup","checksum","canReuseMarkup","existingChecksum","markupChecksum","./adler32",99,"firstDifferenceIndex","string1","string2","minLen","getReactRootElementInContainer","DOC_NODE_TYPE","getReactRootID","rootElement","internalGetID","nodeCache","cached","isValid","ATTR_NAME","setID","oldID","findReactNodeByID","getNodeFromInstance","findDeepestCachedAncestorImpl","deepestNodeSoFar","findDeepestCachedAncestor","foundNode","mountComponentIntoNode","componentInstance","shouldReuseMarkup","batchedMountComponentIntoNode","unmountComponentFromNode","hasNonRootReactChild","reactRootID","findFirstReactDOMImpl","lastID","containersByReactRootID","DOCUMENT_FRAGMENT_NODE_TYPE","instancesByReactRootID","rootElementsByReactRootID","findComponentRootReusableArray","_instancesByReactRootID","scrollMonitor","renderCallback","_updateRootComponent","prevComponent","enqueueElementInternal","_registerComponent","nextComponent","registerContainer","_renderNewRootComponent","parentComponent","_renderSubtreeIntoContainer","nextWrappedElement","prevWrappedElement","publicInst","updatedCallback","reactRootElement","containerHasReactMarkup","containerHasNonRootReactChild","nextSibling","rootElementSibling","containerID","isContainerReactRoot","containerChild","reactRoot","findComponentRoot","ancestorNode","firstChildren","childIndex","deepestAncestor","targetChild","childID","rootMarkup","outerHTML","normalizedMarkup","normalizer","contentDocument","diffIndex","difference","./ReactDOMFeatureFlags","./ReactMarkupChecksum",100,"enqueueInsertMarkup","updateQueue","markupQueue","enqueueMove","enqueueRemove","enqueueSetMarkup","enqueueTextContent","processQueue","clearQueue","flattenChildren","updateDepth","_reconcilerInstantiateChildren","nestedChildren","_reconcilerUpdateChildren","nextNestedChildrenElements","errorThrown","_unmountChild","_unmountChildByName","setMarkup","_updateChildren","lastIndex","nextChild","moveChild","_mountChildByNameAtIndex","createChild","./ReactChildReconciler","./flattenChildren",101,102,"getComponentClassForElement","tagToComponentClass","autoGenerateWrapperClass","createInternalComponent","genericComponentClass","createInstanceForText","textComponentClass","isTextComponent","ReactNativeComponentInjection","injectComponentClasses","componentClasses",103,"warnTDZ","publicInstance","callerName","completeState",104,"ReactOwner","isValidOwner","addComponentAsRefTo","removeComponentAsRefFrom",105,"_noMeasure","objName","storedMeasure","objectName","methodNames","measuredFunc","wrapper",106,107,108,"createChainableTypeChecker","validate","checkType","propFullName","ANONYMOUS","locationName","chainedCheckType","createPrimitiveTypeChecker","expectedType","propType","getPropType","preciseType","getPreciseType","createAnyTypeChecker","createArrayOfTypeChecker","typeChecker","createElementTypeChecker","createInstanceTypeChecker","expectedClass","expectedClassName","actualClassName","getClassName","createEnumTypeChecker","expectedValues","valuesString","createObjectOfTypeChecker","createUnionTypeChecker","arrayOfTypeCheckers","checker","createNodeChecker","createShapeTypeChecker","shapeTypes","any","arrayOf","instanceOf","objectOf","oneOf",109,"forceHTML","reactMountReady","SELECTION_RESTORATION","EVENT_SUPPRESSION","currentlyEnabled","previouslyEnabled","ON_DOM_READY_QUEUEING","./CallbackQueue","./ReactInputSelection",110,"attachRefs","ReactRef","detachRefs","refsChanged","shouldUpdateRefs","./ReactRef",111,"prevEmpty","nextEmpty","./ReactOwner",112,"ReactRootIndexInjection","_createReactRootIndex",113,"ReactServerBatchingStrategy",114,"ReactServerRenderingTransaction","./ReactServerBatchingStrategy","./ReactServerRenderingTransaction",115,116,"ReactTransitionChildMapping","getChildMapping","mergeChildMappings","prev","getValueForKey","nextKeysPending","pendingKeys","prevKey","childMapping","nextKey","pendingNextKey",117,"detectEvents","testEl","EVENT_NAME_MAP","animationend","animation","transitionend","baseEventName","baseEvents","endEvents","eventListener","WebkitTransition","MozTransition","OTransition","msTransition","WebkitAnimation","MozAnimation","OAnimation","msAnimation","endEvent",118,"currentlyTransitioningKeys","keysToEnter","keysToLeave","initialChildMapping","performAppear","nextChildMapping","prevChildMapping","hasPrev","hasNext","performEnter","performLeave","_handleDoneAppearing","componentDidAppear","currentChildMapping","_handleDoneEntering","componentDidEnter","_handleDoneLeaving","componentDidLeave","newChildren","childrenToRender","./ReactTransitionChildMapping",119,"enqueueUpdate","getInternalInstanceReadyForUpdate","_warnedAboutRefsInRender","topLevelWrapper","wrapElement",120,"ensureInjected","batchingStrategy","ReactUpdatesFlushTransaction","dirtyComponentsLength","callbackQueue","reconcileTransaction","mountOrderComparator","c1","c2","runBatchedUpdates","dirtyComponents","asapCallbackQueue","asapEnqueued","NESTED_UPDATES","splice","UPDATE_QUEUEING","ReactUpdatesInjection","ReconcileTransaction","_batchingStrategy",121,122,"NS","xlink","xml","cx","cy","dx","dy","fill","fx","fy","gradientTransform","gradientUnits","markerEnd","markerMid","markerStart","patternContentUnits","patternUnits","points","preserveAspectRatio","rx","ry","spreadMethod","stopColor","stroke","strokeDasharray","strokeLinecap","textAnchor","transform","viewBox","x1","x2","xlinkActuate","xlinkArcrole","xlinkHref","xlinkRole","xlinkShow","xlinkTitle","xlinkType","xmlBase","xmlLang","xmlSpace","y1","y2",123,"boundingTop","left","boundingLeft","constructSelectEvent","mouseDown","currentSelection","lastSelection","syntheticEvent","skipSelectionChangeEvent","onSelect","onSelectCapture","hasListener","ON_SELECT_KEY",124,"GLOBAL_MOUNT_POINT_MAX","pow","ceil",125,"SyntheticClipboardEvent","SyntheticFocusEvent","SyntheticKeyboardEvent","SyntheticDragEvent","SyntheticTouchEvent","SyntheticUIEvent","SyntheticWheelEvent","getEventCharCode","abort","onAbort","onAbortCapture","blur","onBlur","onBlurCapture","canPlay","onCanPlay","onCanPlayCapture","canPlayThrough","onCanPlayThrough","onCanPlayThroughCapture","click","onContextMenu","onContextMenuCapture","copy","onCopy","onCopyCapture","cut","onCut","onCutCapture","doubleClick","drag","onDrag","onDragCapture","dragEnd","onDragEnd","onDragEndCapture","dragEnter","onDragEnter","onDragEnterCapture","dragExit","onDragExit","onDragExitCapture","dragLeave","onDragLeave","onDragLeaveCapture","dragOver","onDragOver","onDragOverCapture","dragStart","onDragStart","onDragStartCapture","drop","onDrop","onDropCapture","durationChange","onDurationChange","onDurationChangeCapture","emptied","onEmptied","onEmptiedCapture","encrypted","onEncrypted","onEncryptedCapture","ended","onEnded","onEndedCapture","onError","onErrorCapture","onFocus","onFocusCapture","onInput","onInputCapture","keyDown","onKeyDown","onKeyDownCapture","keyPress","onKeyPress","onKeyPressCapture","keyUp","onKeyUp","onKeyUpCapture","load","onLoad","onLoadCapture","loadedData","onLoadedData","onLoadedDataCapture","loadedMetadata","onLoadedMetadata","onLoadedMetadataCapture","loadStart","onLoadStart","onLoadStartCapture","mouseMove","mouseOut","onMouseOut","onMouseOutCapture","mouseOver","onMouseOver","onMouseOverCapture","mouseUp","paste","onPaste","onPasteCapture","pause","onPause","onPauseCapture","play","onPlay","onPlayCapture","playing","onPlaying","onPlayingCapture","onProgress","onProgressCapture","rateChange","onRateChange","onRateChangeCapture","onReset","onResetCapture","scroll","onScroll","onScrollCapture","seeked","onSeeked","onSeekedCapture","seeking","onSeeking","onSeekingCapture","stalled","onStalled","onStalledCapture","onSubmit","onSubmitCapture","suspend","onSuspend","onSuspendCapture","timeUpdate","onTimeUpdate","onTimeUpdateCapture","touchCancel","onTouchCancel","onTouchCancelCapture","touchEnd","onTouchEnd","onTouchEndCapture","touchMove","onTouchMove","onTouchMoveCapture","touchStart","onTouchStart","onTouchStartCapture","volumeChange","onVolumeChange","onVolumeChangeCapture","waiting","onWaiting","onWaitingCapture","wheel","onWheel","onWheelCapture","topLevelEventsToDispatchConfig","ON_CLICK_KEY","onClickListeners","EventConstructor","./SyntheticClipboardEvent","./SyntheticDragEvent","./SyntheticFocusEvent","./SyntheticKeyboardEvent","./SyntheticTouchEvent","./SyntheticUIEvent","./SyntheticWheelEvent","./getEventCharCode",126,"ClipboardEventInterface","clipboardData","augmentClass",127,"CompositionEventInterface",128,"DragEventInterface","dataTransfer",129,"Interface","normalize","defaultPrevented","isDefaultPrevented","EventInterface","eventPhase","bubbles","cancelable","timeStamp","isTrusted","preventDefault","stopPropagation","cancelBubble","persist","Super",130,"FocusEventInterface",131,"InputEventInterface",132,"getEventKey","getEventModifierState","KeyboardEventInterface","shiftKey","repeat","locale","getModifierState","charCode","./getEventKey","./getEventModifierState",133,"MouseEventInterface","screenX","screenY","clientX","clientY","buttons","pageX","currentScrollLeft","pageY","currentScrollTop",134,"TouchEventInterface","touches","targetTouches","changedTouches",135,"UIEventInterface","view",136,"WheelEventInterface","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode",137,"transactionWrappers","wrapperInitData","_isInTransaction","isInTransaction","initializeAll","closeAll","err","startIndex","OBSERVED_ERROR","initData",138,139,"currentIsArray","nextIsArray","concat",140,"m","charCodeAt","MOD",141,142,"isEmpty","isNonNumeric",143,"newModule","newPackage","ctx","fn","warned","newFn",144,"escaper","ESCAPE_LOOKUP","ESCAPE_REGEX","&",">","<","\"","'",145,"componentOrElement",146,"flattenSingleChildIntoContext",147,148,149,"normalizeKey","translateToKey","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey",224,150,"modifierStateGetter","keyArg","keyProp","modifierKeyToProp","Alt","Control","Meta","Shift",151,152,"maybeIterable","ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL",153,"getLeafNode","getSiblingNode","nodeStart","nodeEnd",154,"contentKey",155,"isInternalComponentType","ReactCompositeComponentWrapper","_mountImage","_isOwnerNecessary","preventExtensions","./ReactCompositeComponent",156,"eventNameSuffix","isSupported","useHasFeature",157,"supportedInputTypes","date","datetime","datetime-local","email","month","password","search","tel","week",158,159,160,161,"WHITESPACE_TEST","NONVISIBLE_TEST","MSApp","execUnsafeLocalFunction","textNode","deleteData",162,163,"prevType","nextType",164,"userProvidedKeyEscaper","userProvidedKeyEscaperLookup","getComponentKey","wrapUserProvidedKey","traverseAllChildrenImpl","nameSoFar","nextName","subtreeCount","nextNamePrefix","SUBSEPARATOR","didWarnAboutMaps","_isReactElement","childrenString","=",".",":",165,"specialTags","inScopeTags","buttonScopeTags","impliedEndTags","emptyAncestorInfo","parentTag","formTag","aTagInScope","buttonTagInScope","nobrTagInScope","pTagInButtonScope","listItemTagAutoclosing","dlItemTagAutoclosing","oldInfo","ancestorInfo","isTagValidWithParent","findInvalidAncestorForTag","findOwnerStack","stack","reverse","didWarn","childTag","childInstance","parentInfo","invalidParent","invalidAncestor","problematic","ancestorTag","ancestorInstance","ancestorOwner","childOwners","ancestorOwners","minStackLen","deepestCommon","UNKNOWN","childOwnerNames","ancestorOwnerNames","ownerInfo","warnKey","isTagValidInContext",166,"./lib/React",167,"getHead","attachAttributes","attributes","insertCSS","createLink","createStyle","cssText","sheet","styleSheet","createTextNode",168,"_interopRequireDefault","__esModule","_toConsumableArray","arr2","numToStr","num","_react","_react2","_reactAddonsCssTransitionGroup","_reactAddonsCssTransitionGroup2","A","ALLCARDS","LSKEY","Poker","str","localStorage","getItem","json","parse","total","bet","dealing","cards","holds","gaming","times","randomResult","help","inputText","runOut","preLoadImages","images","Image","inputTextChange","hideInput","persistData","checkRunOut","showHelp","hideHelp","setItem","winMoney","_this","resetOneCard","resetState","clearTimer","clearInterval","timer","clearRandom","startRandom","setInterval","randomGuessBig","randomWin","randomLose","randomGuessSmall","betMinus","betPlus","rollGame","minusTotal","dealCards","toggleHold","dealOneCard","_state","gameResult","card","getOneShuffleCard","ran","ts","ns","cArr","cardsArr","./index.scss","react-addons-css-transition-group",169,"css","scssify"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar React = require('react');\nvar render = require('react-dom').render;\nvar ReactModule = require('./src/index');\n\nrender(React.createElement(ReactModule, null), document.getElementById('container'));\n\n},{\"./src/index\":168,\"react\":166,\"react-dom\":32}],2:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSCore\n * @typechecks\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\n\nvar CSSCore = {\n\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function (element, className) {\n    !!/\\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. \"%s\" contains ' + 'multiple classes.', className) : invariant(false) : undefined;\n\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function (element, className) {\n    !!/\\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. \"%s\" contains ' + 'multiple classes.', className) : invariant(false) : undefined;\n\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className.replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1').replace(/\\s+/g, ' ') // multiple spaces to one\n        .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Helper to add or remove a class from an element based on a condition.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @param {*} bool condition to whether to add or remove the class\n   * @return {DOMElement} the element passed in\n   */\n  conditionClass: function (element, className, bool) {\n    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);\n  },\n\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function (element, className) {\n    !!/\\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : undefined;\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  }\n\n};\n\nmodule.exports = CSSCore;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9DU1NDb3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENTU0NvcmVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBUaGUgQ1NTQ29yZSBtb2R1bGUgc3BlY2lmaWVzIHRoZSBBUEkgKGFuZCBpbXBsZW1lbnRzIG1vc3Qgb2YgdGhlIG1ldGhvZHMpXG4gKiB0aGF0IHNob3VsZCBiZSB1c2VkIHdoZW4gZGVhbGluZyB3aXRoIHRoZSBkaXNwbGF5IG9mIGVsZW1lbnRzICh2aWEgdGhlaXJcbiAqIENTUyBjbGFzc2VzIGFuZCB2aXNpYmlsaXR5IG9uIHNjcmVlbi4gSXQgaXMgYW4gQVBJIGZvY3VzZWQgb24gbXV0YXRpbmcgdGhlXG4gKiBkaXNwbGF5IGFuZCBub3QgcmVhZGluZyBpdCBhcyBubyBsb2dpY2FsIHN0YXRlIHNob3VsZCBiZSBlbmNvZGVkIGluIHRoZVxuICogZGlzcGxheSBvZiBlbGVtZW50cy5cbiAqL1xuXG52YXIgQ1NTQ29yZSA9IHtcblxuICAvKipcbiAgICogQWRkcyB0aGUgY2xhc3MgcGFzc2VkIGluIHRvIHRoZSBlbGVtZW50IGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBoYXZlIGl0LlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdG8gc2V0IHRoZSBjbGFzcyBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3NOYW1lXG4gICAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IHRoZSBlbGVtZW50IHBhc3NlZCBpblxuICAgKi9cbiAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAhIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDU1NDb3JlLmFkZENsYXNzIHRha2VzIG9ubHkgYSBzaW5nbGUgY2xhc3MgbmFtZS4gXCIlc1wiIGNvbnRhaW5zICcgKyAnbXVsdGlwbGUgY2xhc3Nlcy4nLCBjbGFzc05hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoIUNTU0NvcmUuaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgY2xhc3MgcGFzc2VkIGluIGZyb20gdGhlIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIHNldCB0aGUgY2xhc3Mgb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzTmFtZVxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSB0aGUgZWxlbWVudCBwYXNzZWQgaW5cbiAgICovXG4gIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgISEvXFxzLy50ZXN0KGNsYXNzTmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ1NTQ29yZS5yZW1vdmVDbGFzcyB0YWtlcyBvbmx5IGEgc2luZ2xlIGNsYXNzIG5hbWUuIFwiJXNcIiBjb250YWlucyAnICsgJ211bHRpcGxlIGNsYXNzZXMuJywgY2xhc3NOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKENTU0NvcmUuaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzTmFtZSArICcoPzpcXFxcc3wkKScsICdnJyksICckMScpLnJlcGxhY2UoL1xccysvZywgJyAnKSAvLyBtdWx0aXBsZSBzcGFjZXMgdG8gb25lXG4gICAgICAgIC5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJyk7IC8vIHRyaW0gdGhlIGVuZHNcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byBhZGQgb3IgcmVtb3ZlIGEgY2xhc3MgZnJvbSBhbiBlbGVtZW50IGJhc2VkIG9uIGEgY29uZGl0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdG8gc2V0IHRoZSBjbGFzcyBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3NOYW1lXG4gICAqIEBwYXJhbSB7Kn0gYm9vbCBjb25kaXRpb24gdG8gd2hldGhlciB0byBhZGQgb3IgcmVtb3ZlIHRoZSBjbGFzc1xuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSB0aGUgZWxlbWVudCBwYXNzZWQgaW5cbiAgICovXG4gIGNvbmRpdGlvbkNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lLCBib29sKSB7XG4gICAgcmV0dXJuIChib29sID8gQ1NTQ29yZS5hZGRDbGFzcyA6IENTU0NvcmUucmVtb3ZlQ2xhc3MpKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRlc3RzIHdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIHRoZSBjbGFzcyBzcGVjaWZpZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NTm9kZXxET01XaW5kb3d9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdG8gc2V0IHRoZSBjbGFzcyBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3NOYW1lXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGVsZW1lbnQgaGFzIHRoZSBjbGFzcywgZmFsc2UgaWYgbm90XG4gICAqL1xuICBoYXNDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICEhL1xccy8udGVzdChjbGFzc05hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0NTUy5oYXNDbGFzcyB0YWtlcyBvbmx5IGEgc2luZ2xlIGNsYXNzIG5hbWUuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgcmV0dXJuICEhY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiAoJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLmluZGV4T2YoJyAnICsgY2xhc3NOYW1lICsgJyAnKSA+IC0xO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTQ29yZTsiXX0=\n},{\"./invariant\":18,\"_process\":30}],3:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventListener\n * @typechecks\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function (target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function () {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function (target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function () {}\n};\n\nmodule.exports = EventListener;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9FdmVudExpc3RlbmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgdGFyZ2V0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24gKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQXR0ZW1wdGVkIHRvIGxpc3RlbiB0byBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlIG9uIGEgJyArICdicm93c2VyIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgY2FwdHVyZSBwaGFzZS4gWW91ciBhcHBsaWNhdGlvbiAnICsgJ3dpbGwgbm90IHJlY2VpdmUgc29tZSBldmVudHMuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGVtcHR5RnVuY3Rpb25cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24gKCkge31cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRMaXN0ZW5lcjsiXX0=\n},{\"./emptyFunction\":10,\"_process\":30}],4:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ExecutionEnvironment\n */\n\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n},{}],5:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule camelize\n * @typechecks\n */\n\n\"use strict\";\n\nvar _hyphenPattern = /-(.)/g;\n\n/**\n * Camelcases a hyphenated string, for example:\n *\n *   > camelize('background-color')\n *   < \"backgroundColor\"\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelize(string) {\n  return string.replace(_hyphenPattern, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n\nmodule.exports = camelize;\n},{}],6:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule camelizeStyleName\n * @typechecks\n */\n\n'use strict';\n\nvar camelize = require('./camelize');\n\nvar msPattern = /^-ms-/;\n\n/**\n * Camelcases a hyphenated CSS property name, for example:\n *\n *   > camelizeStyleName('background-color')\n *   < \"backgroundColor\"\n *   > camelizeStyleName('-moz-transition')\n *   < \"MozTransition\"\n *   > camelizeStyleName('-ms-transition')\n *   < \"msTransition\"\n *\n * As Andi Smith suggests\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n * is converted to lowercase `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelizeStyleName(string) {\n  return camelize(string.replace(msPattern, 'ms-'));\n}\n\nmodule.exports = camelizeStyleName;\n},{\"./camelize\":5}],7:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule containsNode\n * @typechecks\n */\n\n'use strict';\n\nvar isTextNode = require('./isTextNode');\n\n/*eslint-disable no-bitwise */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n *\n * @param {?DOMNode} outerNode Outer DOM node.\n * @param {?DOMNode} innerNode Inner DOM node.\n * @return {boolean} True if `outerNode` contains or is `innerNode`.\n */\nfunction containsNode(_x, _x2) {\n  var _again = true;\n\n  _function: while (_again) {\n    var outerNode = _x,\n        innerNode = _x2;\n    _again = false;\n\n    if (!outerNode || !innerNode) {\n      return false;\n    } else if (outerNode === innerNode) {\n      return true;\n    } else if (isTextNode(outerNode)) {\n      return false;\n    } else if (isTextNode(innerNode)) {\n      _x = outerNode;\n      _x2 = innerNode.parentNode;\n      _again = true;\n      continue _function;\n    } else if (outerNode.contains) {\n      return outerNode.contains(innerNode);\n    } else if (outerNode.compareDocumentPosition) {\n      return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n    } else {\n      return false;\n    }\n  }\n}\n\nmodule.exports = containsNode;\n},{\"./isTextNode\":20}],8:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createArrayFromMixed\n * @typechecks\n */\n\n'use strict';\n\nvar toArray = require('./toArray');\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return(\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;\n},{\"./toArray\":28}],9:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCcuL2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoJy4vZ2V0TWFya3VwV3JhcCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gcmVuZGVyIGFsbCBtYXJrdXAuXG4gKi9cbnZhciBkdW1teU5vZGUgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogUGF0dGVybiB1c2VkIGJ5IGBnZXROb2RlTmFtZWAuXG4gKi9cbnZhciBub2RlTmFtZVBhdHRlcm4gPSAvXlxccyo8KFxcdyspLztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYG5vZGVOYW1lYCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICogQHJldHVybiB7P3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICB2YXIgbm9kZU5hbWVNYXRjaCA9IG1hcmt1cC5tYXRjaChub2RlTmFtZVBhdHRlcm4pO1xuICByZXR1cm4gbm9kZU5hbWVNYXRjaCAmJiBub2RlTmFtZU1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBub2RlcyByZW5kZXJlZCBmcm9tIHRoZSBzdXBwbGllZCBtYXJrdXAuIFRoZVxuICogb3B0aW9uYWxseSBzdXBwbGllZCBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBmb3IgZWFjaFxuICogPHNjcmlwdD4gZWxlbWVudCB0aGF0IGlzIHJlbmRlcmVkLiBJZiBubyBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiBpcyBzdXBwbGllZCxcbiAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgYW55IDxzY3JpcHQ+IGVsZW1lbnRzIGFyZSByZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIEEgc3RyaW5nIG9mIHZhbGlkIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGhhbmRsZVNjcmlwdCBJbnZva2VkIG9uY2UgZm9yIGVhY2ggcmVuZGVyZWQgPHNjcmlwdD4uXG4gKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50fERPTVRleHROb2RlPn0gQW4gYXJyYXkgb2YgcmVuZGVyZWQgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGhhbmRsZVNjcmlwdCkge1xuICB2YXIgbm9kZSA9IGR1bW15Tm9kZTtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCBkdW1teSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIHZhciBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cCk7XG5cbiAgdmFyIHdyYXAgPSBub2RlTmFtZSAmJiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKTtcbiAgaWYgKHdyYXApIHtcbiAgICBub2RlLmlubmVySFRNTCA9IHdyYXBbMV0gKyBtYXJrdXAgKyB3cmFwWzJdO1xuXG4gICAgdmFyIHdyYXBEZXB0aCA9IHdyYXBbMF07XG4gICAgd2hpbGUgKHdyYXBEZXB0aC0tKSB7XG4gICAgICBub2RlID0gbm9kZS5sYXN0Q2hpbGQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gbWFya3VwO1xuICB9XG5cbiAgdmFyIHNjcmlwdHMgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgaWYgKHNjcmlwdHMubGVuZ3RoKSB7XG4gICAgIWhhbmRsZVNjcmlwdCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAoLi4uKTogVW5leHBlY3RlZCA8c2NyaXB0PiBlbGVtZW50IHJlbmRlcmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBjcmVhdGVBcnJheUZyb21NaXhlZChzY3JpcHRzKS5mb3JFYWNoKGhhbmRsZVNjcmlwdCk7XG4gIH1cblxuICB2YXIgbm9kZXMgPSBjcmVhdGVBcnJheUZyb21NaXhlZChub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwOyJdfQ==\n},{\"./ExecutionEnvironment\":4,\"./createArrayFromMixed\":8,\"./getMarkupWrap\":14,\"./invariant\":18,\"_process\":30}],10:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyFunction\n */\n\n\"use strict\";\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nfunction emptyFunction() {}\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;\n},{}],11:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyObject\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVtcHR5T2JqZWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7Il19\n},{\"_process\":30}],12:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule focusNode\n */\n\n'use strict';\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch (e) {}\n}\n\nmodule.exports = focusNode;\n},{}],13:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getActiveElement\n * @typechecks\n */\n\n/* eslint-disable fb-www/typeof-undefined */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n */\n'use strict';\n\nfunction getActiveElement() /*?DOMElement*/{\n  if (typeof document === 'undefined') {\n    return null;\n  }\n  try {\n    return document.activeElement || document.body;\n  } catch (e) {\n    return document.body;\n  }\n}\n\nmodule.exports = getActiveElement;\n},{}],14:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getMarkupWrap\n */\n\n/*eslint-disable fb-www/unsafe-html */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to detect which wraps are necessary.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\n * so we wrap them, render the wrapped nodes, then extract the desired node.\n *\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\n */\n\nvar shouldWrap = {};\n\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\nvar tableWrap = [1, '<table>', '</table>'];\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];\n\nvar markupWrap = {\n  '*': [1, '?<div>', '</div>'],\n\n  'area': [1, '<map>', '</map>'],\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  'legend': [1, '<fieldset>', '</fieldset>'],\n  'param': [1, '<object>', '</object>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n\n  'optgroup': selectWrap,\n  'option': selectWrap,\n\n  'caption': tableWrap,\n  'colgroup': tableWrap,\n  'tbody': tableWrap,\n  'tfoot': tableWrap,\n  'thead': tableWrap,\n\n  'td': trWrap,\n  'th': trWrap\n};\n\n// Initialize the SVG elements since we know they'll always need to be wrapped\n// consistently. If they are created inside a <div> they will be initialized in\n// the wrong namespace (and will not display).\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\nsvgElements.forEach(function (nodeName) {\n  markupWrap[nodeName] = svgWrap;\n  shouldWrap[nodeName] = true;\n});\n\n/**\n * Gets the markup wrap configuration for the supplied `nodeName`.\n *\n * NOTE: This lazily detects which wraps are necessary for the current browser.\n *\n * @param {string} nodeName Lowercase `nodeName`.\n * @return {?array} Markup wrap configuration, if applicable.\n */\nfunction getMarkupWrap(nodeName) {\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName = '*';\n  }\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName === '*') {\n      dummyNode.innerHTML = '<link />';\n    } else {\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\n    }\n    shouldWrap[nodeName] = !dummyNode.firstChild;\n  }\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\nmodule.exports = getMarkupWrap;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRNYXJrdXBXcmFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0TWFya3VwV3JhcFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgZmItd3d3L3Vuc2FmZS1odG1sICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBEdW1teSBjb250YWluZXIgdXNlZCB0byBkZXRlY3Qgd2hpY2ggd3JhcHMgYXJlIG5lY2Vzc2FyeS5cbiAqL1xudmFyIGR1bW15Tm9kZSA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIDogbnVsbDtcblxuLyoqXG4gKiBTb21lIGJyb3dzZXJzIGNhbm5vdCB1c2UgYGlubmVySFRNTGAgdG8gcmVuZGVyIGNlcnRhaW4gZWxlbWVudHMgc3RhbmRhbG9uZSxcbiAqIHNvIHdlIHdyYXAgdGhlbSwgcmVuZGVyIHRoZSB3cmFwcGVkIG5vZGVzLCB0aGVuIGV4dHJhY3QgdGhlIGRlc2lyZWQgbm9kZS5cbiAqXG4gKiBJbiBJRTgsIGNlcnRhaW4gZWxlbWVudHMgY2Fubm90IHJlbmRlciBhbG9uZSwgc28gd3JhcCBhbGwgZWxlbWVudHMgKCcqJykuXG4gKi9cblxudmFyIHNob3VsZFdyYXAgPSB7fTtcblxudmFyIHNlbGVjdFdyYXAgPSBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJ0cnVlXCI+JywgJzwvc2VsZWN0PiddO1xudmFyIHRhYmxlV3JhcCA9IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddO1xudmFyIHRyV3JhcCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddO1xuXG52YXIgc3ZnV3JhcCA9IFsxLCAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+JywgJzwvc3ZnPiddO1xuXG52YXIgbWFya3VwV3JhcCA9IHtcbiAgJyonOiBbMSwgJz88ZGl2PicsICc8L2Rpdj4nXSxcblxuICAnYXJlYSc6IFsxLCAnPG1hcD4nLCAnPC9tYXA+J10sXG4gICdjb2wnOiBbMiwgJzx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+JywgJzwvY29sZ3JvdXA+PC90YWJsZT4nXSxcbiAgJ2xlZ2VuZCc6IFsxLCAnPGZpZWxkc2V0PicsICc8L2ZpZWxkc2V0PiddLFxuICAncGFyYW0nOiBbMSwgJzxvYmplY3Q+JywgJzwvb2JqZWN0PiddLFxuICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcblxuICAnb3B0Z3JvdXAnOiBzZWxlY3RXcmFwLFxuICAnb3B0aW9uJzogc2VsZWN0V3JhcCxcblxuICAnY2FwdGlvbic6IHRhYmxlV3JhcCxcbiAgJ2NvbGdyb3VwJzogdGFibGVXcmFwLFxuICAndGJvZHknOiB0YWJsZVdyYXAsXG4gICd0Zm9vdCc6IHRhYmxlV3JhcCxcbiAgJ3RoZWFkJzogdGFibGVXcmFwLFxuXG4gICd0ZCc6IHRyV3JhcCxcbiAgJ3RoJzogdHJXcmFwXG59O1xuXG4vLyBJbml0aWFsaXplIHRoZSBTVkcgZWxlbWVudHMgc2luY2Ugd2Uga25vdyB0aGV5J2xsIGFsd2F5cyBuZWVkIHRvIGJlIHdyYXBwZWRcbi8vIGNvbnNpc3RlbnRseS4gSWYgdGhleSBhcmUgY3JlYXRlZCBpbnNpZGUgYSA8ZGl2PiB0aGV5IHdpbGwgYmUgaW5pdGlhbGl6ZWQgaW5cbi8vIHRoZSB3cm9uZyBuYW1lc3BhY2UgKGFuZCB3aWxsIG5vdCBkaXNwbGF5KS5cbnZhciBzdmdFbGVtZW50cyA9IFsnY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAndGV4dCcsICd0c3BhbiddO1xuc3ZnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobm9kZU5hbWUpIHtcbiAgbWFya3VwV3JhcFtub2RlTmFtZV0gPSBzdmdXcmFwO1xuICBzaG91bGRXcmFwW25vZGVOYW1lXSA9IHRydWU7XG59KTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXJrdXAgd3JhcCBjb25maWd1cmF0aW9uIGZvciB0aGUgc3VwcGxpZWQgYG5vZGVOYW1lYC5cbiAqXG4gKiBOT1RFOiBUaGlzIGxhemlseSBkZXRlY3RzIHdoaWNoIHdyYXBzIGFyZSBuZWNlc3NhcnkgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5vZGVOYW1lIExvd2VyY2FzZSBgbm9kZU5hbWVgLlxuICogQHJldHVybiB7P2FycmF5fSBNYXJrdXAgd3JhcCBjb25maWd1cmF0aW9uLCBpZiBhcHBsaWNhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSB7XG4gICEhIWR1bW15Tm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNYXJrdXAgd3JhcHBpbmcgbm9kZSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIGlmICghbWFya3VwV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBub2RlTmFtZSA9ICcqJztcbiAgfVxuICBpZiAoIXNob3VsZFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgaWYgKG5vZGVOYW1lID09PSAnKicpIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPGxpbmsgLz4nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdW1teU5vZGUuaW5uZXJIVE1MID0gJzwnICsgbm9kZU5hbWUgKyAnPjwvJyArIG5vZGVOYW1lICsgJz4nO1xuICAgIH1cbiAgICBzaG91bGRXcmFwW25vZGVOYW1lXSA9ICFkdW1teU5vZGUuZmlyc3RDaGlsZDtcbiAgfVxuICByZXR1cm4gc2hvdWxkV3JhcFtub2RlTmFtZV0gPyBtYXJrdXBXcmFwW25vZGVOYW1lXSA6IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFya3VwV3JhcDsiXX0=\n},{\"./ExecutionEnvironment\":4,\"./invariant\":18,\"_process\":30}],15:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getUnboundedScrollPosition\n * @typechecks\n */\n\n'use strict';\n\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are unbounded, unlike `getScrollPosition`. This means they\n * may be negative or exceed the element boundaries (which is possible using\n * inertial scrolling).\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\nfunction getUnboundedScrollPosition(scrollable) {\n  if (scrollable === window) {\n    return {\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n      y: window.pageYOffset || document.documentElement.scrollTop\n    };\n  }\n  return {\n    x: scrollable.scrollLeft,\n    y: scrollable.scrollTop\n  };\n}\n\nmodule.exports = getUnboundedScrollPosition;\n},{}],16:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule hyphenate\n * @typechecks\n */\n\n'use strict';\n\nvar _uppercasePattern = /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   > hyphenate('backgroundColor')\n *   < \"background-color\"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();\n}\n\nmodule.exports = hyphenate;\n},{}],17:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule hyphenateStyleName\n * @typechecks\n */\n\n'use strict';\n\nvar hyphenate = require('./hyphenate');\n\nvar msPattern = /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}\n\nmodule.exports = hyphenateStyleName;\n},{\"./hyphenate\":16}],18:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnZhcmlhbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiXX0=\n},{\"_process\":30}],19:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isNode\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\n'use strict';\n\nfunction isNode(object) {\n  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nmodule.exports = isNode;\n},{}],20:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextNode\n * @typechecks\n */\n\n'use strict';\n\nvar isNode = require('./isNode');\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;\n},{\"./isNode\":19}],21:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyMirror\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nvar keyMirror = function (obj) {\n  var ret = {};\n  var key;\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] = key;\n  }\n  return ret;\n};\n\nmodule.exports = keyMirror;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9rZXlNaXJyb3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleU1pcnJvclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYW4gZW51bWVyYXRpb24gd2l0aCBrZXlzIGVxdWFsIHRvIHRoZWlyIHZhbHVlLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAgdmFyIENPTE9SUyA9IGtleU1pcnJvcih7Ymx1ZTogbnVsbCwgcmVkOiBudWxsfSk7XG4gKiAgIHZhciBteUNvbG9yID0gQ09MT1JTLmJsdWU7XG4gKiAgIHZhciBpc0NvbG9yVmFsaWQgPSAhIUNPTE9SU1tteUNvbG9yXTtcbiAqXG4gKiBUaGUgbGFzdCBsaW5lIGNvdWxkIG5vdCBiZSBwZXJmb3JtZWQgaWYgdGhlIHZhbHVlcyBvZiB0aGUgZ2VuZXJhdGVkIGVudW0gd2VyZVxuICogbm90IGVxdWFsIHRvIHRoZWlyIGtleXMuXG4gKlxuICogICBJbnB1dDogIHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfVxuICogICBPdXRwdXQ6IHtrZXkxOiBrZXkxLCBrZXkyOiBrZXkyfVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xudmFyIGtleU1pcnJvciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJldCA9IHt9O1xuICB2YXIga2V5O1xuICAhKG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheShvYmopKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdrZXlNaXJyb3IoLi4uKTogQXJndW1lbnQgbXVzdCBiZSBhbiBvYmplY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0W2tleV0gPSBrZXk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5TWlycm9yOyJdfQ==\n},{\"./invariant\":18,\"_process\":30}],22:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyOf\n */\n\n/**\n * Allows extraction of a minified key. Let's the build system minify keys\n * without losing the ability to dynamically use key strings as values\n * themselves. Pass in an object with a single key/val pair and it will return\n * you the string key of that single record. Suppose you want to grab the\n * value for a key 'className' inside of an object. Key/val minification may\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then\n * reuse those resolutions.\n */\n\"use strict\";\n\nvar keyOf = function (oneKeyObj) {\n  var key;\n  for (key in oneKeyObj) {\n    if (!oneKeyObj.hasOwnProperty(key)) {\n      continue;\n    }\n    return key;\n  }\n  return null;\n};\n\nmodule.exports = keyOf;\n},{}],23:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule mapObject\n */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Executes the provided `callback` once for each enumerable own property in the\n * object and constructs a new object from the results. The `callback` is\n * invoked with three arguments:\n *\n *  - the property value\n *  - the property name\n *  - the object being traversed\n *\n * Properties that are added after the call to `mapObject` will not be visited\n * by `callback`. If the values of existing properties are changed, the value\n * passed to `callback` will be the value at the time `mapObject` visits them.\n * Properties that are deleted before being visited are not visited.\n *\n * @grep function objectMap()\n * @grep function objMap()\n *\n * @param {?object} object\n * @param {function} callback\n * @param {*} context\n * @return {?object}\n */\nfunction mapObject(object, callback, context) {\n  if (!object) {\n    return null;\n  }\n  var result = {};\n  for (var name in object) {\n    if (hasOwnProperty.call(object, name)) {\n      result[name] = callback.call(context, object[name], name, object);\n    }\n  }\n  return result;\n}\n\nmodule.exports = mapObject;\n},{}],24:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule memoizeStringOnly\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Memoizes the return value of a function that accepts one string argument.\n *\n * @param {function} callback\n * @return {function}\n */\nfunction memoizeStringOnly(callback) {\n  var cache = {};\n  return function (string) {\n    if (!cache.hasOwnProperty(string)) {\n      cache[string] = callback.call(this, string);\n    }\n    return cache[string];\n  };\n}\n\nmodule.exports = memoizeStringOnly;\n},{}],25:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performance\n * @typechecks\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar performance;\n\nif (ExecutionEnvironment.canUseDOM) {\n  performance = window.performance || window.msPerformance || window.webkitPerformance;\n}\n\nmodule.exports = performance || {};\n},{\"./ExecutionEnvironment\":4}],26:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performanceNow\n * @typechecks\n */\n\n'use strict';\n\nvar performance = require('./performance');\n\nvar performanceNow;\n\n/**\n * Detect if we can use `window.performance.now()` and gracefully fallback to\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now\n * because of Facebook's testing infrastructure.\n */\nif (performance.now) {\n  performanceNow = function () {\n    return performance.now();\n  };\n} else {\n  performanceNow = function () {\n    return Date.now();\n  };\n}\n\nmodule.exports = performanceNow;\n},{\"./performance\":25}],27:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n * @typechecks\n * \n */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i < keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;\n},{}],28:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule toArray\n * @typechecks\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in\n  // old versions of Safari).\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;\n\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;\n\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\nmodule.exports = toArray;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi90b0FycmF5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0b0FycmF5XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQ29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gYXJyYXlzLlxuICpcbiAqIFRoaXMgQVBJIGFzc3VtZXMgdGhlIGNhbGxlciBrbm93cyB0aGUgY29udGVudHMgb2YgdGhlIGRhdGEgdHlwZS4gRm9yIGxlc3NcbiAqIHdlbGwgZGVmaW5lZCBpbnB1dHMgdXNlIGNyZWF0ZUFycmF5RnJvbU1peGVkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufGZpbGVsaXN0fSBvYmpcbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDtcblxuICAvLyBTb21lIGJyb3dzZSBidWlsdGluIG9iamVjdHMgY2FuIHJlcG9ydCB0eXBlb2YgJ2Z1bmN0aW9uJyAoZS5nLiBOb2RlTGlzdCBpblxuICAvLyBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpKS5cbiAgISghQXJyYXkuaXNBcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogQXJyYXktbGlrZSBvYmplY3QgZXhwZWN0ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgISh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICEobGVuZ3RoID09PSAwIHx8IGxlbmd0aCAtIDEgaW4gb2JqKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAvLyBPbGQgSUUgZG9lc24ndCBnaXZlIGNvbGxlY3Rpb25zIGFjY2VzcyB0byBoYXNPd25Qcm9wZXJ0eS4gQXNzdW1lIGlucHV0c1xuICAvLyB3aXRob3V0IG1ldGhvZCB3aWxsIHRocm93IGR1cmluZyB0aGUgc2xpY2UgY2FsbCBhbmQgc2tpcCBzdHJhaWdodCB0byB0aGVcbiAgLy8gZmFsbGJhY2suXG4gIGlmIChvYmouaGFzT3duUHJvcGVydHkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSUUgPCA5IGRvZXMgbm90IHN1cHBvcnQgQXJyYXkjc2xpY2Ugb24gY29sbGVjdGlvbnMgb2JqZWN0c1xuICAgIH1cbiAgfVxuXG4gIC8vIEZhbGwgYmFjayB0byBjb3B5aW5nIGtleSBieSBrZXkuIFRoaXMgYXNzdW1lcyBhbGwga2V5cyBoYXZlIGEgdmFsdWUsXG4gIC8vIHNvIHdpbGwgbm90IHByZXNlcnZlIHNwYXJzZWx5IHBvcHVsYXRlZCBpbnB1dHMuXG4gIHZhciByZXQgPSBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuZ3RoOyBpaSsrKSB7XG4gICAgcmV0W2lpXSA9IG9ialtpaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5OyJdfQ==\n},{\"./invariant\":18,\"_process\":30}],29:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function (condition, format) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB3YXJuaW5nXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoICh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nOyJdfQ==\n},{\"./emptyFunction\":10,\"_process\":30}],30:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],31:[function(require,module,exports){\nmodule.exports = require('react/lib/ReactCSSTransitionGroup');\n},{\"react/lib/ReactCSSTransitionGroup\":59}],32:[function(require,module,exports){\n'use strict';\n\nmodule.exports = require('react/lib/ReactDOM');\n\n},{\"react/lib/ReactDOM\":69}],33:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AutoFocusUtils\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactMount = require('./ReactMount');\n\nvar findDOMNode = require('./findDOMNode');\nvar focusNode = require('fbjs/lib/focusNode');\n\nvar Mixin = {\n  componentDidMount: function () {\n    if (this.props.autoFocus) {\n      focusNode(findDOMNode(this));\n    }\n  }\n};\n\nvar AutoFocusUtils = {\n  Mixin: Mixin,\n\n  focusDOMComponent: function () {\n    focusNode(ReactMount.getNode(this._rootNodeID));\n  }\n};\n\nmodule.exports = AutoFocusUtils;\n},{\"./ReactMount\":99,\"./findDOMNode\":145,\"fbjs/lib/focusNode\":12}],34:[function(require,module,exports){\n/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBeforeInput: null }),\n      captured: keyOf({ onBeforeInputCapture: null })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionEnd: null }),\n      captured: keyOf({ onCompositionEndCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionStart: null }),\n      captured: keyOf({ onCompositionStartCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionUpdate: null }),\n      captured: keyOf({ onCompositionUpdateCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;\n},{\"./EventConstants\":46,\"./EventPropagators\":50,\"./FallbackCompositionState\":51,\"./SyntheticCompositionEvent\":127,\"./SyntheticInputEvent\":131,\"fbjs/lib/ExecutionEnvironment\":4,\"fbjs/lib/keyOf\":22}],35:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSProperty\n */\n\n'use strict';\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  stopOpacity: true,\n  strokeDashoffset: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function (prop) {\n  prefixes.forEach(function (prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Most style properties can be unset by doing .style[prop] = '' but IE8\n * doesn't like doing that with shorthand properties so for the properties that\n * IE8 breaks on, which are listed here, we instead unset each of the\n * individual properties. See http://bugs.jquery.com/ticket/12385.\n * The 4-value 'clock' properties like margin, padding, border-width seem to\n * behave without any problems. Curiously, list-style works too without any\n * special prodding.\n */\nvar shorthandPropertyExpansions = {\n  background: {\n    backgroundAttachment: true,\n    backgroundColor: true,\n    backgroundImage: true,\n    backgroundPositionX: true,\n    backgroundPositionY: true,\n    backgroundRepeat: true\n  },\n  backgroundPosition: {\n    backgroundPositionX: true,\n    backgroundPositionY: true\n  },\n  border: {\n    borderWidth: true,\n    borderStyle: true,\n    borderColor: true\n  },\n  borderBottom: {\n    borderBottomWidth: true,\n    borderBottomStyle: true,\n    borderBottomColor: true\n  },\n  borderLeft: {\n    borderLeftWidth: true,\n    borderLeftStyle: true,\n    borderLeftColor: true\n  },\n  borderRight: {\n    borderRightWidth: true,\n    borderRightStyle: true,\n    borderRightColor: true\n  },\n  borderTop: {\n    borderTopWidth: true,\n    borderTopStyle: true,\n    borderTopColor: true\n  },\n  font: {\n    fontStyle: true,\n    fontVariant: true,\n    fontWeight: true,\n    fontSize: true,\n    lineHeight: true,\n    fontFamily: true\n  },\n  outline: {\n    outlineWidth: true,\n    outlineStyle: true,\n    outlineColor: true\n  }\n};\n\nvar CSSProperty = {\n  isUnitlessNumber: isUnitlessNumber,\n  shorthandPropertyExpansions: shorthandPropertyExpansions\n};\n\nmodule.exports = CSSProperty;\n},{}],36:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSPropertyOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactPerf = require('./ReactPerf');\n\nvar camelizeStyleName = require('fbjs/lib/camelizeStyleName');\nvar dangerousStyleValue = require('./dangerousStyleValue');\nvar hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');\nvar memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');\nvar warning = require('fbjs/lib/warning');\n\nvar processStyleName = memoizeStringOnly(function (styleName) {\n  return hyphenateStyleName(styleName);\n});\n\nvar hasShorthandPropertyBug = false;\nvar styleFloatAccessor = 'cssFloat';\nif (ExecutionEnvironment.canUseDOM) {\n  var tempStyle = document.createElement('div').style;\n  try {\n    // IE8 throws \"Invalid argument.\" if resetting shorthand style properties.\n    tempStyle.font = '';\n  } catch (e) {\n    hasShorthandPropertyBug = true;\n  }\n  // IE8 only supports accessing cssFloat (standard) as styleFloat\n  if (document.documentElement.style.cssFloat === undefined) {\n    styleFloatAccessor = 'styleFloat';\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n\n  // style values shouldn't contain a semicolon\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n\n  var warnHyphenatedStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;\n  };\n\n  var warnBadVendoredStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;\n  };\n\n  var warnStyleValueWithSemicolon = function (name, value) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\\'t contain a semicolon. ' + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;\n  };\n\n  /**\n   * @param {string} name\n   * @param {*} value\n   */\n  var warnValidStyle = function (name, value) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n  };\n}\n\n/**\n * Operations for dealing with CSS properties.\n */\nvar CSSPropertyOperations = {\n\n  /**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   * The result should be HTML-escaped before insertion into the DOM.\n   *\n   * @param {object} styles\n   * @return {?string}\n   */\n  createMarkupForStyles: function (styles) {\n    var serialized = '';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue = styles[styleName];\n      if (process.env.NODE_ENV !== 'production') {\n        warnValidStyle(styleName, styleValue);\n      }\n      if (styleValue != null) {\n        serialized += processStyleName(styleName) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue) + ';';\n      }\n    }\n    return serialized || null;\n  },\n\n  /**\n   * Sets the value for multiple styles on a node.  If a value is specified as\n   * '' (empty string), the corresponding style property will be unset.\n   *\n   * @param {DOMElement} node\n   * @param {object} styles\n   */\n  setValueForStyles: function (node, styles) {\n    var style = node.style;\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        warnValidStyle(styleName, styles[styleName]);\n      }\n      var styleValue = dangerousStyleValue(styleName, styles[styleName]);\n      if (styleName === 'float') {\n        styleName = styleFloatAccessor;\n      }\n      if (styleValue) {\n        style[styleName] = styleValue;\n      } else {\n        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];\n        if (expansion) {\n          // Shorthand property that IE8 won't like unsetting, so unset each\n          // component to placate it\n          for (var individualStyleName in expansion) {\n            style[individualStyleName] = '';\n          }\n        } else {\n          style[styleName] = '';\n        }\n      }\n    }\n  }\n\n};\n\nReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {\n  setValueForStyles: 'setValueForStyles'\n});\n\nmodule.exports = CSSPropertyOperations;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./CSSProperty\":35,\"./ReactPerf\":105,\"./dangerousStyleValue\":142,\"_process\":30,\"fbjs/lib/ExecutionEnvironment\":4,\"fbjs/lib/camelizeStyleName\":6,\"fbjs/lib/hyphenateStyleName\":17,\"fbjs/lib/memoizeStringOnly\":24,\"fbjs/lib/warning\":29}],37:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CallbackQueue\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * A specialized pseudo-event module to help keep track of components waiting to\n * be notified when their DOM representations are available for use.\n *\n * This implements `PooledClass`, so you should never need to instantiate this.\n * Instead, use `CallbackQueue.getPooled()`.\n *\n * @class ReactMountReady\n * @implements PooledClass\n * @internal\n */\nfunction CallbackQueue() {\n  this._callbacks = null;\n  this._contexts = null;\n}\n\nassign(CallbackQueue.prototype, {\n\n  /**\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.\n   *\n   * @param {function} callback Invoked when `notifyAll` is invoked.\n   * @param {?object} context Context to call `callback` with.\n   * @internal\n   */\n  enqueue: function (callback, context) {\n    this._callbacks = this._callbacks || [];\n    this._contexts = this._contexts || [];\n    this._callbacks.push(callback);\n    this._contexts.push(context);\n  },\n\n  /**\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after\n   * the DOM representation of a component has been created or updated.\n   *\n   * @internal\n   */\n  notifyAll: function () {\n    var callbacks = this._callbacks;\n    var contexts = this._contexts;\n    if (callbacks) {\n      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;\n      this._callbacks = null;\n      this._contexts = null;\n      for (var i = 0; i < callbacks.length; i++) {\n        callbacks[i].call(contexts[i]);\n      }\n      callbacks.length = 0;\n      contexts.length = 0;\n    }\n  },\n\n  /**\n   * Resets the internal queue.\n   *\n   * @internal\n   */\n  reset: function () {\n    this._callbacks = null;\n    this._contexts = null;\n  },\n\n  /**\n   * `PooledClass` looks for this.\n   */\n  destructor: function () {\n    this.reset();\n  }\n\n});\n\nPooledClass.addPoolingTo(CallbackQueue);\n\nmodule.exports = CallbackQueue;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ2FsbGJhY2tRdWV1ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ2FsbGJhY2tRdWV1ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCBwc2V1ZG8tZXZlbnQgbW9kdWxlIHRvIGhlbHAga2VlcCB0cmFjayBvZiBjb21wb25lbnRzIHdhaXRpbmcgdG9cbiAqIGJlIG5vdGlmaWVkIHdoZW4gdGhlaXIgRE9NIHJlcHJlc2VudGF0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciB1c2UuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIGBQb29sZWRDbGFzc2AsIHNvIHlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogSW5zdGVhZCwgdXNlIGBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpYC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNb3VudFJlYWR5XG4gKiBAaW1wbGVtZW50cyBQb29sZWRDbGFzc1xuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIENhbGxiYWNrUXVldWUoKSB7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbn1cblxuYXNzaWduKENhbGxiYWNrUXVldWUucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgQ29udGV4dCB0byBjYWxsIGBjYWxsYmFja2Agd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwgW107XG4gICAgdGhpcy5fY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cyB8fCBbXTtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlcyBhbGwgZW5xdWV1ZWQgY2FsbGJhY2tzIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGlzIGludm9rZWQgYWZ0ZXJcbiAgICogdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiBhIGNvbXBvbmVudCBoYXMgYmVlbiBjcmVhdGVkIG9yIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbm90aWZ5QWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgICB2YXIgY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cztcbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAhKGNhbGxiYWNrcy5sZW5ndGggPT09IGNvbnRleHRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKGNvbnRleHRzW2ldKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYWxsYmFja1F1ZXVlOyJdfQ==\n},{\"./Object.assign\":54,\"./PooledClass\":55,\"_process\":30,\"fbjs/lib/invariant\":18}],38:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onChange: null }),\n      captured: keyOf({ onChangeCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;\n},{\"./EventConstants\":46,\"./EventPluginHub\":47,\"./EventPropagators\":50,\"./ReactUpdates\":120,\"./SyntheticEvent\":129,\"./getEventTarget\":151,\"./isEventSupported\":156,\"./isTextInputElement\":157,\"fbjs/lib/ExecutionEnvironment\":4,\"fbjs/lib/keyOf\":22}],39:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ClientReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\nvar nextReactRootIndex = 0;\n\nvar ClientReactRootIndex = {\n  createReactRootIndex: function () {\n    return nextReactRootIndex++;\n  }\n};\n\nmodule.exports = ClientReactRootIndex;\n},{}],40:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar Danger = require('./Danger');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\nvar ReactPerf = require('./ReactPerf');\n\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n\n  // fix render order error in safari\n  // IE8 will throw error when index out of list size.\n  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);\n\n  parentNode.insertBefore(childNode, beforeChild);\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup;\n    // markupList is either a list of markup or just a list of elements\n    if (markupList.length && typeof markupList[0] === 'string') {\n      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n    } else {\n      renderedMarkup = markupList;\n    }\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.SET_MARKUP:\n          setInnerHTML(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {\n  updateTextContent: 'updateTextContent'\n});\n\nmodule.exports = DOMChildrenOperations;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBET01DaGlsZHJlbk9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRGFuZ2VyID0gcmVxdWlyZSgnLi9EYW5nZXInKTtcbnZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xuXG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZSgnLi9zZXRJbm5lckhUTUwnKTtcbnZhciBzZXRUZXh0Q29udGVudCA9IHJlcXVpcmUoJy4vc2V0VGV4dENvbnRlbnQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBJbnNlcnRzIGBjaGlsZE5vZGVgIGFzIGEgY2hpbGQgb2YgYHBhcmVudE5vZGVgIGF0IHRoZSBgaW5kZXhgLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50Tm9kZSBQYXJlbnQgbm9kZSBpbiB3aGljaCB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNoaWxkTm9kZSBDaGlsZCBub2RlIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGNoaWxkLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCBpbmRleCkge1xuICAvLyBCeSBleHBsb2l0aW5nIGFycmF5cyByZXR1cm5pbmcgYHVuZGVmaW5lZGAgZm9yIGFuIHVuZGVmaW5lZCBpbmRleCwgd2UgY2FuXG4gIC8vIHJlbHkgZXhjbHVzaXZlbHkgb24gYGluc2VydEJlZm9yZShub2RlLCBudWxsKWAgaW5zdGVhZCBvZiBhbHNvIHVzaW5nXG4gIC8vIGBhcHBlbmRDaGlsZChub2RlKWAuIEhvd2V2ZXIsIHVzaW5nIGB1bmRlZmluZWRgIGlzIG5vdCBhbGxvd2VkIGJ5IGFsbFxuICAvLyBicm93c2VycyBzbyB3ZSBtdXN0IHJlcGxhY2UgaXQgd2l0aCBgbnVsbGAuXG5cbiAgLy8gZml4IHJlbmRlciBvcmRlciBlcnJvciBpbiBzYWZhcmlcbiAgLy8gSUU4IHdpbGwgdGhyb3cgZXJyb3Igd2hlbiBpbmRleCBvdXQgb2YgbGlzdCBzaXplLlxuICB2YXIgYmVmb3JlQ2hpbGQgPSBpbmRleCA+PSBwYXJlbnROb2RlLmNoaWxkTm9kZXMubGVuZ3RoID8gbnVsbCA6IHBhcmVudE5vZGUuY2hpbGROb2Rlcy5pdGVtKGluZGV4KTtcblxuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShjaGlsZE5vZGUsIGJlZm9yZUNoaWxkKTtcbn1cblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciB1cGRhdGluZyB3aXRoIERPTSBjaGlsZHJlbi5cbiAqL1xudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHtcblxuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDogRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwLFxuXG4gIHVwZGF0ZVRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy4gVGhlXG4gICAqIHVwZGF0ZSBjb25maWd1cmF0aW9ucyBhcmUgZWFjaCBleHBlY3RlZCB0byBoYXZlIGEgYHBhcmVudE5vZGVgIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PG9iamVjdD59IHVwZGF0ZXMgTGlzdCBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwTGlzdCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb2Nlc3NVcGRhdGVzOiBmdW5jdGlvbiAodXBkYXRlcywgbWFya3VwTGlzdCkge1xuICAgIHZhciB1cGRhdGU7XG4gICAgLy8gTWFwcGluZyBmcm9tIHBhcmVudCBJRHMgdG8gaW5pdGlhbCBjaGlsZCBvcmRlcmluZ3MuXG4gICAgdmFyIGluaXRpYWxDaGlsZHJlbiA9IG51bGw7XG4gICAgLy8gTGlzdCBvZiBjaGlsZHJlbiB0aGF0IHdpbGwgYmUgbW92ZWQgb3IgcmVtb3ZlZC5cbiAgICB2YXIgdXBkYXRlZENoaWxkcmVuID0gbnVsbDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdXBkYXRlID0gdXBkYXRlc1tpXTtcbiAgICAgIGlmICh1cGRhdGUudHlwZSA9PT0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyB8fCB1cGRhdGUudHlwZSA9PT0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREUpIHtcbiAgICAgICAgdmFyIHVwZGF0ZWRJbmRleCA9IHVwZGF0ZS5mcm9tSW5kZXg7XG4gICAgICAgIHZhciB1cGRhdGVkQ2hpbGQgPSB1cGRhdGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzW3VwZGF0ZWRJbmRleF07XG4gICAgICAgIHZhciBwYXJlbnRJRCA9IHVwZGF0ZS5wYXJlbnRJRDtcblxuICAgICAgICAhdXBkYXRlZENoaWxkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3Byb2Nlc3NVcGRhdGVzKCk6IFVuYWJsZSB0byBmaW5kIGNoaWxkICVzIG9mIGVsZW1lbnQuIFRoaXMgJyArICdwcm9iYWJseSBtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlICcgKyAnYnJvd3NlciksIHVzdWFsbHkgZHVlIHRvIGZvcmdldHRpbmcgYSA8dGJvZHk+IHdoZW4gdXNpbmcgdGFibGVzLCAnICsgJ25lc3RpbmcgdGFncyBsaWtlIDxmb3JtPiwgPHA+LCBvciA8YT4sIG9yIHVzaW5nIG5vbi1TVkcgZWxlbWVudHMgJyArICdpbiBhbiA8c3ZnPiBwYXJlbnQuIFRyeSBpbnNwZWN0aW5nIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgZWxlbWVudCAnICsgJ3dpdGggUmVhY3QgSUQgYCVzYC4nLCB1cGRhdGVkSW5kZXgsIHBhcmVudElEKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaW5pdGlhbENoaWxkcmVuID0gaW5pdGlhbENoaWxkcmVuIHx8IHt9O1xuICAgICAgICBpbml0aWFsQ2hpbGRyZW5bcGFyZW50SURdID0gaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSB8fCBbXTtcbiAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXVt1cGRhdGVkSW5kZXhdID0gdXBkYXRlZENoaWxkO1xuXG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbiA9IHVwZGF0ZWRDaGlsZHJlbiB8fCBbXTtcbiAgICAgICAgdXBkYXRlZENoaWxkcmVuLnB1c2godXBkYXRlZENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVuZGVyZWRNYXJrdXA7XG4gICAgLy8gbWFya3VwTGlzdCBpcyBlaXRoZXIgYSBsaXN0IG9mIG1hcmt1cCBvciBqdXN0IGEgbGlzdCBvZiBlbGVtZW50c1xuICAgIGlmIChtYXJrdXBMaXN0Lmxlbmd0aCAmJiB0eXBlb2YgbWFya3VwTGlzdFswXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlbmRlcmVkTWFya3VwID0gRGFuZ2VyLmRhbmdlcm91c2x5UmVuZGVyTWFya3VwKG1hcmt1cExpc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW5kZXJlZE1hcmt1cCA9IG1hcmt1cExpc3Q7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHVwZGF0ZWQgY2hpbGRyZW4gZmlyc3Qgc28gdGhhdCBgdG9JbmRleGAgaXMgY29uc2lzdGVudC5cbiAgICBpZiAodXBkYXRlZENoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHVwZGF0ZWRDaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgICAgICB1cGRhdGVkQ2hpbGRyZW5bal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh1cGRhdGVkQ2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdXBkYXRlcy5sZW5ndGg7IGsrKykge1xuICAgICAgdXBkYXRlID0gdXBkYXRlc1trXTtcbiAgICAgIHN3aXRjaCAodXBkYXRlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5JTlNFUlRfTUFSS1VQOlxuICAgICAgICAgIGluc2VydENoaWxkQXQodXBkYXRlLnBhcmVudE5vZGUsIHJlbmRlcmVkTWFya3VwW3VwZGF0ZS5tYXJrdXBJbmRleF0sIHVwZGF0ZS50b0luZGV4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5NT1ZFX0VYSVNUSU5HOlxuICAgICAgICAgIGluc2VydENoaWxkQXQodXBkYXRlLnBhcmVudE5vZGUsIGluaXRpYWxDaGlsZHJlblt1cGRhdGUucGFyZW50SURdW3VwZGF0ZS5mcm9tSW5kZXhdLCB1cGRhdGUudG9JbmRleCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuU0VUX01BUktVUDpcbiAgICAgICAgICBzZXRJbm5lckhUTUwodXBkYXRlLnBhcmVudE5vZGUsIHVwZGF0ZS5jb250ZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQ6XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQodXBkYXRlLnBhcmVudE5vZGUsIHVwZGF0ZS5jb250ZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5SRU1PVkVfTk9ERTpcbiAgICAgICAgICAvLyBBbHJlYWR5IHJlbW92ZWQgYnkgdGhlIGZvci1sb29wIGFib3ZlLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoRE9NQ2hpbGRyZW5PcGVyYXRpb25zLCAnRE9NQ2hpbGRyZW5PcGVyYXRpb25zJywge1xuICB1cGRhdGVUZXh0Q29udGVudDogJ3VwZGF0ZVRleHRDb250ZW50J1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NQ2hpbGRyZW5PcGVyYXRpb25zOyJdfQ==\n},{\"./Danger\":43,\"./ReactMultiChildUpdateTypes\":101,\"./ReactPerf\":105,\"./setInnerHTML\":161,\"./setTextContent\":162,\"_process\":30,\"fbjs/lib/invariant\":18}],41:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;\n\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n\n        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\n      };\n\n      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;\n\n      if (process.env.NODE_ENV !== 'production') {\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      }\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        propertyInfo.attributeName = attributeName;\n        if (process.env.NODE_ENV !== 'production') {\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\n        }\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\n        propertyInfo.propertyName = DOMPropertyNames[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      DOMProperty.properties[propName] = propertyInfo;\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Map from property \"standard name\" to an object with info about how to set\n   * the property in the DOM. Each object contains:\n   *\n   * attributeName:\n   *   Used when rendering markup or with `*Attribute()`.\n   * attributeNamespace\n   * propertyName:\n   *   Used on DOM node instances. (This includes properties that mutate due to\n   *   external factors.)\n   * mutationMethod:\n   *   If non-null, used instead of the property or `setAttribute()` after\n   *   initial render.\n   * mustUseAttribute:\n   *   Whether the property must be accessed and mutated using `*Attribute()`.\n   *   (This includes anything that fails `<propName> in <element>`.)\n   * mustUseProperty:\n   *   Whether the property must be accessed and mutated as an object property.\n   * hasSideEffects:\n   *   Whether or not setting a value causes side effects such as triggering\n   *   resources to be loaded or text selection changes. If true, we read from\n   *   the DOM before updating to ensure that the value is only set if it has\n   *   changed.\n   * hasBooleanValue:\n   *   Whether the property should be removed when set to a falsey value.\n   * hasNumericValue:\n   *   Whether the property must be numeric or parse as a numeric and should be\n   *   removed when set to a falsey value.\n   * hasPositiveNumericValue:\n   *   Whether the property must be positive numeric or parse as a positive\n   *   numeric and should be removed when set to a falsey value.\n   * hasOverloadedBooleanValue:\n   *   Whether the property can be used as a flag as well as with a value.\n   *   Removed when strictly equal to false; present without a value when\n   *   strictly equal to true; present with a value otherwise.\n   */\n  properties: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties. Available only in __DEV__.\n   * @type {Object}\n   */\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"_process\":30,\"fbjs/lib/invariant\":18}],42:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactPerf = require('./ReactPerf');\n\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');\nvar warning = require('fbjs/lib/warning');\n\n// Simplified subset\nvar VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\\w\\.\\-]*$/;\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\n\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n  illegalAttributeNameCache[attributeName] = true;\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;\n  return false;\n}\n\nfunction shouldIgnoreValue(propertyInfo, value) {\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties = {};\n\n  var warnUnknownProperty = function (name) {\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase();\n\n    // data-* attributes should be lowercase; suggest the lowercase version\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;\n\n    // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;\n  };\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations = {\n\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function (id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);\n  },\n\n  setAttributeForID: function (node, id) {\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function (name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      if (shouldIgnoreValue(propertyInfo, value)) {\n        return '';\n      }\n      var attributeName = propertyInfo.attributeName;\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n        return attributeName + '=\"\"';\n      }\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n    return null;\n  },\n\n  /**\n   * Creates markup for a custom property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {string} Markup string, or empty string if the property was invalid.\n   */\n  createMarkupForCustomAttribute: function (name, value) {\n    if (!isAttributeNameSafe(name) || value == null) {\n      return '';\n    }\n    return name + '=' + quoteAttributeValueForBrowser(value);\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function (node, name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(propertyInfo, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (propertyInfo.mustUseAttribute) {\n        var attributeName = propertyInfo.attributeName;\n        var namespace = propertyInfo.attributeNamespace;\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        if (namespace) {\n          node.setAttributeNS(namespace, attributeName, '' + value);\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n          node.setAttribute(attributeName, '');\n        } else {\n          node.setAttribute(attributeName, '' + value);\n        }\n      } else {\n        var propName = propertyInfo.propertyName;\n        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the\n        // property type before comparing; only `value` does and is string.\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {\n          // Contrary to `setAttribute`, object properties are properly\n          // `toString`ed by IE8/9.\n          node[propName] = value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      DOMPropertyOperations.setValueForAttribute(node, name, value);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n  },\n\n  setValueForAttribute: function (node, name, value) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n    if (value == null) {\n      node.removeAttribute(name);\n    } else {\n      node.setAttribute(name, '' + value);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function (node, name) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (propertyInfo.mustUseAttribute) {\n        node.removeAttribute(propertyInfo.attributeName);\n      } else {\n        var propName = propertyInfo.propertyName;\n        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {\n          node[propName] = defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n  }\n\n};\n\nReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {\n  setValueForProperty: 'setValueForProperty',\n  setValueForAttribute: 'setValueForAttribute',\n  deleteValueForProperty: 'deleteValueForProperty'\n});\n\nmodule.exports = DOMPropertyOperations;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./DOMProperty\":41,\"./ReactPerf\":105,\"./quoteAttributeValueForBrowser\":159,\"_process\":30,\"fbjs/lib/warning\":29}],43:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getMarkupWrap = require('fbjs/lib/getMarkupWrap');\nvar invariant = require('fbjs/lib/invariant');\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function (markupList) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      var resultIndex;\n      for (resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,\n          // This index will be parsed back out below.\n          '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" ');\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (var j = 0; j < renderNodes.length; ++j) {\n        var renderNode = renderNodes[j];\n        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;\n\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n        } else if (process.env.NODE_ENV !== 'production') {\n          console.error('Danger: Discarding unexpected node:', renderNode);\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;\n\n    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;\n    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;\n\n    var newChild;\n    if (typeof markup === 'string') {\n      newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    } else {\n      newChild = markup;\n    }\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports = Danger;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"_process\":30,\"fbjs/lib/ExecutionEnvironment\":4,\"fbjs/lib/createNodesFromMarkup\":9,\"fbjs/lib/emptyFunction\":10,\"fbjs/lib/getMarkupWrap\":14,\"fbjs/lib/invariant\":18}],44:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DefaultEventPluginOrder\n */\n\n'use strict';\n\nvar keyOf = require('fbjs/lib/keyOf');\n\n/**\n * Module that is injectable into `EventPluginHub`, that specifies a\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about\n * plugins, without having to package every one of them. This is better than\n * having plugins be ordered in the same order that they are injected because\n * that ordering would be influenced by the packaging order.\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.\n */\nvar DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];\n\nmodule.exports = DefaultEventPluginOrder;\n},{\"fbjs/lib/keyOf\":22}],45:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar ReactMount = require('./ReactMount');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar getFirstReactDOM = ReactMount.getFirstReactDOM;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({ onMouseEnter: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  },\n  mouseLeave: {\n    registrationName: keyOf({ onMouseLeave: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  }\n};\n\nvar extractedEvents = [null, null];\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (topLevelTarget.window === topLevelTarget) {\n      // `topLevelTarget` is probably a window object.\n      win = topLevelTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = topLevelTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    var fromID = '';\n    var toID = '';\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = topLevelTarget;\n      fromID = topLevelTargetID;\n      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);\n      if (to) {\n        toID = ReactMount.getID(to);\n      } else {\n        to = win;\n      }\n      to = to || win;\n    } else {\n      from = win;\n      to = topLevelTarget;\n      toID = topLevelTargetID;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = from;\n    leave.relatedTarget = to;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = to;\n    enter.relatedTarget = from;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);\n\n    extractedEvents[0] = leave;\n    extractedEvents[1] = enter;\n\n    return extractedEvents;\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;\n},{\"./EventConstants\":46,\"./EventPropagators\":50,\"./ReactMount\":99,\"./SyntheticMouseEvent\":133,\"fbjs/lib/keyOf\":22}],46:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventConstants\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar PropagationPhases = keyMirror({ bubbled: null, captured: null });\n\n/**\n * Types of raw signals from the browser caught at the top level.\n */\nvar topLevelTypes = keyMirror({\n  topAbort: null,\n  topBlur: null,\n  topCanPlay: null,\n  topCanPlayThrough: null,\n  topChange: null,\n  topClick: null,\n  topCompositionEnd: null,\n  topCompositionStart: null,\n  topCompositionUpdate: null,\n  topContextMenu: null,\n  topCopy: null,\n  topCut: null,\n  topDoubleClick: null,\n  topDrag: null,\n  topDragEnd: null,\n  topDragEnter: null,\n  topDragExit: null,\n  topDragLeave: null,\n  topDragOver: null,\n  topDragStart: null,\n  topDrop: null,\n  topDurationChange: null,\n  topEmptied: null,\n  topEncrypted: null,\n  topEnded: null,\n  topError: null,\n  topFocus: null,\n  topInput: null,\n  topKeyDown: null,\n  topKeyPress: null,\n  topKeyUp: null,\n  topLoad: null,\n  topLoadedData: null,\n  topLoadedMetadata: null,\n  topLoadStart: null,\n  topMouseDown: null,\n  topMouseMove: null,\n  topMouseOut: null,\n  topMouseOver: null,\n  topMouseUp: null,\n  topPaste: null,\n  topPause: null,\n  topPlay: null,\n  topPlaying: null,\n  topProgress: null,\n  topRateChange: null,\n  topReset: null,\n  topScroll: null,\n  topSeeked: null,\n  topSeeking: null,\n  topSelectionChange: null,\n  topStalled: null,\n  topSubmit: null,\n  topSuspend: null,\n  topTextInput: null,\n  topTimeUpdate: null,\n  topTouchCancel: null,\n  topTouchEnd: null,\n  topTouchMove: null,\n  topTouchStart: null,\n  topVolumeChange: null,\n  topWaiting: null,\n  topWheel: null\n});\n\nvar EventConstants = {\n  topLevelTypes: topLevelTypes,\n  PropagationPhases: PropagationPhases\n};\n\nmodule.exports = EventConstants;\n},{\"fbjs/lib/keyMirror\":21}],47:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./EventPluginRegistry\":48,\"./EventPluginUtils\":49,\"./ReactErrorUtils\":90,\"./accumulateInto\":139,\"./forEachAccumulated\":147,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],48:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"_process\":30,\"fbjs/lib/invariant\":18}],49:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginUtils\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Injected dependencies:\n */\n\n/**\n * - `Mount`: [required] Module that can convert between React dom IDs and\n *   actual node references.\n */\nvar injection = {\n  Mount: null,\n  injectMount: function (InjectedMount) {\n    injection.Mount = InjectedMount;\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;\n    }\n  }\n};\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction isEndish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;\n}\nfunction isStartish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;\n}\n\nvar validateEventDispatches;\nif (process.env.NODE_ENV !== 'production') {\n  validateEventDispatches = function (event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchIDs = event._dispatchIDs;\n\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var idsIsArr = Array.isArray(dispatchIDs);\n    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;\n\n    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;\n  };\n}\n\n/**\n * Dispatch the event to the listener.\n * @param {SyntheticEvent} event SyntheticEvent to handle\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @param {function} listener Application-level callback\n * @param {string} domID DOM id to pass to the callback.\n */\nfunction executeDispatch(event, simulated, listener, domID) {\n  var type = event.type || 'unknown-event';\n  event.currentTarget = injection.Mount.getNode(domID);\n  if (simulated) {\n    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);\n  } else {\n    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);\n  }\n  event.currentTarget = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nfunction executeDispatchesInOrder(event, simulated) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);\n    }\n  } else if (dispatchListeners) {\n    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);\n  }\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return {?string} id of the first dispatch execution who's listener returns\n * true, or null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchIDs[i])) {\n        return dispatchIDs[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchIDs)) {\n      return dispatchIDs;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchIDs = null;\n  event._dispatchListeners = null;\n  return ret;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return {*} The return value of executing the single dispatch.\n */\nfunction executeDirectDispatch(event) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  var dispatchListener = event._dispatchListeners;\n  var dispatchID = event._dispatchIDs;\n  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;\n  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n */\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n\n/**\n * General utilities that are useful in creating custom Event Plugins.\n */\nvar EventPluginUtils = {\n  isEndish: isEndish,\n  isMoveish: isMoveish,\n  isStartish: isStartish,\n\n  executeDirectDispatch: executeDirectDispatch,\n  executeDispatchesInOrder: executeDispatchesInOrder,\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,\n  hasDispatches: hasDispatches,\n\n  getNode: function (id) {\n    return injection.Mount.getNode(id);\n  },\n  getID: function (node) {\n    return injection.Mount.getID(node);\n  },\n\n  injection: injection\n};\n\nmodule.exports = EventPluginUtils;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./EventConstants\":46,\"./ReactErrorUtils\":90,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],50:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPropagators\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\n\nvar warning = require('fbjs/lib/warning');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\n\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;\n  }\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(domID, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We cannot perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.\n */\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(id, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);\n}\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports = EventPropagators;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./EventConstants\":46,\"./EventPluginHub\":47,\"./accumulateInto\":139,\"./forEachAccumulated\":147,\"_process\":30,\"fbjs/lib/warning\":29}],51:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FallbackCompositionState\n * @typechecks static-only\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\n\nvar assign = require('./Object.assign');\nvar getTextContentAccessor = require('./getTextContentAccessor');\n\n/**\n * This helper class stores information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this._root = root;\n  this._startText = this.getText();\n  this._fallbackText = null;\n}\n\nassign(FallbackCompositionState.prototype, {\n  destructor: function () {\n    this._root = null;\n    this._startText = null;\n    this._fallbackText = null;\n  },\n\n  /**\n   * Get current text of input.\n   *\n   * @return {string}\n   */\n  getText: function () {\n    if ('value' in this._root) {\n      return this._root.value;\n    }\n    return this._root[getTextContentAccessor()];\n  },\n\n  /**\n   * Determine the differing substring between the initially stored\n   * text content and the current content.\n   *\n   * @return {string}\n   */\n  getData: function () {\n    if (this._fallbackText) {\n      return this._fallbackText;\n    }\n\n    var start;\n    var startValue = this._startText;\n    var startLength = startValue.length;\n    var end;\n    var endValue = this.getText();\n    var endLength = endValue.length;\n\n    for (start = 0; start < startLength; start++) {\n      if (startValue[start] !== endValue[start]) {\n        break;\n      }\n    }\n\n    var minEnd = startLength - start;\n    for (end = 1; end <= minEnd; end++) {\n      if (startValue[startLength - end] !== endValue[endLength - end]) {\n        break;\n      }\n    }\n\n    var sliceTail = end > 1 ? 1 - end : undefined;\n    this._fallbackText = endValue.slice(start, sliceTail);\n    return this._fallbackText;\n  }\n});\n\nPooledClass.addPoolingTo(FallbackCompositionState);\n\nmodule.exports = FallbackCompositionState;\n},{\"./Object.assign\":54,\"./PooledClass\":55,\"./getTextContentAccessor\":154}],52:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule HTMLDOMPropertyConfig\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;\nvar HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\nvar hasSVG;\nif (ExecutionEnvironment.canUseDOM) {\n  var implementation = document.implementation;\n  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');\n}\n\nvar HTMLDOMPropertyConfig = {\n  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\\d_.\\-]*$/),\n  Properties: {\n    /**\n     * Standard Properties\n     */\n    accept: null,\n    acceptCharset: null,\n    accessKey: null,\n    action: null,\n    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    allowTransparency: MUST_USE_ATTRIBUTE,\n    alt: null,\n    async: HAS_BOOLEAN_VALUE,\n    autoComplete: null,\n    // autoFocus is polyfilled/normalized by AutoFocusUtils\n    // autoFocus: HAS_BOOLEAN_VALUE,\n    autoPlay: HAS_BOOLEAN_VALUE,\n    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    cellPadding: null,\n    cellSpacing: null,\n    charSet: MUST_USE_ATTRIBUTE,\n    challenge: MUST_USE_ATTRIBUTE,\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    classID: MUST_USE_ATTRIBUTE,\n    // To set className on SVG elements, it's necessary to use .setAttribute;\n    // this works on HTML elements too in all browsers except IE8. Conveniently,\n    // IE8 doesn't support SVG and so we can simply use the attribute in\n    // browsers that support SVG and the property in browsers that don't,\n    // regardless of whether the element is HTML or SVG.\n    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,\n    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    colSpan: null,\n    content: null,\n    contentEditable: null,\n    contextMenu: MUST_USE_ATTRIBUTE,\n    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    coords: null,\n    crossOrigin: null,\n    data: null, // For `<object />` acts as `src`.\n    dateTime: MUST_USE_ATTRIBUTE,\n    'default': HAS_BOOLEAN_VALUE,\n    defer: HAS_BOOLEAN_VALUE,\n    dir: null,\n    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,\n    draggable: null,\n    encType: null,\n    form: MUST_USE_ATTRIBUTE,\n    formAction: MUST_USE_ATTRIBUTE,\n    formEncType: MUST_USE_ATTRIBUTE,\n    formMethod: MUST_USE_ATTRIBUTE,\n    formNoValidate: HAS_BOOLEAN_VALUE,\n    formTarget: MUST_USE_ATTRIBUTE,\n    frameBorder: MUST_USE_ATTRIBUTE,\n    headers: null,\n    height: MUST_USE_ATTRIBUTE,\n    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    high: null,\n    href: null,\n    hrefLang: null,\n    htmlFor: null,\n    httpEquiv: null,\n    icon: null,\n    id: MUST_USE_PROPERTY,\n    inputMode: MUST_USE_ATTRIBUTE,\n    integrity: null,\n    is: MUST_USE_ATTRIBUTE,\n    keyParams: MUST_USE_ATTRIBUTE,\n    keyType: MUST_USE_ATTRIBUTE,\n    kind: null,\n    label: null,\n    lang: null,\n    list: MUST_USE_ATTRIBUTE,\n    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    low: null,\n    manifest: MUST_USE_ATTRIBUTE,\n    marginHeight: null,\n    marginWidth: null,\n    max: null,\n    maxLength: MUST_USE_ATTRIBUTE,\n    media: MUST_USE_ATTRIBUTE,\n    mediaGroup: null,\n    method: null,\n    min: null,\n    minLength: MUST_USE_ATTRIBUTE,\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    name: null,\n    nonce: MUST_USE_ATTRIBUTE,\n    noValidate: HAS_BOOLEAN_VALUE,\n    open: HAS_BOOLEAN_VALUE,\n    optimum: null,\n    pattern: null,\n    placeholder: null,\n    poster: null,\n    preload: null,\n    radioGroup: null,\n    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    rel: null,\n    required: HAS_BOOLEAN_VALUE,\n    reversed: HAS_BOOLEAN_VALUE,\n    role: MUST_USE_ATTRIBUTE,\n    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    rowSpan: null,\n    sandbox: null,\n    scope: null,\n    scoped: HAS_BOOLEAN_VALUE,\n    scrolling: null,\n    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    shape: null,\n    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    sizes: MUST_USE_ATTRIBUTE,\n    span: HAS_POSITIVE_NUMERIC_VALUE,\n    spellCheck: null,\n    src: null,\n    srcDoc: MUST_USE_PROPERTY,\n    srcLang: null,\n    srcSet: MUST_USE_ATTRIBUTE,\n    start: HAS_NUMERIC_VALUE,\n    step: null,\n    style: null,\n    summary: null,\n    tabIndex: null,\n    target: null,\n    title: null,\n    type: null,\n    useMap: null,\n    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,\n    width: MUST_USE_ATTRIBUTE,\n    wmode: MUST_USE_ATTRIBUTE,\n    wrap: null,\n\n    /**\n     * RDFa Properties\n     */\n    about: MUST_USE_ATTRIBUTE,\n    datatype: MUST_USE_ATTRIBUTE,\n    inlist: MUST_USE_ATTRIBUTE,\n    prefix: MUST_USE_ATTRIBUTE,\n    // property is also supported for OpenGraph in meta tags.\n    property: MUST_USE_ATTRIBUTE,\n    resource: MUST_USE_ATTRIBUTE,\n    'typeof': MUST_USE_ATTRIBUTE,\n    vocab: MUST_USE_ATTRIBUTE,\n\n    /**\n     * Non-standard Properties\n     */\n    // autoCapitalize and autoCorrect are supported in Mobile Safari for\n    // keyboard hints.\n    autoCapitalize: MUST_USE_ATTRIBUTE,\n    autoCorrect: MUST_USE_ATTRIBUTE,\n    // autoSave allows WebKit/Blink to persist values of input fields on page reloads\n    autoSave: null,\n    // color is for Safari mask-icon link\n    color: null,\n    // itemProp, itemScope, itemType are for\n    // Microdata support. See http://schema.org/docs/gs.html\n    itemProp: MUST_USE_ATTRIBUTE,\n    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    itemType: MUST_USE_ATTRIBUTE,\n    // itemID and itemRef are for Microdata support as well but\n    // only specified in the the WHATWG spec document. See\n    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api\n    itemID: MUST_USE_ATTRIBUTE,\n    itemRef: MUST_USE_ATTRIBUTE,\n    // results show looking glass icon and recent searches on input\n    // search fields in WebKit/Blink\n    results: null,\n    // IE-only attribute that specifies security restrictions on an iframe\n    // as an alternative to the sandbox attribute on IE<10\n    security: MUST_USE_ATTRIBUTE,\n    // IE-only attribute that controls focus behavior\n    unselectable: MUST_USE_ATTRIBUTE\n  },\n  DOMAttributeNames: {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv'\n  },\n  DOMPropertyNames: {\n    autoComplete: 'autocomplete',\n    autoFocus: 'autofocus',\n    autoPlay: 'autoplay',\n    autoSave: 'autosave',\n    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.\n    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding\n    encType: 'encoding',\n    hrefLang: 'hreflang',\n    radioGroup: 'radiogroup',\n    spellCheck: 'spellcheck',\n    srcDoc: 'srcdoc',\n    srcSet: 'srcset'\n  }\n};\n\nmodule.exports = HTMLDOMPropertyConfig;\n},{\"./DOMProperty\":41,\"fbjs/lib/ExecutionEnvironment\":4}],53:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactPropTypes = require('./ReactPropTypes');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(inputProps) {\n  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\\'t want to use valueLink and vice versa.') : invariant(false) : undefined;\n}\nfunction _assertValueLink(inputProps) {\n  _assertSingleLink(inputProps);\n  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\\'t want to use valueLink.') : invariant(false) : undefined;\n}\n\nfunction _assertCheckedLink(inputProps) {\n  _assertSingleLink(inputProps);\n  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\\'t want to ' + 'use checkedLink') : invariant(false) : undefined;\n}\n\nvar propTypes = {\n  value: function (props, propName, componentName) {\n    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {\n      return null;\n    }\n    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },\n  checked: function (props, propName, componentName) {\n    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {\n      return null;\n    }\n    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },\n  onChange: ReactPropTypes.func\n};\n\nvar loggedTypeFailures = {};\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils = {\n  checkPropTypes: function (tagName, props, owner) {\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);\n      }\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var addendum = getDeclarationErrorAddendum(owner);\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;\n      }\n    }\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function (inputProps) {\n    if (inputProps.valueLink) {\n      _assertValueLink(inputProps);\n      return inputProps.valueLink.value;\n    }\n    return inputProps.value;\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function (inputProps) {\n    if (inputProps.checkedLink) {\n      _assertCheckedLink(inputProps);\n      return inputProps.checkedLink.value;\n    }\n    return inputProps.checked;\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @param {SyntheticEvent} event change event to handle\n   */\n  executeOnChange: function (inputProps, event) {\n    if (inputProps.valueLink) {\n      _assertValueLink(inputProps);\n      return inputProps.valueLink.requestChange(event.target.value);\n    } else if (inputProps.checkedLink) {\n      _assertCheckedLink(inputProps);\n      return inputProps.checkedLink.requestChange(event.target.checked);\n    } else if (inputProps.onChange) {\n      return inputProps.onChange.call(undefined, event);\n    }\n  }\n};\n\nmodule.exports = LinkedValueUtils;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./ReactPropTypeLocations\":107,\"./ReactPropTypes\":108,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],54:[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Object.assign\n */\n\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\n\n'use strict';\n\nfunction assign(target, sources) {\n  if (target == null) {\n    throw new TypeError('Object.assign target cannot be null or undefined');\n  }\n\n  var to = Object(target);\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {\n    var nextSource = arguments[nextIndex];\n    if (nextSource == null) {\n      continue;\n    }\n\n    var from = Object(nextSource);\n\n    // We don't currently support accessors nor proxies. Therefore this\n    // copy cannot throw. If we ever supported this then we must handle\n    // exceptions and side-effects. We don't support symbols so they won't\n    // be transferred.\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n  }\n\n  return to;\n}\n\nmodule.exports = assign;\n},{}],55:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PooledClass\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\n\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances (optional).\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\n\nmodule.exports = PooledClass;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBQb29sZWRDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFN0YXRpYyBwb29sZXJzLiBTZXZlcmFsIGN1c3RvbSB2ZXJzaW9ucyBmb3IgZWFjaCBwb3RlbnRpYWwgbnVtYmVyIG9mXG4gKiBhcmd1bWVudHMuIEEgY29tcGxldGVseSBnZW5lcmljIHBvb2xlciBpcyBlYXN5IHRvIGltcGxlbWVudCwgYnV0IHdvdWxkXG4gKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG4gKiB0aGUgQ2xhc3MgaXRzZWxmLCBub3QgYW4gaW5zdGFuY2UuIElmIGFueSBvdGhlcnMgYXJlIG5lZWRlZCwgc2ltcGx5IGFkZCB0aGVtXG4gKiBoZXJlLCBvciBpbiB0aGVpciBvd24gZmlsZXMuXG4gKi9cbnZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChjb3B5RmllbGRzRnJvbSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMykge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgfVxufTtcblxudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICB9XG59O1xuXG52YXIgZml2ZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gIH1cbn07XG5cbnZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIGluc3RhbmNlLmRlc3RydWN0b3IoKTtcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGggPCBLbGFzcy5wb29sU2l6ZSkge1xuICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgfVxufTtcblxudmFyIERFRkFVTFRfUE9PTF9TSVpFID0gMTA7XG52YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBBdWdtZW50cyBgQ29weUNvbnN0cnVjdG9yYCB0byBiZSBhIHBvb2xhYmxlIGNsYXNzLCBhdWdtZW50aW5nIG9ubHkgdGhlIGNsYXNzXG4gKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3JcbiAqIHlvdSBnaXZlIHRoaXMgbWF5IGhhdmUgYSBgcG9vbFNpemVgIHByb3BlcnR5LCBhbmQgd2lsbCBsb29rIGZvciBhXG4gKiBwcm90b3R5cGljYWwgYGRlc3RydWN0b3JgIG9uIGluc3RhbmNlcyAob3B0aW9uYWwpLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cbnZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbiAoQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgTmV3S2xhc3MucG9vbFNpemUgPSBERUZBVUxUX1BPT0xfU0laRTtcbiAgfVxuICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgcmV0dXJuIE5ld0tsYXNzO1xufTtcblxudmFyIFBvb2xlZENsYXNzID0ge1xuICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuICB0d29Bcmd1bWVudFBvb2xlcjogdHdvQXJndW1lbnRQb29sZXIsXG4gIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gIGZvdXJBcmd1bWVudFBvb2xlcjogZm91ckFyZ3VtZW50UG9vbGVyLFxuICBmaXZlQXJndW1lbnRQb29sZXI6IGZpdmVBcmd1bWVudFBvb2xlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzczsiXX0=\n},{\"_process\":30,\"fbjs/lib/invariant\":18}],56:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule React\n */\n\n'use strict';\n\nvar ReactDOM = require('./ReactDOM');\nvar ReactDOMServer = require('./ReactDOMServer');\nvar ReactIsomorphic = require('./ReactIsomorphic');\n\nvar assign = require('./Object.assign');\nvar deprecated = require('./deprecated');\n\n// `version` will be added here by ReactIsomorphic.\nvar React = {};\n\nassign(React, ReactIsomorphic);\n\nassign(React, {\n  // ReactDOM\n  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),\n  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),\n  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),\n\n  // ReactDOMServer\n  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),\n  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)\n});\n\nReact.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;\nReact.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;\n\nmodule.exports = React;\n},{\"./Object.assign\":54,\"./ReactDOM\":69,\"./ReactDOMServer\":79,\"./ReactIsomorphic\":97,\"./deprecated\":143}],57:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserComponentMixin\n */\n\n'use strict';\n\nvar ReactInstanceMap = require('./ReactInstanceMap');\n\nvar findDOMNode = require('./findDOMNode');\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnKey = '_getDOMNodeDidWarn';\n\nvar ReactBrowserComponentMixin = {\n  /**\n   * Returns the DOM node rendered by this component.\n   *\n   * @return {DOMElement} The root node of this component.\n   * @final\n   * @protected\n   */\n  getDOMNode: function () {\n    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;\n    this.constructor[didWarnKey] = true;\n    return findDOMNode(this);\n  }\n};\n\nmodule.exports = ReactBrowserComponentMixin;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xuXG52YXIgZmluZERPTU5vZGUgPSByZXF1aXJlKCcuL2ZpbmRET01Ob2RlJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGRpZFdhcm5LZXkgPSAnX2dldERPTU5vZGVEaWRXYXJuJztcblxudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgRE9NIG5vZGUgcmVuZGVyZWQgYnkgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IFRoZSByb290IG5vZGUgb2YgdGhpcyBjb21wb25lbnQuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBnZXRET01Ob2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodGhpcy5jb25zdHJ1Y3RvcltkaWRXYXJuS2V5XSwgJyVzLmdldERPTU5vZGUoLi4uKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlICcgKyAnUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpIGluc3RlYWQuJywgUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcykuZ2V0TmFtZSgpIHx8IHRoaXMudGFnTmFtZSB8fCAnVW5rbm93bicpIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuY29uc3RydWN0b3JbZGlkV2FybktleV0gPSB0cnVlO1xuICAgIHJldHVybiBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbjsiXX0=\n},{\"./ReactInstanceMap\":96,\"./findDOMNode\":145,\"_process\":30,\"fbjs/lib/warning\":29}],58:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserEventEmitter\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar ReactEventEmitterMixin = require('./ReactEventEmitterMixin');\nvar ReactPerf = require('./ReactPerf');\nvar ViewportMetrics = require('./ViewportMetrics');\n\nvar assign = require('./Object.assign');\nvar isEventSupported = require('./isEventSupported');\n\n/**\n * Summary of `ReactBrowserEventEmitter` event handling:\n *\n *  - Top-level delegation is used to trap most native browser events. This\n *    may only occur in the main thread and is the responsibility of\n *    ReactEventListener, which is injected and can therefore support pluggable\n *    event sources. This is the only work that occurs in the main thread.\n *\n *  - We normalize and de-duplicate events to account for browser quirks. This\n *    may be done in the worker thread.\n *\n *  - Forward these native events (with the associated top-level type used to\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want\n *    to extract any synthetic events.\n *\n *  - The `EventPluginHub` will then process each event by annotating them with\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.\n *\n *  - The `EventPluginHub` then dispatches the events.\n *\n * Overview of React and the event system:\n *\n * +------------+    .\n * |    DOM     |    .\n * +------------+    .\n *       |           .\n *       v           .\n * +------------+    .\n * | ReactEvent |    .\n * |  Listener  |    .\n * +------------+    .                         +-----------+\n *       |           .               +--------+|SimpleEvent|\n *       |           .               |         |Plugin     |\n * +-----|------+    .               v         +-----------+\n * |     |      |    .    +--------------+                    +------------+\n * |     +-----------.--->|EventPluginHub|                    |    Event   |\n * |            |    .    |              |     +-----------+  | Propagators|\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|\n * |            |    .    |              |     +-----------+  |  utilities |\n * |     +-----------.--->|              |                    +------------+\n * |     |      |    .    +--------------+\n * +-----|------+    .                ^        +-----------+\n *       |           .                |        |Enter/Leave|\n *       +           .                +-------+|Plugin     |\n * +-------------+   .                         +-----------+\n * | application |   .\n * |-------------|   .\n * |             |   .\n * |             |   .\n * +-------------+   .\n *                   .\n *    React Core     .  General Purpose Event Plugin System\n */\n\nvar alreadyListeningTo = {};\nvar isMonitoringScrollValue = false;\nvar reactTopListenersCounter = 0;\n\n// For events like 'submit' which don't consistently bubble (which we trap at a\n// lower node than `document`), binding at `document` would cause duplicate\n// events so we don't include them here\nvar topEventMapping = {\n  topAbort: 'abort',\n  topBlur: 'blur',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topChange: 'change',\n  topClick: 'click',\n  topCompositionEnd: 'compositionend',\n  topCompositionStart: 'compositionstart',\n  topCompositionUpdate: 'compositionupdate',\n  topContextMenu: 'contextmenu',\n  topCopy: 'copy',\n  topCut: 'cut',\n  topDoubleClick: 'dblclick',\n  topDrag: 'drag',\n  topDragEnd: 'dragend',\n  topDragEnter: 'dragenter',\n  topDragExit: 'dragexit',\n  topDragLeave: 'dragleave',\n  topDragOver: 'dragover',\n  topDragStart: 'dragstart',\n  topDrop: 'drop',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topFocus: 'focus',\n  topInput: 'input',\n  topKeyDown: 'keydown',\n  topKeyPress: 'keypress',\n  topKeyUp: 'keyup',\n  topLoadedData: 'loadeddata',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topMouseDown: 'mousedown',\n  topMouseMove: 'mousemove',\n  topMouseOut: 'mouseout',\n  topMouseOver: 'mouseover',\n  topMouseUp: 'mouseup',\n  topPaste: 'paste',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topScroll: 'scroll',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topSelectionChange: 'selectionchange',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTextInput: 'textInput',\n  topTimeUpdate: 'timeupdate',\n  topTouchCancel: 'touchcancel',\n  topTouchEnd: 'touchend',\n  topTouchMove: 'touchmove',\n  topTouchStart: 'touchstart',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting',\n  topWheel: 'wheel'\n};\n\n/**\n * To ensure no conflicts with other potential React instances on the page\n */\nvar topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);\n\nfunction getListeningForDocument(mountAt) {\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`\n  // directly.\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};\n  }\n  return alreadyListeningTo[mountAt[topListenersIDKey]];\n}\n\n/**\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For\n * example:\n *\n *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);\n *\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.\n *\n * @internal\n */\nvar ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {\n\n  /**\n   * Injectable event backend\n   */\n  ReactEventListener: null,\n\n  injection: {\n    /**\n     * @param {object} ReactEventListener\n     */\n    injectReactEventListener: function (ReactEventListener) {\n      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;\n    }\n  },\n\n  /**\n   * Sets whether or not any created callbacks should be enabled.\n   *\n   * @param {boolean} enabled True if callbacks should be enabled.\n   */\n  setEnabled: function (enabled) {\n    if (ReactBrowserEventEmitter.ReactEventListener) {\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);\n    }\n  },\n\n  /**\n   * @return {boolean} True if callbacks are enabled.\n   */\n  isEnabled: function () {\n    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());\n  },\n\n  /**\n   * We listen for bubbled touch events on the document object.\n   *\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when\n   * mounting `onmousemove` events at some node that was not the document\n   * element. The symptoms were that if your mouse is not moving over something\n   * contained within that mount point (for example on the background) the\n   * top-level listeners for `onmousemove` won't be called. However, if you\n   * register the `mousemove` on the document object, then it will of course\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting\n   * top-level listeners to the document object only, at least for these\n   * movement types of events and possibly all events.\n   *\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n   *\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but\n   * they bubble to document.\n   *\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {object} contentDocumentHandle Document which owns the container\n   */\n  listenTo: function (registrationName, contentDocumentHandle) {\n    var mountAt = contentDocumentHandle;\n    var isListening = getListeningForDocument(mountAt);\n    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];\n\n    var topLevelTypes = EventConstants.topLevelTypes;\n    for (var i = 0; i < dependencies.length; i++) {\n      var dependency = dependencies[i];\n      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {\n        if (dependency === topLevelTypes.topWheel) {\n          if (isEventSupported('wheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);\n          } else if (isEventSupported('mousewheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);\n          } else {\n            // Firefox needs to capture a different mouse scroll event.\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);\n          }\n        } else if (dependency === topLevelTypes.topScroll) {\n\n          if (isEventSupported('scroll', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);\n          } else {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);\n          }\n        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {\n\n          if (isEventSupported('focus', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);\n          } else if (isEventSupported('focusin')) {\n            // IE has `focusin` and `focusout` events which bubble.\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);\n          }\n\n          // to make sure blur and focus event listeners are only attached once\n          isListening[topLevelTypes.topBlur] = true;\n          isListening[topLevelTypes.topFocus] = true;\n        } else if (topEventMapping.hasOwnProperty(dependency)) {\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);\n        }\n\n        isListening[dependency] = true;\n      }\n    }\n  },\n\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);\n  },\n\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);\n  },\n\n  /**\n   * Listens to window scroll and resize events. We cache scroll values so that\n   * application code can access them without triggering reflows.\n   *\n   * NOTE: Scroll events do not bubble.\n   *\n   * @see http://www.quirksmode.org/dom/events/scroll.html\n   */\n  ensureScrollValueMonitoring: function () {\n    if (!isMonitoringScrollValue) {\n      var refresh = ViewportMetrics.refreshScrollValues;\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);\n      isMonitoringScrollValue = true;\n    }\n  },\n\n  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginHub.registrationNameModules,\n\n  putListener: EventPluginHub.putListener,\n\n  getListener: EventPluginHub.getListener,\n\n  deleteListener: EventPluginHub.deleteListener,\n\n  deleteAllListeners: EventPluginHub.deleteAllListeners\n\n});\n\nReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {\n  putListener: 'putListener',\n  deleteListener: 'deleteListener'\n});\n\nmodule.exports = ReactBrowserEventEmitter;\n},{\"./EventConstants\":46,\"./EventPluginHub\":47,\"./EventPluginRegistry\":48,\"./Object.assign\":54,\"./ReactEventEmitterMixin\":91,\"./ReactPerf\":105,\"./ViewportMetrics\":138,\"./isEventSupported\":156}],59:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * @providesModule ReactCSSTransitionGroup\n */\n\n'use strict';\n\nvar React = require('./React');\n\nvar assign = require('./Object.assign');\n\nvar ReactTransitionGroup = require('./ReactTransitionGroup');\nvar ReactCSSTransitionGroupChild = require('./ReactCSSTransitionGroupChild');\n\nfunction createTransitionTimeoutPropValidator(transitionType) {\n  var timeoutPropName = 'transition' + transitionType + 'Timeout';\n  var enabledPropName = 'transition' + transitionType;\n\n  return function (props) {\n    // If the transition is enabled\n    if (props[enabledPropName]) {\n      // If no timeout duration is provided\n      if (props[timeoutPropName] == null) {\n        return new Error(timeoutPropName + ' wasn\\'t supplied to ReactCSSTransitionGroup: ' + 'this can cause unreliable animations and won\\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');\n\n        // If the duration isn't a number\n      } else if (typeof props[timeoutPropName] !== 'number') {\n          return new Error(timeoutPropName + ' must be a number (in milliseconds)');\n        }\n    }\n  };\n}\n\nvar ReactCSSTransitionGroup = React.createClass({\n  displayName: 'ReactCSSTransitionGroup',\n\n  propTypes: {\n    transitionName: ReactCSSTransitionGroupChild.propTypes.name,\n\n    transitionAppear: React.PropTypes.bool,\n    transitionEnter: React.PropTypes.bool,\n    transitionLeave: React.PropTypes.bool,\n    transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),\n    transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'),\n    transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave')\n  },\n\n  getDefaultProps: function () {\n    return {\n      transitionAppear: false,\n      transitionEnter: true,\n      transitionLeave: true\n    };\n  },\n\n  _wrapChild: function (child) {\n    // We need to provide this childFactory so that\n    // ReactCSSTransitionGroupChild can receive updates to name, enter, and\n    // leave while it is leaving.\n    return React.createElement(ReactCSSTransitionGroupChild, {\n      name: this.props.transitionName,\n      appear: this.props.transitionAppear,\n      enter: this.props.transitionEnter,\n      leave: this.props.transitionLeave,\n      appearTimeout: this.props.transitionAppearTimeout,\n      enterTimeout: this.props.transitionEnterTimeout,\n      leaveTimeout: this.props.transitionLeaveTimeout\n    }, child);\n  },\n\n  render: function () {\n    return React.createElement(ReactTransitionGroup, assign({}, this.props, { childFactory: this._wrapChild }));\n  }\n});\n\nmodule.exports = ReactCSSTransitionGroup;\n},{\"./Object.assign\":54,\"./React\":56,\"./ReactCSSTransitionGroupChild\":60,\"./ReactTransitionGroup\":118}],60:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * @providesModule ReactCSSTransitionGroupChild\n */\n\n'use strict';\n\nvar React = require('./React');\nvar ReactDOM = require('./ReactDOM');\n\nvar CSSCore = require('fbjs/lib/CSSCore');\nvar ReactTransitionEvents = require('./ReactTransitionEvents');\n\nvar onlyChild = require('./onlyChild');\n\n// We don't remove the element from the DOM until we receive an animationend or\n// transitionend event. If the user screws up and forgets to add an animation\n// their node will be stuck in the DOM forever, so we detect if an animation\n// does not start and if it doesn't, we just call the end listener immediately.\nvar TICK = 17;\n\nvar ReactCSSTransitionGroupChild = React.createClass({\n  displayName: 'ReactCSSTransitionGroupChild',\n\n  propTypes: {\n    name: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.shape({\n      enter: React.PropTypes.string,\n      leave: React.PropTypes.string,\n      active: React.PropTypes.string\n    }), React.PropTypes.shape({\n      enter: React.PropTypes.string,\n      enterActive: React.PropTypes.string,\n      leave: React.PropTypes.string,\n      leaveActive: React.PropTypes.string,\n      appear: React.PropTypes.string,\n      appearActive: React.PropTypes.string\n    })]).isRequired,\n\n    // Once we require timeouts to be specified, we can remove the\n    // boolean flags (appear etc.) and just accept a number\n    // or a bool for the timeout flags (appearTimeout etc.)\n    appear: React.PropTypes.bool,\n    enter: React.PropTypes.bool,\n    leave: React.PropTypes.bool,\n    appearTimeout: React.PropTypes.number,\n    enterTimeout: React.PropTypes.number,\n    leaveTimeout: React.PropTypes.number\n  },\n\n  transition: function (animationType, finishCallback, userSpecifiedDelay) {\n    var node = ReactDOM.findDOMNode(this);\n\n    if (!node) {\n      if (finishCallback) {\n        finishCallback();\n      }\n      return;\n    }\n\n    var className = this.props.name[animationType] || this.props.name + '-' + animationType;\n    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';\n    var timeout = null;\n\n    var endListener = function (e) {\n      if (e && e.target !== node) {\n        return;\n      }\n\n      clearTimeout(timeout);\n\n      CSSCore.removeClass(node, className);\n      CSSCore.removeClass(node, activeClassName);\n\n      ReactTransitionEvents.removeEndEventListener(node, endListener);\n\n      // Usually this optional callback is used for informing an owner of\n      // a leave animation and telling it to remove the child.\n      if (finishCallback) {\n        finishCallback();\n      }\n    };\n\n    CSSCore.addClass(node, className);\n\n    // Need to do this to actually trigger a transition.\n    this.queueClass(activeClassName);\n\n    // If the user specified a timeout delay.\n    if (userSpecifiedDelay) {\n      // Clean-up the animation after the specified delay\n      timeout = setTimeout(endListener, userSpecifiedDelay);\n      this.transitionTimeouts.push(timeout);\n    } else {\n      // DEPRECATED: this listener will be removed in a future version of react\n      ReactTransitionEvents.addEndEventListener(node, endListener);\n    }\n  },\n\n  queueClass: function (className) {\n    this.classNameQueue.push(className);\n\n    if (!this.timeout) {\n      this.timeout = setTimeout(this.flushClassNameQueue, TICK);\n    }\n  },\n\n  flushClassNameQueue: function () {\n    if (this.isMounted()) {\n      this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this)));\n    }\n    this.classNameQueue.length = 0;\n    this.timeout = null;\n  },\n\n  componentWillMount: function () {\n    this.classNameQueue = [];\n    this.transitionTimeouts = [];\n  },\n\n  componentWillUnmount: function () {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.transitionTimeouts.forEach(function (timeout) {\n      clearTimeout(timeout);\n    });\n  },\n\n  componentWillAppear: function (done) {\n    if (this.props.appear) {\n      this.transition('appear', done, this.props.appearTimeout);\n    } else {\n      done();\n    }\n  },\n\n  componentWillEnter: function (done) {\n    if (this.props.enter) {\n      this.transition('enter', done, this.props.enterTimeout);\n    } else {\n      done();\n    }\n  },\n\n  componentWillLeave: function (done) {\n    if (this.props.leave) {\n      this.transition('leave', done, this.props.leaveTimeout);\n    } else {\n      done();\n    }\n  },\n\n  render: function () {\n    return onlyChild(this.props.children);\n  }\n});\n\nmodule.exports = ReactCSSTransitionGroupChild;\n},{\"./React\":56,\"./ReactDOM\":69,\"./ReactTransitionEvents\":117,\"./onlyChild\":158,\"fbjs/lib/CSSCore\":2}],61:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildReconciler\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactReconciler = require('./ReactReconciler');\n\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar traverseAllChildren = require('./traverseAllChildren');\nvar warning = require('fbjs/lib/warning');\n\nfunction instantiateChild(childInstances, child, name) {\n  // We found a component instance.\n  var keyUnique = childInstances[name] === undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;\n  }\n  if (child != null && keyUnique) {\n    childInstances[name] = instantiateReactComponent(child, null);\n  }\n}\n\n/**\n * ReactChildReconciler provides helpers for initializing or updating a set of\n * children. Its output is suitable for passing it onto ReactMultiChild which\n * does diffed reordering and insertion.\n */\nvar ReactChildReconciler = {\n  /**\n   * Generates a \"mount image\" for each of the supplied children. In the case\n   * of `ReactDOMComponent`, a mount image is a string of markup.\n   *\n   * @param {?object} nestedChildNodes Nested child maps.\n   * @return {?object} A set of child instances.\n   * @internal\n   */\n  instantiateChildren: function (nestedChildNodes, transaction, context) {\n    if (nestedChildNodes == null) {\n      return null;\n    }\n    var childInstances = {};\n    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);\n    return childInstances;\n  },\n\n  /**\n   * Updates the rendered children and returns a new set of children.\n   *\n   * @param {?object} prevChildren Previously initialized set of children.\n   * @param {?object} nextChildren Flat child element maps.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @return {?object} A new set of child instances.\n   * @internal\n   */\n  updateChildren: function (prevChildren, nextChildren, transaction, context) {\n    // We currently don't have a way to track moves here but if we use iterators\n    // instead of for..in we can zip the iterators and check if an item has\n    // moved.\n    // TODO: If nothing has changed, return the prevChildren object so that we\n    // can quickly bailout if nothing has changed.\n    if (!nextChildren && !prevChildren) {\n      return null;\n    }\n    var name;\n    for (name in nextChildren) {\n      if (!nextChildren.hasOwnProperty(name)) {\n        continue;\n      }\n      var prevChild = prevChildren && prevChildren[name];\n      var prevElement = prevChild && prevChild._currentElement;\n      var nextElement = nextChildren[name];\n      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);\n        nextChildren[name] = prevChild;\n      } else {\n        if (prevChild) {\n          ReactReconciler.unmountComponent(prevChild, name);\n        }\n        // The child must be instantiated before it's mounted.\n        var nextChildInstance = instantiateReactComponent(nextElement, null);\n        nextChildren[name] = nextChildInstance;\n      }\n    }\n    // Unmount children that are no longer present.\n    for (name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n        ReactReconciler.unmountComponent(prevChildren[name]);\n      }\n    }\n    return nextChildren;\n  },\n\n  /**\n   * Unmounts all rendered children. This should be used to clean up children\n   * when this component is unmounted.\n   *\n   * @param {?object} renderedChildren Previously initialized set of children.\n   * @internal\n   */\n  unmountChildren: function (renderedChildren) {\n    for (var name in renderedChildren) {\n      if (renderedChildren.hasOwnProperty(name)) {\n        var renderedChild = renderedChildren[name];\n        ReactReconciler.unmountComponent(renderedChild);\n      }\n    }\n  }\n\n};\n\nmodule.exports = ReactChildReconciler;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDaGlsZFJlY29uY2lsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENoaWxkUmVjb25jaWxlclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xuXG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCcpO1xudmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCcpO1xudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3RyYXZlcnNlQWxsQ2hpbGRyZW4nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZUNoaWxkKGNoaWxkSW5zdGFuY2VzLCBjaGlsZCwgbmFtZSkge1xuICAvLyBXZSBmb3VuZCBhIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgdmFyIGtleVVuaXF1ZSA9IGNoaWxkSW5zdGFuY2VzW25hbWVdID09PSB1bmRlZmluZWQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoa2V5VW5pcXVlLCAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArICdgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSAnICsgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJywgbmFtZSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGNoaWxkICE9IG51bGwgJiYga2V5VW5pcXVlKSB7XG4gICAgY2hpbGRJbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGNoaWxkLCBudWxsKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlYWN0Q2hpbGRSZWNvbmNpbGVyIHByb3ZpZGVzIGhlbHBlcnMgZm9yIGluaXRpYWxpemluZyBvciB1cGRhdGluZyBhIHNldCBvZlxuICogY2hpbGRyZW4uIEl0cyBvdXRwdXQgaXMgc3VpdGFibGUgZm9yIHBhc3NpbmcgaXQgb250byBSZWFjdE11bHRpQ2hpbGQgd2hpY2hcbiAqIGRvZXMgZGlmZmVkIHJlb3JkZXJpbmcgYW5kIGluc2VydGlvbi5cbiAqL1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0ge1xuICAvKipcbiAgICogR2VuZXJhdGVzIGEgXCJtb3VudCBpbWFnZVwiIGZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBjaGlsZHJlbi4gSW4gdGhlIGNhc2VcbiAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmVzdGVkQ2hpbGROb2RlcyBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICogQHJldHVybiB7P29iamVjdH0gQSBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXN0ZWRDaGlsZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIGlmIChuZXN0ZWRDaGlsZE5vZGVzID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgY2hpbGRJbnN0YW5jZXMgPSB7fTtcbiAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKG5lc3RlZENoaWxkTm9kZXMsIGluc3RhbnRpYXRlQ2hpbGQsIGNoaWxkSW5zdGFuY2VzKTtcbiAgICByZXR1cm4gY2hpbGRJbnN0YW5jZXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIGFuZCByZXR1cm5zIGEgbmV3IHNldCBvZiBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q2hpbGRyZW4gUHJldmlvdXNseSBpbml0aWFsaXplZCBzZXQgb2YgY2hpbGRyZW4uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENoaWxkcmVuIEZsYXQgY2hpbGQgZWxlbWVudCBtYXBzLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9IEEgbmV3IHNldCBvZiBjaGlsZCBpbnN0YW5jZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAvLyBXZSBjdXJyZW50bHkgZG9uJ3QgaGF2ZSBhIHdheSB0byB0cmFjayBtb3ZlcyBoZXJlIGJ1dCBpZiB3ZSB1c2UgaXRlcmF0b3JzXG4gICAgLy8gaW5zdGVhZCBvZiBmb3IuLmluIHdlIGNhbiB6aXAgdGhlIGl0ZXJhdG9ycyBhbmQgY2hlY2sgaWYgYW4gaXRlbSBoYXNcbiAgICAvLyBtb3ZlZC5cbiAgICAvLyBUT0RPOiBJZiBub3RoaW5nIGhhcyBjaGFuZ2VkLCByZXR1cm4gdGhlIHByZXZDaGlsZHJlbiBvYmplY3Qgc28gdGhhdCB3ZVxuICAgIC8vIGNhbiBxdWlja2x5IGJhaWxvdXQgaWYgbm90aGluZyBoYXMgY2hhbmdlZC5cbiAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG5hbWU7XG4gICAgZm9yIChuYW1lIGluIG5leHRDaGlsZHJlbikge1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDaGlsZCAmJiBwcmV2Q2hpbGQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgaWYgKHByZXZDaGlsZCAhPSBudWxsICYmIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQocHJldkNoaWxkLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBwcmV2Q2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgdmFyIG5leHRDaGlsZEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCwgbnVsbCk7XG4gICAgICAgIG5leHRDaGlsZHJlbltuYW1lXSA9IG5leHRDaGlsZEluc3RhbmNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBVbm1vdW50IGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgIGZvciAobmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkgJiYgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSkge1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q2hpbGRyZW5bbmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dENoaWxkcmVuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cbiAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcmVuZGVyZWRDaGlsZHJlbiBQcmV2aW91c2x5IGluaXRpYWxpemVkIHNldCBvZiBjaGlsZHJlbi5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uIChyZW5kZXJlZENoaWxkcmVuKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiByZW5kZXJlZENoaWxkcmVuKSB7XG4gICAgICBpZiAocmVuZGVyZWRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHJlbmRlcmVkQ2hpbGRyZW5bbmFtZV07XG4gICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHJlbmRlcmVkQ2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRSZWNvbmNpbGVyOyJdfQ==\n},{\"./ReactReconciler\":110,\"./instantiateReactComponent\":155,\"./shouldUpdateReactComponent\":163,\"./traverseAllChildren\":164,\"_process\":30,\"fbjs/lib/warning\":29}],62:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildren\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\nvar ReactElement = require('./ReactElement');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar traverseAllChildren = require('./traverseAllChildren');\n\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;\nvar fourArgumentPooler = PooledClass.fourArgumentPooler;\n\nvar userProvidedKeyEscapeRegex = /\\/(?!\\/)/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * traversal. Allows avoiding binding callbacks.\n *\n * @constructor ForEachBookKeeping\n * @param {!function} forEachFunction Function to perform traversal with.\n * @param {?*} forEachContext Context to perform context with.\n */\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {\n  this.func = forEachFunction;\n  this.context = forEachContext;\n  this.count = 0;\n}\nForEachBookKeeping.prototype.destructor = function () {\n  this.func = null;\n  this.context = null;\n  this.count = 0;\n};\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func;\n  var context = bookKeeping.context;\n\n  func.call(context, child, bookKeeping.count++);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  ForEachBookKeeping.release(traverseContext);\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * mapping. Allows avoiding binding callbacks.\n *\n * @constructor MapBookKeeping\n * @param {!*} mapResult Object containing the ordered map of results.\n * @param {!function} mapFunction Function to perform mapping with.\n * @param {?*} mapContext Context to perform mapping with.\n */\nfunction MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {\n  this.result = mapResult;\n  this.keyPrefix = keyPrefix;\n  this.func = mapFunction;\n  this.context = mapContext;\n  this.count = 0;\n}\nMapBookKeeping.prototype.destructor = function () {\n  this.result = null;\n  this.keyPrefix = null;\n  this.func = null;\n  this.context = null;\n  this.count = 0;\n};\nPooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result;\n  var keyPrefix = bookKeeping.keyPrefix;\n  var func = bookKeeping.func;\n  var context = bookKeeping.context;\n\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);\n  } else if (mappedChild != null) {\n    if (ReactElement.isValidElement(mappedChild)) {\n      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,\n      // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);\n    }\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  MapBookKeeping.release(traverseContext);\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n\nfunction forEachSingleChildDummy(traverseContext, child, name) {\n  return null;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, forEachSingleChildDummy, null);\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n */\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);\n  return result;\n}\n\nvar ReactChildren = {\n  forEach: forEachChildren,\n  map: mapChildren,\n  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,\n  count: countChildren,\n  toArray: toArray\n};\n\nmodule.exports = ReactChildren;\n},{\"./PooledClass\":55,\"./ReactElement\":86,\"./traverseAllChildren\":164,\"fbjs/lib/emptyFunction\":10}],63:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n\n'use strict';\n\nvar ReactComponent = require('./ReactComponent');\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar assign = require('./Object.assign');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar keyMirror = require('fbjs/lib/keyMirror');\nvar keyOf = require('fbjs/lib/keyOf');\nvar warning = require('fbjs/lib/warning');\n\nvar MIXINS_KEY = keyOf({ mixins: null });\n\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\nvar injectedMixins = [];\n\nvar warnedSetProps = false;\nfunction warnSetProps() {\n  if (!warnedSetProps) {\n    warnedSetProps = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;\n  }\n}\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will be available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\nvar ReactClassInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (Constructor, childContextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    }\n    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (Constructor, contextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    }\n    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function (Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    }\n    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);\n  },\n  statics: function (Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  },\n  autobind: function () {} };\n\n// noop\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but not in __DEV__\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;\n  }\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\n\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above.\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name];\n\n          // These cases should already be caught by validateMethodOverride.\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (process.env.NODE_ENV !== 'production') {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = (name in RESERVED_SPEC_KEYS);\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;\n\n    var isInherited = (name in Constructor);\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;\n      one[key] = two[key];\n    }\n  }\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n  if (process.env.NODE_ENV !== 'production') {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    /* eslint-disable block-scoped-var, no-undef */\n    boundMethod.bind = function (newThis) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n      if (newThis !== component && newThis !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;\n      } else if (!args.length) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;\n        return boundMethod;\n      }\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n      /* eslint-enable */\n    };\n  }\n  return boundMethod;\n}\n\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n}\n\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\nvar ReactClassMixin = {\n\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function (newState, callback) {\n    this.updater.enqueueReplaceState(this, newState);\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    return this.updater.isMounted(this);\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  setProps: function (partialProps, callback) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnSetProps();\n    }\n    this.updater.enqueueSetProps(this, partialProps);\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Replace all the props.\n   *\n   * @param {object} newProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  replaceProps: function (newProps, callback) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnSetProps();\n    }\n    this.updater.enqueueReplaceProps(this, newProps);\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  }\n};\n\nvar ReactClassComponent = function () {};\nassign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\nvar ReactClass = {\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function (props, context, updater) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindMap) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;\n\n      this.state = initialState;\n    };\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  },\n\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n\n};\n\nmodule.exports = ReactClass;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./Object.assign\":54,\"./ReactComponent\":64,\"./ReactElement\":86,\"./ReactNoopUpdateQueue\":103,\"./ReactPropTypeLocationNames\":106,\"./ReactPropTypeLocations\":107,\"_process\":30,\"fbjs/lib/emptyObject\":11,\"fbjs/lib/invariant\":18,\"fbjs/lib/keyMirror\":21,\"fbjs/lib/keyOf\":22,\"fbjs/lib/warning\":29}],64:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nReactComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;\n  }\n  this.updater.enqueueSetState(this, partialState);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (process.env.NODE_ENV !== 'production') {\n  var deprecatedAPIs = {\n    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],\n    setProps: ['setProps', 'Instead, call render again at the top level.']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    if (canDefineProperty) {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;\n          return undefined;\n        }\n      });\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgISh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgKyAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwYXJ0aWFsU3RhdGUgIT0gbnVsbCwgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICsgJ2luc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLicpIDogdW5kZWZpbmVkO1xuICB9XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gKlxuICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gKlxuICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAqXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cbiAqIEBmaW5hbFxuICogQHByb3RlY3RlZFxuICovXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRGVwcmVjYXRlZCBBUElzLiBUaGVzZSBBUElzIHVzZWQgdG8gZXhpc3Qgb24gY2xhc3NpYyBSZWFjdCBjbGFzc2VzIGJ1dCBzaW5jZVxuICogd2Ugd291bGQgbGlrZSB0byBkZXByZWNhdGUgdGhlbSwgd2UncmUgbm90IGdvaW5nIHRvIG1vdmUgdGhlbSBvdmVyIHRvIHRoaXNcbiAqIG1vZGVybiBiYXNlIGNsYXNzLiBJbnN0ZWFkLCB3ZSBkZWZpbmUgYSBnZXR0ZXIgdGhhdCB3YXJucyBpZiBpdCdzIGFjY2Vzc2VkLlxuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgZGVwcmVjYXRlZEFQSXMgPSB7XG4gICAgZ2V0RE9NTm9kZTogWydnZXRET01Ob2RlJywgJ1VzZSBSZWFjdERPTS5maW5kRE9NTm9kZShjb21wb25lbnQpIGluc3RlYWQuJ10sXG4gICAgaXNNb3VudGVkOiBbJ2lzTW91bnRlZCcsICdJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiAnICsgJ2NvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLiddLFxuICAgIHJlcGxhY2VQcm9wczogWydyZXBsYWNlUHJvcHMnLCAnSW5zdGVhZCwgY2FsbCByZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXSxcbiAgICBzZXRQcm9wczogWydzZXRQcm9wcycsICdJbnN0ZWFkLCBjYWxsIHJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLiddXG4gIH07XG4gIHZhciBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgaW5mbykge1xuICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzJywgaW5mb1swXSwgaW5mb1sxXSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBmb3IgKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpIHtcbiAgICBpZiAoZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSkge1xuICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnQ7Il19\n},{\"./ReactNoopUpdateQueue\":103,\"./canDefineProperty\":141,\"_process\":30,\"fbjs/lib/emptyObject\":11,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],65:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar ReactMount = require('./ReactMount');\n\n/**\n * Abstracts away all functionality of the reconciler that requires knowledge of\n * the browser context. TODO: These callers should be refactored to avoid the\n * need for this injection.\n */\nvar ReactComponentBrowserEnvironment = {\n\n  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,\n\n  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function (rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  }\n\n};\n\nmodule.exports = ReactComponentBrowserEnvironment;\n},{\"./ReactDOMIDOperations\":74,\"./ReactMount\":99}],66:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar injected = false;\n\nvar ReactComponentEnvironment = {\n\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n\n  injection: {\n    injectEnvironment: function (environment) {\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n\n};\n\nmodule.exports = ReactComponentEnvironment;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSB7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY2xlYW51cCBob29rLiAoc2VydmVyIHZzLlxuICAgKiBicm93c2VyIGV0YykuIEV4YW1wbGU6IEEgYnJvd3NlciBzeXN0ZW0gY2FjaGVzIERPTSBub2RlcyBiYXNlZCBvbiBjb21wb25lbnRcbiAgICogSUQgYW5kIG11c3QgcmVtb3ZlIHRoYXQgY2FjaGUgZW50cnkgd2hlbiB0aGlzIGluc3RhbmNlIGlzIHVubW91bnRlZC5cbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogbnVsbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHN3YXBwaW5nIG91dCBtb3VudCBpbWFnZXMgaW4gdGhlIG1pZGRsZSBvZlxuICAgKiB0aGUgdHJlZS5cbiAgICovXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBwcm9jZXNzaW5nIGEgcXVldWUgb2YgY2hpbGQgdXBkYXRlcy4gV2lsbFxuICAgKiBsYXRlciBtb3ZlIGludG8gTXVsdGlDaGlsZENvbXBvbmVudHMuXG4gICAqL1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdEVudmlyb25tZW50OiBmdW5jdGlvbiAoZW52aXJvbm1lbnQpIHtcbiAgICAgICEhaW5qZWN0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQ7XG4gICAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQgPSBlbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzID0gZW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcztcbiAgICAgIGluamVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50OyJdfQ==\n},{\"_process\":30,\"fbjs/lib/invariant\":18}],67:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactPerf = require('./ReactPerf');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\nvar assign = require('./Object.assign');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar warning = require('fbjs/lib/warning');\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._currentElement._owner || null;\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nfunction StatelessComponent(Component) {}\nStatelessComponent.prototype.render = function () {\n  var Component = ReactInstanceMap.get(this)._currentElement.type;\n  return Component(this.props, this.context, this.updater);\n};\n\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\nvar nextMountID = 1;\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function (element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n    this._instance = null;\n\n    // See ReactUpdateQueue\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    this._renderedComponent = null;\n\n    this._context = null;\n    this._mountOrder = 0;\n    this._topLevelWrapper = null;\n\n    // See ReactUpdates and ReactUpdateQueue.\n    this._pendingCallbacks = null;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._rootNodeID = rootID;\n\n    var publicProps = this._processProps(this._currentElement.props);\n    var publicContext = this._processContext(context);\n\n    var Component = this._currentElement.type;\n\n    // Initialize the public class\n    var inst;\n    var renderedElement;\n\n    // This is a way to detect if Component is a stateless arrow function\n    // component, which is not newable. It might not be 100% reliable but is\n    // something we can do until we start detecting that Component extends\n    // React.Component. We already assume that typeof Component === 'function'.\n    var canInstantiate = ('prototype' in Component);\n\n    if (canInstantiate) {\n      if (process.env.NODE_ENV !== 'production') {\n        ReactCurrentOwner.current = this;\n        try {\n          inst = new Component(publicProps, publicContext, ReactUpdateQueue);\n        } finally {\n          ReactCurrentOwner.current = null;\n        }\n      } else {\n        inst = new Component(publicProps, publicContext, ReactUpdateQueue);\n      }\n    }\n\n    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {\n      renderedElement = inst;\n      inst = new StatelessComponent(Component);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      if (inst.render == null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;\n      } else {\n        // We support ES6 inheriting from React.Component, the module pattern,\n        // and stateless components, but not ES6 classes that don't extend\n        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;\n      }\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n    inst.updater = ReactUpdateQueue;\n\n    this._instance = inst;\n\n    // Store a reference from the instance back to the internal representation\n    ReactInstanceMap.set(inst, this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;\n    }\n\n    var initialState = inst.state;\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    if (inst.componentWillMount) {\n      inst.componentWillMount();\n      // When mounting, calls to `setState` by `componentWillMount` will set\n      // `this._pendingStateQueue` without triggering a re-render.\n      if (this._pendingStateQueue) {\n        inst.state = this._processPendingState(inst.props, inst.context);\n      }\n    }\n\n    // If not a stateless component, we now render\n    if (renderedElement === undefined) {\n      renderedElement = this._renderValidatedComponent();\n    }\n\n    this._renderedComponent = this._instantiateReactComponent(renderedElement);\n\n    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));\n    if (inst.componentDidMount) {\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n    }\n\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function () {\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount) {\n      inst.componentWillUnmount();\n    }\n\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    this._renderedComponent = null;\n    this._instance = null;\n\n    // Reset pending fields\n    // Even if this component is scheduled for another update in ReactUpdates,\n    // it would still be ignored because these fields are reset.\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null;\n\n    // These fields do not really need to be reset since this object is no\n    // longer accessible.\n    this._context = null;\n    this._rootNodeID = null;\n    this._topLevelWrapper = null;\n\n    // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n    ReactInstanceMap.remove(inst);\n\n    // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function (context) {\n    var maskedContext = null;\n    var Component = this._currentElement.type;\n    var contextTypes = Component.contextTypes;\n    if (!contextTypes) {\n      return emptyObject;\n    }\n    maskedContext = {};\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = this._maskContext(context);\n    if (process.env.NODE_ENV !== 'production') {\n      var Component = this._currentElement.type;\n      if (Component.contextTypes) {\n        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function (currentContext) {\n    var Component = this._currentElement.type;\n    var inst = this._instance;\n    var childContext = inst.getChildContext && inst.getChildContext();\n    if (childContext) {\n      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n      if (process.env.NODE_ENV !== 'production') {\n        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);\n      }\n      for (var name in childContext) {\n        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;\n      }\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function (newProps) {\n    if (process.env.NODE_ENV !== 'production') {\n      var Component = this._currentElement.type;\n      if (Component.propTypes) {\n        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);\n      }\n    }\n    return newProps;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function (propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.getName();\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error;\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;\n          error = propTypes[propName](props, propName, componentName, location);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // top-level render calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n\n          if (location === ReactPropTypeLocations.prop) {\n            // Preface gives us something to blacklist in warning module\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;\n          } else {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;\n          }\n        }\n      }\n    }\n  },\n\n  receiveComponent: function (nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n\n    this._pendingElement = null;\n\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);\n    }\n\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;\n\n    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);\n    var nextProps;\n\n    // Distinguish between a props update versus a simple state update\n    if (prevParentElement === nextParentElement) {\n      // Skip checking prop types again -- we don't read inst.props to avoid\n      // warning for DOM component props in this upgrade\n      nextProps = nextParentElement.props;\n    } else {\n      nextProps = this._processProps(nextParentElement.props);\n      // An update here will schedule an update but immediately set\n      // _pendingStateQueue which will ensure that any state updates gets\n      // immediately reconciled instead of waiting for the next batch.\n\n      if (inst.componentWillReceiveProps) {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n\n    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;\n    }\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n\n  _processPendingState: function (props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = assign({}, replace ? queue[0] : inst.state);\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {\n    var inst = this._instance;\n\n    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);\n    var prevProps;\n    var prevState;\n    var prevContext;\n    if (hasComponentDidUpdate) {\n      prevProps = inst.props;\n      prevState = inst.state;\n      prevContext = inst.context;\n    }\n\n    if (inst.componentWillUpdate) {\n      inst.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (hasComponentDidUpdate) {\n      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function (transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    var nextRenderedElement = this._renderValidatedComponent();\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      ReactReconciler.unmountComponent(prevComponentInstance);\n\n      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);\n      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  },\n\n  /**\n   * @protected\n   */\n  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function () {\n    var inst = this._instance;\n    var renderedComponent = inst.render();\n    if (process.env.NODE_ENV !== 'production') {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedComponent = null;\n      }\n    }\n\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function () {\n    var renderedComponent;\n    ReactCurrentOwner.current = this;\n    try {\n      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();\n    } finally {\n      ReactCurrentOwner.current = null;\n    }\n    !(\n    // TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n    return renderedComponent;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function (ref, component) {\n    var inst = this.getPublicInstance();\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;\n    var publicComponentInstance = component.getPublicInstance();\n    if (process.env.NODE_ENV !== 'production') {\n      var componentName = component && component.getName ? component.getName() : 'a component';\n      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref \"%s\" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;\n    }\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;\n    refs[ref] = publicComponentInstance;\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function (ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function () {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function () {\n    var inst = this._instance;\n    if (inst instanceof StatelessComponent) {\n      return null;\n    }\n    return inst;\n  },\n\n  // Stub\n  _instantiateReactComponent: null\n\n};\n\nReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {\n  mountComponent: 'mountComponent',\n  updateComponent: 'updateComponent',\n  _renderValidatedComponent: '_renderValidatedComponent'\n});\n\nvar ReactCompositeComponent = {\n\n  Mixin: ReactCompositeComponentMixin\n\n};\n\nmodule.exports = ReactCompositeComponent;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./Object.assign\":54,\"./ReactComponentEnvironment\":66,\"./ReactCurrentOwner\":68,\"./ReactElement\":86,\"./ReactInstanceMap\":96,\"./ReactPerf\":105,\"./ReactPropTypeLocationNames\":106,\"./ReactPropTypeLocations\":107,\"./ReactReconciler\":110,\"./ReactUpdateQueue\":119,\"./shouldUpdateReactComponent\":163,\"_process\":30,\"fbjs/lib/emptyObject\":11,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],68:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCurrentOwner\n */\n\n'use strict';\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n\n};\n\nmodule.exports = ReactCurrentOwner;\n},{}],69:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOM\n */\n\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');\nvar ReactDefaultInjection = require('./ReactDefaultInjection');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdates = require('./ReactUpdates');\nvar ReactVersion = require('./ReactVersion');\n\nvar findDOMNode = require('./findDOMNode');\nvar renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');\nvar warning = require('fbjs/lib/warning');\n\nReactDefaultInjection.inject();\n\nvar render = ReactPerf.measure('React', 'render', ReactMount.render);\n\nvar React = {\n  findDOMNode: findDOMNode,\n  render: render,\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,\n  version: ReactVersion,\n\n  /* eslint-disable camelcase */\n  unstable_batchedUpdates: ReactUpdates.batchedUpdates,\n  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer\n};\n\n// Inject the runtime into a devtools global hook regardless of browser.\n// Allows for debugging when the hook is injected on the page.\n/* eslint-enable camelcase */\nif (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({\n    CurrentOwner: ReactCurrentOwner,\n    InstanceHandles: ReactInstanceHandles,\n    Mount: ReactMount,\n    Reconciler: ReactReconciler,\n    TextComponent: ReactDOMTextComponent\n  });\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {\n\n    // First check if devtools is not installed\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n      // If we're in Chrome or Firefox, provide a download link if not installed.\n      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');\n      }\n    }\n\n    // If we're in IE8, check to see if we are in compatibility mode and provide\n    // information on preventing compatibility mode\n    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;\n\n    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />') : undefined;\n\n    var expectedFeatures = [\n    // shims\n    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,\n\n    // shams\n    Object.create, Object.freeze];\n\n    for (var i = 0; i < expectedFeatures.length; i++) {\n      if (!expectedFeatures[i]) {\n        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');\n        break;\n      }\n    }\n  }\n}\n\nmodule.exports = React;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET00uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVxuICovXG5cbi8qIGdsb2JhbHMgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdERPTVRleHRDb21wb25lbnQnKTtcbnZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEluamVjdGlvbicpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlSGFuZGxlcycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbnZhciBSZWFjdFZlcnNpb24gPSByZXF1aXJlKCcuL1JlYWN0VmVyc2lvbicpO1xuXG52YXIgZmluZERPTU5vZGUgPSByZXF1aXJlKCcuL2ZpbmRET01Ob2RlJyk7XG52YXIgcmVuZGVyU3VidHJlZUludG9Db250YWluZXIgPSByZXF1aXJlKCcuL3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuUmVhY3REZWZhdWx0SW5qZWN0aW9uLmluamVjdCgpO1xuXG52YXIgcmVuZGVyID0gUmVhY3RQZXJmLm1lYXN1cmUoJ1JlYWN0JywgJ3JlbmRlcicsIFJlYWN0TW91bnQucmVuZGVyKTtcblxudmFyIFJlYWN0ID0ge1xuICBmaW5kRE9NTm9kZTogZmluZERPTU5vZGUsXG4gIHJlbmRlcjogcmVuZGVyLFxuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUsXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyxcbiAgdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6IHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyXG59O1xuXG4vLyBJbmplY3QgdGhlIHJ1bnRpbWUgaW50byBhIGRldnRvb2xzIGdsb2JhbCBob29rIHJlZ2FyZGxlc3Mgb2YgYnJvd3Nlci5cbi8vIEFsbG93cyBmb3IgZGVidWdnaW5nIHdoZW4gdGhlIGhvb2sgaXMgaW5qZWN0ZWQgb24gdGhlIHBhZ2UuXG4vKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3Qoe1xuICAgIEN1cnJlbnRPd25lcjogUmVhY3RDdXJyZW50T3duZXIsXG4gICAgSW5zdGFuY2VIYW5kbGVzOiBSZWFjdEluc3RhbmNlSGFuZGxlcyxcbiAgICBNb3VudDogUmVhY3RNb3VudCxcbiAgICBSZWNvbmNpbGVyOiBSZWFjdFJlY29uY2lsZXIsXG4gICAgVGV4dENvbXBvbmVudDogUmVhY3RET01UZXh0Q29tcG9uZW50XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy50b3AgPT09IHdpbmRvdy5zZWxmKSB7XG5cbiAgICAvLyBGaXJzdCBjaGVjayBpZiBkZXZ0b29scyBpcyBub3QgaW5zdGFsbGVkXG4gICAgaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUgb3IgRmlyZWZveCwgcHJvdmlkZSBhIGRvd25sb2FkIGxpbmsgaWYgbm90IGluc3RhbGxlZC5cbiAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpID4gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdFZGdlJykgPT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTEpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZygnRG93bmxvYWQgdGhlIFJlYWN0IERldlRvb2xzIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtZGV2dG9vbHMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBpbiBJRTgsIGNoZWNrIHRvIHNlZSBpZiB3ZSBhcmUgaW4gY29tcGF0aWJpbGl0eSBtb2RlIGFuZCBwcm92aWRlXG4gICAgLy8gaW5mb3JtYXRpb24gb24gcHJldmVudGluZyBjb21wYXRpYmlsaXR5IG1vZGVcbiAgICB2YXIgaWVDb21wYXRpYmlsaXR5TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCA4O1xuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWllQ29tcGF0aWJpbGl0eU1vZGUsICdJbnRlcm5ldCBFeHBsb3JlciBpcyBydW5uaW5nIGluIGNvbXBhdGliaWxpdHkgbW9kZTsgcGxlYXNlIGFkZCB0aGUgJyArICdmb2xsb3dpbmcgdGFnIHRvIHlvdXIgSFRNTCB0byBwcmV2ZW50IHRoaXMgZnJvbSBoYXBwZW5pbmc6ICcgKyAnPG1ldGEgaHR0cC1lcXVpdj1cIlgtVUEtQ29tcGF0aWJsZVwiIGNvbnRlbnQ9XCJJRT1lZGdlXCIgLz4nKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBleHBlY3RlZEZlYXR1cmVzID0gW1xuICAgIC8vIHNoaW1zXG4gICAgQXJyYXkuaXNBcnJheSwgQXJyYXkucHJvdG90eXBlLmV2ZXJ5LCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCwgQXJyYXkucHJvdG90eXBlLmluZGV4T2YsIEFycmF5LnByb3RvdHlwZS5tYXAsIERhdGUubm93LCBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCwgT2JqZWN0LmtleXMsIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsIFN0cmluZy5wcm90b3R5cGUudHJpbSxcblxuICAgIC8vIHNoYW1zXG4gICAgT2JqZWN0LmNyZWF0ZSwgT2JqZWN0LmZyZWV6ZV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkRmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXhwZWN0ZWRGZWF0dXJlc1tpXSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdPbmUgb3IgbW9yZSBFUzUgc2hpbS9zaGFtcyBleHBlY3RlZCBieSBSZWFjdCBhcmUgbm90IGF2YWlsYWJsZTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmctcG9seWZpbGxzJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0OyJdfQ==\n},{\"./ReactCurrentOwner\":68,\"./ReactDOMTextComponent\":80,\"./ReactDefaultInjection\":83,\"./ReactInstanceHandles\":95,\"./ReactMount\":99,\"./ReactPerf\":105,\"./ReactReconciler\":110,\"./ReactUpdates\":120,\"./ReactVersion\":121,\"./findDOMNode\":145,\"./renderSubtreeIntoContainer\":160,\"_process\":30,\"fbjs/lib/ExecutionEnvironment\":4,\"fbjs/lib/warning\":29}],70:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMButton\n */\n\n'use strict';\n\nvar mouseListenerNames = {\n  onClick: true,\n  onDoubleClick: true,\n  onMouseDown: true,\n  onMouseMove: true,\n  onMouseUp: true,\n\n  onClickCapture: true,\n  onDoubleClickCapture: true,\n  onMouseDownCapture: true,\n  onMouseMoveCapture: true,\n  onMouseUpCapture: true\n};\n\n/**\n * Implements a <button> native component that does not receive mouse events\n * when `disabled` is set.\n */\nvar ReactDOMButton = {\n  getNativeProps: function (inst, props, context) {\n    if (!props.disabled) {\n      return props;\n    }\n\n    // Copy the props, except the mouse listeners\n    var nativeProps = {};\n    for (var key in props) {\n      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {\n        nativeProps[key] = props[key];\n      }\n    }\n\n    return nativeProps;\n  }\n};\n\nmodule.exports = ReactDOMButton;\n},{}],71:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMComponent\n * @typechecks static-only\n */\n\n/* global hasOwnProperty:true */\n\n'use strict';\n\nvar AutoFocusUtils = require('./AutoFocusUtils');\nvar CSSPropertyOperations = require('./CSSPropertyOperations');\nvar DOMProperty = require('./DOMProperty');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar EventConstants = require('./EventConstants');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');\nvar ReactDOMButton = require('./ReactDOMButton');\nvar ReactDOMInput = require('./ReactDOMInput');\nvar ReactDOMOption = require('./ReactDOMOption');\nvar ReactDOMSelect = require('./ReactDOMSelect');\nvar ReactDOMTextarea = require('./ReactDOMTextarea');\nvar ReactMount = require('./ReactMount');\nvar ReactMultiChild = require('./ReactMultiChild');\nvar ReactPerf = require('./ReactPerf');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\nvar assign = require('./Object.assign');\nvar canDefineProperty = require('./canDefineProperty');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar invariant = require('fbjs/lib/invariant');\nvar isEventSupported = require('./isEventSupported');\nvar keyOf = require('fbjs/lib/keyOf');\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\nvar validateDOMNesting = require('./validateDOMNesting');\nvar warning = require('fbjs/lib/warning');\n\nvar deleteListener = ReactBrowserEventEmitter.deleteListener;\nvar listenTo = ReactBrowserEventEmitter.listenTo;\nvar registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;\n\n// For quickly matching children type, to test if can be treated as content.\nvar CONTENT_TYPES = { 'string': true, 'number': true };\n\nvar CHILDREN = keyOf({ children: null });\nvar STYLE = keyOf({ style: null });\nvar HTML = keyOf({ __html: null });\n\nvar ELEMENT_NODE_TYPE = 1;\n\nfunction getDeclarationErrorAddendum(internalInstance) {\n  if (internalInstance) {\n    var owner = internalInstance._currentElement._owner || null;\n    if (owner) {\n      var name = owner.getName();\n      if (name) {\n        return ' This DOM node was rendered by `' + name + '`.';\n      }\n    }\n  }\n  return '';\n}\n\nvar legacyPropsDescriptor;\nif (process.env.NODE_ENV !== 'production') {\n  legacyPropsDescriptor = {\n    props: {\n      enumerable: false,\n      get: function () {\n        var component = this._reactInternalComponent;\n        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;\n        return component._currentElement.props;\n      }\n    }\n  };\n}\n\nfunction legacyGetDOMNode() {\n  if (process.env.NODE_ENV !== 'production') {\n    var component = this._reactInternalComponent;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n  return this;\n}\n\nfunction legacyIsMounted() {\n  var component = this._reactInternalComponent;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n  return !!component;\n}\n\nfunction legacySetStateEtc() {\n  if (process.env.NODE_ENV !== 'production') {\n    var component = this._reactInternalComponent;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n}\n\nfunction legacySetProps(partialProps, callback) {\n  var component = this._reactInternalComponent;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n  if (!component) {\n    return;\n  }\n  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallbackInternal(component, callback);\n  }\n}\n\nfunction legacyReplaceProps(partialProps, callback) {\n  var component = this._reactInternalComponent;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n  if (!component) {\n    return;\n  }\n  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallbackInternal(component, callback);\n  }\n}\n\nfunction friendlyStringify(obj) {\n  if (typeof obj === 'object') {\n    if (Array.isArray(obj)) {\n      return '[' + obj.map(friendlyStringify).join(', ') + ']';\n    } else {\n      var pairs = [];\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var keyEscaped = /^[a-z$_][\\w$_]*$/i.test(key) ? key : JSON.stringify(key);\n          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));\n        }\n      }\n      return '{' + pairs.join(', ') + '}';\n    }\n  } else if (typeof obj === 'string') {\n    return JSON.stringify(obj);\n  } else if (typeof obj === 'function') {\n    return '[function object]';\n  }\n  // Differs from JSON.stringify in that undefined becauses undefined and that\n  // inf and nan don't become null\n  return String(obj);\n}\n\nvar styleMutationWarning = {};\n\nfunction checkAndWarnForMutatedStyle(style1, style2, component) {\n  if (style1 == null || style2 == null) {\n    return;\n  }\n  if (shallowEqual(style1, style2)) {\n    return;\n  }\n\n  var componentName = component._tag;\n  var owner = component._currentElement._owner;\n  var ownerName;\n  if (owner) {\n    ownerName = owner.getName();\n  }\n\n  var hash = ownerName + '|' + componentName;\n\n  if (styleMutationWarning.hasOwnProperty(hash)) {\n    return;\n  }\n\n  styleMutationWarning[hash] = true;\n\n  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;\n}\n\n/**\n * @param {object} component\n * @param {?object} props\n */\nfunction assertValidProps(component, props) {\n  if (!props) {\n    return;\n  }\n  // Note the use of `==` which checks for null or undefined.\n  if (process.env.NODE_ENV !== 'production') {\n    if (voidElementTags[component._tag]) {\n      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;\n    }\n  }\n  if (props.dangerouslySetInnerHTML != null) {\n    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;\n    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;\n    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;\n  }\n  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \\'em\\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;\n}\n\nfunction enqueuePutListener(id, registrationName, listener, transaction) {\n  if (process.env.NODE_ENV !== 'production') {\n    // IE8 has no API for event capturing and the `onScroll` event doesn't\n    // bubble.\n    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\\'t support the `onScroll` event') : undefined;\n  }\n  var container = ReactMount.findReactContainerForID(id);\n  if (container) {\n    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;\n    listenTo(registrationName, doc);\n  }\n  transaction.getReactMountReady().enqueue(putListener, {\n    id: id,\n    registrationName: registrationName,\n    listener: listener\n  });\n}\n\nfunction putListener() {\n  var listenerToPut = this;\n  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);\n}\n\n// There are so many media events, it makes sense to just\n// maintain a list rather than create a `trapBubbledEvent` for each\nvar mediaEvents = {\n  topAbort: 'abort',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topLoadedData: 'loadeddata',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTimeUpdate: 'timeupdate',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting'\n};\n\nfunction trapBubbledEventsLocal() {\n  var inst = this;\n  // If a component renders to null or if another component fatals and causes\n  // the state of the tree to be corrupted, `node` here can be null.\n  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;\n  var node = ReactMount.getNode(inst._rootNodeID);\n  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;\n\n  switch (inst._tag) {\n    case 'iframe':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;\n    case 'video':\n    case 'audio':\n\n      inst._wrapperState.listeners = [];\n      // create listener for each media event\n      for (var event in mediaEvents) {\n        if (mediaEvents.hasOwnProperty(event)) {\n          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));\n        }\n      }\n\n      break;\n    case 'img':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;\n    case 'form':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];\n      break;\n  }\n}\n\nfunction mountReadyInputWrapper() {\n  ReactDOMInput.mountReadyWrapper(this);\n}\n\nfunction postUpdateSelectWrapper() {\n  ReactDOMSelect.postUpdateWrapper(this);\n}\n\n// For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special cased tags.\n\nvar omittedCloseTags = {\n  'area': true,\n  'base': true,\n  'br': true,\n  'col': true,\n  'embed': true,\n  'hr': true,\n  'img': true,\n  'input': true,\n  'keygen': true,\n  'link': true,\n  'meta': true,\n  'param': true,\n  'source': true,\n  'track': true,\n  'wbr': true\n};\n\n// NOTE: menuitem's close tag should be omitted, but that causes problems.\nvar newlineEatingTags = {\n  'listing': true,\n  'pre': true,\n  'textarea': true\n};\n\n// For HTML, certain tags cannot have children. This has the same purpose as\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.\n\nvar voidElementTags = assign({\n  'menuitem': true\n}, omittedCloseTags);\n\n// We accept any tag to be rendered but since this gets injected into arbitrary\n// HTML, we want to make sure that it's a safe tag.\n// http://www.w3.org/TR/REC-xml/#NT-Name\n\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\nvar validatedTagCache = {};\nvar hasOwnProperty = ({}).hasOwnProperty;\n\nfunction validateDangerousTag(tag) {\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {\n    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;\n    validatedTagCache[tag] = true;\n  }\n}\n\nfunction processChildContextDev(context, inst) {\n  // Pass down our tag name to child components for validation purposes\n  context = assign({}, context);\n  var info = context[validateDOMNesting.ancestorInfoContextKey];\n  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);\n  return context;\n}\n\nfunction isCustomComponent(tagName, props) {\n  return tagName.indexOf('-') >= 0 || props.is != null;\n}\n\n/**\n * Creates a new React class that is idempotent and capable of containing other\n * React components. It accepts event listeners and DOM properties that are\n * valid according to `DOMProperty`.\n *\n *  - Event listeners: `onClick`, `onMouseDown`, etc.\n *  - DOM properties: `className`, `name`, `title`, etc.\n *\n * The `style` property functions differently from the DOM API. It accepts an\n * object mapping of style properties to values.\n *\n * @constructor ReactDOMComponent\n * @extends ReactMultiChild\n */\nfunction ReactDOMComponent(tag) {\n  validateDangerousTag(tag);\n  this._tag = tag.toLowerCase();\n  this._renderedChildren = null;\n  this._previousStyle = null;\n  this._previousStyleCopy = null;\n  this._rootNodeID = null;\n  this._wrapperState = null;\n  this._topLevelWrapper = null;\n  this._nodeWithLegacyProperties = null;\n  if (process.env.NODE_ENV !== 'production') {\n    this._unprocessedContextDev = null;\n    this._processedContextDev = null;\n  }\n}\n\nReactDOMComponent.displayName = 'ReactDOMComponent';\n\nReactDOMComponent.Mixin = {\n\n  construct: function (element) {\n    this._currentElement = element;\n  },\n\n  /**\n   * Generates root tag markup then recurses. This method has side effects and\n   * is not idempotent.\n   *\n   * @internal\n   * @param {string} rootID The root DOM ID for this node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} context\n   * @return {string} The computed markup.\n   */\n  mountComponent: function (rootID, transaction, context) {\n    this._rootNodeID = rootID;\n\n    var props = this._currentElement.props;\n\n    switch (this._tag) {\n      case 'iframe':\n      case 'img':\n      case 'form':\n      case 'video':\n      case 'audio':\n        this._wrapperState = {\n          listeners: null\n        };\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);\n        break;\n      case 'button':\n        props = ReactDOMButton.getNativeProps(this, props, context);\n        break;\n      case 'input':\n        ReactDOMInput.mountWrapper(this, props, context);\n        props = ReactDOMInput.getNativeProps(this, props, context);\n        break;\n      case 'option':\n        ReactDOMOption.mountWrapper(this, props, context);\n        props = ReactDOMOption.getNativeProps(this, props, context);\n        break;\n      case 'select':\n        ReactDOMSelect.mountWrapper(this, props, context);\n        props = ReactDOMSelect.getNativeProps(this, props, context);\n        context = ReactDOMSelect.processChildContext(this, props, context);\n        break;\n      case 'textarea':\n        ReactDOMTextarea.mountWrapper(this, props, context);\n        props = ReactDOMTextarea.getNativeProps(this, props, context);\n        break;\n    }\n\n    assertValidProps(this, props);\n    if (process.env.NODE_ENV !== 'production') {\n      if (context[validateDOMNesting.ancestorInfoContextKey]) {\n        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._unprocessedContextDev = context;\n      this._processedContextDev = processChildContextDev(context, this);\n      context = this._processedContextDev;\n    }\n\n    var mountImage;\n    if (transaction.useCreateElement) {\n      var ownerDocument = context[ReactMount.ownerDocumentContextKey];\n      var el = ownerDocument.createElement(this._currentElement.type);\n      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);\n      // Populate node cache\n      ReactMount.getID(el);\n      this._updateDOMProperties({}, props, transaction, el);\n      this._createInitialChildren(transaction, props, context, el);\n      mountImage = el;\n    } else {\n      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);\n      var tagContent = this._createContentMarkup(transaction, props, context);\n      if (!tagContent && omittedCloseTags[this._tag]) {\n        mountImage = tagOpen + '/>';\n      } else {\n        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';\n      }\n    }\n\n    switch (this._tag) {\n      case 'input':\n        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);\n      // falls through\n      case 'button':\n      case 'select':\n      case 'textarea':\n        if (props.autoFocus) {\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);\n        }\n        break;\n    }\n\n    return mountImage;\n  },\n\n  /**\n   * Creates markup for the open tag and all attributes.\n   *\n   * This method has side effects because events get registered.\n   *\n   * Iterating over object properties is faster than iterating over arrays.\n   * @see http://jsperf.com/obj-vs-arr-iteration\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} props\n   * @return {string} Markup of opening tag.\n   */\n  _createOpenTagMarkupAndPutListeners: function (transaction, props) {\n    var ret = '<' + this._currentElement.type;\n\n    for (var propKey in props) {\n      if (!props.hasOwnProperty(propKey)) {\n        continue;\n      }\n      var propValue = props[propKey];\n      if (propValue == null) {\n        continue;\n      }\n      if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (propValue) {\n          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);\n        }\n      } else {\n        if (propKey === STYLE) {\n          if (propValue) {\n            if (process.env.NODE_ENV !== 'production') {\n              // See `_updateDOMProperties`. style block\n              this._previousStyle = propValue;\n            }\n            propValue = this._previousStyleCopy = assign({}, props.style);\n          }\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);\n        }\n        var markup = null;\n        if (this._tag != null && isCustomComponent(this._tag, props)) {\n          if (propKey !== CHILDREN) {\n            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);\n          }\n        } else {\n          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);\n        }\n        if (markup) {\n          ret += ' ' + markup;\n        }\n      }\n    }\n\n    // For static pages, no need to put React ID and checksum. Saves lots of\n    // bytes.\n    if (transaction.renderToStaticMarkup) {\n      return ret;\n    }\n\n    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);\n    return ret + ' ' + markupForID;\n  },\n\n  /**\n   * Creates markup for the content between the tags.\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} props\n   * @param {object} context\n   * @return {string} Content markup.\n   */\n  _createContentMarkup: function (transaction, props, context) {\n    var ret = '';\n\n    // Intentional use of != to avoid catching zero/false.\n    var innerHTML = props.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n      if (innerHTML.__html != null) {\n        ret = innerHTML.__html;\n      }\n    } else {\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;\n      var childrenToUse = contentToUse != null ? null : props.children;\n      if (contentToUse != null) {\n        // TODO: Validate that text is allowed as a child of this node\n        ret = escapeTextContentForBrowser(contentToUse);\n      } else if (childrenToUse != null) {\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);\n        ret = mountImages.join('');\n      }\n    }\n    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\\n') {\n      // text/html ignores the first character in these tags if it's a newline\n      // Prefer to break application/xml over text/html (for now) by adding\n      // a newline specifically to get eaten by the parser. (Alternately for\n      // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n      // \\r is normalized out by HTMLTextAreaElement#value.)\n      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n      // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n      return '\\n' + ret;\n    } else {\n      return ret;\n    }\n  },\n\n  _createInitialChildren: function (transaction, props, context, el) {\n    // Intentional use of != to avoid catching zero/false.\n    var innerHTML = props.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n      if (innerHTML.__html != null) {\n        setInnerHTML(el, innerHTML.__html);\n      }\n    } else {\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;\n      var childrenToUse = contentToUse != null ? null : props.children;\n      if (contentToUse != null) {\n        // TODO: Validate that text is allowed as a child of this node\n        setTextContent(el, contentToUse);\n      } else if (childrenToUse != null) {\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);\n        for (var i = 0; i < mountImages.length; i++) {\n          el.appendChild(mountImages[i]);\n        }\n      }\n    }\n  },\n\n  /**\n   * Receives a next element and updates the component.\n   *\n   * @internal\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} context\n   */\n  receiveComponent: function (nextElement, transaction, context) {\n    var prevElement = this._currentElement;\n    this._currentElement = nextElement;\n    this.updateComponent(transaction, prevElement, nextElement, context);\n  },\n\n  /**\n   * Updates a native DOM component after it has already been allocated and\n   * attached to the DOM. Reconciles the root DOM node, then recurses.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevElement\n   * @param {ReactElement} nextElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevElement, nextElement, context) {\n    var lastProps = prevElement.props;\n    var nextProps = this._currentElement.props;\n\n    switch (this._tag) {\n      case 'button':\n        lastProps = ReactDOMButton.getNativeProps(this, lastProps);\n        nextProps = ReactDOMButton.getNativeProps(this, nextProps);\n        break;\n      case 'input':\n        ReactDOMInput.updateWrapper(this);\n        lastProps = ReactDOMInput.getNativeProps(this, lastProps);\n        nextProps = ReactDOMInput.getNativeProps(this, nextProps);\n        break;\n      case 'option':\n        lastProps = ReactDOMOption.getNativeProps(this, lastProps);\n        nextProps = ReactDOMOption.getNativeProps(this, nextProps);\n        break;\n      case 'select':\n        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);\n        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);\n        break;\n      case 'textarea':\n        ReactDOMTextarea.updateWrapper(this);\n        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);\n        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);\n        break;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // If the context is reference-equal to the old one, pass down the same\n      // processed object so the update bailout in ReactReconciler behaves\n      // correctly (and identically in dev and prod). See #5005.\n      if (this._unprocessedContextDev !== context) {\n        this._unprocessedContextDev = context;\n        this._processedContextDev = processChildContextDev(context, this);\n      }\n      context = this._processedContextDev;\n    }\n\n    assertValidProps(this, nextProps);\n    this._updateDOMProperties(lastProps, nextProps, transaction, null);\n    this._updateDOMChildren(lastProps, nextProps, transaction, context);\n\n    if (!canDefineProperty && this._nodeWithLegacyProperties) {\n      this._nodeWithLegacyProperties.props = nextProps;\n    }\n\n    if (this._tag === 'select') {\n      // <select> value update needs to occur after <option> children\n      // reconciliation\n      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);\n    }\n  },\n\n  /**\n   * Reconciles the properties by detecting differences in property values and\n   * updating the DOM as necessary. This function is probably the single most\n   * critical path for performance optimization.\n   *\n   * TODO: Benchmark whether checking for changed values in memory actually\n   *       improves performance (especially statically positioned elements).\n   * TODO: Benchmark the effects of putting this at the top since 99% of props\n   *       do not change for a given reconciliation.\n   * TODO: Benchmark areas that can be improved with caching.\n   *\n   * @private\n   * @param {object} lastProps\n   * @param {object} nextProps\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?DOMElement} node\n   */\n  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {\n    var propKey;\n    var styleName;\n    var styleUpdates;\n    for (propKey in lastProps) {\n      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        var lastStyle = this._previousStyleCopy;\n        for (styleName in lastStyle) {\n          if (lastStyle.hasOwnProperty(styleName)) {\n            styleUpdates = styleUpdates || {};\n            styleUpdates[styleName] = '';\n          }\n        }\n        this._previousStyleCopy = null;\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (lastProps[propKey]) {\n          // Only call deleteListener if there was a listener previously or\n          // else willDeleteListener gets called when there wasn't actually a\n          // listener (e.g., onClick={null})\n          deleteListener(this._rootNodeID, propKey);\n        }\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {\n        if (!node) {\n          node = ReactMount.getNode(this._rootNodeID);\n        }\n        DOMPropertyOperations.deleteValueForProperty(node, propKey);\n      }\n    }\n    for (propKey in nextProps) {\n      var nextProp = nextProps[propKey];\n      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        if (nextProp) {\n          if (process.env.NODE_ENV !== 'production') {\n            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);\n            this._previousStyle = nextProp;\n          }\n          nextProp = this._previousStyleCopy = assign({}, nextProp);\n        } else {\n          this._previousStyleCopy = null;\n        }\n        if (lastProp) {\n          // Unset styles on `lastProp` but not on `nextProp`.\n          for (styleName in lastProp) {\n            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = '';\n            }\n          }\n          // Update styles that changed since `lastProp`.\n          for (styleName in nextProp) {\n            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = nextProp[styleName];\n            }\n          }\n        } else {\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.\n          styleUpdates = nextProp;\n        }\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (nextProp) {\n          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);\n        } else if (lastProp) {\n          deleteListener(this._rootNodeID, propKey);\n        }\n      } else if (isCustomComponent(this._tag, nextProps)) {\n        if (!node) {\n          node = ReactMount.getNode(this._rootNodeID);\n        }\n        if (propKey === CHILDREN) {\n          nextProp = null;\n        }\n        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {\n        if (!node) {\n          node = ReactMount.getNode(this._rootNodeID);\n        }\n        // If we're updating to null or undefined, we should remove the property\n        // from the DOM node instead of inadvertantly setting to a string. This\n        // brings us in line with the same behavior we have on initial render.\n        if (nextProp != null) {\n          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);\n        } else {\n          DOMPropertyOperations.deleteValueForProperty(node, propKey);\n        }\n      }\n    }\n    if (styleUpdates) {\n      if (!node) {\n        node = ReactMount.getNode(this._rootNodeID);\n      }\n      CSSPropertyOperations.setValueForStyles(node, styleUpdates);\n    }\n  },\n\n  /**\n   * Reconciles the children with the various properties that affect the\n   * children content.\n   *\n   * @param {object} lastProps\n   * @param {object} nextProps\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   */\n  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {\n    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;\n    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;\n\n    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;\n    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;\n\n    // Note the use of `!=` which checks for null or undefined.\n    var lastChildren = lastContent != null ? null : lastProps.children;\n    var nextChildren = nextContent != null ? null : nextProps.children;\n\n    // If we're switching from children to content/html or vice versa, remove\n    // the old content\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;\n    if (lastChildren != null && nextChildren == null) {\n      this.updateChildren(null, transaction, context);\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {\n      this.updateTextContent('');\n    }\n\n    if (nextContent != null) {\n      if (lastContent !== nextContent) {\n        this.updateTextContent('' + nextContent);\n      }\n    } else if (nextHtml != null) {\n      if (lastHtml !== nextHtml) {\n        this.updateMarkup('' + nextHtml);\n      }\n    } else if (nextChildren != null) {\n      this.updateChildren(nextChildren, transaction, context);\n    }\n  },\n\n  /**\n   * Destroys all event registrations for this instance. Does not remove from\n   * the DOM. That must be done by the parent.\n   *\n   * @internal\n   */\n  unmountComponent: function () {\n    switch (this._tag) {\n      case 'iframe':\n      case 'img':\n      case 'form':\n      case 'video':\n      case 'audio':\n        var listeners = this._wrapperState.listeners;\n        if (listeners) {\n          for (var i = 0; i < listeners.length; i++) {\n            listeners[i].remove();\n          }\n        }\n        break;\n      case 'input':\n        ReactDOMInput.unmountWrapper(this);\n        break;\n      case 'html':\n      case 'head':\n      case 'body':\n        /**\n         * Components like <html> <head> and <body> can't be removed or added\n         * easily in a cross-browser way, however it's valuable to be able to\n         * take advantage of React's reconciliation for styling and <title>\n         * management. So we just document it and throw in dangerous cases.\n         */\n        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;\n        break;\n    }\n\n    this.unmountChildren();\n    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n    this._rootNodeID = null;\n    this._wrapperState = null;\n    if (this._nodeWithLegacyProperties) {\n      var node = this._nodeWithLegacyProperties;\n      node._reactInternalComponent = null;\n      this._nodeWithLegacyProperties = null;\n    }\n  },\n\n  getPublicInstance: function () {\n    if (!this._nodeWithLegacyProperties) {\n      var node = ReactMount.getNode(this._rootNodeID);\n\n      node._reactInternalComponent = this;\n      node.getDOMNode = legacyGetDOMNode;\n      node.isMounted = legacyIsMounted;\n      node.setState = legacySetStateEtc;\n      node.replaceState = legacySetStateEtc;\n      node.forceUpdate = legacySetStateEtc;\n      node.setProps = legacySetProps;\n      node.replaceProps = legacyReplaceProps;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (canDefineProperty) {\n          Object.defineProperties(node, legacyPropsDescriptor);\n        } else {\n          // updateComponent will update this property on subsequent renders\n          node.props = this._currentElement.props;\n        }\n      } else {\n        // updateComponent will update this property on subsequent renders\n        node.props = this._currentElement.props;\n      }\n\n      this._nodeWithLegacyProperties = node;\n    }\n    return this._nodeWithLegacyProperties;\n  }\n\n};\n\nReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {\n  mountComponent: 'mountComponent',\n  updateComponent: 'updateComponent'\n});\n\nassign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);\n\nmodule.exports = ReactDOMComponent;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./AutoFocusUtils\":33,\"./CSSPropertyOperations\":36,\"./DOMProperty\":41,\"./DOMPropertyOperations\":42,\"./EventConstants\":46,\"./Object.assign\":54,\"./ReactBrowserEventEmitter\":58,\"./ReactComponentBrowserEnvironment\":65,\"./ReactDOMButton\":70,\"./ReactDOMInput\":75,\"./ReactDOMOption\":76,\"./ReactDOMSelect\":77,\"./ReactDOMTextarea\":81,\"./ReactMount\":99,\"./ReactMultiChild\":100,\"./ReactPerf\":105,\"./ReactUpdateQueue\":119,\"./canDefineProperty\":141,\"./escapeTextContentForBrowser\":144,\"./isEventSupported\":156,\"./setInnerHTML\":161,\"./setTextContent\":162,\"./validateDOMNesting\":165,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/keyOf\":22,\"fbjs/lib/shallowEqual\":27,\"fbjs/lib/warning\":29}],72:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMFactories\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactElementValidator = require('./ReactElementValidator');\n\nvar mapObject = require('fbjs/lib/mapObject');\n\n/**\n * Create a factory that creates HTML tag elements.\n *\n * @param {string} tag Tag name (e.g. `div`).\n * @private\n */\nfunction createDOMFactory(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    return ReactElementValidator.createFactory(tag);\n  }\n  return ReactElement.createFactory(tag);\n}\n\n/**\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.\n * This is also accessible via `React.DOM`.\n *\n * @public\n */\nvar ReactDOMFactories = mapObject({\n  a: 'a',\n  abbr: 'abbr',\n  address: 'address',\n  area: 'area',\n  article: 'article',\n  aside: 'aside',\n  audio: 'audio',\n  b: 'b',\n  base: 'base',\n  bdi: 'bdi',\n  bdo: 'bdo',\n  big: 'big',\n  blockquote: 'blockquote',\n  body: 'body',\n  br: 'br',\n  button: 'button',\n  canvas: 'canvas',\n  caption: 'caption',\n  cite: 'cite',\n  code: 'code',\n  col: 'col',\n  colgroup: 'colgroup',\n  data: 'data',\n  datalist: 'datalist',\n  dd: 'dd',\n  del: 'del',\n  details: 'details',\n  dfn: 'dfn',\n  dialog: 'dialog',\n  div: 'div',\n  dl: 'dl',\n  dt: 'dt',\n  em: 'em',\n  embed: 'embed',\n  fieldset: 'fieldset',\n  figcaption: 'figcaption',\n  figure: 'figure',\n  footer: 'footer',\n  form: 'form',\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  head: 'head',\n  header: 'header',\n  hgroup: 'hgroup',\n  hr: 'hr',\n  html: 'html',\n  i: 'i',\n  iframe: 'iframe',\n  img: 'img',\n  input: 'input',\n  ins: 'ins',\n  kbd: 'kbd',\n  keygen: 'keygen',\n  label: 'label',\n  legend: 'legend',\n  li: 'li',\n  link: 'link',\n  main: 'main',\n  map: 'map',\n  mark: 'mark',\n  menu: 'menu',\n  menuitem: 'menuitem',\n  meta: 'meta',\n  meter: 'meter',\n  nav: 'nav',\n  noscript: 'noscript',\n  object: 'object',\n  ol: 'ol',\n  optgroup: 'optgroup',\n  option: 'option',\n  output: 'output',\n  p: 'p',\n  param: 'param',\n  picture: 'picture',\n  pre: 'pre',\n  progress: 'progress',\n  q: 'q',\n  rp: 'rp',\n  rt: 'rt',\n  ruby: 'ruby',\n  s: 's',\n  samp: 'samp',\n  script: 'script',\n  section: 'section',\n  select: 'select',\n  small: 'small',\n  source: 'source',\n  span: 'span',\n  strong: 'strong',\n  style: 'style',\n  sub: 'sub',\n  summary: 'summary',\n  sup: 'sup',\n  table: 'table',\n  tbody: 'tbody',\n  td: 'td',\n  textarea: 'textarea',\n  tfoot: 'tfoot',\n  th: 'th',\n  thead: 'thead',\n  time: 'time',\n  title: 'title',\n  tr: 'tr',\n  track: 'track',\n  u: 'u',\n  ul: 'ul',\n  'var': 'var',\n  video: 'video',\n  wbr: 'wbr',\n\n  // SVG\n  circle: 'circle',\n  clipPath: 'clipPath',\n  defs: 'defs',\n  ellipse: 'ellipse',\n  g: 'g',\n  image: 'image',\n  line: 'line',\n  linearGradient: 'linearGradient',\n  mask: 'mask',\n  path: 'path',\n  pattern: 'pattern',\n  polygon: 'polygon',\n  polyline: 'polyline',\n  radialGradient: 'radialGradient',\n  rect: 'rect',\n  stop: 'stop',\n  svg: 'svg',\n  text: 'text',\n  tspan: 'tspan'\n\n}, createDOMFactory);\n\nmodule.exports = ReactDOMFactories;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01GYWN0b3JpZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NRmFjdG9yaWVzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3InKTtcblxudmFyIG1hcE9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL21hcE9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGFnIG5hbWUgKGUuZy4gYGRpdmApLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRE9NRmFjdG9yeSh0YWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3RvcnkodGFnKTtcbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkodGFnKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwcGluZyBmcm9tIHN1cHBvcnRlZCBIVE1MIHRhZ3MgdG8gYFJlYWN0RE9NQ29tcG9uZW50YCBjbGFzc2VzLlxuICogVGhpcyBpcyBhbHNvIGFjY2Vzc2libGUgdmlhIGBSZWFjdC5ET01gLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFJlYWN0RE9NRmFjdG9yaWVzID0gbWFwT2JqZWN0KHtcbiAgYTogJ2EnLFxuICBhYmJyOiAnYWJicicsXG4gIGFkZHJlc3M6ICdhZGRyZXNzJyxcbiAgYXJlYTogJ2FyZWEnLFxuICBhcnRpY2xlOiAnYXJ0aWNsZScsXG4gIGFzaWRlOiAnYXNpZGUnLFxuICBhdWRpbzogJ2F1ZGlvJyxcbiAgYjogJ2InLFxuICBiYXNlOiAnYmFzZScsXG4gIGJkaTogJ2JkaScsXG4gIGJkbzogJ2JkbycsXG4gIGJpZzogJ2JpZycsXG4gIGJsb2NrcXVvdGU6ICdibG9ja3F1b3RlJyxcbiAgYm9keTogJ2JvZHknLFxuICBicjogJ2JyJyxcbiAgYnV0dG9uOiAnYnV0dG9uJyxcbiAgY2FudmFzOiAnY2FudmFzJyxcbiAgY2FwdGlvbjogJ2NhcHRpb24nLFxuICBjaXRlOiAnY2l0ZScsXG4gIGNvZGU6ICdjb2RlJyxcbiAgY29sOiAnY29sJyxcbiAgY29sZ3JvdXA6ICdjb2xncm91cCcsXG4gIGRhdGE6ICdkYXRhJyxcbiAgZGF0YWxpc3Q6ICdkYXRhbGlzdCcsXG4gIGRkOiAnZGQnLFxuICBkZWw6ICdkZWwnLFxuICBkZXRhaWxzOiAnZGV0YWlscycsXG4gIGRmbjogJ2RmbicsXG4gIGRpYWxvZzogJ2RpYWxvZycsXG4gIGRpdjogJ2RpdicsXG4gIGRsOiAnZGwnLFxuICBkdDogJ2R0JyxcbiAgZW06ICdlbScsXG4gIGVtYmVkOiAnZW1iZWQnLFxuICBmaWVsZHNldDogJ2ZpZWxkc2V0JyxcbiAgZmlnY2FwdGlvbjogJ2ZpZ2NhcHRpb24nLFxuICBmaWd1cmU6ICdmaWd1cmUnLFxuICBmb290ZXI6ICdmb290ZXInLFxuICBmb3JtOiAnZm9ybScsXG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIGhlYWQ6ICdoZWFkJyxcbiAgaGVhZGVyOiAnaGVhZGVyJyxcbiAgaGdyb3VwOiAnaGdyb3VwJyxcbiAgaHI6ICdocicsXG4gIGh0bWw6ICdodG1sJyxcbiAgaTogJ2knLFxuICBpZnJhbWU6ICdpZnJhbWUnLFxuICBpbWc6ICdpbWcnLFxuICBpbnB1dDogJ2lucHV0JyxcbiAgaW5zOiAnaW5zJyxcbiAga2JkOiAna2JkJyxcbiAga2V5Z2VuOiAna2V5Z2VuJyxcbiAgbGFiZWw6ICdsYWJlbCcsXG4gIGxlZ2VuZDogJ2xlZ2VuZCcsXG4gIGxpOiAnbGknLFxuICBsaW5rOiAnbGluaycsXG4gIG1haW46ICdtYWluJyxcbiAgbWFwOiAnbWFwJyxcbiAgbWFyazogJ21hcmsnLFxuICBtZW51OiAnbWVudScsXG4gIG1lbnVpdGVtOiAnbWVudWl0ZW0nLFxuICBtZXRhOiAnbWV0YScsXG4gIG1ldGVyOiAnbWV0ZXInLFxuICBuYXY6ICduYXYnLFxuICBub3NjcmlwdDogJ25vc2NyaXB0JyxcbiAgb2JqZWN0OiAnb2JqZWN0JyxcbiAgb2w6ICdvbCcsXG4gIG9wdGdyb3VwOiAnb3B0Z3JvdXAnLFxuICBvcHRpb246ICdvcHRpb24nLFxuICBvdXRwdXQ6ICdvdXRwdXQnLFxuICBwOiAncCcsXG4gIHBhcmFtOiAncGFyYW0nLFxuICBwaWN0dXJlOiAncGljdHVyZScsXG4gIHByZTogJ3ByZScsXG4gIHByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICBxOiAncScsXG4gIHJwOiAncnAnLFxuICBydDogJ3J0JyxcbiAgcnVieTogJ3J1YnknLFxuICBzOiAncycsXG4gIHNhbXA6ICdzYW1wJyxcbiAgc2NyaXB0OiAnc2NyaXB0JyxcbiAgc2VjdGlvbjogJ3NlY3Rpb24nLFxuICBzZWxlY3Q6ICdzZWxlY3QnLFxuICBzbWFsbDogJ3NtYWxsJyxcbiAgc291cmNlOiAnc291cmNlJyxcbiAgc3BhbjogJ3NwYW4nLFxuICBzdHJvbmc6ICdzdHJvbmcnLFxuICBzdHlsZTogJ3N0eWxlJyxcbiAgc3ViOiAnc3ViJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICBzdXA6ICdzdXAnLFxuICB0YWJsZTogJ3RhYmxlJyxcbiAgdGJvZHk6ICd0Ym9keScsXG4gIHRkOiAndGQnLFxuICB0ZXh0YXJlYTogJ3RleHRhcmVhJyxcbiAgdGZvb3Q6ICd0Zm9vdCcsXG4gIHRoOiAndGgnLFxuICB0aGVhZDogJ3RoZWFkJyxcbiAgdGltZTogJ3RpbWUnLFxuICB0aXRsZTogJ3RpdGxlJyxcbiAgdHI6ICd0cicsXG4gIHRyYWNrOiAndHJhY2snLFxuICB1OiAndScsXG4gIHVsOiAndWwnLFxuICAndmFyJzogJ3ZhcicsXG4gIHZpZGVvOiAndmlkZW8nLFxuICB3YnI6ICd3YnInLFxuXG4gIC8vIFNWR1xuICBjaXJjbGU6ICdjaXJjbGUnLFxuICBjbGlwUGF0aDogJ2NsaXBQYXRoJyxcbiAgZGVmczogJ2RlZnMnLFxuICBlbGxpcHNlOiAnZWxsaXBzZScsXG4gIGc6ICdnJyxcbiAgaW1hZ2U6ICdpbWFnZScsXG4gIGxpbmU6ICdsaW5lJyxcbiAgbGluZWFyR3JhZGllbnQ6ICdsaW5lYXJHcmFkaWVudCcsXG4gIG1hc2s6ICdtYXNrJyxcbiAgcGF0aDogJ3BhdGgnLFxuICBwYXR0ZXJuOiAncGF0dGVybicsXG4gIHBvbHlnb246ICdwb2x5Z29uJyxcbiAgcG9seWxpbmU6ICdwb2x5bGluZScsXG4gIHJhZGlhbEdyYWRpZW50OiAncmFkaWFsR3JhZGllbnQnLFxuICByZWN0OiAncmVjdCcsXG4gIHN0b3A6ICdzdG9wJyxcbiAgc3ZnOiAnc3ZnJyxcbiAgdGV4dDogJ3RleHQnLFxuICB0c3BhbjogJ3RzcGFuJ1xuXG59LCBjcmVhdGVET01GYWN0b3J5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZhY3RvcmllczsiXX0=\n},{\"./ReactElement\":86,\"./ReactElementValidator\":87,\"_process\":30,\"fbjs/lib/mapObject\":23}],73:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMFeatureFlags\n */\n\n'use strict';\n\nvar ReactDOMFeatureFlags = {\n  useCreateElement: false\n};\n\nmodule.exports = ReactDOMFeatureFlags;\n},{}],74:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Errors for properties that should not be updated with `updatePropertyByID()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function (updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\n\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\n\nmodule.exports = ReactDOMIDOperations;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01JRE9wZXJhdGlvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JRE9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01DaGlsZHJlbk9wZXJhdGlvbnMnKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5T3BlcmF0aW9ucycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRXJyb3JzIGZvciBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIG5vdCBiZSB1cGRhdGVkIHdpdGggYHVwZGF0ZVByb3BlcnR5QnlJRCgpYC5cbiAqXG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIElOVkFMSURfUFJPUEVSVFlfRVJST1JTID0ge1xuICBkYW5nZXJvdXNseVNldElubmVySFRNTDogJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgbXVzdCBiZSBzZXQgdXNpbmcgYHVwZGF0ZUlubmVySFRNTEJ5SUQoKWAuJyxcbiAgc3R5bGU6ICdgc3R5bGVgIG11c3QgYmUgc2V0IHVzaW5nIGB1cGRhdGVTdHlsZXNCeUlEKClgLidcbn07XG5cbi8qKlxuICogT3BlcmF0aW9ucyB1c2VkIHRvIHByb2Nlc3MgdXBkYXRlcyB0byBET00gbm9kZXMuXG4gKi9cbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBub2RlIHdpdGggbmV3IHByb3BlcnR5IHZhbHVlcy4gVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHRvXG4gICAqIHVwZGF0ZSBET00gcHJvcGVydGllcyBpbiBgRE9NUHJvcGVydHlgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIHZhbGlkIHByb3BlcnR5IG5hbWUsIHNlZSBgRE9NUHJvcGVydHlgLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIE5ldyB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlUHJvcGVydHlCeUlEOiBmdW5jdGlvbiAoaWQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgICEhSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlUHJvcGVydHlCeUlEKC4uLik6ICVzJywgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlNbbmFtZV0pIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIElmIHdlJ3JlIHVwZGF0aW5nIHRvIG51bGwgb3IgdW5kZWZpbmVkLCB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBwcm9wZXJ0eVxuICAgIC8vIGZyb20gdGhlIERPTSBub2RlIGluc3RlYWQgb2YgaW5hZHZlcnRhbnRseSBzZXR0aW5nIHRvIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gYnJpbmdzIHVzIGluIGxpbmUgd2l0aCB0aGUgc2FtZSBiZWhhdmlvciB3ZSBoYXZlIG9uIGluaXRpYWwgcmVuZGVyLlxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYSBET00gbm9kZSB0aGF0IGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQgd2l0aCBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBjaGlsZCB0byBiZSByZXBsYWNlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBEYW5nZXJvdXMgbWFya3VwIHRvIGluamVjdCBpbiBwbGFjZSBvZiBjaGlsZC5cbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0Rhbmdlci5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cH1cbiAgICovXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogZnVuY3Rpb24gKGlkLCBtYXJrdXApIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKG5vZGUsIG1hcmt1cCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8b2JqZWN0Pn0gdXBkYXRlcyBMaXN0IG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBtYXJrdXAgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IGZ1bmN0aW9uICh1cGRhdGVzLCBtYXJrdXApIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZXNbaV0ucGFyZW50Tm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZSh1cGRhdGVzW2ldLnBhcmVudElEKTtcbiAgICB9XG4gICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnByb2Nlc3NVcGRhdGVzKHVwZGF0ZXMsIG1hcmt1cCk7XG4gIH1cbn07XG5cblJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhSZWFjdERPTUlET3BlcmF0aW9ucywgJ1JlYWN0RE9NSURPcGVyYXRpb25zJywge1xuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6ICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQnLFxuICBkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUlET3BlcmF0aW9uczsiXX0=\n},{\"./DOMChildrenOperations\":40,\"./DOMPropertyOperations\":42,\"./ReactMount\":99,\"./ReactPerf\":105,\"_process\":30,\"fbjs/lib/invariant\":18}],75:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getNativeProps: function (inst, props, context) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n\n    var nativeProps = assign({}, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  mountReadyWrapper: function (inst) {\n    // Can't be in mountWrapper or else server rendering leaks.\n    instancesByReactID[inst._rootNodeID] = inst;\n  },\n\n  unmountWrapper: function (inst) {\n    delete instancesByReactID[inst._rootNodeID];\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactMount.getNode(this._rootNodeID);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React with non-React.\n      var otherID = ReactMount.getID(otherNode);\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./LinkedValueUtils\":53,\"./Object.assign\":54,\"./ReactDOMIDOperations\":74,\"./ReactMount\":99,\"./ReactUpdates\":120,\"_process\":30,\"fbjs/lib/invariant\":18}],76:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n\n'use strict';\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar assign = require('./Object.assign');\nvar warning = require('fbjs/lib/warning');\n\nvar valueContextKey = ReactDOMSelect.valueContextKey;\n\n/**\n * Implements an <option> native component that warns when `selected` is set.\n */\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, context) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;\n    }\n\n    // Look up whether this option is 'selected' via context\n    var selectValue = context[valueContextKey];\n\n    // If context key is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n    var selected = null;\n    if (selectValue != null) {\n      selected = false;\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === '' + props.value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === '' + props.value;\n      }\n    }\n\n    inst._wrapperState = { selected: selected };\n  },\n\n  getNativeProps: function (inst, props, context) {\n    var nativeProps = assign({ selected: undefined, children: undefined }, props);\n\n    // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n    if (inst._wrapperState.selected != null) {\n      nativeProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = '';\n\n    // Flatten children and warn if they aren't strings or numbers;\n    // invalid types are ignored.\n    ReactChildren.forEach(props.children, function (child) {\n      if (child == null) {\n        return;\n      }\n      if (typeof child === 'string' || typeof child === 'number') {\n        content += child;\n      } else {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;\n      }\n    });\n\n    if (content) {\n      nativeProps.children = content;\n    }\n\n    return nativeProps;\n  }\n\n};\n\nmodule.exports = ReactDOMOption;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01PcHRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTU9wdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRyZW4nKTtcbnZhciBSZWFjdERPTVNlbGVjdCA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3QnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciB2YWx1ZUNvbnRleHRLZXkgPSBSZWFjdERPTVNlbGVjdC52YWx1ZUNvbnRleHRLZXk7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgd2FybnMgd2hlbiBgc2VsZWN0ZWRgIGlzIHNldC5cbiAqL1xudmFyIFJlYWN0RE9NT3B0aW9uID0ge1xuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcywgY29udGV4dCkge1xuICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBgc2VsZWN0ZWRgIGluIDxvcHRpb24+LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5zZWxlY3RlZCA9PSBudWxsLCAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2YgJyArICdzZXR0aW5nIGBzZWxlY3RlZGAgb24gPG9wdGlvbj4uJykgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gTG9vayB1cCB3aGV0aGVyIHRoaXMgb3B0aW9uIGlzICdzZWxlY3RlZCcgdmlhIGNvbnRleHRcbiAgICB2YXIgc2VsZWN0VmFsdWUgPSBjb250ZXh0W3ZhbHVlQ29udGV4dEtleV07XG5cbiAgICAvLyBJZiBjb250ZXh0IGtleSBpcyBudWxsIChlLmcuLCBubyBzcGVjaWZpZWQgdmFsdWUgb3IgYWZ0ZXIgaW5pdGlhbCBtb3VudClcbiAgICAvLyBvciBtaXNzaW5nIChlLmcuLCBmb3IgPGRhdGFsaXN0PiksIHdlIGRvbid0IGNoYW5nZSBwcm9wcy5zZWxlY3RlZFxuICAgIHZhciBzZWxlY3RlZCA9IG51bGw7XG4gICAgaWYgKHNlbGVjdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgLy8gbXVsdGlwbGVcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICgnJyArIHNlbGVjdFZhbHVlW2ldID09PSAnJyArIHByb3BzLnZhbHVlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkID0gJycgKyBzZWxlY3RWYWx1ZSA9PT0gJycgKyBwcm9wcy52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7IHNlbGVjdGVkOiBzZWxlY3RlZCB9O1xuICB9LFxuXG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBhc3NpZ24oeyBzZWxlY3RlZDogdW5kZWZpbmVkLCBjaGlsZHJlbjogdW5kZWZpbmVkIH0sIHByb3BzKTtcblxuICAgIC8vIFJlYWQgc3RhdGUgb25seSBmcm9tIGluaXRpYWwgbW91bnQgYmVjYXVzZSA8c2VsZWN0PiB1cGRhdGVzIHZhbHVlXG4gICAgLy8gbWFudWFsbHk7IHdlIG5lZWQgdGhlIGluaXRpYWwgc3RhdGUgb25seSBmb3Igc2VydmVyIHJlbmRlcmluZ1xuICAgIGlmIChpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgICAgbmF0aXZlUHJvcHMuc2VsZWN0ZWQgPSBpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnQgPSAnJztcblxuICAgIC8vIEZsYXR0ZW4gY2hpbGRyZW4gYW5kIHdhcm4gaWYgdGhleSBhcmVuJ3Qgc3RyaW5ncyBvciBudW1iZXJzO1xuICAgIC8vIGludmFsaWQgdHlwZXMgYXJlIGlnbm9yZWQuXG4gICAgUmVhY3RDaGlsZHJlbi5mb3JFYWNoKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29udGVudCArPSBjaGlsZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnT25seSBzdHJpbmdzIGFuZCBudW1iZXJzIGFyZSBzdXBwb3J0ZWQgYXMgPG9wdGlvbj4gY2hpbGRyZW4uJykgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgbmF0aXZlUHJvcHMuY2hpbGRyZW4gPSBjb250ZW50O1xuICAgIH1cblxuICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NT3B0aW9uOyJdfQ==\n},{\"./Object.assign\":54,\"./ReactChildren\":62,\"./ReactDOMSelect\":77,\"_process\":30,\"fbjs/lib/warning\":29}],77:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar warning = require('fbjs/lib/warning');\n\nvar valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);\n\nfunction updateOptionsIfPendingUpdateAndMounted() {\n  if (this._rootNodeID && this._wrapperState.pendingUpdate) {\n    this._wrapperState.pendingUpdate = false;\n\n    var props = this._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n\n    if (value != null) {\n      updateOptions(this, Boolean(props.multiple), value);\n    }\n  }\n}\n\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nvar valuePropNames = ['value', 'defaultValue'];\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction checkSelectPropTypes(inst, props) {\n  var owner = inst._currentElement._owner;\n  LinkedValueUtils.checkPropTypes('select', props, owner);\n\n  for (var i = 0; i < valuePropNames.length; i++) {\n    var propName = valuePropNames[i];\n    if (props[propName] == null) {\n      continue;\n    }\n    if (props.multiple) {\n      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;\n    } else {\n      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;\n    }\n  }\n}\n\n/**\n * @param {ReactDOMComponent} inst\n * @param {boolean} multiple\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).\n * @private\n */\nfunction updateOptions(inst, multiple, propValue) {\n  var selectedValue, i;\n  var options = ReactMount.getNode(inst._rootNodeID).options;\n\n  if (multiple) {\n    selectedValue = {};\n    for (i = 0; i < propValue.length; i++) {\n      selectedValue['' + propValue[i]] = true;\n    }\n    for (i = 0; i < options.length; i++) {\n      var selected = selectedValue.hasOwnProperty(options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    selectedValue = '' + propValue;\n    for (i = 0; i < options.length; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        return;\n      }\n    }\n    if (options.length) {\n      options[0].selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = {\n  valueContextKey: valueContextKey,\n\n  getNativeProps: function (inst, props, context) {\n    return assign({}, props, {\n      onChange: inst._wrapperState.onChange,\n      value: undefined\n    });\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkSelectPropTypes(inst, props);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    inst._wrapperState = {\n      pendingUpdate: false,\n      initialValue: value != null ? value : props.defaultValue,\n      onChange: _handleChange.bind(inst),\n      wasMultiple: Boolean(props.multiple)\n    };\n  },\n\n  processChildContext: function (inst, props, context) {\n    // Pass down initial value so initial generated markup has correct\n    // `selected` attributes\n    var childContext = assign({}, context);\n    childContext[valueContextKey] = inst._wrapperState.initialValue;\n    return childContext;\n  },\n\n  postUpdateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // After the initial mount, we control selected-ness manually so don't pass\n    // the context value down\n    inst._wrapperState.initialValue = undefined;\n\n    var wasMultiple = inst._wrapperState.wasMultiple;\n    inst._wrapperState.wasMultiple = Boolean(props.multiple);\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      inst._wrapperState.pendingUpdate = false;\n      updateOptions(inst, Boolean(props.multiple), value);\n    } else if (wasMultiple !== Boolean(props.multiple)) {\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n      if (props.defaultValue != null) {\n        updateOptions(inst, Boolean(props.multiple), props.defaultValue);\n      } else {\n        // Revert the select back to its default unselected state.\n        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');\n      }\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  this._wrapperState.pendingUpdate = true;\n  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMSelect;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./LinkedValueUtils\":53,\"./Object.assign\":54,\"./ReactMount\":99,\"./ReactUpdates\":120,\"_process\":30,\"fbjs/lib/warning\":29}],78:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar getNodeForCharacterOffset = require('./getNodeForCharacterOffset');\nvar getTextContentAccessor = require('./getTextContentAccessor');\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  var currentRange = selection.getRangeAt(0);\n\n  // In Firefox, range.startContainer and range.endContainer can be \"anonymous\n  // divs\", e.g. the up/down buttons on an <input type=\"number\">. Anonymous\n  // divs do not seem to expose properties, triggering a \"Permission denied\n  // error\" if any of its properties are accessed. The only seemingly possible\n  // way to avoid erroring is to access a property that typically works for\n  // non-anonymous divs and catch any error that may otherwise arise. See\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n  try {\n    /* eslint-disable no-unused-expressions */\n    currentRange.startContainer.nodeType;\n    currentRange.endContainer.nodeType;\n    /* eslint-enable no-unused-expressions */\n  } catch (e) {\n    return null;\n  }\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);\n\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\n\nmodule.exports = ReactDOMSelection;\n},{\"./getNodeForCharacterOffset\":153,\"./getTextContentAccessor\":154,\"fbjs/lib/ExecutionEnvironment\":4}],79:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMServer\n */\n\n'use strict';\n\nvar ReactDefaultInjection = require('./ReactDefaultInjection');\nvar ReactServerRendering = require('./ReactServerRendering');\nvar ReactVersion = require('./ReactVersion');\n\nReactDefaultInjection.inject();\n\nvar ReactDOMServer = {\n  renderToString: ReactServerRendering.renderToString,\n  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,\n  version: ReactVersion\n};\n\nmodule.exports = ReactDOMServer;\n},{\"./ReactDefaultInjection\":83,\"./ReactServerRendering\":114,\"./ReactVersion\":121}],80:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');\nvar ReactMount = require('./ReactMount');\n\nvar assign = require('./Object.assign');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar setTextContent = require('./setTextContent');\nvar validateDOMNesting = require('./validateDOMNesting');\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (props) {\n  // This constructor and its argument is currently used by mocks.\n};\n\nassign(ReactDOMTextComponent.prototype, {\n\n  /**\n   * @param {ReactText} text\n   * @internal\n   */\n  construct: function (text) {\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement\n    this._currentElement = text;\n    this._stringText = '' + text;\n\n    // Properties\n    this._rootNodeID = null;\n    this._mountIndex = 0;\n  },\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (context[validateDOMNesting.ancestorInfoContextKey]) {\n        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);\n      }\n    }\n\n    this._rootNodeID = rootID;\n    if (transaction.useCreateElement) {\n      var ownerDocument = context[ReactMount.ownerDocumentContextKey];\n      var el = ownerDocument.createElement('span');\n      DOMPropertyOperations.setAttributeForID(el, rootID);\n      // Populate node cache\n      ReactMount.getID(el);\n      setTextContent(el, this._stringText);\n      return el;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this in a `span` for the reasons stated above, but\n        // since this is a situation where React won't take over (static pages),\n        // we can simply return the text as it is.\n        return escapedText;\n      }\n\n      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';\n    }\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var node = ReactMount.getNode(this._rootNodeID);\n        DOMChildrenOperations.updateTextContent(node, nextStringText);\n      }\n    }\n  },\n\n  unmountComponent: function () {\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n  }\n\n});\n\nmodule.exports = ReactDOMTextComponent;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01UZXh0Q29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTUNoaWxkcmVuT3BlcmF0aW9ucycpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcbnZhciBzZXRUZXh0Q29udGVudCA9IHJlcXVpcmUoJy4vc2V0VGV4dENvbnRlbnQnKTtcbnZhciB2YWxpZGF0ZURPTU5lc3RpbmcgPSByZXF1aXJlKCcuL3ZhbGlkYXRlRE9NTmVzdGluZycpO1xuXG4vKipcbiAqIFRleHQgbm9kZXMgdmlvbGF0ZSBhIGNvdXBsZSBhc3N1bXB0aW9ucyB0aGF0IFJlYWN0IG1ha2VzIGFib3V0IGNvbXBvbmVudHM6XG4gKlxuICogIC0gV2hlbiBtb3VudGluZyB0ZXh0IGludG8gdGhlIERPTSwgYWRqYWNlbnQgdGV4dCBub2RlcyBhcmUgbWVyZ2VkLlxuICogIC0gVGV4dCBub2RlcyBjYW5ub3QgYmUgYXNzaWduZWQgYSBSZWFjdCByb290IElELlxuICpcbiAqIFRoaXMgY29tcG9uZW50IGlzIHVzZWQgdG8gd3JhcCBzdHJpbmdzIGluIGVsZW1lbnRzIHNvIHRoYXQgdGhleSBjYW4gdW5kZXJnb1xuICogdGhlIHNhbWUgcmVjb25jaWxpYXRpb24gdGhhdCBpcyBhcHBsaWVkIHRvIGVsZW1lbnRzLlxuICpcbiAqIFRPRE86IEludmVzdGlnYXRlIHJlcHJlc2VudGluZyBSZWFjdCBjb21wb25lbnRzIGluIHRoZSBET00gd2l0aCB0ZXh0IG5vZGVzLlxuICpcbiAqIEBjbGFzcyBSZWFjdERPTVRleHRDb21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAvLyBUaGlzIGNvbnN0cnVjdG9yIGFuZCBpdHMgYXJndW1lbnQgaXMgY3VycmVudGx5IHVzZWQgYnkgbW9ja3MuXG59O1xuXG5hc3NpZ24oUmVhY3RET01UZXh0Q29tcG9uZW50LnByb3RvdHlwZSwge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0VGV4dH0gdGV4dFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIHJlYWxseSBhIFJlYWN0VGV4dCAoUmVhY3ROb2RlKSwgbm90IGEgUmVhY3RFbGVtZW50XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSB0ZXh0O1xuICAgIHRoaXMuX3N0cmluZ1RleHQgPSAnJyArIHRleHQ7XG5cbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5fbW91bnRJbmRleCA9IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIG1hcmt1cCBmb3IgdGhpcyB0ZXh0IG5vZGUuIFRoaXMgbm9kZSBpcyBub3QgaW50ZW5kZWQgdG8gaGF2ZVxuICAgKiBhbnkgZmVhdHVyZXMgYmVzaWRlcyBjb250YWluaW5nIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbnRleHRbdmFsaWRhdGVET01OZXN0aW5nLmFuY2VzdG9ySW5mb0NvbnRleHRLZXldKSB7XG4gICAgICAgIHZhbGlkYXRlRE9NTmVzdGluZygnc3BhbicsIG51bGwsIGNvbnRleHRbdmFsaWRhdGVET01OZXN0aW5nLmFuY2VzdG9ySW5mb0NvbnRleHRLZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXJEb2N1bWVudCA9IGNvbnRleHRbUmVhY3RNb3VudC5vd25lckRvY3VtZW50Q29udGV4dEtleV07XG4gICAgICB2YXIgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRBdHRyaWJ1dGVGb3JJRChlbCwgcm9vdElEKTtcbiAgICAgIC8vIFBvcHVsYXRlIG5vZGUgY2FjaGVcbiAgICAgIFJlYWN0TW91bnQuZ2V0SUQoZWwpO1xuICAgICAgc2V0VGV4dENvbnRlbnQoZWwsIHRoaXMuX3N0cmluZ1RleHQpO1xuICAgICAgcmV0dXJuIGVsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXNjYXBlZFRleHQgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGhpcy5fc3RyaW5nVGV4dCk7XG5cbiAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBpbiBhIGBzcGFuYCBmb3IgdGhlIHJlYXNvbnMgc3RhdGVkIGFib3ZlLCBidXRcbiAgICAgICAgLy8gc2luY2UgdGhpcyBpcyBhIHNpdHVhdGlvbiB3aGVyZSBSZWFjdCB3b24ndCB0YWtlIG92ZXIgKHN0YXRpYyBwYWdlcyksXG4gICAgICAgIC8vIHdlIGNhbiBzaW1wbHkgcmV0dXJuIHRoZSB0ZXh0IGFzIGl0IGlzLlxuICAgICAgICByZXR1cm4gZXNjYXBlZFRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnPHNwYW4gJyArIERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JJRChyb290SUQpICsgJz4nICsgZXNjYXBlZFRleHQgKyAnPC9zcGFuPic7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgY29tcG9uZW50IGJ5IHVwZGF0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RUZXh0fSBuZXh0VGV4dCBUaGUgbmV4dCB0ZXh0IGNvbnRlbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uIChuZXh0VGV4dCwgdHJhbnNhY3Rpb24pIHtcbiAgICBpZiAobmV4dFRleHQgIT09IHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRUZXh0O1xuICAgICAgdmFyIG5leHRTdHJpbmdUZXh0ID0gJycgKyBuZXh0VGV4dDtcbiAgICAgIGlmIChuZXh0U3RyaW5nVGV4dCAhPT0gdGhpcy5fc3RyaW5nVGV4dCkge1xuICAgICAgICAvLyBUT0RPOiBTYXZlIHRoaXMgYXMgcGVuZGluZyBwcm9wcyBhbmQgdXNlIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeVxuICAgICAgICAvLyBhbmQvb3IgdXBkYXRlQ29tcG9uZW50IHRvIGRvIHRoZSBhY3R1YWwgdXBkYXRlIGZvciBjb25zaXN0ZW5jeSB3aXRoXG4gICAgICAgIC8vIG90aGVyIGNvbXBvbmVudCB0eXBlcz9cbiAgICAgICAgdGhpcy5fc3RyaW5nVGV4dCA9IG5leHRTdHJpbmdUZXh0O1xuICAgICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZSh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICAgICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnVwZGF0ZVRleHRDb250ZW50KG5vZGUsIG5leHRTdHJpbmdUZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LnVubW91bnRJREZyb21FbnZpcm9ubWVudCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRDb21wb25lbnQ7Il19\n},{\"./DOMChildrenOperations\":40,\"./DOMPropertyOperations\":42,\"./Object.assign\":54,\"./ReactComponentBrowserEnvironment\":65,\"./ReactMount\":99,\"./escapeTextContentForBrowser\":144,\"./setTextContent\":162,\"./validateDOMNesting\":165,\"_process\":30}],81:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getNativeProps: function (inst, props, context) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    var nativeProps = assign({}, props, {\n      defaultValue: undefined,\n      value: undefined,\n      children: inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = props.children;\n    if (children != null) {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;\n      }\n      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;\n      if (Array.isArray(children)) {\n        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(props);\n\n    inst._wrapperState = {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01UZXh0YXJlYS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NVGV4dGFyZWFcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZSgnLi9MaW5rZWRWYWx1ZVV0aWxzJyk7XG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0RE9NSURPcGVyYXRpb25zJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICBpZiAodGhpcy5fcm9vdE5vZGVJRCkge1xuICAgIC8vIERPTSBjb21wb25lbnQgaXMgc3RpbGwgbW91bnRlZDsgdXBkYXRlXG4gICAgUmVhY3RET01UZXh0YXJlYS51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDx0ZXh0YXJlYT4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIGB2YWx1ZWAsIGFuZFxuICogYGRlZmF1bHRWYWx1ZWAuIFRoaXMgZGlmZmVycyBmcm9tIHRoZSB0cmFkaXRpb25hbCBET00gQVBJIGJlY2F1c2UgdmFsdWUgaXNcbiAqIHVzdWFsbHkgc2V0IGFzIFBDREFUQSBjaGlsZHJlbi5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBhZmZlY3QgdGhlXG4gKiB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbFxuICogbm90IHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGFuIGVtcHR5IHZhbHVlLCB0aGUgcHJvcFxuICogYGRlZmF1bHRWYWx1ZWAgaWYgc3BlY2lmaWVkLCBvciB0aGUgY2hpbGRyZW4gY29udGVudCAoZGVwcmVjYXRlZCkuXG4gKi9cbnZhciBSZWFjdERPTVRleHRhcmVhID0ge1xuICBnZXROYXRpdmVQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzLCBjb250ZXh0KSB7XG4gICAgIShwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugb24gPHRleHRhcmVhPi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBBbHdheXMgc2V0IGNoaWxkcmVuIHRvIHRoZSBzYW1lIHRoaW5nLiBJbiBJRTksIHRoZSBzZWxlY3Rpb24gcmFuZ2Ugd2lsbFxuICAgIC8vIGdldCByZXNldCBpZiBgdGV4dENvbnRlbnRgIGlzIG11dGF0ZWQuXG4gICAgdmFyIG5hdGl2ZVByb3BzID0gYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgY2hpbGRyZW46IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUsXG4gICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gIH0sXG5cbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygndGV4dGFyZWEnLCBwcm9wcywgaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBjaGlsZHJlbiBjb250ZW50IGluIDx0ZXh0YXJlYT4uXG4gICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIGluc3RlYWQgb2Ygc2V0dGluZyAnICsgJ2NoaWxkcmVuIG9uIDx0ZXh0YXJlYT4uJykgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICAhKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdJZiB5b3Ugc3VwcGx5IGBkZWZhdWx0VmFsdWVgIG9uIGEgPHRleHRhcmVhPiwgZG8gbm90IHBhc3MgY2hpbGRyZW4uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgICEoY2hpbGRyZW4ubGVuZ3RoIDw9IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJzx0ZXh0YXJlYT4gY2FuIG9ubHkgaGF2ZSBhdCBtb3N0IG9uZSBjaGlsZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW5bMF07XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnICsgY2hpbGRyZW47XG4gICAgfVxuICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuXG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgLy8gV2Ugc2F2ZSB0aGUgaW5pdGlhbCB2YWx1ZSBzbyB0aGF0IGBSZWFjdERPTUNvbXBvbmVudGAgZG9lc24ndCB1cGRhdGVcbiAgICAgIC8vIGB0ZXh0Q29udGVudGAgKHVubmVjZXNzYXJ5IHNpbmNlIHdlIHVwZGF0ZSB2YWx1ZSkuXG4gICAgICAvLyBUaGUgaW5pdGlhbCB2YWx1ZSBjYW4gYmUgYSBib29sZWFuIG9yIG9iamVjdCBzbyB0aGF0J3Mgd2h5IGl0J3NcbiAgICAgIC8vIGZvcmNlZCB0byBiZSBhIHN0cmluZy5cbiAgICAgIGluaXRpYWxWYWx1ZTogJycgKyAodmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogZGVmYXVsdFZhbHVlKSxcbiAgICAgIG9uQ2hhbmdlOiBfaGFuZGxlQ2hhbmdlLmJpbmQoaW5zdClcbiAgICB9O1xuICB9LFxuXG4gIHVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIC8vIENhc3QgYHZhbHVlYCB0byBhIHN0cmluZyB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBjb3JyZWN0bHkuIFdoaWxlXG4gICAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG4gICAgICBSZWFjdERPTUlET3BlcmF0aW9ucy51cGRhdGVQcm9wZXJ0eUJ5SUQoaW5zdC5fcm9vdE5vZGVJRCwgJ3ZhbHVlJywgJycgKyB2YWx1ZSk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgdGhpcyk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRhcmVhOyJdfQ==\n},{\"./LinkedValueUtils\":53,\"./Object.assign\":54,\"./ReactDOMIDOperations\":74,\"./ReactUpdates\":120,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],82:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n'use strict';\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;\n},{\"./Object.assign\":54,\"./ReactUpdates\":120,\"./Transaction\":137,\"fbjs/lib/emptyFunction\":10}],83:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultInjection\n */\n\n'use strict';\n\nvar BeforeInputEventPlugin = require('./BeforeInputEventPlugin');\nvar ChangeEventPlugin = require('./ChangeEventPlugin');\nvar ClientReactRootIndex = require('./ClientReactRootIndex');\nvar DefaultEventPluginOrder = require('./DefaultEventPluginOrder');\nvar EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');\nvar ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\nvar ReactDOMComponent = require('./ReactDOMComponent');\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');\nvar ReactEventListener = require('./ReactEventListener');\nvar ReactInjection = require('./ReactInjection');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMount = require('./ReactMount');\nvar ReactReconcileTransaction = require('./ReactReconcileTransaction');\nvar SelectEventPlugin = require('./SelectEventPlugin');\nvar ServerReactRootIndex = require('./ServerReactRootIndex');\nvar SimpleEventPlugin = require('./SimpleEventPlugin');\nvar SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');\n\nvar alreadyInjected = false;\n\nfunction inject() {\n  if (alreadyInjected) {\n    // TODO: This is currently true because these injections are shared between\n    // the client and the server package. They should be built independently\n    // and not share any injection state. Then this problem will be solved.\n    return;\n  }\n  alreadyInjected = true;\n\n  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);\n\n  /**\n   * Inject modules for resolving DOM hierarchy and plugin ordering.\n   */\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);\n  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);\n  ReactInjection.EventPluginHub.injectMount(ReactMount);\n\n  /**\n   * Some important event plugins included by default (without having to require\n   * them).\n   */\n  ReactInjection.EventPluginHub.injectEventPluginsByName({\n    SimpleEventPlugin: SimpleEventPlugin,\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,\n    ChangeEventPlugin: ChangeEventPlugin,\n    SelectEventPlugin: SelectEventPlugin,\n    BeforeInputEventPlugin: BeforeInputEventPlugin\n  });\n\n  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);\n\n  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);\n\n  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);\n\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);\n\n  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');\n\n  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);\n  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n\n  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);\n\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';\n    if (/[?&]react_perf\\b/.test(url)) {\n      var ReactDefaultPerf = require('./ReactDefaultPerf');\n      ReactDefaultPerf.start();\n    }\n  }\n}\n\nmodule.exports = {\n  inject: inject\n};\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0SW5qZWN0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdEluamVjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4nKTtcbnZhciBDaGFuZ2VFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vQ2hhbmdlRXZlbnRQbHVnaW4nKTtcbnZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoJy4vQ2xpZW50UmVhY3RSb290SW5kZXgnKTtcbnZhciBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciA9IHJlcXVpcmUoJy4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXInKTtcbnZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL0VudGVyTGVhdmVFdmVudFBsdWdpbicpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSByZXF1aXJlKCcuL0hUTUxET01Qcm9wZXJ0eUNvbmZpZycpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbicpO1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3knKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnQnKTtcbnZhciBSZWFjdERPTVRleHRDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NVGV4dENvbXBvbmVudCcpO1xudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJy4vUmVhY3RFdmVudExpc3RlbmVyJyk7XG52YXIgUmVhY3RJbmplY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5qZWN0aW9uJyk7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VIYW5kbGVzJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24nKTtcbnZhciBTZWxlY3RFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vU2VsZWN0RXZlbnRQbHVnaW4nKTtcbnZhciBTZXJ2ZXJSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoJy4vU2VydmVyUmVhY3RSb290SW5kZXgnKTtcbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vU2ltcGxlRXZlbnRQbHVnaW4nKTtcbnZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoJy4vU1ZHRE9NUHJvcGVydHlDb25maWcnKTtcblxudmFyIGFscmVhZHlJbmplY3RlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpbmplY3QoKSB7XG4gIGlmIChhbHJlYWR5SW5qZWN0ZWQpIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIGN1cnJlbnRseSB0cnVlIGJlY2F1c2UgdGhlc2UgaW5qZWN0aW9ucyBhcmUgc2hhcmVkIGJldHdlZW5cbiAgICAvLyB0aGUgY2xpZW50IGFuZCB0aGUgc2VydmVyIHBhY2thZ2UuIFRoZXkgc2hvdWxkIGJlIGJ1aWx0IGluZGVwZW5kZW50bHlcbiAgICAvLyBhbmQgbm90IHNoYXJlIGFueSBpbmplY3Rpb24gc3RhdGUuIFRoZW4gdGhpcyBwcm9ibGVtIHdpbGwgYmUgc29sdmVkLlxuICAgIHJldHVybjtcbiAgfVxuICBhbHJlYWR5SW5qZWN0ZWQgPSB0cnVlO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50RW1pdHRlci5pbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIoUmVhY3RFdmVudExpc3RlbmVyKTtcblxuICAvKipcbiAgICogSW5qZWN0IG1vZHVsZXMgZm9yIHJlc29sdmluZyBET00gaGllcmFyY2h5IGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gICAqL1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERlZmF1bHRFdmVudFBsdWdpbk9yZGVyKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0SW5zdGFuY2VIYW5kbGUoUmVhY3RJbnN0YW5jZUhhbmRsZXMpO1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RNb3VudChSZWFjdE1vdW50KTtcblxuICAvKipcbiAgICogU29tZSBpbXBvcnRhbnQgZXZlbnQgcGx1Z2lucyBpbmNsdWRlZCBieSBkZWZhdWx0ICh3aXRob3V0IGhhdmluZyB0byByZXF1aXJlXG4gICAqIHRoZW0pLlxuICAgKi9cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtcbiAgICBTaW1wbGVFdmVudFBsdWdpbjogU2ltcGxlRXZlbnRQbHVnaW4sXG4gICAgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOiBFbnRlckxlYXZlRXZlbnRQbHVnaW4sXG4gICAgQ2hhbmdlRXZlbnRQbHVnaW46IENoYW5nZUV2ZW50UGx1Z2luLFxuICAgIFNlbGVjdEV2ZW50UGx1Z2luOiBTZWxlY3RFdmVudFBsdWdpbixcbiAgICBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4gIH0pO1xuXG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3MoUmVhY3RET01Db21wb25lbnQpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RUZXh0Q29tcG9uZW50Q2xhc3MoUmVhY3RET01UZXh0Q29tcG9uZW50KTtcblxuICBSZWFjdEluamVjdGlvbi5DbGFzcy5pbmplY3RNaXhpbihSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbik7XG5cbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoSFRNTERPTVByb3BlcnR5Q29uZmlnKTtcbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoU1ZHRE9NUHJvcGVydHlDb25maWcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkVtcHR5Q29tcG9uZW50LmluamVjdEVtcHR5Q29tcG9uZW50KCdub3NjcmlwdCcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5KTtcblxuICBSZWFjdEluamVjdGlvbi5Sb290SW5kZXguaW5qZWN0Q3JlYXRlUmVhY3RSb290SW5kZXgoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gQ2xpZW50UmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXggOiBTZXJ2ZXJSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCk7XG5cbiAgUmVhY3RJbmplY3Rpb24uQ29tcG9uZW50LmluamVjdEVudmlyb25tZW50KFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciB1cmwgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJyc7XG4gICAgaWYgKC9bPyZdcmVhY3RfcGVyZlxcYi8udGVzdCh1cmwpKSB7XG4gICAgICB2YXIgUmVhY3REZWZhdWx0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0UGVyZicpO1xuICAgICAgUmVhY3REZWZhdWx0UGVyZi5zdGFydCgpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5qZWN0OiBpbmplY3Rcbn07Il19\n},{\"./BeforeInputEventPlugin\":34,\"./ChangeEventPlugin\":38,\"./ClientReactRootIndex\":39,\"./DefaultEventPluginOrder\":44,\"./EnterLeaveEventPlugin\":45,\"./HTMLDOMPropertyConfig\":52,\"./ReactBrowserComponentMixin\":57,\"./ReactComponentBrowserEnvironment\":65,\"./ReactDOMComponent\":71,\"./ReactDOMTextComponent\":80,\"./ReactDefaultBatchingStrategy\":82,\"./ReactDefaultPerf\":84,\"./ReactEventListener\":92,\"./ReactInjection\":93,\"./ReactInstanceHandles\":95,\"./ReactMount\":99,\"./ReactReconcileTransaction\":109,\"./SVGDOMPropertyConfig\":122,\"./SelectEventPlugin\":123,\"./ServerReactRootIndex\":124,\"./SimpleEventPlugin\":125,\"_process\":30,\"fbjs/lib/ExecutionEnvironment\":4}],84:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\n\nvar performanceNow = require('fbjs/lib/performanceNow');\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result.type = item.type;\n      result.args = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0,\n          created: {}\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          var id = args[0];\n          if (typeof id === 'object') {\n            id = ReactMount.getID(args[0]);\n          }\n          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n      fnName === '_renderValidatedComponent')) {\n\n        if (this._currentElement.type === ReactMount.TopLevelWrapper) {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          entry.created[rootNodeID] = true;\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;\n},{\"./DOMProperty\":41,\"./ReactDefaultPerfAnalysis\":85,\"./ReactMount\":99,\"./ReactPerf\":105,\"fbjs/lib/performanceNow\":26}],85:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\n\n// Don't try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  SET_MARKUP: 'set innerHTML',\n  TEXT_CONTENT: 'set textContent',\n  'setValueForProperty': 'update attribute',\n  'setValueForAttribute': 'update attribute',\n  'deleteValueForProperty': 'remove attribute',\n  'setValueForStyles': 'update styles',\n  'replaceNodeWithMarkup': 'replace',\n  'updateTextContent': 'set textContent'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  measurements.forEach(function (measurement) {\n    Object.keys(measurement.writes).forEach(function (id) {\n      measurement.writes[id].forEach(function (write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    });\n  });\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false;\n    // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n    // check if component newly created\n    if (measurement.created[id]) {\n      isDirty = true;\n    }\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports = ReactDefaultPerfAnalysis;\n},{\"./Object.assign\":54}],86:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElement\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar assign = require('./Object.assign');\nvar canDefineProperty = require('./canDefineProperty');\n\n// The Symbol used to tag the ReactElement type. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\n/**\n * Base constructor for all React elements. This is only used to make this\n * work with a dynamic instanceof check. Nothing should live on this prototype.\n *\n * @param {*} type\n * @param {*} key\n * @param {string|object} ref\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @param {*} owner\n * @param {*} props\n * @internal\n */\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allow us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    if (canDefineProperty) {\n      Object.defineProperty(element._store, 'validated', {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: false\n      });\n      // self and source are DEV only properties.\n      Object.defineProperty(element, '_self', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: self\n      });\n      // Two elements created in two different places should be considered\n      // equal for testing purposes and therefore we hide it from enumeration.\n      Object.defineProperty(element, '_source', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: source\n      });\n    } else {\n      element._store.validated = false;\n      element._self = self;\n      element._source = source;\n    }\n    Object.freeze(element.props);\n    Object.freeze(element);\n  }\n\n  return element;\n};\n\nReactElement.createElement = function (type, config, children) {\n  var propName;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    ref = config.ref === undefined ? null : config.ref;\n    key = config.key === undefined ? null : '' + config.key;\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (typeof props[propName] === 'undefined') {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n};\n\nReactElement.createFactory = function (type) {\n  var factory = ReactElement.createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook TODO: Warn if this is accessed\n  factory.type = type;\n  return factory;\n};\n\nReactElement.cloneAndReplaceKey = function (oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\n  return newElement;\n};\n\nReactElement.cloneAndReplaceProps = function (oldElement, newProps) {\n  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // If the key on the original is valid, then the clone is valid\n    newElement._store.validated = oldElement._store.validated;\n  }\n\n  return newElement;\n};\n\nReactElement.cloneElement = function (element, config, children) {\n  var propName;\n\n  // Original props are copied\n  var props = assign({}, element.props);\n\n  // Reserved names are extracted\n  var key = element.key;\n  var ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  var self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  var source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner = element._owner;\n\n  if (config != null) {\n    if (config.ref !== undefined) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (config.key !== undefined) {\n      key = '' + config.key;\n    }\n    // Remaining properties override existing props\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n};\n\n/**\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nReactElement.isValidElement = function (object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n};\n\nmodule.exports = ReactElement;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./Object.assign\":54,\"./ReactCurrentOwner\":68,\"./canDefineProperty\":141,\"_process\":30}],87:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar getIteratorFn = require('./getIteratorFn');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = ReactCurrentOwner.current.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nvar loggedTypeFailures = {};\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);\n  if (addenda === null) {\n    // we already showed the warning\n    return;\n  }\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;\n}\n\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} messageType A key used for de-duping warnings.\n * @param {ReactElement} element Component that requires a key.\n * @param {*} parentType element's parent's type.\n * @returns {?object} A set of addenda to use in the warning message, or null\n * if the warning has already been shown before (and shouldn't be shown again).\n */\nfunction getAddendaForKeyUse(messageType, element, parentType) {\n  var addendum = getDeclarationErrorAddendum();\n  if (!addendum) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      addendum = ' Check the top-level render call using <' + parentName + '>.';\n    }\n  }\n\n  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});\n  if (memoizer[addendum]) {\n    return null;\n  }\n  memoizer[addendum] = true;\n\n  var addenda = {\n    parentOrOwner: addendum,\n    url: ' See https://fb.me/react-warning-keys for more information.',\n    childOwner: null\n  };\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';\n  }\n\n  return addenda;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n    // Entry iterators provide implicit keys.\n    if (iteratorFn) {\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (ReactElement.isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @private\n */\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;\n        error = propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var addendum = getDeclarationErrorAddendum();\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var componentClass = element.type;\n  if (typeof componentClass !== 'function') {\n    return;\n  }\n  var name = componentClass.displayName || componentClass.name;\n  if (componentClass.propTypes) {\n    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);\n  }\n  if (typeof componentClass.getDefaultProps === 'function') {\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;\n  }\n}\n\nvar ReactElementValidator = {\n\n  createElement: function (type, props, children) {\n    var validType = typeof type === 'string' || typeof type === 'function';\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;\n\n    var element = ReactElement.createElement.apply(this, arguments);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n    if (validType) {\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], type);\n      }\n    }\n\n    validatePropTypes(element);\n\n    return element;\n  },\n\n  createFactory: function (type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);\n    // Legacy hook TODO: Warn if this is accessed\n    validatedFactory.type = type;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (canDefineProperty) {\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function () {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n    }\n\n    return validatedFactory;\n  },\n\n  cloneElement: function (element, props, children) {\n    var newElement = ReactElement.cloneElement.apply(this, arguments);\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], newElement.type);\n    }\n    validatePropTypes(newElement);\n    return newElement;\n  }\n\n};\n\nmodule.exports = ReactElementValidator;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./ReactCurrentOwner\":68,\"./ReactElement\":86,\"./ReactPropTypeLocationNames\":106,\"./ReactPropTypeLocations\":107,\"./canDefineProperty\":141,\"./getIteratorFn\":152,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],88:[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');\nvar ReactReconciler = require('./ReactReconciler');\n\nvar assign = require('./Object.assign');\n\nvar placeholderElement;\n\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function (component) {\n    placeholderElement = ReactElement.createElement(component);\n  }\n};\n\nfunction registerNullComponentID() {\n  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);\n}\n\nvar ReactEmptyComponent = function (instantiate) {\n  this._currentElement = null;\n  this._rootNodeID = null;\n  this._renderedComponent = instantiate(placeholderElement);\n};\nassign(ReactEmptyComponent.prototype, {\n  construct: function (element) {},\n  mountComponent: function (rootID, transaction, context) {\n    transaction.getReactMountReady().enqueue(registerNullComponentID, this);\n    this._rootNodeID = rootID;\n    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);\n  },\n  receiveComponent: function () {},\n  unmountComponent: function (rootID, transaction, context) {\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);\n    this._rootNodeID = null;\n    this._renderedComponent = null;\n  }\n});\n\nReactEmptyComponent.injection = ReactEmptyComponentInjection;\n\nmodule.exports = ReactEmptyComponent;\n},{\"./Object.assign\":54,\"./ReactElement\":86,\"./ReactEmptyComponentRegistry\":89,\"./ReactReconciler\":110}],89:[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponentRegistry\n */\n\n'use strict';\n\n// This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\nvar nullComponentIDsRegistry = {};\n\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\nfunction isNullComponentID(id) {\n  return !!nullComponentIDsRegistry[id];\n}\n\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction registerNullComponentID(id) {\n  nullComponentIDsRegistry[id] = true;\n}\n\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIDsRegistry[id];\n}\n\nvar ReactEmptyComponentRegistry = {\n  isNullComponentID: isNullComponentID,\n  registerNullComponentID: registerNullComponentID,\n  deregisterNullComponentID: deregisterNullComponentID\n};\n\nmodule.exports = ReactEmptyComponentRegistry;\n},{}],90:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactErrorUtils\n * @typechecks\n */\n\n'use strict';\n\nvar caughtError = null;\n\n/**\n * Call a function while guarding against errors that happens within it.\n *\n * @param {?String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} a First argument\n * @param {*} b Second argument\n */\nfunction invokeGuardedCallback(name, func, a, b) {\n  try {\n    return func(a, b);\n  } catch (x) {\n    if (caughtError === null) {\n      caughtError = x;\n    }\n    return undefined;\n  }\n}\n\nvar ReactErrorUtils = {\n  invokeGuardedCallback: invokeGuardedCallback,\n\n  /**\n   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event\n   * handler are sure to be rethrown by rethrowCaughtError.\n   */\n  invokeGuardedCallbackWithCatch: invokeGuardedCallback,\n\n  /**\n   * During execution of guarded functions we will capture the first error which\n   * we will rethrow to be handled by the top level error handler.\n   */\n  rethrowCaughtError: function () {\n    if (caughtError) {\n      var error = caughtError;\n      caughtError = null;\n      throw error;\n    }\n  }\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  /**\n   * To help development we can get better devtools integration by simulating a\n   * real browser event.\n   */\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {\n      var boundFunc = func.bind(null, a, b);\n      var evtType = 'react-' + name;\n      fakeNode.addEventListener(evtType, boundFunc, false);\n      var evt = document.createEvent('Event');\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n      fakeNode.removeEventListener(evtType, boundFunc, false);\n    };\n  }\n}\n\nmodule.exports = ReactErrorUtils;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFcnJvclV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFcnJvclV0aWxzXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhdWdodEVycm9yID0gbnVsbDtcblxuLyoqXG4gKiBDYWxsIGEgZnVuY3Rpb24gd2hpbGUgZ3VhcmRpbmcgYWdhaW5zdCBlcnJvcnMgdGhhdCBoYXBwZW5zIHdpdGhpbiBpdC5cbiAqXG4gKiBAcGFyYW0gez9TdHJpbmd9IG5hbWUgb2YgdGhlIGd1YXJkIHRvIHVzZSBmb3IgbG9nZ2luZyBvciBkZWJ1Z2dpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZVxuICogQHBhcmFtIHsqfSBhIEZpcnN0IGFyZ3VtZW50XG4gKiBAcGFyYW0geyp9IGIgU2Vjb25kIGFyZ3VtZW50XG4gKi9cbmZ1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFjayhuYW1lLCBmdW5jLCBhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZ1bmMoYSwgYik7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICBpZiAoY2F1Z2h0RXJyb3IgPT09IG51bGwpIHtcbiAgICAgIGNhdWdodEVycm9yID0geDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG52YXIgUmVhY3RFcnJvclV0aWxzID0ge1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2s6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcblxuICAvKipcbiAgICogSW52b2tlZCBieSBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZSBzbyB0aGF0IGFueSBlcnJvcnMgdGhyb3duIGJ5IHRoZSBldmVudFxuICAgKiBoYW5kbGVyIGFyZSBzdXJlIHRvIGJlIHJldGhyb3duIGJ5IHJldGhyb3dDYXVnaHRFcnJvci5cbiAgICovXG4gIGludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaDogaW52b2tlR3VhcmRlZENhbGxiYWNrLFxuXG4gIC8qKlxuICAgKiBEdXJpbmcgZXhlY3V0aW9uIG9mIGd1YXJkZWQgZnVuY3Rpb25zIHdlIHdpbGwgY2FwdHVyZSB0aGUgZmlyc3QgZXJyb3Igd2hpY2hcbiAgICogd2Ugd2lsbCByZXRocm93IHRvIGJlIGhhbmRsZWQgYnkgdGhlIHRvcCBsZXZlbCBlcnJvciBoYW5kbGVyLlxuICAgKi9cbiAgcmV0aHJvd0NhdWdodEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhdWdodEVycm9yKSB7XG4gICAgICB2YXIgZXJyb3IgPSBjYXVnaHRFcnJvcjtcbiAgICAgIGNhdWdodEVycm9yID0gbnVsbDtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLyoqXG4gICAqIFRvIGhlbHAgZGV2ZWxvcG1lbnQgd2UgY2FuIGdldCBiZXR0ZXIgZGV2dG9vbHMgaW50ZWdyYXRpb24gYnkgc2ltdWxhdGluZyBhXG4gICAqIHJlYWwgYnJvd3NlciBldmVudC5cbiAgICovXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRpc3BhdGNoRXZlbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZmFrZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdyZWFjdCcpO1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiAobmFtZSwgZnVuYywgYSwgYikge1xuICAgICAgdmFyIGJvdW5kRnVuYyA9IGZ1bmMuYmluZChudWxsLCBhLCBiKTtcbiAgICAgIHZhciBldnRUeXBlID0gJ3JlYWN0LScgKyBuYW1lO1xuICAgICAgZmFrZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBib3VuZEZ1bmMsIGZhbHNlKTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0RXZlbnQoZXZ0VHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgIGZha2VOb2RlLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgIGZha2VOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgYm91bmRGdW5jLCBmYWxzZSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlsczsiXX0=\n},{\"_process\":30}],91:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventEmitterMixin\n */\n\n'use strict';\n\nvar EventPluginHub = require('./EventPluginHub');\n\nfunction runEventQueueInBatch(events) {\n  EventPluginHub.enqueueEvents(events);\n  EventPluginHub.processEventQueue(false);\n}\n\nvar ReactEventEmitterMixin = {\n\n  /**\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the\n   * opportunity to create `ReactEvent`s to be dispatched.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {object} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native environment event.\n   */\n  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n    runEventQueueInBatch(events);\n  }\n};\n\nmodule.exports = ReactEventEmitterMixin;\n},{\"./EventPluginHub\":47}],92:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventListener\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventListener = require('fbjs/lib/EventListener');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar PooledClass = require('./PooledClass');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar getEventTarget = require('./getEventTarget');\nvar getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');\n\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\n/**\n * Finds the parent React component of `node`.\n *\n * @param {*} node\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node\n *                           is not nested.\n */\nfunction findParent(node) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  var nodeID = ReactMount.getID(node);\n  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n  var container = ReactMount.findReactContainerForID(rootID);\n  var parent = ReactMount.getFirstReactDOM(container);\n  return parent;\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType = topLevelType;\n  this.nativeEvent = nativeEvent;\n  this.ancestors = [];\n}\nassign(TopLevelCallbackBookKeeping.prototype, {\n  destructor: function () {\n    this.topLevelType = null;\n    this.nativeEvent = null;\n    this.ancestors.length = 0;\n  }\n});\nPooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  // TODO: Re-enable event.path handling\n  //\n  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {\n  //   // New browsers have a path attribute on native events\n  //   handleTopLevelWithPath(bookKeeping);\n  // } else {\n  //   // Legacy browsers don't have a path attribute on native events\n  //   handleTopLevelWithoutPath(bookKeeping);\n  // }\n\n  void handleTopLevelWithPath; // temporarily unused\n  handleTopLevelWithoutPath(bookKeeping);\n}\n\n// Legacy browsers don't have a path attribute on native events\nfunction handleTopLevelWithoutPath(bookKeeping) {\n  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = topLevelTarget;\n  while (ancestor) {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = findParent(ancestor);\n  }\n\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {\n    topLevelTarget = bookKeeping.ancestors[i];\n    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }\n}\n\n// New browsers have a path attribute on native events\nfunction handleTopLevelWithPath(bookKeeping) {\n  var path = bookKeeping.nativeEvent.path;\n  var currentNativeTarget = path[0];\n  var eventsFired = 0;\n  for (var i = 0; i < path.length; i++) {\n    var currentPathElement = path[i];\n    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {\n      currentNativeTarget = path[i + 1];\n    }\n    // TODO: slow\n    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);\n    if (reactParent === currentPathElement) {\n      var currentPathElementID = ReactMount.getID(currentPathElement);\n      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);\n      bookKeeping.ancestors.push(currentPathElement);\n\n      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';\n      eventsFired++;\n      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);\n\n      // Jump to the root of this React render tree\n      while (currentPathElementID !== newRootID) {\n        i++;\n        currentPathElement = path[i];\n        currentPathElementID = ReactMount.getID(currentPathElement);\n      }\n    }\n  }\n  if (eventsFired === 0) {\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition = getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener = {\n  _enabled: true,\n  _handleTopLevel: null,\n\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n\n  setHandleTopLevel: function (handleTopLevel) {\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  },\n\n  setEnabled: function (enabled) {\n    ReactEventListener._enabled = !!enabled;\n  },\n\n  isEnabled: function () {\n    return ReactEventListener._enabled;\n  },\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {?object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {?object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  monitorScrollValue: function (refresh) {\n    var callback = scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, 'scroll', callback);\n  },\n\n  dispatchEvent: function (topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\n\nmodule.exports = ReactEventListener;\n},{\"./Object.assign\":54,\"./PooledClass\":55,\"./ReactInstanceHandles\":95,\"./ReactMount\":99,\"./ReactUpdates\":120,\"./getEventTarget\":151,\"fbjs/lib/EventListener\":3,\"fbjs/lib/ExecutionEnvironment\":4,\"fbjs/lib/getUnboundedScrollPosition\":15}],93:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInjection\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar EventPluginHub = require('./EventPluginHub');\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactClass = require('./ReactClass');\nvar ReactEmptyComponent = require('./ReactEmptyComponent');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactNativeComponent = require('./ReactNativeComponent');\nvar ReactPerf = require('./ReactPerf');\nvar ReactRootIndex = require('./ReactRootIndex');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar ReactInjection = {\n  Component: ReactComponentEnvironment.injection,\n  Class: ReactClass.injection,\n  DOMProperty: DOMProperty.injection,\n  EmptyComponent: ReactEmptyComponent.injection,\n  EventPluginHub: EventPluginHub.injection,\n  EventEmitter: ReactBrowserEventEmitter.injection,\n  NativeComponent: ReactNativeComponent.injection,\n  Perf: ReactPerf.injection,\n  RootIndex: ReactRootIndex.injection,\n  Updates: ReactUpdates.injection\n};\n\nmodule.exports = ReactInjection;\n},{\"./DOMProperty\":41,\"./EventPluginHub\":47,\"./ReactBrowserEventEmitter\":58,\"./ReactClass\":63,\"./ReactComponentEnvironment\":66,\"./ReactEmptyComponent\":88,\"./ReactNativeComponent\":102,\"./ReactPerf\":105,\"./ReactRootIndex\":112,\"./ReactUpdates\":120}],94:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n'use strict';\n\nvar ReactDOMSelection = require('./ReactDOMSelection');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar focusNode = require('fbjs/lib/focusNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function (elem) {\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },\n\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || { start: 0, end: 0 };\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;\n},{\"./ReactDOMSelection\":78,\"fbjs/lib/containsNode\":7,\"fbjs/lib/focusNode\":12,\"fbjs/lib/getActiveElement\":13}],95:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceHandles\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactRootIndex = require('./ReactRootIndex');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar SEPARATOR = '.';\nvar SEPARATOR_LENGTH = SEPARATOR.length;\n\n/**\n * Maximum depth of traversals before we consider the possibility of a bad ID.\n */\nvar MAX_TREE_DEPTH = 10000;\n\n/**\n * Creates a DOM ID prefix to use when mounting React components.\n *\n * @param {number} index A unique integer\n * @return {string} React root ID.\n * @internal\n */\nfunction getReactRootIDString(index) {\n  return SEPARATOR + index.toString(36);\n}\n\n/**\n * Checks if a character in the supplied ID is a separator or the end.\n *\n * @param {string} id A React DOM ID.\n * @param {number} index Index of the character to check.\n * @return {boolean} True if the character is a separator or end of the ID.\n * @private\n */\nfunction isBoundary(id, index) {\n  return id.charAt(index) === SEPARATOR || index === id.length;\n}\n\n/**\n * Checks if the supplied string is a valid React DOM ID.\n *\n * @param {string} id A React DOM ID, maybe.\n * @return {boolean} True if the string is a valid React DOM ID.\n * @private\n */\nfunction isValidID(id) {\n  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;\n}\n\n/**\n * Checks if the first ID is an ancestor of or equal to the second ID.\n *\n * @param {string} ancestorID\n * @param {string} descendantID\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.\n * @internal\n */\nfunction isAncestorIDOf(ancestorID, descendantID) {\n  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);\n}\n\n/**\n * Gets the parent ID of the supplied React DOM ID, `id`.\n *\n * @param {string} id ID of a component.\n * @return {string} ID of the parent, or an empty string.\n * @private\n */\nfunction getParentID(id) {\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';\n}\n\n/**\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the\n * supplied `destinationID`. If they are equal, the ID is returned.\n *\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.\n * @param {string} destinationID ID of the destination node.\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.\n * @private\n */\nfunction getNextDescendantID(ancestorID, destinationID) {\n  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;\n  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;\n  if (ancestorID === destinationID) {\n    return ancestorID;\n  }\n  // Skip over the ancestor and the immediate separator. Traverse until we hit\n  // another separator or we reach the end of `destinationID`.\n  var start = ancestorID.length + SEPARATOR_LENGTH;\n  var i;\n  for (i = start; i < destinationID.length; i++) {\n    if (isBoundary(destinationID, i)) {\n      break;\n    }\n  }\n  return destinationID.substr(0, i);\n}\n\n/**\n * Gets the nearest common ancestor ID of two IDs.\n *\n * Using this ID scheme, the nearest common ancestor ID is the longest common\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.\n *\n * @param {string} oneID\n * @param {string} twoID\n * @return {string} Nearest common ancestor ID, or the empty string if none.\n * @private\n */\nfunction getFirstCommonAncestorID(oneID, twoID) {\n  var minLength = Math.min(oneID.length, twoID.length);\n  if (minLength === 0) {\n    return '';\n  }\n  var lastCommonMarkerIndex = 0;\n  // Use `<=` to traverse until the \"EOL\" of the shorter string.\n  for (var i = 0; i <= minLength; i++) {\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {\n      lastCommonMarkerIndex = i;\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {\n      break;\n    }\n  }\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);\n  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;\n  return longestCommonID;\n}\n\n/**\n * Traverses the parent path between two IDs (either up or down). The IDs must\n * not be the same, and there must exist a parent path between them. If the\n * callback returns `false`, traversal is stopped.\n *\n * @param {?string} start ID at which to start traversal.\n * @param {?string} stop ID at which to end traversal.\n * @param {function} cb Callback to invoke each ID with.\n * @param {*} arg Argument to invoke the callback with.\n * @param {?boolean} skipFirst Whether or not to skip the first node.\n * @param {?boolean} skipLast Whether or not to skip the last node.\n * @private\n */\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {\n  start = start || '';\n  stop = stop || '';\n  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;\n  var traverseUp = isAncestorIDOf(stop, start);\n  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;\n  // Traverse from `start` to `stop` one depth at a time.\n  var depth = 0;\n  var traverse = traverseUp ? getParentID : getNextDescendantID;\n  for (var id = start;; /* until break */id = traverse(id, stop)) {\n    var ret;\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {\n      ret = cb(id, traverseUp, arg);\n    }\n    if (ret === false || id === stop) {\n      // Only break //after// visiting `stop`.\n      break;\n    }\n    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;\n  }\n}\n\n/**\n * Manages the IDs assigned to DOM representations of React components. This\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in\n * order to simulate events).\n *\n * @internal\n */\nvar ReactInstanceHandles = {\n\n  /**\n   * Constructs a React root ID\n   * @return {string} A React root ID.\n   */\n  createReactRootID: function () {\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());\n  },\n\n  /**\n   * Constructs a React ID by joining a root ID with a name.\n   *\n   * @param {string} rootID Root ID of a parent component.\n   * @param {string} name A component's name (as flattened children).\n   * @return {string} A React ID.\n   * @internal\n   */\n  createReactID: function (rootID, name) {\n    return rootID + name;\n  },\n\n  /**\n   * Gets the DOM ID of the React component that is the root of the tree that\n   * contains the React component with the supplied DOM ID.\n   *\n   * @param {string} id DOM ID of a React component.\n   * @return {?string} DOM ID of the React component that is the root.\n   * @internal\n   */\n  getReactRootIDFromNodeID: function (id) {\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {\n      var index = id.indexOf(SEPARATOR, 1);\n      return index > -1 ? id.substr(0, index) : id;\n    }\n    return null;\n  },\n\n  /**\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n   * should would receive a `mouseEnter` or `mouseLeave` event.\n   *\n   * NOTE: Does not invoke the callback on the nearest common ancestor because\n   * nothing \"entered\" or \"left\" that element.\n   *\n   * @param {string} leaveID ID being left.\n   * @param {string} enterID ID being entered.\n   * @param {function} cb Callback to invoke on each entered/left ID.\n   * @param {*} upArg Argument to invoke the callback with on left IDs.\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.\n   * @internal\n   */\n  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);\n    if (ancestorID !== leaveID) {\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);\n    }\n    if (ancestorID !== enterID) {\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);\n    }\n  },\n\n  /**\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseTwoPhase: function (targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, false);\n      traverseParentPath(targetID, '', cb, arg, false, true);\n    }\n  },\n\n  /**\n   * Same as `traverseTwoPhase` but skips the `targetID`.\n   */\n  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, true);\n      traverseParentPath(targetID, '', cb, arg, true, true);\n    }\n  },\n\n  /**\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For\n   * example, passing `.0.$row-0.1` would result in `cb` getting called\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseAncestors: function (targetID, cb, arg) {\n    traverseParentPath('', targetID, cb, arg, true, false);\n  },\n\n  getFirstCommonAncestorID: getFirstCommonAncestorID,\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getNextDescendantID: getNextDescendantID,\n\n  isAncestorIDOf: isAncestorIDOf,\n\n  SEPARATOR: SEPARATOR\n\n};\n\nmodule.exports = ReactInstanceHandles;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./ReactRootIndex\":112,\"_process\":30,\"fbjs/lib/invariant\":18}],96:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceMap\n */\n\n'use strict';\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n */\n\n// TODO: Replace this with ES6: var ReactInstanceMap = new Map();\nvar ReactInstanceMap = {\n\n  /**\n   * This API should be called `delete` but we'd have to make sure to always\n   * transform these to strings for IE support. When this transform is fully\n   * supported we can rename it.\n   */\n  remove: function (key) {\n    key._reactInternalInstance = undefined;\n  },\n\n  get: function (key) {\n    return key._reactInternalInstance;\n  },\n\n  has: function (key) {\n    return key._reactInternalInstance !== undefined;\n  },\n\n  set: function (key, value) {\n    key._reactInternalInstance = value;\n  }\n\n};\n\nmodule.exports = ReactInstanceMap;\n},{}],97:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactIsomorphic\n */\n\n'use strict';\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactComponent = require('./ReactComponent');\nvar ReactClass = require('./ReactClass');\nvar ReactDOMFactories = require('./ReactDOMFactories');\nvar ReactElement = require('./ReactElement');\nvar ReactElementValidator = require('./ReactElementValidator');\nvar ReactPropTypes = require('./ReactPropTypes');\nvar ReactVersion = require('./ReactVersion');\n\nvar assign = require('./Object.assign');\nvar onlyChild = require('./onlyChild');\n\nvar createElement = ReactElement.createElement;\nvar createFactory = ReactElement.createFactory;\nvar cloneElement = ReactElement.cloneElement;\n\nif (process.env.NODE_ENV !== 'production') {\n  createElement = ReactElementValidator.createElement;\n  createFactory = ReactElementValidator.createFactory;\n  cloneElement = ReactElementValidator.cloneElement;\n}\n\nvar React = {\n\n  // Modern\n\n  Children: {\n    map: ReactChildren.map,\n    forEach: ReactChildren.forEach,\n    count: ReactChildren.count,\n    toArray: ReactChildren.toArray,\n    only: onlyChild\n  },\n\n  Component: ReactComponent,\n\n  createElement: createElement,\n  cloneElement: cloneElement,\n  isValidElement: ReactElement.isValidElement,\n\n  // Classic\n\n  PropTypes: ReactPropTypes,\n  createClass: ReactClass.createClass,\n  createFactory: createFactory,\n  createMixin: function (mixin) {\n    // Currently a noop. Will be used to validate and trace mixins.\n    return mixin;\n  },\n\n  // This looks DOM specific but these are actually isomorphic helpers\n  // since they are just generating DOM strings.\n  DOM: ReactDOMFactories,\n\n  version: ReactVersion,\n\n  // Hook for JSX spread, don't use this for anything else.\n  __spread: assign\n};\n\nmodule.exports = React;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJc29tb3JwaGljLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJc29tb3JwaGljXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDaGlsZHJlbiA9IHJlcXVpcmUoJy4vUmVhY3RDaGlsZHJlbicpO1xudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudCcpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKCcuL1JlYWN0Q2xhc3MnKTtcbnZhciBSZWFjdERPTUZhY3RvcmllcyA9IHJlcXVpcmUoJy4vUmVhY3RET01GYWN0b3JpZXMnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50VmFsaWRhdG9yJyk7XG52YXIgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVzJyk7XG52YXIgUmVhY3RWZXJzaW9uID0gcmVxdWlyZSgnLi9SZWFjdFZlcnNpb24nKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIG9ubHlDaGlsZCA9IHJlcXVpcmUoJy4vb25seUNoaWxkJyk7XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQ7XG52YXIgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xudmFyIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudDtcbiAgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5O1xuICBjbG9uZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2xvbmVFbGVtZW50O1xufVxuXG52YXIgUmVhY3QgPSB7XG5cbiAgLy8gTW9kZXJuXG5cbiAgQ2hpbGRyZW46IHtcbiAgICBtYXA6IFJlYWN0Q2hpbGRyZW4ubWFwLFxuICAgIGZvckVhY2g6IFJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxcbiAgICBjb3VudDogUmVhY3RDaGlsZHJlbi5jb3VudCxcbiAgICB0b0FycmF5OiBSZWFjdENoaWxkcmVuLnRvQXJyYXksXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG5cbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcblxuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50LFxuICBjbG9uZUVsZW1lbnQ6IGNsb25lRWxlbWVudCxcbiAgaXNWYWxpZEVsZW1lbnQ6IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCxcblxuICAvLyBDbGFzc2ljXG5cbiAgUHJvcFR5cGVzOiBSZWFjdFByb3BUeXBlcyxcbiAgY3JlYXRlQ2xhc3M6IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3MsXG4gIGNyZWF0ZUZhY3Rvcnk6IGNyZWF0ZUZhY3RvcnksXG4gIGNyZWF0ZU1peGluOiBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICAvLyBDdXJyZW50bHkgYSBub29wLiBXaWxsIGJlIHVzZWQgdG8gdmFsaWRhdGUgYW5kIHRyYWNlIG1peGlucy5cbiAgICByZXR1cm4gbWl4aW47XG4gIH0sXG5cbiAgLy8gVGhpcyBsb29rcyBET00gc3BlY2lmaWMgYnV0IHRoZXNlIGFyZSBhY3R1YWxseSBpc29tb3JwaGljIGhlbHBlcnNcbiAgLy8gc2luY2UgdGhleSBhcmUganVzdCBnZW5lcmF0aW5nIERPTSBzdHJpbmdzLlxuICBET006IFJlYWN0RE9NRmFjdG9yaWVzLFxuXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICAvLyBIb29rIGZvciBKU1ggc3ByZWFkLCBkb24ndCB1c2UgdGhpcyBmb3IgYW55dGhpbmcgZWxzZS5cbiAgX19zcHJlYWQ6IGFzc2lnblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiXX0=\n},{\"./Object.assign\":54,\"./ReactChildren\":62,\"./ReactClass\":63,\"./ReactComponent\":64,\"./ReactDOMFactories\":72,\"./ReactElement\":86,\"./ReactElementValidator\":87,\"./ReactPropTypes\":108,\"./ReactVersion\":121,\"./onlyChild\":158,\"_process\":30}],98:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require('./adler32');\n\nvar TAG_END = /\\/?>/;\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n\n    // Add checksum (handle both parent tags and self-closing tags)\n    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;\n},{\"./adler32\":140}],99:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMount\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\nvar ReactElement = require('./ReactElement');\nvar ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar containsNode = require('fbjs/lib/containsNode');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\nvar setInnerHTML = require('./setInnerHTML');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar validateDOMNesting = require('./validateDOMNesting');\nvar warning = require('fbjs/lib/warning');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar nodeCache = {};\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\nvar ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);\n\n/** Mapping from reactRootID to React component instance. */\nvar instancesByReactRootID = {};\n\n/** Mapping from reactRootID to `container` nodes. */\nvar containersByReactRootID = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID = {};\n}\n\n// Used to store breadth-first search state in findComponentRoot.\nvar findComponentRootReusableArray = [];\n\n/**\n * Finds the index of the first character\n * that's not common between the two given strings.\n *\n * @return {number} the index of the character where the strings diverge\n */\nfunction firstDifferenceIndex(string1, string2) {\n  var minLen = Math.min(string1.length, string2.length);\n  for (var i = 0; i < minLen; i++) {\n    if (string1.charAt(i) !== string2.charAt(i)) {\n      return i;\n    }\n  }\n  return string1.length === string2.length ? -1 : minLen;\n}\n\n/**\n * @param {DOMElement|DOMDocument} container DOM element that may contain\n * a React component\n * @return {?*} DOM element that may have the reactRoot ID, or null.\n */\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.\n */\nfunction getReactRootID(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return rootElement && ReactMount.getID(rootElement);\n}\n\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return '' if we're given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\nfunction getID(node) {\n  var id = internalGetID(node);\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached = nodeCache[id];\n      if (cached !== node) {\n        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;\n\n        nodeCache[id] = node;\n      }\n    } else {\n      nodeCache[id] = node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\nfunction setID(node, id) {\n  var oldID = internalGetID(node);\n  if (oldID !== id) {\n    delete nodeCache[oldID];\n  }\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] = node;\n}\n\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * Finds the node with the supplied public React instance.\n *\n * @param {*} instance A public React instance.\n * @return {?DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNodeFromInstance(instance) {\n  var id = ReactInstanceMap.get(instance)._rootNodeID;\n  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {\n    return null;\n  }\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * A node is \"valid\" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\nfunction isValid(node, id) {\n  if (node) {\n    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;\n\n    var container = ReactMount.findReactContainerForID(id);\n    if (container && containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n\nvar deepestNodeSoFar = null;\nfunction findDeepestCachedAncestorImpl(ancestorID) {\n  var ancestor = nodeCache[ancestorID];\n  if (ancestor && isValid(ancestor, ancestorID)) {\n    deepestNodeSoFar = ancestor;\n  } else {\n    // This node isn't populated in the cache, so presumably none of its\n    // descendants are. Break out of the loop.\n    return false;\n  }\n}\n\n/**\n * Return the deepest cached node whose ID is a prefix of `targetID`.\n */\nfunction findDeepestCachedAncestor(targetID) {\n  deepestNodeSoFar = null;\n  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);\n\n  var foundNode = deepestNodeSoFar;\n  deepestNodeSoFar = null;\n  return foundNode;\n}\n\n/**\n * Mounts this component and inserts it into the DOM.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {string} rootID DOM ID of the root node.\n * @param {DOMElement} container DOM element to mount into.\n * @param {ReactReconcileTransaction} transaction\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {\n  if (ReactDOMFeatureFlags.useCreateElement) {\n    context = assign({}, context);\n    if (container.nodeType === DOC_NODE_TYPE) {\n      context[ownerDocumentContextKey] = container;\n    } else {\n      context[ownerDocumentContextKey] = container.ownerDocument;\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (context === emptyObject) {\n      context = {};\n    }\n    var tag = container.nodeName.toLowerCase();\n    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);\n  }\n  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);\n  componentInstance._renderedComponent._topLevelWrapper = componentInstance;\n  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);\n}\n\n/**\n * Batched mount.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {string} rootID DOM ID of the root node.\n * @param {DOMElement} container DOM element to mount into.\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(\n  /* forceHTML */shouldReuseMarkup);\n  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n}\n\n/**\n * Unmounts a component and removes it from the DOM.\n *\n * @param {ReactComponent} instance React component instance.\n * @param {DOMElement} container DOM element to unmount from.\n * @final\n * @internal\n * @see {ReactMount.unmountComponentAtNode}\n */\nfunction unmountComponentFromNode(instance, container) {\n  ReactReconciler.unmountComponent(instance);\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    container = container.documentElement;\n  }\n\n  // http://jsperf.com/emptying-a-node\n  while (container.lastChild) {\n    container.removeChild(container.lastChild);\n  }\n}\n\n/**\n * True if the supplied DOM node has a direct React-rendered child that is\n * not a React root element. Useful for warning in `render`,\n * `unmountComponentAtNode`, etc.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM element contains a direct child that was\n * rendered by React but is not a root element.\n * @internal\n */\nfunction hasNonRootReactChild(node) {\n  var reactRootID = getReactRootID(node);\n  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;\n}\n\n/**\n * Returns the first (deepest) ancestor of a node which is rendered by this copy\n * of React.\n */\nfunction findFirstReactDOMImpl(node) {\n  // This node might be from another React instance, so we make sure not to\n  // examine the node cache here\n  for (; node && node.parentNode !== node; node = node.parentNode) {\n    if (node.nodeType !== 1) {\n      // Not a DOMElement, therefore not a React component\n      continue;\n    }\n    var nodeID = internalGetID(node);\n    if (!nodeID) {\n      continue;\n    }\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n\n    // If containersByReactRootID contains the container we find by crawling up\n    // the tree, we know that this instance of React rendered the node.\n    // nb. isValid's strategy (with containsNode) does not work because render\n    // trees may be nested and we don't want a false positive in that case.\n    var current = node;\n    var lastID;\n    do {\n      lastID = internalGetID(current);\n      current = current.parentNode;\n      if (current == null) {\n        // The passed-in node has been detached from the container it was\n        // originally rendered into.\n        return null;\n      }\n    } while (lastID !== reactRootID);\n\n    if (current === containersByReactRootID[reactRootID]) {\n      return node;\n    }\n  }\n  return null;\n}\n\n/**\n * Temporary (?) hack so that we can store all top-level pending updates on\n * composites instead of having to worry about different types of components\n * here.\n */\nvar TopLevelWrapper = function () {};\nTopLevelWrapper.prototype.isReactComponent = {};\nif (process.env.NODE_ENV !== 'production') {\n  TopLevelWrapper.displayName = 'TopLevelWrapper';\n}\nTopLevelWrapper.prototype.render = function () {\n  // this.props is actually a ReactElement\n  return this.props;\n};\n\n/**\n * Mounting is the process of initializing a React component by creating its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.render(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\nvar ReactMount = {\n\n  TopLevelWrapper: TopLevelWrapper,\n\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function (container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactElement} nextElement component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function (prevComponent, nextElement, container, callback) {\n    ReactMount.scrollMonitor(container, function () {\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);\n      if (callback) {\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);\n      }\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and starts scroll value\n   * monitoring\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function (nextComponent, container) {\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;\n\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();\n\n    var reactRootID = ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] = nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactElement} nextElement element to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case.\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;\n\n    var componentInstance = instantiateReactComponent(nextElement, null);\n    var reactRootID = ReactMount._registerComponent(componentInstance, container);\n\n    // The initial render is synchronous but any updates that happen during\n    // rendering, in componentWillMount or componentDidMount, will be batched\n    // according to the current batching strategy.\n\n    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);\n    }\n\n    return componentInstance;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;\n    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);\n  },\n\n  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :\n    // Check if it quacks like an element\n    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;\n\n    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;\n\n    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);\n\n    var prevComponent = instancesByReactRootID[getReactRootID(container)];\n\n    if (prevComponent) {\n      var prevWrappedElement = prevComponent._currentElement;\n      var prevElement = prevWrappedElement.props;\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        var publicInst = prevComponent._renderedComponent.getPublicInstance();\n        var updatedCallback = callback && function () {\n          callback.call(publicInst);\n        };\n        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);\n        return publicInst;\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);\n    var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;\n\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {\n        var rootElementSibling = reactRootElement;\n        while (rootElementSibling) {\n          if (internalGetID(rootElementSibling)) {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;\n            break;\n          }\n          rootElementSibling = rootElementSibling.nextSibling;\n        }\n      }\n    }\n\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;\n    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();\n    if (callback) {\n      callback.call(component);\n    }\n    return component;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  render: function (nextElement, container, callback) {\n    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the \"reactRoot\" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The \"reactRoot\" ID of elements rendered within.\n   */\n  registerContainer: function (container) {\n    var reactRootID = getReactRootID(container);\n    if (reactRootID) {\n      // If one exists, make sure it is a valid \"reactRoot\" ID.\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n    if (!reactRootID) {\n      // No valid \"reactRoot\" ID found, create one.\n      reactRootID = ReactInstanceHandles.createReactRootID();\n    }\n    containersByReactRootID[reactRootID] = container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function (container) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a\n    // render but we still don't expect to be in a render call here.)\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;\n\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;\n\n    var reactRootID = getReactRootID(container);\n    var component = instancesByReactRootID[reactRootID];\n    if (!component) {\n      // Check if the node being unmounted was rendered by React, but isn't a\n      // root node.\n      var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n      // Check if the container itself is a React root node.\n      var containerID = internalGetID(container);\n      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;\n      }\n\n      return false;\n    }\n    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n    if (process.env.NODE_ENV !== 'production') {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n    return true;\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function (id) {\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container = containersByReactRootID[reactRootID];\n\n    if (process.env.NODE_ENV !== 'production') {\n      var rootElement = rootElementsByReactRootID[reactRootID];\n      if (rootElement && rootElement.parentNode !== container) {\n        process.env.NODE_ENV !== 'production' ? warning(\n        // Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;\n        var containerChild = container.firstChild;\n        if (containerChild && reactRootID === internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] = containerChild;\n        } else {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function (id) {\n    var reactRoot = ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component rendered by this copy of React.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function (node) {\n    return findFirstReactDOMImpl(node);\n  },\n\n  /**\n   * Finds a node with the supplied `targetID` inside of the supplied\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search\n   * quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} targetID ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.\n   * @internal\n   */\n  findComponentRoot: function (ancestorNode, targetID) {\n    var firstChildren = findComponentRootReusableArray;\n    var childIndex = 0;\n\n    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This will throw on the next line; give an early warning\n      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\\'t find the root component node for data-reactid value ' + '`%s`. If you\\'re seeing this message, it probably means that ' + 'you\\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;\n    }\n\n    firstChildren[0] = deepestAncestor.firstChild;\n    firstChildren.length = 1;\n\n    while (childIndex < firstChildren.length) {\n      var child = firstChildren[childIndex++];\n      var targetChild;\n\n      while (child) {\n        var childID = ReactMount.getID(child);\n        if (childID) {\n          // Even if we find the node we're looking for, we finish looping\n          // through its siblings to ensure they're cached so that we don't have\n          // to revisit this node again. Otherwise, we make n^2 calls to getID\n          // when visiting the many children of a single node in order.\n\n          if (targetID === childID) {\n            targetChild = child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length = childIndex = 0;\n            firstChildren.push(child.firstChild);\n          }\n        } else {\n          // If this child had no ID, then there's a chance that it was\n          // injected automatically by the browser, as when a `<table>`\n          // element sprouts an extra `<tbody>` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n\n        child = child.nextSibling;\n      }\n\n      if (targetChild) {\n        // Emptying firstChildren/findComponentRootReusableArray is\n        // not necessary for correctness, but it helps the GC reclaim\n        // any nodes that were left at the end of the search.\n        firstChildren.length = 0;\n\n        return targetChild;\n      }\n    }\n\n    firstChildren.length = 0;\n\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;\n  },\n\n  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;\n\n    if (shouldReuseMarkup) {\n      var rootElement = getReactRootElementInContainer(container);\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {\n        return;\n      } else {\n        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n\n        var rootMarkup = rootElement.outerHTML;\n        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);\n\n        var normalizedMarkup = markup;\n        if (process.env.NODE_ENV !== 'production') {\n          // because rootMarkup is retrieved from the DOM, various normalizations\n          // will have occurred which will not be present in `markup`. Here,\n          // insert markup into a <div> or <iframe> depending on the container\n          // type to perform the same normalizations before comparing.\n          var normalizer;\n          if (container.nodeType === ELEMENT_NODE_TYPE) {\n            normalizer = document.createElement('div');\n            normalizer.innerHTML = markup;\n            normalizedMarkup = normalizer.innerHTML;\n          } else {\n            normalizer = document.createElement('iframe');\n            document.body.appendChild(normalizer);\n            normalizer.contentDocument.write(markup);\n            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;\n            document.body.removeChild(normalizer);\n          }\n        }\n\n        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);\n        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n\n        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\\n%s', difference) : invariant(false) : undefined;\n\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\\n%s', difference) : undefined;\n        }\n      }\n    }\n\n    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document but ' + 'you didn\\'t use server rendering. We can\\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n\n    if (transaction.useCreateElement) {\n      while (container.lastChild) {\n        container.removeChild(container.lastChild);\n      }\n      container.appendChild(markup);\n    } else {\n      setInnerHTML(container, markup);\n    }\n  },\n\n  ownerDocumentContextKey: ownerDocumentContextKey,\n\n  /**\n   * React ID utilities.\n   */\n\n  getReactRootID: getReactRootID,\n\n  getID: getID,\n\n  setID: setID,\n\n  getNode: getNode,\n\n  getNodeFromInstance: getNodeFromInstance,\n\n  isValid: isValid,\n\n  purgeID: purgeID\n};\n\nReactPerf.measureMethods(ReactMount, 'ReactMount', {\n  _renderNewRootComponent: '_renderNewRootComponent',\n  _mountImageIntoNode: '_mountImageIntoNode'\n});\n\nmodule.exports = ReactMount;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./DOMProperty\":41,\"./Object.assign\":54,\"./ReactBrowserEventEmitter\":58,\"./ReactCurrentOwner\":68,\"./ReactDOMFeatureFlags\":73,\"./ReactElement\":86,\"./ReactEmptyComponentRegistry\":89,\"./ReactInstanceHandles\":95,\"./ReactInstanceMap\":96,\"./ReactMarkupChecksum\":98,\"./ReactPerf\":105,\"./ReactReconciler\":110,\"./ReactUpdateQueue\":119,\"./ReactUpdates\":120,\"./instantiateReactComponent\":155,\"./setInnerHTML\":161,\"./shouldUpdateReactComponent\":163,\"./validateDOMNesting\":165,\"_process\":30,\"fbjs/lib/containsNode\":7,\"fbjs/lib/emptyObject\":11,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],100:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChild(prevChild);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNdWx0aUNoaWxkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TXVsdGlDaGlsZFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzJyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdENoaWxkUmVjb25jaWxlcicpO1xuXG52YXIgZmxhdHRlbkNoaWxkcmVuID0gcmVxdWlyZSgnLi9mbGF0dGVuQ2hpbGRyZW4nKTtcblxuLyoqXG4gKiBVcGRhdGluZyBjaGlsZHJlbiBvZiBhIGNvbXBvbmVudCBtYXkgdHJpZ2dlciByZWN1cnNpdmUgdXBkYXRlcy4gVGhlIGRlcHRoIGlzXG4gKiB1c2VkIHRvIGJhdGNoIHJlY3Vyc2l2ZSB1cGRhdGVzIHRvIHJlbmRlciBtYXJrdXAgbW9yZSBlZmZpY2llbnRseS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZURlcHRoID0gMDtcblxuLyoqXG4gKiBRdWV1ZSBvZiB1cGRhdGUgY29uZmlndXJhdGlvbiBvYmplY3RzLlxuICpcbiAqIEVhY2ggb2JqZWN0IGhhcyBhIGB0eXBlYCBwcm9wZXJ0eSB0aGF0IGlzIGluIGBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc2AuXG4gKlxuICogQHR5cGUge2FycmF5PG9iamVjdD59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdXBkYXRlUXVldWUgPSBbXTtcblxuLyoqXG4gKiBRdWV1ZSBvZiBtYXJrdXAgdG8gYmUgcmVuZGVyZWQuXG4gKlxuICogQHR5cGUge2FycmF5PHN0cmluZz59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbWFya3VwUXVldWUgPSBbXTtcblxuLyoqXG4gKiBFbnF1ZXVlcyBtYXJrdXAgdG8gYmUgcmVuZGVyZWQgYW5kIGluc2VydGVkIGF0IGEgc3VwcGxpZWQgaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdGhhdCByZW5kZXJzIGludG8gYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZUluc2VydE1hcmt1cChwYXJlbnRJRCwgbWFya3VwLCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUCxcbiAgICBtYXJrdXBJbmRleDogbWFya3VwUXVldWUucHVzaChtYXJrdXApIC0gMSxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiB0b0luZGV4XG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIG1vdmluZyBhbiBleGlzdGluZyBlbGVtZW50IHRvIGFub3RoZXIgaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBTb3VyY2UgaW5kZXggb2YgdGhlIGV4aXN0aW5nIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleCBvZiB0aGUgZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVNb3ZlKHBhcmVudElELCBmcm9tSW5kZXgsIHRvSW5kZXgpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5NT1ZFX0VYSVNUSU5HLFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyByZW1vdmluZyBhbiBlbGVtZW50IGF0IGFuIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZVJlbW92ZShwYXJlbnRJRCwgZnJvbUluZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREUsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IGZyb21JbmRleCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIHNldHRpbmcgdGhlIG1hcmt1cCBvZiBhIG5vZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdGhhdCByZW5kZXJzIGludG8gYW4gZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVTZXRNYXJrdXAocGFyZW50SUQsIG1hcmt1cCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlNFVF9NQVJLVVAsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgY29udGVudDogbWFya3VwLFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIHNldHRpbmcgdGhlIHRleHQgY29udGVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dENvbnRlbnQgVGV4dCBjb250ZW50IHRvIHNldC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVUZXh0Q29udGVudChwYXJlbnRJRCwgdGV4dENvbnRlbnQpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgY29udGVudDogdGV4dENvbnRlbnQsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIHRvSW5kZXg6IG51bGxcbiAgfSk7XG59XG5cbi8qKlxuICogUHJvY2Vzc2VzIGFueSBlbnF1ZXVlZCB1cGRhdGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NRdWV1ZSgpIHtcbiAgaWYgKHVwZGF0ZVF1ZXVlLmxlbmd0aCkge1xuICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyh1cGRhdGVRdWV1ZSwgbWFya3VwUXVldWUpO1xuICAgIGNsZWFyUXVldWUoKTtcbiAgfVxufVxuXG4vKipcbiAqIENsZWFycyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhclF1ZXVlKCkge1xuICB1cGRhdGVRdWV1ZS5sZW5ndGggPSAwO1xuICBtYXJrdXBRdWV1ZS5sZW5ndGggPSAwO1xufVxuXG4vKipcbiAqIFJlYWN0TXVsdGlDaGlsZCBhcmUgY2FwYWJsZSBvZiByZWNvbmNpbGluZyBtdWx0aXBsZSBjaGlsZHJlbi5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNdWx0aUNoaWxkXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0TXVsdGlDaGlsZCA9IHtcblxuICAvKipcbiAgICogUHJvdmlkZXMgY29tbW9uIGZ1bmN0aW9uYWxpdHkgZm9yIGNvbXBvbmVudHMgdGhhdCBtdXN0IHJlY29uY2lsZSBtdWx0aXBsZVxuICAgKiBjaGlsZHJlbi4gVGhpcyBpcyB1c2VkIGJ5IGBSZWFjdERPTUNvbXBvbmVudGAgdG8gbW91bnQsIHVwZGF0ZSwgYW5kXG4gICAqIHVubW91bnQgY2hpbGQgY29tcG9uZW50cy5cbiAgICpcbiAgICogQGxlbmRzIHtSZWFjdE11bHRpQ2hpbGQucHJvdG90eXBlfVxuICAgKi9cbiAgTWl4aW46IHtcblxuICAgIF9yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbjogZnVuY3Rpb24gKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIuaW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIF9yZWNvbmNpbGVyVXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIG5leHRDaGlsZHJlbjtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgICAgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXh0Q2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMpO1xuICAgICAgcmV0dXJuIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVwZGF0ZUNoaWxkcmVuKHByZXZDaGlsZHJlbiwgbmV4dENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFwibW91bnQgaW1hZ2VcIiBmb3IgZWFjaCBvZiB0aGUgc3VwcGxpZWQgY2hpbGRyZW4uIEluIHRoZSBjYXNlXG4gICAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5lc3RlZENoaWxkcmVuIE5lc3RlZCBjaGlsZCBtYXBzLlxuICAgICAqIEByZXR1cm4ge2FycmF5fSBBbiBhcnJheSBvZiBtb3VudGVkIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBtb3VudENoaWxkcmVuOiBmdW5jdGlvbiAobmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLl9yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgICAvLyBJbmxpbmVkIGZvciBwZXJmb3JtYW5jZSwgc2VlIGBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdElEYC5cbiAgICAgICAgICB2YXIgcm9vdElEID0gdGhpcy5fcm9vdE5vZGVJRCArIG5hbWU7XG4gICAgICAgICAgdmFyIG1vdW50SW1hZ2UgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoY2hpbGQsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgICBtb3VudEltYWdlcy5wdXNoKG1vdW50SW1hZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbW91bnRJbWFnZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0Q29udGVudCBTdHJpbmcgb2YgY29udGVudC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVUZXh0Q29udGVudDogZnVuY3Rpb24gKG5leHRDb250ZW50KSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgICAvLyBSZW1vdmUgYW55IHJlbmRlcmVkIGNoaWxkcmVuLlxuICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuKTtcbiAgICAgICAgLy8gVE9ETzogVGhlIHNldFRleHRDb250ZW50IG9wZXJhdGlvbiBzaG91bGQgYmUgZW5vdWdoXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkKHByZXZDaGlsZHJlbltuYW1lXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBuZXcgdGV4dCBjb250ZW50LlxuICAgICAgICB0aGlzLnNldFRleHRDb250ZW50KG5leHRDb250ZW50KTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNsZWFyUXVldWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgbWFya3VwIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0TWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlTWFya3VwOiBmdW5jdGlvbiAobmV4dE1hcmt1cCkge1xuICAgICAgdXBkYXRlRGVwdGgrKztcbiAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSByZW5kZXJlZCBjaGlsZHJlbi5cbiAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbik7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZHJlbltuYW1lXSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TWFya3VwKG5leHRNYXJrdXApO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgY2xlYXJRdWV1ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBuZXcgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIE5lc3RlZCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB1cGRhdGVEZXB0aC0tO1xuICAgICAgICBpZiAoIXVwZGF0ZURlcHRoKSB7XG4gICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBjbGVhclF1ZXVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbXByb3ZlIHBlcmZvcm1hbmNlIGJ5IGlzb2xhdGluZyB0aGlzIGhvdCBjb2RlIHBhdGggZnJvbSB0aGUgdHJ5L2NhdGNoXG4gICAgICogYmxvY2sgaW4gYHVwZGF0ZUNoaWxkcmVuYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMgTmVzdGVkIGNoaWxkIGVsZW1lbnQgbWFwcy5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGZpbmFsXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF91cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24gKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICB2YXIgbmV4dENoaWxkcmVuID0gdGhpcy5fcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuKHByZXZDaGlsZHJlbiwgbmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW47XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuYW1lO1xuICAgICAgLy8gYG5leHRJbmRleGAgd2lsbCBpbmNyZW1lbnQgZm9yIGVhY2ggY2hpbGQgaW4gYG5leHRDaGlsZHJlbmAsIGJ1dFxuICAgICAgLy8gYGxhc3RJbmRleGAgd2lsbCBiZSB0aGUgbGFzdCBpbmRleCB2aXNpdGVkIGluIGBwcmV2Q2hpbGRyZW5gLlxuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgdmFyIG5leHRDaGlsZCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgaWYgKHByZXZDaGlsZCA9PT0gbmV4dENoaWxkKSB7XG4gICAgICAgICAgdGhpcy5tb3ZlQ2hpbGQocHJldkNoaWxkLCBuZXh0SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgIHByZXZDaGlsZC5fbW91bnRJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgYGxhc3RJbmRleGAgYmVmb3JlIGBfbW91bnRJbmRleGAgZ2V0cyB1bnNldCBieSB1bm1vdW50aW5nLlxuICAgICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkKHByZXZDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFRoZSBjaGlsZCBtdXN0IGJlIGluc3RhbnRpYXRlZCBiZWZvcmUgaXQncyBtb3VudGVkLlxuICAgICAgICAgIHRoaXMuX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4KG5leHRDaGlsZCwgbmFtZSwgbmV4dEluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEluZGV4Kys7XG4gICAgICB9XG4gICAgICAvLyBSZW1vdmUgY2hpbGRyZW4gdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQuXG4gICAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkgJiYgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSkge1xuICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZChwcmV2Q2hpbGRyZW5bbmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGFsbCByZW5kZXJlZCBjaGlsZHJlbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB0byBjbGVhbiB1cCBjaGlsZHJlblxuICAgICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocmVuZGVyZWRDaGlsZHJlbik7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBjaGlsZCBjb21wb25lbnQgdG8gdGhlIHN1cHBsaWVkIGluZGV4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RJbmRleCBMYXN0IGluZGV4IHZpc2l0ZWQgb2YgdGhlIHNpYmxpbmdzIG9mIGBjaGlsZGAuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG1vdmVDaGlsZDogZnVuY3Rpb24gKGNoaWxkLCB0b0luZGV4LCBsYXN0SW5kZXgpIHtcbiAgICAgIC8vIElmIHRoZSBpbmRleCBvZiBgY2hpbGRgIGlzIGxlc3MgdGhhbiBgbGFzdEluZGV4YCwgdGhlbiBpdCBuZWVkcyB0b1xuICAgICAgLy8gYmUgbW92ZWQuIE90aGVyd2lzZSwgd2UgZG8gbm90IG5lZWQgdG8gbW92ZSBpdCBiZWNhdXNlIGEgY2hpbGQgd2lsbCBiZVxuICAgICAgLy8gaW5zZXJ0ZWQgb3IgbW92ZWQgYmVmb3JlIGBjaGlsZGAuXG4gICAgICBpZiAoY2hpbGQuX21vdW50SW5kZXggPCBsYXN0SW5kZXgpIHtcbiAgICAgICAgZW5xdWV1ZU1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgsIHRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2hpbGQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW91bnRJbWFnZSBNYXJrdXAgdG8gaW5zZXJ0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBjcmVhdGVDaGlsZDogZnVuY3Rpb24gKGNoaWxkLCBtb3VudEltYWdlKSB7XG4gICAgICBlbnF1ZXVlSW5zZXJ0TWFya3VwKHRoaXMuX3Jvb3ROb2RlSUQsIG1vdW50SW1hZ2UsIGNoaWxkLl9tb3VudEluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENoaWxkIHRvIHJlbW92ZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcmVtb3ZlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgZW5xdWV1ZVJlbW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhpcyB0ZXh0IGNvbnRlbnQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbiAodGV4dENvbnRlbnQpIHtcbiAgICAgIGVucXVldWVUZXh0Q29udGVudCh0aGlzLl9yb290Tm9kZUlELCB0ZXh0Q29udGVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhpcyBtYXJrdXAgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdG8gc2V0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzZXRNYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXApIHtcbiAgICAgIGVucXVldWVTZXRNYXJrdXAodGhpcy5fcm9vdE5vZGVJRCwgbWFya3VwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW91bnRzIGEgY2hpbGQgd2l0aCB0aGUgc3VwcGxpZWQgbmFtZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXg6IGZ1bmN0aW9uIChjaGlsZCwgbmFtZSwgaW5kZXgsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAvLyBJbmxpbmVkIGZvciBwZXJmb3JtYW5jZSwgc2VlIGBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdElEYC5cbiAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcbiAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCByb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICB0aGlzLmNyZWF0ZUNoaWxkKGNoaWxkLCBtb3VudEltYWdlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYSByZW5kZXJlZCBjaGlsZC5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byB1bm1vdW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VubW91bnRDaGlsZDogZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZDsiXX0=\n},{\"./ReactChildReconciler\":61,\"./ReactComponentEnvironment\":66,\"./ReactCurrentOwner\":68,\"./ReactMultiChildUpdateTypes\":101,\"./ReactReconciler\":110,\"./flattenChildren\":146,\"_process\":30}],101:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChildUpdateTypes\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\n/**\n * When a component's children are updated, a series of update configuration\n * objects are created in order to batch and serialize the required changes.\n *\n * Enumerates all the possible types of update configurations.\n *\n * @internal\n */\nvar ReactMultiChildUpdateTypes = keyMirror({\n  INSERT_MARKUP: null,\n  MOVE_EXISTING: null,\n  REMOVE_NODE: null,\n  SET_MARKUP: null,\n  TEXT_CONTENT: null\n});\n\nmodule.exports = ReactMultiChildUpdateTypes;\n},{\"fbjs/lib/keyMirror\":21}],102:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar autoGenerateWrapperClass = null;\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around native tags.\nvar tagToComponentClass = {};\nvar textComponentClass = null;\n\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function (componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  }\n};\n\n/**\n * Get a composite component wrapper class for a specific tag.\n *\n * @param {ReactElement} element The tag for which to get the class.\n * @return {function} The React class constructor function.\n */\nfunction getComponentClassForElement(element) {\n  if (typeof element.type === 'function') {\n    return element.type;\n  }\n  var tag = element.type;\n  var componentClass = tagToComponentClass[tag];\n  if (componentClass == null) {\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\n  }\n  return componentClass;\n}\n\n/**\n * Get a native internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;\n  return new genericComponentClass(element.type, element.props);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactNativeComponent = {\n  getComponentClassForElement: getComponentClassForElement,\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactNativeComponentInjection\n};\n\nmodule.exports = ReactNativeComponent;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROYXRpdmVDb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3ROYXRpdmVDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyA9IG51bGw7XG52YXIgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gbnVsbDtcbi8vIFRoaXMgcmVnaXN0cnkga2VlcHMgdHJhY2sgb2Ygd3JhcHBlciBjbGFzc2VzIGFyb3VuZCBuYXRpdmUgdGFncy5cbnZhciB0YWdUb0NvbXBvbmVudENsYXNzID0ge307XG52YXIgdGV4dENvbXBvbmVudENsYXNzID0gbnVsbDtcblxudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50SW5qZWN0aW9uID0ge1xuICAvLyBUaGlzIGFjY2VwdHMgYSBjbGFzcyB0aGF0IHJlY2VpdmVzIHRoZSB0YWcgc3RyaW5nLiBUaGlzIGlzIGEgY2F0Y2ggYWxsXG4gIC8vIHRoYXQgY2FuIHJlbmRlciBhbnkga2luZCBvZiB0YWcuXG4gIGluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzczogZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIHRleHQgY29tcG9uZW50IGNsYXNzIHRoYXQgdGFrZXMgdGhlIHRleHQgc3RyaW5nIHRvIGJlXG4gIC8vIHJlbmRlcmVkIGFzIHByb3BzLlxuICBpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgIHRleHRDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9LFxuICAvLyBUaGlzIGFjY2VwdHMgYSBrZXllZCBvYmplY3Qgd2l0aCBjbGFzc2VzIGFzIHZhbHVlcy4gRWFjaCBrZXkgcmVwcmVzZW50cyBhXG4gIC8vIHRhZy4gVGhhdCBwYXJ0aWN1bGFyIHRhZyB3aWxsIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgdGhlIGdlbmVyaWMgb25lLlxuICBpbmplY3RDb21wb25lbnRDbGFzc2VzOiBmdW5jdGlvbiAoY29tcG9uZW50Q2xhc3Nlcykge1xuICAgIGFzc2lnbih0YWdUb0NvbXBvbmVudENsYXNzLCBjb21wb25lbnRDbGFzc2VzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgYSBjb21wb3NpdGUgY29tcG9uZW50IHdyYXBwZXIgY2xhc3MgZm9yIGEgc3BlY2lmaWMgdGFnLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IFRoZSB0YWcgZm9yIHdoaWNoIHRvIGdldCB0aGUgY2xhc3MuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIFJlYWN0IGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbGVtZW50LnR5cGU7XG4gIH1cbiAgdmFyIHRhZyA9IGVsZW1lbnQudHlwZTtcbiAgdmFyIGNvbXBvbmVudENsYXNzID0gdGFnVG9Db21wb25lbnRDbGFzc1t0YWddO1xuICBpZiAoY29tcG9uZW50Q2xhc3MgPT0gbnVsbCkge1xuICAgIHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXSA9IGNvbXBvbmVudENsYXNzID0gYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzKHRhZyk7XG4gIH1cbiAgcmV0dXJuIGNvbXBvbmVudENsYXNzO1xufVxuXG4vKipcbiAqIEdldCBhIG5hdGl2ZSBpbnRlcm5hbCBjb21wb25lbnQgY2xhc3MgZm9yIGEgc3BlY2lmaWMgdGFnLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNyZWF0ZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgaW50ZXJuYWwgY2xhc3MgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpIHtcbiAgIWdlbmVyaWNDb21wb25lbnRDbGFzcyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGVyZSBpcyBubyByZWdpc3RlcmVkIGNvbXBvbmVudCBmb3IgdGhlIHRhZyAlcycsIGVsZW1lbnQudHlwZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbmV3IGdlbmVyaWNDb21wb25lbnRDbGFzcyhlbGVtZW50LnR5cGUsIGVsZW1lbnQucHJvcHMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RUZXh0fSB0ZXh0XG4gKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUZXh0KHRleHQpIHtcbiAgcmV0dXJuIG5ldyB0ZXh0Q29tcG9uZW50Q2xhc3ModGV4dCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1RleHRDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIHJldHVybiBjb21wb25lbnQgaW5zdGFuY2VvZiB0ZXh0Q29tcG9uZW50Q2xhc3M7XG59XG5cbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHtcbiAgZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50OiBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQsXG4gIGNyZWF0ZUludGVybmFsQ29tcG9uZW50OiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudCxcbiAgY3JlYXRlSW5zdGFuY2VGb3JUZXh0OiBjcmVhdGVJbnN0YW5jZUZvclRleHQsXG4gIGlzVGV4dENvbXBvbmVudDogaXNUZXh0Q29tcG9uZW50LFxuICBpbmplY3Rpb246IFJlYWN0TmF0aXZlQ29tcG9uZW50SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TmF0aXZlQ29tcG9uZW50OyJdfQ==\n},{\"./Object.assign\":54,\"_process\":30,\"fbjs/lib/invariant\":18}],103:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNoopUpdateQueue\n */\n\n'use strict';\n\nvar warning = require('fbjs/lib/warning');\n\nfunction warnTDZ(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue = {\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n  enqueueCallback: function (publicInstance, callback) {},\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    warnTDZ(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    warnTDZ(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    warnTDZ(publicInstance, 'setState');\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialProps Subset of the next props.\n   * @internal\n   */\n  enqueueSetProps: function (publicInstance, partialProps) {\n    warnTDZ(publicInstance, 'setProps');\n  },\n\n  /**\n   * Replaces all of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} props New props.\n   * @internal\n   */\n  enqueueReplaceProps: function (publicInstance, props) {\n    warnTDZ(publicInstance, 'replaceProps');\n  }\n\n};\n\nmodule.exports = ReactNoopUpdateQueue;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROb29wVXBkYXRlUXVldWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gd2FyblREWihwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yICYmIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICcnKSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGFic3RyYWN0IEFQSSBmb3IgYW4gdXBkYXRlIHF1ZXVlLlxuICovXG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHt9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNvbXBsZXRlU3RhdGUpIHtcbiAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVNldFByb3BzOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHBhcnRpYWxQcm9wcykge1xuICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdzZXRQcm9wcycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzIE5ldyBwcm9wcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVByb3BzOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHByb3BzKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VQcm9wcycpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROb29wVXBkYXRlUXVldWU7Il19\n},{\"_process\":30,\"fbjs/lib/warning\":29}],104:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function (object) {\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n\n};\n\nmodule.exports = ReactOwner;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RPd25lci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE93bmVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmVhY3RPd25lcnMgYXJlIGNhcGFibGUgb2Ygc3RvcmluZyByZWZlcmVuY2VzIHRvIG93bmVkIGNvbXBvbmVudHMuXG4gKlxuICogQWxsIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9iZWluZy8vIHJlZmVyZW5jZWQgYnkgb3duZXIgY29tcG9uZW50cywgYnV0XG4gKiBvbmx5IFJlYWN0T3duZXIgY29tcG9uZW50cyBhcmUgY2FwYWJsZSBvZiAvL3JlZmVyZW5jaW5nLy8gb3duZWQgY29tcG9uZW50cy5cbiAqIFRoZSBuYW1lZCByZWZlcmVuY2UgaXMga25vd24gYXMgYSBcInJlZlwiLlxuICpcbiAqIFJlZnMgYXJlIGF2YWlsYWJsZSB3aGVuIG1vdW50ZWQgYW5kIHVwZGF0ZWQgZHVyaW5nIHJlY29uY2lsaWF0aW9uLlxuICpcbiAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gKFxuICogICAgICAgICA8ZGl2IG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9PlxuICogICAgICAgICAgIDxDdXN0b21Db21wb25lbnQgcmVmPVwiY3VzdG9tXCIgLz5cbiAqICAgICAgICAgPC9kaXY+XG4gKiAgICAgICApO1xuICogICAgIH0sXG4gKiAgICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICogICAgICAgdGhpcy5yZWZzLmN1c3RvbS5oYW5kbGVDbGljaygpO1xuICogICAgIH0sXG4gKiAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICogICAgICAgdGhpcy5yZWZzLmN1c3RvbS5pbml0aWFsaXplKCk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBSZWZzIHNob3VsZCByYXJlbHkgYmUgdXNlZC4gV2hlbiByZWZzIGFyZSB1c2VkLCB0aGV5IHNob3VsZCBvbmx5IGJlIGRvbmUgdG9cbiAqIGNvbnRyb2wgZGF0YSB0aGF0IGlzIG5vdCBoYW5kbGVkIGJ5IFJlYWN0J3MgZGF0YSBmbG93LlxuICpcbiAqIEBjbGFzcyBSZWFjdE93bmVyXG4gKi9cbnZhciBSZWFjdE93bmVyID0ge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgdmFsaWQgb3duZXIuXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgaXNWYWxpZE93bmVyOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuICEhKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0LmF0dGFjaFJlZiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqZWN0LmRldGFjaFJlZiA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjb21wb25lbnQgYnkgcmVmIHRvIGFuIG93bmVyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byByZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBieSB3aGljaCB0byByZWZlciB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge1JlYWN0T3duZXJ9IG93bmVyIENvbXBvbmVudCBvbiB3aGljaCB0byByZWNvcmQgdGhlIHJlZi5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYWRkQ29tcG9uZW50QXNSZWZUbzogZnVuY3Rpb24gKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICFSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYWRkQ29tcG9uZW50QXNSZWZUbyguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBZb3UgbWlnaHQgJyArICdiZSBhZGRpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50XFwncyAnICsgJ2ByZW5kZXJgIG1ldGhvZCwgb3IgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZCAnICsgJyhkZXRhaWxzOiBodHRwczovL2ZiLm1lL3JlYWN0LXJlZnMtbXVzdC1oYXZlLW93bmVyKS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgb3duZXIuYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBieSByZWYgZnJvbSBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBvZiB0aGUgcmVmIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdGhlIHJlZiBpcyByZWNvcmRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tOiBmdW5jdGlvbiAoY29tcG9uZW50LCByZWYsIG93bmVyKSB7XG4gICAgIVJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdyZW1vdmVDb21wb25lbnRBc1JlZkZyb20oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gWW91IG1pZ2h0ICcgKyAnYmUgcmVtb3ZpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50XFwncyAnICsgJ2ByZW5kZXJgIG1ldGhvZCwgb3IgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZCAnICsgJyhkZXRhaWxzOiBodHRwczovL2ZiLm1lL3JlYWN0LXJlZnMtbXVzdC1oYXZlLW93bmVyKS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgLy8gQ2hlY2sgdGhhdCBgY29tcG9uZW50YCBpcyBzdGlsbCB0aGUgY3VycmVudCByZWYgYmVjYXVzZSB3ZSBkbyBub3Qgd2FudCB0b1xuICAgIC8vIGRldGFjaCB0aGUgcmVmIGlmIGFub3RoZXIgY29tcG9uZW50IHN0b2xlIGl0LlxuICAgIGlmIChvd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnNbcmVmXSA9PT0gY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpIHtcbiAgICAgIG93bmVyLmRldGFjaFJlZihyZWYpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0T3duZXI7Il19\n},{\"_process\":30,\"fbjs/lib/invariant\":18}],105:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQZXJmLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFBlcmZcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJlYWN0UGVyZiBpcyBhIGdlbmVyYWwgQU9QIHN5c3RlbSBkZXNpZ25lZCB0byBtZWFzdXJlIHBlcmZvcm1hbmNlLiBUaGlzXG4gKiBtb2R1bGUgb25seSBoYXMgdGhlIGhvb2tzOiBzZWUgUmVhY3REZWZhdWx0UGVyZiBmb3IgdGhlIGFuYWx5c2lzIHRvb2wuXG4gKi9cbnZhciBSZWFjdFBlcmYgPSB7XG4gIC8qKlxuICAgKiBCb29sZWFuIHRvIGVuYWJsZS9kaXNhYmxlIG1lYXN1cmVtZW50LiBTZXQgdG8gZmFsc2UgYnkgZGVmYXVsdCB0byBwcmV2ZW50XG4gICAqIGFjY2lkZW50YWwgbG9nZ2luZyBhbmQgcGVyZiBsb3NzLlxuICAgKi9cbiAgZW5hYmxlTWVhc3VyZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEhvbGRzIG9udG8gdGhlIG1lYXN1cmUgZnVuY3Rpb24gaW4gdXNlLiBCeSBkZWZhdWx0LCBkb24ndCBtZWFzdXJlXG4gICAqIGFueXRoaW5nLCBidXQgd2UnbGwgb3ZlcnJpZGUgdGhpcyBpZiB3ZSBpbmplY3QgYSBtZWFzdXJlIGZ1bmN0aW9uLlxuICAgKi9cbiAgc3RvcmVkTWVhc3VyZTogX25vTWVhc3VyZSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqZWN0TmFtZVxuICAgKiBAcGFyYW0ge29iamVjdDxzdHJpbmc+fSBtZXRob2ROYW1lc1xuICAgKi9cbiAgbWVhc3VyZU1ldGhvZHM6IGZ1bmN0aW9uIChvYmplY3QsIG9iamVjdE5hbWUsIG1ldGhvZE5hbWVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBtZXRob2ROYW1lcykge1xuICAgICAgICBpZiAoIW1ldGhvZE5hbWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3Rba2V5XSA9IFJlYWN0UGVyZi5tZWFzdXJlKG9iamVjdE5hbWUsIG1ldGhvZE5hbWVzW2tleV0sIG9iamVjdFtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIHdyYXAgbWV0aG9kcyB5b3Ugd2FudCB0byBtZWFzdXJlLiBaZXJvIG92ZXJoZWFkIGluIHByb2R1Y3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1xuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICovXG4gIG1lYXN1cmU6IGZ1bmN0aW9uIChvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG1lYXN1cmVkRnVuYyA9IG51bGw7XG4gICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlKSB7XG4gICAgICAgICAgaWYgKCFtZWFzdXJlZEZ1bmMpIHtcbiAgICAgICAgICAgIG1lYXN1cmVkRnVuYyA9IFJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtZWFzdXJlZEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBwZXIuZGlzcGxheU5hbWUgPSBvYmpOYW1lICsgJ18nICsgZm5OYW1lO1xuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIHJldHVybiBmdW5jO1xuICB9LFxuXG4gIGluamVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1lYXN1cmVcbiAgICAgKi9cbiAgICBpbmplY3RNZWFzdXJlOiBmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgUmVhY3RQZXJmLnN0b3JlZE1lYXN1cmUgPSBtZWFzdXJlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBTaW1wbHkgcGFzc2VzIHRocm91Z2ggdGhlIG1lYXN1cmVkIGZ1bmN0aW9uLCB3aXRob3V0IG1lYXN1cmluZyBpdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb2JqTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIF9ub01lYXN1cmUob2JqTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gIHJldHVybiBmdW5jO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UGVyZjsiXX0=\n},{\"_process\":30}],106:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocationNames\n */\n\n'use strict';\n\nvar ReactPropTypeLocationNames = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n}\n\nmodule.exports = ReactPropTypeLocationNames;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzOyJdfQ==\n},{\"_process\":30}],107:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocations\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar ReactPropTypeLocations = keyMirror({\n  prop: null,\n  context: null,\n  childContext: null\n});\n\nmodule.exports = ReactPropTypeLocations;\n},{\"fbjs/lib/keyMirror\":21}],108:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypes\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getIteratorFn = require('./getIteratorFn');\n\n/**\n * Collection of methods that allow declaration and validation of props that are\n * supplied to React components. Example usage:\n *\n *   var Props = require('ReactPropTypes');\n *   var MyArticle = React.createClass({\n *     propTypes: {\n *       // An optional string prop named \"description\".\n *       description: Props.string,\n *\n *       // A required enum prop named \"category\".\n *       category: Props.oneOf(['News','Photos']).isRequired,\n *\n *       // A prop named \"dialog\" that requires an instance of Dialog.\n *       dialog: Props.instanceOf(Dialog).isRequired\n *     },\n *     render: function() { ... }\n *   });\n *\n * A more formal specification of how these methods are used:\n *\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n *   decl := ReactPropTypes.{type}(.isRequired)?\n *\n * Each and every declaration produces a function with the same signature. This\n * allows the creation of custom validation functions. For example:\n *\n *  var MyLink = React.createClass({\n *    propTypes: {\n *      // An optional string or URI prop named \"href\".\n *      href: function(props, propName, componentName) {\n *        var propValue = props[propName];\n *        if (propValue != null && typeof propValue !== 'string' &&\n *            !(propValue instanceof URI)) {\n *          return new Error(\n *            'Expected a string or an URI for ' + propName + ' in ' +\n *            componentName\n *          );\n *        }\n *      }\n *    },\n *    render: function() {...}\n *  });\n *\n * @internal\n */\n\nvar ANONYMOUS = '<<anonymous>>';\n\nvar ReactPropTypes = {\n  array: createPrimitiveTypeChecker('array'),\n  bool: createPrimitiveTypeChecker('boolean'),\n  func: createPrimitiveTypeChecker('function'),\n  number: createPrimitiveTypeChecker('number'),\n  object: createPrimitiveTypeChecker('object'),\n  string: createPrimitiveTypeChecker('string'),\n\n  any: createAnyTypeChecker(),\n  arrayOf: createArrayOfTypeChecker,\n  element: createElementTypeChecker(),\n  instanceOf: createInstanceTypeChecker,\n  node: createNodeChecker(),\n  objectOf: createObjectOfTypeChecker,\n  oneOf: createEnumTypeChecker,\n  oneOfType: createUnionTypeChecker,\n  shape: createShapeTypeChecker\n};\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, componentName, location, propFullName) {\n    componentName = componentName || ANONYMOUS;\n    propFullName = propFullName || propName;\n    if (props[propName] == null) {\n      var locationName = ReactPropTypeLocationNames[location];\n      if (isRequired) {\n        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));\n      }\n      return null;\n    } else {\n      return validate(props, propName, componentName, location, propFullName);\n    }\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nfunction createPrimitiveTypeChecker(expectedType) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== expectedType) {\n      var locationName = ReactPropTypeLocationNames[location];\n      // `propValue` being instance of, say, date/regexp, pass the 'object'\n      // check, but we can offer a more precise error message here rather than\n      // 'of type `object`'.\n      var preciseType = getPreciseType(propValue);\n\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createAnyTypeChecker() {\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));\n}\n\nfunction createArrayOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    if (!Array.isArray(propValue)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var propType = getPropType(propValue);\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n    }\n    for (var i = 0; i < propValue.length; i++) {\n      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');\n      if (error instanceof Error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createElementTypeChecker() {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!ReactElement.isValidElement(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createInstanceTypeChecker(expectedClass) {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!(props[propName] instanceof expectedClass)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var expectedClassName = expectedClass.name || ANONYMOUS;\n      var actualClassName = getClassName(props[propName]);\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createEnumTypeChecker(expectedValues) {\n  if (!Array.isArray(expectedValues)) {\n    return createChainableTypeChecker(function () {\n      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');\n    });\n  }\n\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    for (var i = 0; i < expectedValues.length; i++) {\n      if (propValue === expectedValues[i]) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    var valuesString = JSON.stringify(expectedValues);\n    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createObjectOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n    }\n    for (var key in propValue) {\n      if (propValue.hasOwnProperty(key)) {\n        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {\n  if (!Array.isArray(arrayOfTypeCheckers)) {\n    return createChainableTypeChecker(function () {\n      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');\n    });\n  }\n\n  function validate(props, propName, componentName, location, propFullName) {\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (checker(props, propName, componentName, location, propFullName) == null) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createNodeChecker() {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!isNode(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createShapeTypeChecker(shapeTypes) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n    }\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n      if (!checker) {\n        continue;\n      }\n      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);\n      if (error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction isNode(propValue) {\n  switch (typeof propValue) {\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return true;\n    case 'boolean':\n      return !propValue;\n    case 'object':\n      if (Array.isArray(propValue)) {\n        return propValue.every(isNode);\n      }\n      if (propValue === null || ReactElement.isValidElement(propValue)) {\n        return true;\n      }\n\n      var iteratorFn = getIteratorFn(propValue);\n      if (iteratorFn) {\n        var iterator = iteratorFn.call(propValue);\n        var step;\n        if (iteratorFn !== propValue.entries) {\n          while (!(step = iterator.next()).done) {\n            if (!isNode(step.value)) {\n              return false;\n            }\n          }\n        } else {\n          // Iterator will provide entry [k,v] tuples rather than values.\n          while (!(step = iterator.next()).done) {\n            var entry = step.value;\n            if (entry) {\n              if (!isNode(entry[1])) {\n                return false;\n              }\n            }\n          }\n        }\n      } else {\n        return false;\n      }\n\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Equivalent of `typeof` but with special handling for array and regexp.\nfunction getPropType(propValue) {\n  var propType = typeof propValue;\n  if (Array.isArray(propValue)) {\n    return 'array';\n  }\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return 'function' rather than\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return 'object';\n  }\n  return propType;\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// See `createPrimitiveTypeChecker`.\nfunction getPreciseType(propValue) {\n  var propType = getPropType(propValue);\n  if (propType === 'object') {\n    if (propValue instanceof Date) {\n      return 'date';\n    } else if (propValue instanceof RegExp) {\n      return 'regexp';\n    }\n  }\n  return propType;\n}\n\n// Returns class name of the object, if any.\nfunction getClassName(propValue) {\n  if (!propValue.constructor || !propValue.constructor.name) {\n    return '<<anonymous>>';\n  }\n  return propValue.constructor.name;\n}\n\nmodule.exports = ReactPropTypes;\n},{\"./ReactElement\":86,\"./ReactPropTypeLocationNames\":106,\"./getIteratorFn\":152,\"fbjs/lib/emptyFunction\":10}],109:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction(forceHTML) {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;\n},{\"./CallbackQueue\":37,\"./Object.assign\":54,\"./PooledClass\":55,\"./ReactBrowserEventEmitter\":58,\"./ReactDOMFeatureFlags\":73,\"./ReactInputSelection\":94,\"./Transaction\":137}],110:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n\n'use strict';\n\nvar ReactRef = require('./ReactRef');\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n\n};\n\nmodule.exports = ReactReconciler;\n},{\"./ReactRef\":111}],111:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRef\n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n\n  return(\n    // This has a few false positives w/r/t empty components.\n    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref\n  );\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;\n},{\"./ReactOwner\":104}],112:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\nvar ReactRootIndexInjection = {\n  /**\n   * @param {function} _createReactRootIndex\n   */\n  injectCreateReactRootIndex: function (_createReactRootIndex) {\n    ReactRootIndex.createReactRootIndex = _createReactRootIndex;\n  }\n};\n\nvar ReactRootIndex = {\n  createReactRootIndex: null,\n  injection: ReactRootIndexInjection\n};\n\nmodule.exports = ReactRootIndex;\n},{}],113:[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerBatchingStrategy\n * @typechecks\n */\n\n'use strict';\n\nvar ReactServerBatchingStrategy = {\n  isBatchingUpdates: false,\n  batchedUpdates: function (callback) {\n    // Don't do anything here. During the server rendering we don't want to\n    // schedule any updates. We will simply ignore them.\n  }\n};\n\nmodule.exports = ReactServerBatchingStrategy;\n},{}],114:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n'use strict';\n\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup\n */\nfunction renderToString(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(false);\n\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      var markup = componentInstance.mountComponent(id, transaction, emptyObject);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup, without the extra React ID and checksum\n * (for generating static pages)\n */\nfunction renderToStaticMarkup(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(true);\n\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      return componentInstance.mountComponent(id, transaction, emptyObject);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\nmodule.exports = {\n  renderToString: renderToString,\n  renderToStaticMarkup: renderToStaticMarkup\n};\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneScpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VIYW5kbGVzJyk7XG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHJlcXVpcmUoJy4vUmVhY3RNYXJrdXBDaGVja3N1bScpO1xudmFyIFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneSA9IHJlcXVpcmUoJy4vUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5Jyk7XG52YXIgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbicpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBIVE1MIG1hcmt1cFxuICovXG5mdW5jdGlvbiByZW5kZXJUb1N0cmluZyhlbGVtZW50KSB7XG4gICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVuZGVyVG9TdHJpbmcoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIHRyYW5zYWN0aW9uO1xuICB0cnkge1xuICAgIFJlYWN0VXBkYXRlcy5pbmplY3Rpb24uaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kpO1xuXG4gICAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB0cmFuc2FjdGlvbiA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKGZhbHNlKTtcblxuICAgIHJldHVybiB0cmFuc2FjdGlvbi5wZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgbnVsbCk7XG4gICAgICB2YXIgbWFya3VwID0gY29tcG9uZW50SW5zdGFuY2UubW91bnRDb21wb25lbnQoaWQsIHRyYW5zYWN0aW9uLCBlbXB0eU9iamVjdCk7XG4gICAgICByZXR1cm4gUmVhY3RNYXJrdXBDaGVja3N1bS5hZGRDaGVja3N1bVRvTWFya3VwKG1hcmt1cCk7XG4gICAgfSwgbnVsbCk7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgICAvLyBSZXZlcnQgdG8gdGhlIERPTSBiYXRjaGluZyBzdHJhdGVneSBzaW5jZSB0aGVzZSB0d28gcmVuZGVyZXJzXG4gICAgLy8gY3VycmVudGx5IHNoYXJlIHRoZXNlIHN0YXRlZnVsIG1vZHVsZXMuXG4gICAgUmVhY3RVcGRhdGVzLmluamVjdGlvbi5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwLCB3aXRob3V0IHRoZSBleHRyYSBSZWFjdCBJRCBhbmQgY2hlY2tzdW1cbiAqIChmb3IgZ2VuZXJhdGluZyBzdGF0aWMgcGFnZXMpXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRvU3RhdGljTWFya3VwKGVsZW1lbnQpIHtcbiAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdyZW5kZXJUb1N0YXRpY01hcmt1cCgpOiBZb3UgbXVzdCBwYXNzIGEgdmFsaWQgUmVhY3RFbGVtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICB2YXIgdHJhbnNhY3Rpb247XG4gIHRyeSB7XG4gICAgUmVhY3RVcGRhdGVzLmluamVjdGlvbi5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneSk7XG5cbiAgICB2YXIgaWQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHRyYW5zYWN0aW9uID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQodHJ1ZSk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIG51bGwpO1xuICAgICAgcmV0dXJuIGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgZW1wdHlPYmplY3QpO1xuICAgIH0sIG51bGwpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gICAgLy8gUmV2ZXJ0IHRvIHRoZSBET00gYmF0Y2hpbmcgc3RyYXRlZ3kgc2luY2UgdGhlc2UgdHdvIHJlbmRlcmVyc1xuICAgIC8vIGN1cnJlbnRseSBzaGFyZSB0aGVzZSBzdGF0ZWZ1bCBtb2R1bGVzLlxuICAgIFJlYWN0VXBkYXRlcy5pbmplY3Rpb24uaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyVG9TdHJpbmc6IHJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogcmVuZGVyVG9TdGF0aWNNYXJrdXBcbn07Il19\n},{\"./ReactDefaultBatchingStrategy\":82,\"./ReactElement\":86,\"./ReactInstanceHandles\":95,\"./ReactMarkupChecksum\":98,\"./ReactServerBatchingStrategy\":113,\"./ReactServerRenderingTransaction\":115,\"./ReactUpdates\":120,\"./instantiateReactComponent\":155,\"_process\":30,\"fbjs/lib/emptyObject\":11,\"fbjs/lib/invariant\":18}],115:[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerRenderingTransaction\n * @typechecks\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\nvar CallbackQueue = require('./CallbackQueue');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\n/**\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  close: emptyFunction\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];\n\n/**\n * @class ReactServerRenderingTransaction\n * @param {boolean} renderToStaticMarkup\n */\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {\n  this.reinitializeTransaction();\n  this.renderToStaticMarkup = renderToStaticMarkup;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = false;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array} Empty list of operation wrap procedures.\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nassign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);\n\nmodule.exports = ReactServerRenderingTransaction;\n},{\"./CallbackQueue\":37,\"./Object.assign\":54,\"./PooledClass\":55,\"./Transaction\":137,\"fbjs/lib/emptyFunction\":10}],116:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactTransitionChildMapping\n */\n\n'use strict';\n\nvar flattenChildren = require('./flattenChildren');\n\nvar ReactTransitionChildMapping = {\n  /**\n   * Given `this.props.children`, return an object mapping key to child. Just\n   * simple syntactic sugar around flattenChildren().\n   *\n   * @param {*} children `this.props.children`\n   * @return {object} Mapping of key to child\n   */\n  getChildMapping: function (children) {\n    if (!children) {\n      return children;\n    }\n    return flattenChildren(children);\n  },\n\n  /**\n   * When you're adding or removing children some may be added or removed in the\n   * same render pass. We want to show *both* since we want to simultaneously\n   * animate elements in and out. This function takes a previous set of keys\n   * and a new set of keys and merges them with its best guess of the correct\n   * ordering. In the future we may expose some of the utilities in\n   * ReactMultiChild to make this easy, but for now React itself does not\n   * directly have this concept of the union of prevChildren and nextChildren\n   * so we implement it here.\n   *\n   * @param {object} prev prev children as returned from\n   * `ReactTransitionChildMapping.getChildMapping()`.\n   * @param {object} next next children as returned from\n   * `ReactTransitionChildMapping.getChildMapping()`.\n   * @return {object} a key set that contains all keys in `prev` and all keys\n   * in `next` in a reasonable order.\n   */\n  mergeChildMappings: function (prev, next) {\n    prev = prev || {};\n    next = next || {};\n\n    function getValueForKey(key) {\n      if (next.hasOwnProperty(key)) {\n        return next[key];\n      } else {\n        return prev[key];\n      }\n    }\n\n    // For each key of `next`, the list of keys to insert before that key in\n    // the combined list\n    var nextKeysPending = {};\n\n    var pendingKeys = [];\n    for (var prevKey in prev) {\n      if (next.hasOwnProperty(prevKey)) {\n        if (pendingKeys.length) {\n          nextKeysPending[prevKey] = pendingKeys;\n          pendingKeys = [];\n        }\n      } else {\n        pendingKeys.push(prevKey);\n      }\n    }\n\n    var i;\n    var childMapping = {};\n    for (var nextKey in next) {\n      if (nextKeysPending.hasOwnProperty(nextKey)) {\n        for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n          var pendingNextKey = nextKeysPending[nextKey][i];\n          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n        }\n      }\n      childMapping[nextKey] = getValueForKey(nextKey);\n    }\n\n    // Finally, add the keys which didn't appear before any key in `next`\n    for (i = 0; i < pendingKeys.length; i++) {\n      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n    }\n\n    return childMapping;\n  }\n};\n\nmodule.exports = ReactTransitionChildMapping;\n},{\"./flattenChildren\":146}],117:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTransitionEvents\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\n/**\n * EVENT_NAME_MAP is used to determine which event fired when a\n * transition/animation ends, based on the style property used to\n * define that event.\n */\nvar EVENT_NAME_MAP = {\n  transitionend: {\n    'transition': 'transitionend',\n    'WebkitTransition': 'webkitTransitionEnd',\n    'MozTransition': 'mozTransitionEnd',\n    'OTransition': 'oTransitionEnd',\n    'msTransition': 'MSTransitionEnd'\n  },\n\n  animationend: {\n    'animation': 'animationend',\n    'WebkitAnimation': 'webkitAnimationEnd',\n    'MozAnimation': 'mozAnimationEnd',\n    'OAnimation': 'oAnimationEnd',\n    'msAnimation': 'MSAnimationEnd'\n  }\n};\n\nvar endEvents = [];\n\nfunction detectEvents() {\n  var testEl = document.createElement('div');\n  var style = testEl.style;\n\n  // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are useable, and if not remove them\n  // from the map\n  if (!('AnimationEvent' in window)) {\n    delete EVENT_NAME_MAP.animationend.animation;\n  }\n\n  if (!('TransitionEvent' in window)) {\n    delete EVENT_NAME_MAP.transitionend.transition;\n  }\n\n  for (var baseEventName in EVENT_NAME_MAP) {\n    var baseEvents = EVENT_NAME_MAP[baseEventName];\n    for (var styleName in baseEvents) {\n      if (styleName in style) {\n        endEvents.push(baseEvents[styleName]);\n        break;\n      }\n    }\n  }\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  detectEvents();\n}\n\n// We use the raw {add|remove}EventListener() call because EventListener\n// does not know how to remove event listeners and we really should\n// clean up. Also, these events are not triggered in older browsers\n// so we should be A-OK here.\n\nfunction addEventListener(node, eventName, eventListener) {\n  node.addEventListener(eventName, eventListener, false);\n}\n\nfunction removeEventListener(node, eventName, eventListener) {\n  node.removeEventListener(eventName, eventListener, false);\n}\n\nvar ReactTransitionEvents = {\n  addEndEventListener: function (node, eventListener) {\n    if (endEvents.length === 0) {\n      // If CSS transitions are not supported, trigger an \"end animation\"\n      // event immediately.\n      window.setTimeout(eventListener, 0);\n      return;\n    }\n    endEvents.forEach(function (endEvent) {\n      addEventListener(node, endEvent, eventListener);\n    });\n  },\n\n  removeEndEventListener: function (node, eventListener) {\n    if (endEvents.length === 0) {\n      return;\n    }\n    endEvents.forEach(function (endEvent) {\n      removeEventListener(node, endEvent, eventListener);\n    });\n  }\n};\n\nmodule.exports = ReactTransitionEvents;\n},{\"fbjs/lib/ExecutionEnvironment\":4}],118:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTransitionGroup\n */\n\n'use strict';\n\nvar React = require('./React');\nvar ReactTransitionChildMapping = require('./ReactTransitionChildMapping');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar ReactTransitionGroup = React.createClass({\n  displayName: 'ReactTransitionGroup',\n\n  propTypes: {\n    component: React.PropTypes.any,\n    childFactory: React.PropTypes.func\n  },\n\n  getDefaultProps: function () {\n    return {\n      component: 'span',\n      childFactory: emptyFunction.thatReturnsArgument\n    };\n  },\n\n  getInitialState: function () {\n    return {\n      children: ReactTransitionChildMapping.getChildMapping(this.props.children)\n    };\n  },\n\n  componentWillMount: function () {\n    this.currentlyTransitioningKeys = {};\n    this.keysToEnter = [];\n    this.keysToLeave = [];\n  },\n\n  componentDidMount: function () {\n    var initialChildMapping = this.state.children;\n    for (var key in initialChildMapping) {\n      if (initialChildMapping[key]) {\n        this.performAppear(key);\n      }\n    }\n  },\n\n  componentWillReceiveProps: function (nextProps) {\n    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);\n    var prevChildMapping = this.state.children;\n\n    this.setState({\n      children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)\n    });\n\n    var key;\n\n    for (key in nextChildMapping) {\n      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);\n      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {\n        this.keysToEnter.push(key);\n      }\n    }\n\n    for (key in prevChildMapping) {\n      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);\n      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {\n        this.keysToLeave.push(key);\n      }\n    }\n\n    // If we want to someday check for reordering, we could do it here.\n  },\n\n  componentDidUpdate: function () {\n    var keysToEnter = this.keysToEnter;\n    this.keysToEnter = [];\n    keysToEnter.forEach(this.performEnter);\n\n    var keysToLeave = this.keysToLeave;\n    this.keysToLeave = [];\n    keysToLeave.forEach(this.performLeave);\n  },\n\n  performAppear: function (key) {\n    this.currentlyTransitioningKeys[key] = true;\n\n    var component = this.refs[key];\n\n    if (component.componentWillAppear) {\n      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));\n    } else {\n      this._handleDoneAppearing(key);\n    }\n  },\n\n  _handleDoneAppearing: function (key) {\n    var component = this.refs[key];\n    if (component.componentDidAppear) {\n      component.componentDidAppear();\n    }\n\n    delete this.currentlyTransitioningKeys[key];\n\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);\n\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n      // This was removed before it had fully appeared. Remove it.\n      this.performLeave(key);\n    }\n  },\n\n  performEnter: function (key) {\n    this.currentlyTransitioningKeys[key] = true;\n\n    var component = this.refs[key];\n\n    if (component.componentWillEnter) {\n      component.componentWillEnter(this._handleDoneEntering.bind(this, key));\n    } else {\n      this._handleDoneEntering(key);\n    }\n  },\n\n  _handleDoneEntering: function (key) {\n    var component = this.refs[key];\n    if (component.componentDidEnter) {\n      component.componentDidEnter();\n    }\n\n    delete this.currentlyTransitioningKeys[key];\n\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);\n\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n      // This was removed before it had fully entered. Remove it.\n      this.performLeave(key);\n    }\n  },\n\n  performLeave: function (key) {\n    this.currentlyTransitioningKeys[key] = true;\n\n    var component = this.refs[key];\n    if (component.componentWillLeave) {\n      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));\n    } else {\n      // Note that this is somewhat dangerous b/c it calls setState()\n      // again, effectively mutating the component before all the work\n      // is done.\n      this._handleDoneLeaving(key);\n    }\n  },\n\n  _handleDoneLeaving: function (key) {\n    var component = this.refs[key];\n\n    if (component.componentDidLeave) {\n      component.componentDidLeave();\n    }\n\n    delete this.currentlyTransitioningKeys[key];\n\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);\n\n    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {\n      // This entered again before it fully left. Add it again.\n      this.performEnter(key);\n    } else {\n      this.setState(function (state) {\n        var newChildren = assign({}, state.children);\n        delete newChildren[key];\n        return { children: newChildren };\n      });\n    }\n  },\n\n  render: function () {\n    // TODO: we could get rid of the need for the wrapper node\n    // by cloning a single child\n    var childrenToRender = [];\n    for (var key in this.state.children) {\n      var child = this.state.children[key];\n      if (child) {\n        // You may need to apply reactive updates to a child as it is leaving.\n        // The normal React way to do it won't work since the child will have\n        // already been removed. In case you need this behavior you can provide\n        // a childFactory function to wrap every child, even the ones that are\n        // leaving.\n        childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));\n      }\n    }\n    return React.createElement(this.props.component, this.props, childrenToRender);\n  }\n});\n\nmodule.exports = ReactTransitionGroup;\n},{\"./Object.assign\":54,\"./React\":56,\"./ReactTransitionChildMapping\":116,\"fbjs/lib/emptyFunction\":10}],119:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdateQueue\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction enqueueUpdate(internalInstance) {\n  ReactUpdates.enqueueUpdate(internalInstance);\n}\n\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {\n  var internalInstance = ReactInstanceMap.get(publicInstance);\n  if (!internalInstance) {\n    if (process.env.NODE_ENV !== 'production') {\n      // Only warn when we have a callerName. Otherwise we should be silent.\n      // We're probably calling from enqueueCallback. We don't want to warn\n      // there because we already warned for the corresponding lifecycle method.\n      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;\n    }\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;\n  }\n\n  return internalInstance;\n}\n\n/**\n * ReactUpdateQueue allows for state updates to be scheduled into a later\n * reconciliation step.\n */\nvar ReactUpdateQueue = {\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    if (process.env.NODE_ENV !== 'production') {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n    var internalInstance = ReactInstanceMap.get(publicInstance);\n    if (internalInstance) {\n      // During componentWillMount and render this will still be null but after\n      // that will always render to something. At least for now. So we can use\n      // this hack.\n      return !!internalInstance._renderedComponent;\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n  enqueueCallback: function (publicInstance, callback) {\n    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\\'t callable.') : invariant(false) : undefined;\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);\n\n    // Previously we would throw an error if we didn't have an internal\n    // instance. Since we want to make it a no-op instead, we mirror the same\n    // behavior we have in other enqueue* methods.\n    // We also need to ignore callbacks in componentWillMount. See\n    // enqueueUpdates.\n    if (!internalInstance) {\n      return null;\n    }\n\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    // TODO: The callback here is ignored when setState is called from\n    // componentWillMount. Either fix it or disallow doing so completely in\n    // favor of getInitialState. Alternatively, we can disallow\n    // componentWillMount during server-side rendering.\n    enqueueUpdate(internalInstance);\n  },\n\n  enqueueCallbackInternal: function (internalInstance, callback) {\n    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\\'t callable.') : invariant(false) : undefined;\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingForceUpdate = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingStateQueue = [completeState];\n    internalInstance._pendingReplaceState = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);\n    queue.push(partialState);\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialProps Subset of the next props.\n   * @internal\n   */\n  enqueueSetProps: function (publicInstance, partialProps) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');\n    if (!internalInstance) {\n      return;\n    }\n    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);\n  },\n\n  enqueueSetPropsInternal: function (internalInstance, partialProps) {\n    var topLevelWrapper = internalInstance._topLevelWrapper;\n    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;\n\n    // Merge with the pending element if it exists, otherwise with existing\n    // element props.\n    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;\n    var element = wrapElement.props;\n    var props = assign({}, element.props, partialProps);\n    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));\n\n    enqueueUpdate(topLevelWrapper);\n  },\n\n  /**\n   * Replaces all of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} props New props.\n   * @internal\n   */\n  enqueueReplaceProps: function (publicInstance, props) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');\n    if (!internalInstance) {\n      return;\n    }\n    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);\n  },\n\n  enqueueReplacePropsInternal: function (internalInstance, props) {\n    var topLevelWrapper = internalInstance._topLevelWrapper;\n    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;\n\n    // Merge with the pending element if it exists, otherwise with existing\n    // element props.\n    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;\n    var element = wrapElement.props;\n    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));\n\n    enqueueUpdate(topLevelWrapper);\n  },\n\n  enqueueElementInternal: function (internalInstance, newElement) {\n    internalInstance._pendingElement = newElement;\n    enqueueUpdate(internalInstance);\n  }\n\n};\n\nmodule.exports = ReactUpdateQueue;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./Object.assign\":54,\"./ReactCurrentOwner\":68,\"./ReactElement\":86,\"./ReactInstanceMap\":96,\"./ReactUpdates\":120,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],120:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdates\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar dirtyComponents = [];\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\n\nvar batchingStrategy = null;\n\nfunction ensureInjected() {\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;\n}\n\nvar NESTED_UPDATES = {\n  initialize: function () {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function () {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING = {\n  initialize: function () {\n    this.callbackQueue.reset();\n  },\n  close: function () {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);\n}\n\nassign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function () {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n\n  perform: function (method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b, c, d, e) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);\n}\n\n/**\n * Array comparator for ReactComponents by mount ordering.\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountOrderComparator(c1, c2) {\n  return c1._mountOrder - c2._mountOrder;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountOrderComparator);\n\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, it will still\n    // be here, but we assume that it has cleared its _pendingCallbacks and\n    // that performUpdateIfNecessary is a noop.\n    var component = dirtyComponents[i];\n\n    // If performUpdateIfNecessary happens to enqueue any new updates, we\n    // shouldn't execute the callbacks until the next render happens, so\n    // stash the callbacks first\n    var callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = null;\n\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);\n\n    if (callbacks) {\n      for (var j = 0; j < callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates = function () {\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,\n  // componentDidUpdate) but we need to check here too in order to catch\n  // updates enqueued by setState callbacks and asap calls.\n  while (dirtyComponents.length || asapEnqueued) {\n    if (dirtyComponents.length) {\n      var transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n\n    if (asapEnqueued) {\n      asapEnqueued = false;\n      var queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\nflushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component) {\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setProps, setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n\n  dirtyComponents.push(component);\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\n\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function (ReconcileTransaction) {\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function (_batchingStrategy) {\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;\n    batchingStrategy = _batchingStrategy;\n  }\n};\n\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\n\nmodule.exports = ReactUpdates;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./CallbackQueue\":37,\"./Object.assign\":54,\"./PooledClass\":55,\"./ReactPerf\":105,\"./ReactReconciler\":110,\"./Transaction\":137,\"_process\":30,\"fbjs/lib/invariant\":18}],121:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactVersion\n */\n\n'use strict';\n\nmodule.exports = '0.14.8';\n},{}],122:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SVGDOMPropertyConfig\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\n\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;\n\nvar NS = {\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace'\n};\n\nvar SVGDOMPropertyConfig = {\n  Properties: {\n    clipPath: MUST_USE_ATTRIBUTE,\n    cx: MUST_USE_ATTRIBUTE,\n    cy: MUST_USE_ATTRIBUTE,\n    d: MUST_USE_ATTRIBUTE,\n    dx: MUST_USE_ATTRIBUTE,\n    dy: MUST_USE_ATTRIBUTE,\n    fill: MUST_USE_ATTRIBUTE,\n    fillOpacity: MUST_USE_ATTRIBUTE,\n    fontFamily: MUST_USE_ATTRIBUTE,\n    fontSize: MUST_USE_ATTRIBUTE,\n    fx: MUST_USE_ATTRIBUTE,\n    fy: MUST_USE_ATTRIBUTE,\n    gradientTransform: MUST_USE_ATTRIBUTE,\n    gradientUnits: MUST_USE_ATTRIBUTE,\n    markerEnd: MUST_USE_ATTRIBUTE,\n    markerMid: MUST_USE_ATTRIBUTE,\n    markerStart: MUST_USE_ATTRIBUTE,\n    offset: MUST_USE_ATTRIBUTE,\n    opacity: MUST_USE_ATTRIBUTE,\n    patternContentUnits: MUST_USE_ATTRIBUTE,\n    patternUnits: MUST_USE_ATTRIBUTE,\n    points: MUST_USE_ATTRIBUTE,\n    preserveAspectRatio: MUST_USE_ATTRIBUTE,\n    r: MUST_USE_ATTRIBUTE,\n    rx: MUST_USE_ATTRIBUTE,\n    ry: MUST_USE_ATTRIBUTE,\n    spreadMethod: MUST_USE_ATTRIBUTE,\n    stopColor: MUST_USE_ATTRIBUTE,\n    stopOpacity: MUST_USE_ATTRIBUTE,\n    stroke: MUST_USE_ATTRIBUTE,\n    strokeDasharray: MUST_USE_ATTRIBUTE,\n    strokeLinecap: MUST_USE_ATTRIBUTE,\n    strokeOpacity: MUST_USE_ATTRIBUTE,\n    strokeWidth: MUST_USE_ATTRIBUTE,\n    textAnchor: MUST_USE_ATTRIBUTE,\n    transform: MUST_USE_ATTRIBUTE,\n    version: MUST_USE_ATTRIBUTE,\n    viewBox: MUST_USE_ATTRIBUTE,\n    x1: MUST_USE_ATTRIBUTE,\n    x2: MUST_USE_ATTRIBUTE,\n    x: MUST_USE_ATTRIBUTE,\n    xlinkActuate: MUST_USE_ATTRIBUTE,\n    xlinkArcrole: MUST_USE_ATTRIBUTE,\n    xlinkHref: MUST_USE_ATTRIBUTE,\n    xlinkRole: MUST_USE_ATTRIBUTE,\n    xlinkShow: MUST_USE_ATTRIBUTE,\n    xlinkTitle: MUST_USE_ATTRIBUTE,\n    xlinkType: MUST_USE_ATTRIBUTE,\n    xmlBase: MUST_USE_ATTRIBUTE,\n    xmlLang: MUST_USE_ATTRIBUTE,\n    xmlSpace: MUST_USE_ATTRIBUTE,\n    y1: MUST_USE_ATTRIBUTE,\n    y2: MUST_USE_ATTRIBUTE,\n    y: MUST_USE_ATTRIBUTE\n  },\n  DOMAttributeNamespaces: {\n    xlinkActuate: NS.xlink,\n    xlinkArcrole: NS.xlink,\n    xlinkHref: NS.xlink,\n    xlinkRole: NS.xlink,\n    xlinkShow: NS.xlink,\n    xlinkTitle: NS.xlink,\n    xlinkType: NS.xlink,\n    xmlBase: NS.xml,\n    xmlLang: NS.xml,\n    xmlSpace: NS.xml\n  },\n  DOMAttributeNames: {\n    clipPath: 'clip-path',\n    fillOpacity: 'fill-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    gradientTransform: 'gradientTransform',\n    gradientUnits: 'gradientUnits',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    patternContentUnits: 'patternContentUnits',\n    patternUnits: 'patternUnits',\n    preserveAspectRatio: 'preserveAspectRatio',\n    spreadMethod: 'spreadMethod',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strokeDasharray: 'stroke-dasharray',\n    strokeLinecap: 'stroke-linecap',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    textAnchor: 'text-anchor',\n    viewBox: 'viewBox',\n    xlinkActuate: 'xlink:actuate',\n    xlinkArcrole: 'xlink:arcrole',\n    xlinkHref: 'xlink:href',\n    xlinkRole: 'xlink:role',\n    xlinkShow: 'xlink:show',\n    xlinkTitle: 'xlink:title',\n    xlinkType: 'xlink:type',\n    xmlBase: 'xml:base',\n    xmlLang: 'xml:lang',\n    xmlSpace: 'xml:space'\n  }\n};\n\nmodule.exports = SVGDOMPropertyConfig;\n},{\"./DOMProperty\":41}],123:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSelect: null }),\n      captured: keyOf({ onSelectCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\n\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n// Track whether a listener exists for this plugin. If none exist, we do\n// not extract events.\nvar hasListener = false;\nvar ON_SELECT_KEY = keyOf({ onSelect: null });\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case topLevelTypes.topSelectionChange:\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n\n  didPutListener: function (id, registrationName, listener) {\n    if (registrationName === ON_SELECT_KEY) {\n      hasListener = true;\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;\n},{\"./EventConstants\":46,\"./EventPropagators\":50,\"./ReactInputSelection\":94,\"./SyntheticEvent\":129,\"./isTextInputElement\":157,\"fbjs/lib/ExecutionEnvironment\":4,\"fbjs/lib/getActiveElement\":13,\"fbjs/lib/keyOf\":22,\"fbjs/lib/shallowEqual\":27}],124:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ServerReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\n/**\n * Size of the reactRoot ID space. We generate random numbers for React root\n * IDs and if there's a collision the events and DOM update system will\n * get confused. In the future we need a way to generate GUIDs but for\n * now this will work on a smaller scale.\n */\nvar GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);\n\nvar ServerReactRootIndex = {\n  createReactRootIndex: function () {\n    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);\n  }\n};\n\nmodule.exports = ServerReactRootIndex;\n},{}],125:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SimpleEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventListener = require('fbjs/lib/EventListener');\nvar EventPropagators = require('./EventPropagators');\nvar ReactMount = require('./ReactMount');\nvar SyntheticClipboardEvent = require('./SyntheticClipboardEvent');\nvar SyntheticEvent = require('./SyntheticEvent');\nvar SyntheticFocusEvent = require('./SyntheticFocusEvent');\nvar SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\nvar SyntheticDragEvent = require('./SyntheticDragEvent');\nvar SyntheticTouchEvent = require('./SyntheticTouchEvent');\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\nvar SyntheticWheelEvent = require('./SyntheticWheelEvent');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getEventCharCode = require('./getEventCharCode');\nvar invariant = require('fbjs/lib/invariant');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  abort: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onAbort: true }),\n      captured: keyOf({ onAbortCapture: true })\n    }\n  },\n  blur: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBlur: true }),\n      captured: keyOf({ onBlurCapture: true })\n    }\n  },\n  canPlay: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCanPlay: true }),\n      captured: keyOf({ onCanPlayCapture: true })\n    }\n  },\n  canPlayThrough: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCanPlayThrough: true }),\n      captured: keyOf({ onCanPlayThroughCapture: true })\n    }\n  },\n  click: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onClick: true }),\n      captured: keyOf({ onClickCapture: true })\n    }\n  },\n  contextMenu: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onContextMenu: true }),\n      captured: keyOf({ onContextMenuCapture: true })\n    }\n  },\n  copy: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCopy: true }),\n      captured: keyOf({ onCopyCapture: true })\n    }\n  },\n  cut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCut: true }),\n      captured: keyOf({ onCutCapture: true })\n    }\n  },\n  doubleClick: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDoubleClick: true }),\n      captured: keyOf({ onDoubleClickCapture: true })\n    }\n  },\n  drag: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDrag: true }),\n      captured: keyOf({ onDragCapture: true })\n    }\n  },\n  dragEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragEnd: true }),\n      captured: keyOf({ onDragEndCapture: true })\n    }\n  },\n  dragEnter: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragEnter: true }),\n      captured: keyOf({ onDragEnterCapture: true })\n    }\n  },\n  dragExit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragExit: true }),\n      captured: keyOf({ onDragExitCapture: true })\n    }\n  },\n  dragLeave: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragLeave: true }),\n      captured: keyOf({ onDragLeaveCapture: true })\n    }\n  },\n  dragOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragOver: true }),\n      captured: keyOf({ onDragOverCapture: true })\n    }\n  },\n  dragStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragStart: true }),\n      captured: keyOf({ onDragStartCapture: true })\n    }\n  },\n  drop: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDrop: true }),\n      captured: keyOf({ onDropCapture: true })\n    }\n  },\n  durationChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDurationChange: true }),\n      captured: keyOf({ onDurationChangeCapture: true })\n    }\n  },\n  emptied: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEmptied: true }),\n      captured: keyOf({ onEmptiedCapture: true })\n    }\n  },\n  encrypted: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEncrypted: true }),\n      captured: keyOf({ onEncryptedCapture: true })\n    }\n  },\n  ended: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEnded: true }),\n      captured: keyOf({ onEndedCapture: true })\n    }\n  },\n  error: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onError: true }),\n      captured: keyOf({ onErrorCapture: true })\n    }\n  },\n  focus: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onFocus: true }),\n      captured: keyOf({ onFocusCapture: true })\n    }\n  },\n  input: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onInput: true }),\n      captured: keyOf({ onInputCapture: true })\n    }\n  },\n  keyDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyDown: true }),\n      captured: keyOf({ onKeyDownCapture: true })\n    }\n  },\n  keyPress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyPress: true }),\n      captured: keyOf({ onKeyPressCapture: true })\n    }\n  },\n  keyUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyUp: true }),\n      captured: keyOf({ onKeyUpCapture: true })\n    }\n  },\n  load: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoad: true }),\n      captured: keyOf({ onLoadCapture: true })\n    }\n  },\n  loadedData: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadedData: true }),\n      captured: keyOf({ onLoadedDataCapture: true })\n    }\n  },\n  loadedMetadata: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadedMetadata: true }),\n      captured: keyOf({ onLoadedMetadataCapture: true })\n    }\n  },\n  loadStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadStart: true }),\n      captured: keyOf({ onLoadStartCapture: true })\n    }\n  },\n  // Note: We do not allow listening to mouseOver events. Instead, use the\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.\n  mouseDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseDown: true }),\n      captured: keyOf({ onMouseDownCapture: true })\n    }\n  },\n  mouseMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseMove: true }),\n      captured: keyOf({ onMouseMoveCapture: true })\n    }\n  },\n  mouseOut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseOut: true }),\n      captured: keyOf({ onMouseOutCapture: true })\n    }\n  },\n  mouseOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseOver: true }),\n      captured: keyOf({ onMouseOverCapture: true })\n    }\n  },\n  mouseUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseUp: true }),\n      captured: keyOf({ onMouseUpCapture: true })\n    }\n  },\n  paste: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPaste: true }),\n      captured: keyOf({ onPasteCapture: true })\n    }\n  },\n  pause: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPause: true }),\n      captured: keyOf({ onPauseCapture: true })\n    }\n  },\n  play: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPlay: true }),\n      captured: keyOf({ onPlayCapture: true })\n    }\n  },\n  playing: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPlaying: true }),\n      captured: keyOf({ onPlayingCapture: true })\n    }\n  },\n  progress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onProgress: true }),\n      captured: keyOf({ onProgressCapture: true })\n    }\n  },\n  rateChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onRateChange: true }),\n      captured: keyOf({ onRateChangeCapture: true })\n    }\n  },\n  reset: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onReset: true }),\n      captured: keyOf({ onResetCapture: true })\n    }\n  },\n  scroll: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onScroll: true }),\n      captured: keyOf({ onScrollCapture: true })\n    }\n  },\n  seeked: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSeeked: true }),\n      captured: keyOf({ onSeekedCapture: true })\n    }\n  },\n  seeking: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSeeking: true }),\n      captured: keyOf({ onSeekingCapture: true })\n    }\n  },\n  stalled: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onStalled: true }),\n      captured: keyOf({ onStalledCapture: true })\n    }\n  },\n  submit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSubmit: true }),\n      captured: keyOf({ onSubmitCapture: true })\n    }\n  },\n  suspend: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSuspend: true }),\n      captured: keyOf({ onSuspendCapture: true })\n    }\n  },\n  timeUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTimeUpdate: true }),\n      captured: keyOf({ onTimeUpdateCapture: true })\n    }\n  },\n  touchCancel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchCancel: true }),\n      captured: keyOf({ onTouchCancelCapture: true })\n    }\n  },\n  touchEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchEnd: true }),\n      captured: keyOf({ onTouchEndCapture: true })\n    }\n  },\n  touchMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchMove: true }),\n      captured: keyOf({ onTouchMoveCapture: true })\n    }\n  },\n  touchStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchStart: true }),\n      captured: keyOf({ onTouchStartCapture: true })\n    }\n  },\n  volumeChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onVolumeChange: true }),\n      captured: keyOf({ onVolumeChangeCapture: true })\n    }\n  },\n  waiting: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onWaiting: true }),\n      captured: keyOf({ onWaitingCapture: true })\n    }\n  },\n  wheel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onWheel: true }),\n      captured: keyOf({ onWheelCapture: true })\n    }\n  }\n};\n\nvar topLevelEventsToDispatchConfig = {\n  topAbort: eventTypes.abort,\n  topBlur: eventTypes.blur,\n  topCanPlay: eventTypes.canPlay,\n  topCanPlayThrough: eventTypes.canPlayThrough,\n  topClick: eventTypes.click,\n  topContextMenu: eventTypes.contextMenu,\n  topCopy: eventTypes.copy,\n  topCut: eventTypes.cut,\n  topDoubleClick: eventTypes.doubleClick,\n  topDrag: eventTypes.drag,\n  topDragEnd: eventTypes.dragEnd,\n  topDragEnter: eventTypes.dragEnter,\n  topDragExit: eventTypes.dragExit,\n  topDragLeave: eventTypes.dragLeave,\n  topDragOver: eventTypes.dragOver,\n  topDragStart: eventTypes.dragStart,\n  topDrop: eventTypes.drop,\n  topDurationChange: eventTypes.durationChange,\n  topEmptied: eventTypes.emptied,\n  topEncrypted: eventTypes.encrypted,\n  topEnded: eventTypes.ended,\n  topError: eventTypes.error,\n  topFocus: eventTypes.focus,\n  topInput: eventTypes.input,\n  topKeyDown: eventTypes.keyDown,\n  topKeyPress: eventTypes.keyPress,\n  topKeyUp: eventTypes.keyUp,\n  topLoad: eventTypes.load,\n  topLoadedData: eventTypes.loadedData,\n  topLoadedMetadata: eventTypes.loadedMetadata,\n  topLoadStart: eventTypes.loadStart,\n  topMouseDown: eventTypes.mouseDown,\n  topMouseMove: eventTypes.mouseMove,\n  topMouseOut: eventTypes.mouseOut,\n  topMouseOver: eventTypes.mouseOver,\n  topMouseUp: eventTypes.mouseUp,\n  topPaste: eventTypes.paste,\n  topPause: eventTypes.pause,\n  topPlay: eventTypes.play,\n  topPlaying: eventTypes.playing,\n  topProgress: eventTypes.progress,\n  topRateChange: eventTypes.rateChange,\n  topReset: eventTypes.reset,\n  topScroll: eventTypes.scroll,\n  topSeeked: eventTypes.seeked,\n  topSeeking: eventTypes.seeking,\n  topStalled: eventTypes.stalled,\n  topSubmit: eventTypes.submit,\n  topSuspend: eventTypes.suspend,\n  topTimeUpdate: eventTypes.timeUpdate,\n  topTouchCancel: eventTypes.touchCancel,\n  topTouchEnd: eventTypes.touchEnd,\n  topTouchMove: eventTypes.touchMove,\n  topTouchStart: eventTypes.touchStart,\n  topVolumeChange: eventTypes.volumeChange,\n  topWaiting: eventTypes.waiting,\n  topWheel: eventTypes.wheel\n};\n\nfor (var type in topLevelEventsToDispatchConfig) {\n  topLevelEventsToDispatchConfig[type].dependencies = [type];\n}\n\nvar ON_CLICK_KEY = keyOf({ onClick: null });\nvar onClickListeners = {};\n\nvar SimpleEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];\n    if (!dispatchConfig) {\n      return null;\n    }\n    var EventConstructor;\n    switch (topLevelType) {\n      case topLevelTypes.topAbort:\n      case topLevelTypes.topCanPlay:\n      case topLevelTypes.topCanPlayThrough:\n      case topLevelTypes.topDurationChange:\n      case topLevelTypes.topEmptied:\n      case topLevelTypes.topEncrypted:\n      case topLevelTypes.topEnded:\n      case topLevelTypes.topError:\n      case topLevelTypes.topInput:\n      case topLevelTypes.topLoad:\n      case topLevelTypes.topLoadedData:\n      case topLevelTypes.topLoadedMetadata:\n      case topLevelTypes.topLoadStart:\n      case topLevelTypes.topPause:\n      case topLevelTypes.topPlay:\n      case topLevelTypes.topPlaying:\n      case topLevelTypes.topProgress:\n      case topLevelTypes.topRateChange:\n      case topLevelTypes.topReset:\n      case topLevelTypes.topSeeked:\n      case topLevelTypes.topSeeking:\n      case topLevelTypes.topStalled:\n      case topLevelTypes.topSubmit:\n      case topLevelTypes.topSuspend:\n      case topLevelTypes.topTimeUpdate:\n      case topLevelTypes.topVolumeChange:\n      case topLevelTypes.topWaiting:\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor = SyntheticEvent;\n        break;\n      case topLevelTypes.topKeyPress:\n        // FireFox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events. Enter is however both printable and\n        // non-printable. One would expect Tab to be as well (but it isn't).\n        if (getEventCharCode(nativeEvent) === 0) {\n          return null;\n        }\n      /* falls through */\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        EventConstructor = SyntheticKeyboardEvent;\n        break;\n      case topLevelTypes.topBlur:\n      case topLevelTypes.topFocus:\n        EventConstructor = SyntheticFocusEvent;\n        break;\n      case topLevelTypes.topClick:\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button === 2) {\n          return null;\n        }\n      /* falls through */\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topDoubleClick:\n      case topLevelTypes.topMouseDown:\n      case topLevelTypes.topMouseMove:\n      case topLevelTypes.topMouseOut:\n      case topLevelTypes.topMouseOver:\n      case topLevelTypes.topMouseUp:\n        EventConstructor = SyntheticMouseEvent;\n        break;\n      case topLevelTypes.topDrag:\n      case topLevelTypes.topDragEnd:\n      case topLevelTypes.topDragEnter:\n      case topLevelTypes.topDragExit:\n      case topLevelTypes.topDragLeave:\n      case topLevelTypes.topDragOver:\n      case topLevelTypes.topDragStart:\n      case topLevelTypes.topDrop:\n        EventConstructor = SyntheticDragEvent;\n        break;\n      case topLevelTypes.topTouchCancel:\n      case topLevelTypes.topTouchEnd:\n      case topLevelTypes.topTouchMove:\n      case topLevelTypes.topTouchStart:\n        EventConstructor = SyntheticTouchEvent;\n        break;\n      case topLevelTypes.topScroll:\n        EventConstructor = SyntheticUIEvent;\n        break;\n      case topLevelTypes.topWheel:\n        EventConstructor = SyntheticWheelEvent;\n        break;\n      case topLevelTypes.topCopy:\n      case topLevelTypes.topCut:\n      case topLevelTypes.topPaste:\n        EventConstructor = SyntheticClipboardEvent;\n        break;\n    }\n    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;\n    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  },\n\n  didPutListener: function (id, registrationName, listener) {\n    // Mobile Safari does not fire properly bubble click events on\n    // non-interactive elements, which means delegated click listeners do not\n    // fire. The workaround for this bug involves attaching an empty click\n    // listener on the target node.\n    if (registrationName === ON_CLICK_KEY) {\n      var node = ReactMount.getNode(id);\n      if (!onClickListeners[id]) {\n        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);\n      }\n    }\n  },\n\n  willDeleteListener: function (id, registrationName) {\n    if (registrationName === ON_CLICK_KEY) {\n      onClickListeners[id].remove();\n      delete onClickListeners[id];\n    }\n  }\n\n};\n\nmodule.exports = SimpleEventPlugin;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2ltcGxlRXZlbnRQbHVnaW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTaW1wbGVFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCdmYmpzL2xpYi9FdmVudExpc3RlbmVyJyk7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnQnKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcbnZhciBTeW50aGV0aWNGb2N1c0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNGb2N1c0V2ZW50Jyk7XG52YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljS2V5Ym9hcmRFdmVudCcpO1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY01vdXNlRXZlbnQnKTtcbnZhciBTeW50aGV0aWNEcmFnRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0RyYWdFdmVudCcpO1xudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1RvdWNoRXZlbnQnKTtcbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG52YXIgU3ludGhldGljV2hlZWxFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljV2hlZWxFdmVudCcpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZSgnLi9nZXRFdmVudENoYXJDb2RlJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBhYm9ydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQWJvcnQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkFib3J0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgYmx1cjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQmx1cjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQmx1ckNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGNhblBsYXk6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNhblBsYXk6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNhblBsYXlDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBjYW5QbGF5VGhyb3VnaDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ2FuUGxheVRocm91Z2g6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNhblBsYXlUaHJvdWdoQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgY2xpY2s6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNsaWNrOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25DbGlja0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGNvbnRleHRNZW51OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db250ZXh0TWVudTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ29udGV4dE1lbnVDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBjb3B5OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db3B5OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Db3B5Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgY3V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25DdXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkN1dENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRvdWJsZUNsaWNrOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Eb3VibGVDbGljazogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRG91YmxlQ2xpY2tDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0VuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ0VuZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ0VuZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFbnRlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ0VudGVyOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnRW50ZXJDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnRXhpdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ0V4aXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdFeGl0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0xlYXZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnTGVhdmU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdMZWF2ZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdPdmVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnT3ZlcjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ092ZXJDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyYWdTdGFydDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ1N0YXJ0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJvcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJvcDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJvcENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGR1cmF0aW9uQ2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EdXJhdGlvbkNoYW5nZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHVyYXRpb25DaGFuZ2VDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBlbXB0aWVkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25FbXB0aWVkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25FbXB0aWVkQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZW5jcnlwdGVkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25FbmNyeXB0ZWQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkVuY3J5cHRlZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGVuZGVkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25FbmRlZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRW5kZWRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBlcnJvcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRXJyb3I6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkVycm9yQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkZvY3VzOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Gb2N1c0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGlucHV0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25JbnB1dDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uSW5wdXRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBrZXlEb3duOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25LZXlEb3duOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25LZXlEb3duQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAga2V5UHJlc3M6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbktleVByZXNzOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25LZXlQcmVzc0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGtleVVwOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25LZXlVcDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uS2V5VXBDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBsb2FkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Mb2FkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Mb2FkQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbG9hZGVkRGF0YToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTG9hZGVkRGF0YTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTG9hZGVkRGF0YUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGxvYWRlZE1ldGFkYXRhOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Mb2FkZWRNZXRhZGF0YTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTG9hZGVkTWV0YWRhdGFDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBsb2FkU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkxvYWRTdGFydDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTG9hZFN0YXJ0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgLy8gTm90ZTogV2UgZG8gbm90IGFsbG93IGxpc3RlbmluZyB0byBtb3VzZU92ZXIgZXZlbnRzLiBJbnN0ZWFkLCB1c2UgdGhlXG4gIC8vIG9uTW91c2VFbnRlci9vbk1vdXNlTGVhdmUgY3JlYXRlZCBieSBgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luYC5cbiAgbW91c2VEb3duOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Nb3VzZURvd246IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlRG93bkNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlTW92ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTW91c2VNb3ZlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBtb3VzZU91dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTW91c2VPdXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlT3V0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VPdmVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Nb3VzZU92ZXI6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlT3ZlckNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlVXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbk1vdXNlVXA6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlVXBDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBwYXN0ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUGFzdGU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblBhc3RlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcGF1c2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblBhdXNlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25QYXVzZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHBsYXk6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblBsYXk6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblBsYXlDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBwbGF5aW5nOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25QbGF5aW5nOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25QbGF5aW5nQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcHJvZ3Jlc3M6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblByb2dyZXNzOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Qcm9ncmVzc0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHJhdGVDaGFuZ2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblJhdGVDaGFuZ2U6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblJhdGVDaGFuZ2VDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICByZXNldDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUmVzZXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblJlc2V0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgc2Nyb2xsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TY3JvbGw6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblNjcm9sbENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHNlZWtlZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU2Vla2VkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TZWVrZWRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBzZWVraW5nOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TZWVraW5nOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TZWVraW5nQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgc3RhbGxlZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU3RhbGxlZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uU3RhbGxlZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHN1Ym1pdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU3VibWl0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TdWJtaXRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBzdXNwZW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TdXNwZW5kOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TdXNwZW5kQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgdGltZVVwZGF0ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uVGltZVVwZGF0ZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVGltZVVwZGF0ZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoQ2FuY2VsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Ub3VjaENhbmNlbDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVG91Y2hDYW5jZWxDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB0b3VjaEVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uVG91Y2hFbmQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblRvdWNoRW5kQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hNb3ZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Ub3VjaE1vdmU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblRvdWNoTW92ZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblRvdWNoU3RhcnQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblRvdWNoU3RhcnRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB2b2x1bWVDaGFuZ2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblZvbHVtZUNoYW5nZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVm9sdW1lQ2hhbmdlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgd2FpdGluZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uV2FpdGluZzogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uV2FpdGluZ0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHdoZWVsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25XaGVlbDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uV2hlZWxDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9XG59O1xuXG52YXIgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnID0ge1xuICB0b3BBYm9ydDogZXZlbnRUeXBlcy5hYm9ydCxcbiAgdG9wQmx1cjogZXZlbnRUeXBlcy5ibHVyLFxuICB0b3BDYW5QbGF5OiBldmVudFR5cGVzLmNhblBsYXksXG4gIHRvcENhblBsYXlUaHJvdWdoOiBldmVudFR5cGVzLmNhblBsYXlUaHJvdWdoLFxuICB0b3BDbGljazogZXZlbnRUeXBlcy5jbGljayxcbiAgdG9wQ29udGV4dE1lbnU6IGV2ZW50VHlwZXMuY29udGV4dE1lbnUsXG4gIHRvcENvcHk6IGV2ZW50VHlwZXMuY29weSxcbiAgdG9wQ3V0OiBldmVudFR5cGVzLmN1dCxcbiAgdG9wRG91YmxlQ2xpY2s6IGV2ZW50VHlwZXMuZG91YmxlQ2xpY2ssXG4gIHRvcERyYWc6IGV2ZW50VHlwZXMuZHJhZyxcbiAgdG9wRHJhZ0VuZDogZXZlbnRUeXBlcy5kcmFnRW5kLFxuICB0b3BEcmFnRW50ZXI6IGV2ZW50VHlwZXMuZHJhZ0VudGVyLFxuICB0b3BEcmFnRXhpdDogZXZlbnRUeXBlcy5kcmFnRXhpdCxcbiAgdG9wRHJhZ0xlYXZlOiBldmVudFR5cGVzLmRyYWdMZWF2ZSxcbiAgdG9wRHJhZ092ZXI6IGV2ZW50VHlwZXMuZHJhZ092ZXIsXG4gIHRvcERyYWdTdGFydDogZXZlbnRUeXBlcy5kcmFnU3RhcnQsXG4gIHRvcERyb3A6IGV2ZW50VHlwZXMuZHJvcCxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6IGV2ZW50VHlwZXMuZHVyYXRpb25DaGFuZ2UsXG4gIHRvcEVtcHRpZWQ6IGV2ZW50VHlwZXMuZW1wdGllZCxcbiAgdG9wRW5jcnlwdGVkOiBldmVudFR5cGVzLmVuY3J5cHRlZCxcbiAgdG9wRW5kZWQ6IGV2ZW50VHlwZXMuZW5kZWQsXG4gIHRvcEVycm9yOiBldmVudFR5cGVzLmVycm9yLFxuICB0b3BGb2N1czogZXZlbnRUeXBlcy5mb2N1cyxcbiAgdG9wSW5wdXQ6IGV2ZW50VHlwZXMuaW5wdXQsXG4gIHRvcEtleURvd246IGV2ZW50VHlwZXMua2V5RG93bixcbiAgdG9wS2V5UHJlc3M6IGV2ZW50VHlwZXMua2V5UHJlc3MsXG4gIHRvcEtleVVwOiBldmVudFR5cGVzLmtleVVwLFxuICB0b3BMb2FkOiBldmVudFR5cGVzLmxvYWQsXG4gIHRvcExvYWRlZERhdGE6IGV2ZW50VHlwZXMubG9hZGVkRGF0YSxcbiAgdG9wTG9hZGVkTWV0YWRhdGE6IGV2ZW50VHlwZXMubG9hZGVkTWV0YWRhdGEsXG4gIHRvcExvYWRTdGFydDogZXZlbnRUeXBlcy5sb2FkU3RhcnQsXG4gIHRvcE1vdXNlRG93bjogZXZlbnRUeXBlcy5tb3VzZURvd24sXG4gIHRvcE1vdXNlTW92ZTogZXZlbnRUeXBlcy5tb3VzZU1vdmUsXG4gIHRvcE1vdXNlT3V0OiBldmVudFR5cGVzLm1vdXNlT3V0LFxuICB0b3BNb3VzZU92ZXI6IGV2ZW50VHlwZXMubW91c2VPdmVyLFxuICB0b3BNb3VzZVVwOiBldmVudFR5cGVzLm1vdXNlVXAsXG4gIHRvcFBhc3RlOiBldmVudFR5cGVzLnBhc3RlLFxuICB0b3BQYXVzZTogZXZlbnRUeXBlcy5wYXVzZSxcbiAgdG9wUGxheTogZXZlbnRUeXBlcy5wbGF5LFxuICB0b3BQbGF5aW5nOiBldmVudFR5cGVzLnBsYXlpbmcsXG4gIHRvcFByb2dyZXNzOiBldmVudFR5cGVzLnByb2dyZXNzLFxuICB0b3BSYXRlQ2hhbmdlOiBldmVudFR5cGVzLnJhdGVDaGFuZ2UsXG4gIHRvcFJlc2V0OiBldmVudFR5cGVzLnJlc2V0LFxuICB0b3BTY3JvbGw6IGV2ZW50VHlwZXMuc2Nyb2xsLFxuICB0b3BTZWVrZWQ6IGV2ZW50VHlwZXMuc2Vla2VkLFxuICB0b3BTZWVraW5nOiBldmVudFR5cGVzLnNlZWtpbmcsXG4gIHRvcFN0YWxsZWQ6IGV2ZW50VHlwZXMuc3RhbGxlZCxcbiAgdG9wU3VibWl0OiBldmVudFR5cGVzLnN1Ym1pdCxcbiAgdG9wU3VzcGVuZDogZXZlbnRUeXBlcy5zdXNwZW5kLFxuICB0b3BUaW1lVXBkYXRlOiBldmVudFR5cGVzLnRpbWVVcGRhdGUsXG4gIHRvcFRvdWNoQ2FuY2VsOiBldmVudFR5cGVzLnRvdWNoQ2FuY2VsLFxuICB0b3BUb3VjaEVuZDogZXZlbnRUeXBlcy50b3VjaEVuZCxcbiAgdG9wVG91Y2hNb3ZlOiBldmVudFR5cGVzLnRvdWNoTW92ZSxcbiAgdG9wVG91Y2hTdGFydDogZXZlbnRUeXBlcy50b3VjaFN0YXJ0LFxuICB0b3BWb2x1bWVDaGFuZ2U6IGV2ZW50VHlwZXMudm9sdW1lQ2hhbmdlLFxuICB0b3BXYWl0aW5nOiBldmVudFR5cGVzLndhaXRpbmcsXG4gIHRvcFdoZWVsOiBldmVudFR5cGVzLndoZWVsXG59O1xuXG5mb3IgKHZhciB0eXBlIGluIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZykge1xuICB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdHlwZV0uZGVwZW5kZW5jaWVzID0gW3R5cGVdO1xufVxuXG52YXIgT05fQ0xJQ0tfS0VZID0ga2V5T2YoeyBvbkNsaWNrOiBudWxsIH0pO1xudmFyIG9uQ2xpY2tMaXN0ZW5lcnMgPSB7fTtcblxudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BMZXZlbFR5cGVdO1xuICAgIGlmICghZGlzcGF0Y2hDb25maWcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgRXZlbnRDb25zdHJ1Y3RvcjtcbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEFib3J0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENhblBsYXk6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ2FuUGxheVRocm91Z2g6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHVyYXRpb25DaGFuZ2U6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRW1wdGllZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFbmNyeXB0ZWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRW5kZWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRXJyb3I6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wSW5wdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkZWREYXRhOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWRlZE1ldGFkYXRhOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWRTdGFydDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXVzZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQbGF5OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBsYXlpbmc6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUHJvZ3Jlc3M6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUmF0ZUNoYW5nZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSZXNldDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWVrZWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2Vla2luZzpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdGFsbGVkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN1Ym1pdDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdXNwZW5kOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRpbWVVcGRhdGU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVm9sdW1lQ2hhbmdlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFdhaXRpbmc6XG4gICAgICAgIC8vIEhUTUwgRXZlbnRzXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5kZXguaHRtbCNldmVudHMtMFxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgICAvLyBGaXJlRm94IGNyZWF0ZXMgYSBrZXlwcmVzcyBldmVudCBmb3IgZnVuY3Rpb24ga2V5cyB0b28uIFRoaXMgcmVtb3Zlc1xuICAgICAgICAvLyB0aGUgdW53YW50ZWQga2V5cHJlc3MgZXZlbnRzLiBFbnRlciBpcyBob3dldmVyIGJvdGggcHJpbnRhYmxlIGFuZFxuICAgICAgICAvLyBub24tcHJpbnRhYmxlLiBPbmUgd291bGQgZXhwZWN0IFRhYiB0byBiZSBhcyB3ZWxsIChidXQgaXQgaXNuJ3QpLlxuICAgICAgICBpZiAoZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ2xpY2s6XG4gICAgICAgIC8vIEZpcmVmb3ggY3JlYXRlcyBhIGNsaWNrIGV2ZW50IG9uIHJpZ2h0IG1vdXNlIGNsaWNrcy4gVGhpcyByZW1vdmVzIHRoZVxuICAgICAgICAvLyB1bndhbnRlZCBjbGljayBldmVudHMuXG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERvdWJsZUNsaWNrOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0VudGVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFeGl0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdMZWF2ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnT3ZlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnU3RhcnQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJvcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGw6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNVSUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvcHk6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ3V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAhRXZlbnRDb25zdHJ1Y3RvciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdTaW1wbGVFdmVudFBsdWdpbjogVW5oYW5kbGVkIGV2ZW50IHR5cGUsIGAlc2AuJywgdG9wTGV2ZWxUeXBlKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGV2ZW50ID0gRXZlbnRDb25zdHJ1Y3Rvci5nZXRQb29sZWQoZGlzcGF0Y2hDb25maWcsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH0sXG5cbiAgZGlkUHV0TGlzdGVuZXI6IGZ1bmN0aW9uIChpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICAvLyBNb2JpbGUgU2FmYXJpIGRvZXMgbm90IGZpcmUgcHJvcGVybHkgYnViYmxlIGNsaWNrIGV2ZW50cyBvblxuICAgIC8vIG5vbi1pbnRlcmFjdGl2ZSBlbGVtZW50cywgd2hpY2ggbWVhbnMgZGVsZWdhdGVkIGNsaWNrIGxpc3RlbmVycyBkbyBub3RcbiAgICAvLyBmaXJlLiBUaGUgd29ya2Fyb3VuZCBmb3IgdGhpcyBidWcgaW52b2x2ZXMgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrXG4gICAgLy8gbGlzdGVuZXIgb24gdGhlIHRhcmdldCBub2RlLlxuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSBPTl9DTElDS19LRVkpIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICAgIGlmICghb25DbGlja0xpc3RlbmVyc1tpZF0pIHtcbiAgICAgICAgb25DbGlja0xpc3RlbmVyc1tpZF0gPSBFdmVudExpc3RlbmVyLmxpc3Rlbihub2RlLCAnY2xpY2snLCBlbXB0eUZ1bmN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgd2lsbERlbGV0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gT05fQ0xJQ0tfS0VZKSB7XG4gICAgICBvbkNsaWNrTGlzdGVuZXJzW2lkXS5yZW1vdmUoKTtcbiAgICAgIGRlbGV0ZSBvbkNsaWNrTGlzdGVuZXJzW2lkXTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaW1wbGVFdmVudFBsdWdpbjsiXX0=\n},{\"./EventConstants\":46,\"./EventPropagators\":50,\"./ReactMount\":99,\"./SyntheticClipboardEvent\":126,\"./SyntheticDragEvent\":128,\"./SyntheticEvent\":129,\"./SyntheticFocusEvent\":130,\"./SyntheticKeyboardEvent\":132,\"./SyntheticMouseEvent\":133,\"./SyntheticTouchEvent\":134,\"./SyntheticUIEvent\":135,\"./SyntheticWheelEvent\":136,\"./getEventCharCode\":148,\"_process\":30,\"fbjs/lib/EventListener\":3,\"fbjs/lib/emptyFunction\":10,\"fbjs/lib/invariant\":18,\"fbjs/lib/keyOf\":22}],126:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticClipboardEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface = {\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\n\nmodule.exports = SyntheticClipboardEvent;\n},{\"./SyntheticEvent\":129}],127:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticCompositionEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nvar CompositionEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);\n\nmodule.exports = SyntheticCompositionEvent;\n},{\"./SyntheticEvent\":129}],128:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticDragEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar DragEventInterface = {\n  dataTransfer: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);\n\nmodule.exports = SyntheticDragEvent;\n},{\"./SyntheticMouseEvent\":133}],129:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar EventInterface = {\n  type: null,\n  target: null,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: emptyFunction.thatReturnsNull,\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function (event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n */\nfunction SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  this.dispatchConfig = dispatchConfig;\n  this.dispatchMarker = dispatchMarker;\n  this.nativeEvent = nativeEvent;\n\n  var Interface = this.constructor.Interface;\n  for (var propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    var normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      if (propName === 'target') {\n        this.target = nativeEventTarget;\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n  }\n\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;\n  }\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;\n}\n\nassign(SyntheticEvent.prototype, {\n\n  preventDefault: function () {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;\n    }\n    if (!event) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  },\n\n  stopPropagation: function () {\n    var event = this.nativeEvent;\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;\n    }\n    if (!event) {\n      return;\n    }\n\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      event.cancelBubble = true;\n    }\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function () {\n    this.isPersistent = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: emptyFunction.thatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function () {\n    var Interface = this.constructor.Interface;\n    for (var propName in Interface) {\n      this[propName] = null;\n    }\n    this.dispatchConfig = null;\n    this.dispatchMarker = null;\n    this.nativeEvent = null;\n  }\n\n});\n\nSyntheticEvent.Interface = EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n *\n * @param {function} Class\n * @param {?object} Interface\n */\nSyntheticEvent.augmentClass = function (Class, Interface) {\n  var Super = this;\n\n  var prototype = Object.create(Super.prototype);\n  assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = assign({}, Super.Interface, Interface);\n  Class.augmentClass = Super.augmentClass;\n\n  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);\n};\n\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);\n\nmodule.exports = SyntheticEvent;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./Object.assign\":54,\"./PooledClass\":55,\"_process\":30,\"fbjs/lib/emptyFunction\":10,\"fbjs/lib/warning\":29}],130:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticFocusEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar FocusEventInterface = {\n  relatedTarget: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);\n\nmodule.exports = SyntheticFocusEvent;\n},{\"./SyntheticUIEvent\":135}],131:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticInputEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\nvar InputEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);\n\nmodule.exports = SyntheticInputEvent;\n},{\"./SyntheticEvent\":129}],132:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticKeyboardEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventCharCode = require('./getEventCharCode');\nvar getEventKey = require('./getEventKey');\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports = SyntheticKeyboardEvent;\n},{\"./SyntheticUIEvent\":135,\"./getEventCharCode\":148,\"./getEventKey\":149,\"./getEventModifierState\":150}],133:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticMouseEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\nvar ViewportMetrics = require('./ViewportMetrics');\n\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar MouseEventInterface = {\n  screenX: null,\n  screenY: null,\n  clientX: null,\n  clientY: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  getModifierState: getEventModifierState,\n  button: function (event) {\n    // Webkit, Firefox, IE9+\n    // which:  1 2 3\n    // button: 0 1 2 (standard)\n    var button = event.button;\n    if ('which' in event) {\n      return button;\n    }\n    // IE<9\n    // which:  undefined\n    // button: 0 0 0\n    // button: 1 4 2 (onmouseup)\n    return button === 2 ? 2 : button === 4 ? 1 : 0;\n  },\n  buttons: null,\n  relatedTarget: function (event) {\n    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);\n  },\n  // \"Proprietary\" Interface.\n  pageX: function (event) {\n    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;\n  },\n  pageY: function (event) {\n    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);\n\nmodule.exports = SyntheticMouseEvent;\n},{\"./SyntheticUIEvent\":135,\"./ViewportMetrics\":138,\"./getEventModifierState\":150}],134:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticTouchEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nvar TouchEventInterface = {\n  touches: null,\n  targetTouches: null,\n  changedTouches: null,\n  altKey: null,\n  metaKey: null,\n  ctrlKey: null,\n  shiftKey: null,\n  getModifierState: getEventModifierState\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);\n\nmodule.exports = SyntheticTouchEvent;\n},{\"./SyntheticUIEvent\":135,\"./getEventModifierState\":150}],135:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticUIEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\n\n/**\n * @interface UIEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar UIEventInterface = {\n  view: function (event) {\n    if (event.view) {\n      return event.view;\n    }\n\n    var target = getEventTarget(event);\n    if (target != null && target.window === target) {\n      // target is a window object\n      return target;\n    }\n\n    var doc = target.ownerDocument;\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    if (doc) {\n      return doc.defaultView || doc.parentWindow;\n    } else {\n      return window;\n    }\n  },\n  detail: function (event) {\n    return event.detail || 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);\n\nmodule.exports = SyntheticUIEvent;\n},{\"./SyntheticEvent\":129,\"./getEventTarget\":151}],136:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticWheelEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar WheelEventInterface = {\n  deltaX: function (event) {\n    return 'deltaX' in event ? event.deltaX :\n    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n  deltaY: function (event) {\n    return 'deltaY' in event ? event.deltaY :\n    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY :\n    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n  deltaZ: null,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\n\nmodule.exports = SyntheticWheelEvent;\n},{\"./SyntheticMouseEvent\":133}],137:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Transaction\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM updates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\nvar Mixin = {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * \"PooledClass\".\n   */\n  reinitializeTransaction: function () {\n    this.transactionWrappers = this.getTransactionWrappers();\n    if (this.wrapperInitData) {\n      this.wrapperInitData.length = 0;\n    } else {\n      this.wrapperInitData = [];\n    }\n    this._isInTransaction = false;\n  },\n\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n\n  isInTransaction: function () {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked. The optional arguments helps prevent the need\n   * to bind in many cases.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?=} a Argument to pass to the method.\n   * @param {Object?=} b Argument to pass to the method.\n   * @param {Object?=} c Argument to pass to the method.\n   * @param {Object?=} d Argument to pass to the method.\n   * @param {Object?=} e Argument to pass to the method.\n   * @param {Object?=} f Argument to pass to the method.\n   *\n   * @return {*} Return value from `method`.\n   */\n  perform: function (method, scope, a, b, c, d, e, f) {\n    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction = true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {}\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n    return ret;\n  },\n\n  initializeAll: function (startIndex) {\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;\n      } finally {\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {}\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function (startIndex) {\n    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      var initData = this.wrapperInitData[i];\n      var errorThrown;\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it's still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown = true;\n        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {\n          wrapper.close.call(this, initData);\n        }\n        errorThrown = false;\n      } finally {\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {}\n        }\n      }\n    }\n    this.wrapperInitData.length = 0;\n  }\n};\n\nvar Transaction = {\n\n  Mixin: Mixin,\n\n  /**\n   * Token to look for to determine if an error occurred.\n   */\n  OBSERVED_ERROR: {}\n\n};\n\nmodule.exports = Transaction;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"_process\":30,\"fbjs/lib/invariant\":18}],138:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ViewportMetrics\n */\n\n'use strict';\n\nvar ViewportMetrics = {\n\n  currentScrollLeft: 0,\n\n  currentScrollTop: 0,\n\n  refreshScrollValues: function (scrollPosition) {\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;\n    ViewportMetrics.currentScrollTop = scrollPosition.y;\n  }\n\n};\n\nmodule.exports = ViewportMetrics;\n},{}],139:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvYWNjdW11bGF0ZUludG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhY2N1bXVsYXRlSW50b1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gICEobmV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIHZhciBjdXJyZW50SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY3VycmVudCk7XG4gIHZhciBuZXh0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkobmV4dCk7XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5ICYmIG5leHRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoKG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKG5leHRJc0FycmF5KSB7XG4gICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhY2N1bXVsYXRlSW50bzsiXX0=\n},{\"_process\":30,\"fbjs/lib/invariant\":18}],140:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n'use strict';\n\nvar MOD = 65521;\n\n// adler32 is not cryptographically strong, and is only used to sanity check that\n// markup generated on the server matches the markup generated on the client.\n// This implementation (a modified version of the SheetJS version) has been optimized\n// for our use case, at the expense of conforming to the adler32 specification\n// for non-ascii inputs.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  var i = 0;\n  var l = data.length;\n  var m = l & ~0x3;\n  while (i < m) {\n    for (; i < Math.min(i + 4096, m); i += 4) {\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }\n    a %= MOD;\n    b %= MOD;\n  }\n  for (; i < l; i++) {\n    b += a += data.charCodeAt(i);\n  }\n  a %= MOD;\n  b %= MOD;\n  return a | b << 16;\n}\n\nmodule.exports = adler32;\n},{}],141:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule canDefineProperty\n */\n\n'use strict';\n\nvar canDefineProperty = false;\nif (process.env.NODE_ENV !== 'production') {\n  try {\n    Object.defineProperty({}, 'x', { get: function () {} });\n    canDefineProperty = true;\n  } catch (x) {\n    // IE will fail on defineProperty\n  }\n}\n\nmodule.exports = canDefineProperty;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvY2FuRGVmaW5lUHJvcGVydHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNhbkRlZmluZVByb3BlcnR5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7fSB9KTtcbiAgICBjYW5EZWZpbmVQcm9wZXJ0eSA9IHRydWU7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbkRlZmluZVByb3BlcnR5OyJdfQ==\n},{\"_process\":30}],142:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule dangerousStyleValue\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;\n},{\"./CSSProperty\":35}],143:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule deprecated\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * This will log a single deprecation notice per function and forward the call\n * on to the new API.\n *\n * @param {string} fnName The name of the function\n * @param {string} newModule The module that fn will exist in\n * @param {string} newPackage The module that fn will exist in\n * @param {*} ctx The context this forwarded call should run in\n * @param {function} fn The function to forward on to\n * @return {function} The function that will warn once and then call fn\n */\nfunction deprecated(fnName, newModule, newPackage, ctx, fn) {\n  var warned = false;\n  if (process.env.NODE_ENV !== 'production') {\n    var newFn = function () {\n      process.env.NODE_ENV !== 'production' ? warning(warned,\n      // Require examples in this string must be split to prevent React's\n      // build tools from mistaking them for real requires.\n      // Otherwise the build tools will attempt to build a '%s' module.\n      'React.%s is deprecated. Please use %s.%s from require' + '(\\'%s\\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;\n      warned = true;\n      return fn.apply(ctx, arguments);\n    };\n    // We need to make sure all properties of the original fn are copied over.\n    // In particular, this is needed to support PropTypes\n    return assign(newFn, fn);\n  }\n\n  return fn;\n}\n\nmodule.exports = deprecated;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZGVwcmVjYXRlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZGVwcmVjYXRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogVGhpcyB3aWxsIGxvZyBhIHNpbmdsZSBkZXByZWNhdGlvbiBub3RpY2UgcGVyIGZ1bmN0aW9uIGFuZCBmb3J3YXJkIHRoZSBjYWxsXG4gKiBvbiB0byB0aGUgbmV3IEFQSS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5ld01vZHVsZSBUaGUgbW9kdWxlIHRoYXQgZm4gd2lsbCBleGlzdCBpblxuICogQHBhcmFtIHtzdHJpbmd9IG5ld1BhY2thZ2UgVGhlIG1vZHVsZSB0aGF0IGZuIHdpbGwgZXhpc3QgaW5cbiAqIEBwYXJhbSB7Kn0gY3R4IFRoZSBjb250ZXh0IHRoaXMgZm9yd2FyZGVkIGNhbGwgc2hvdWxkIHJ1biBpblxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGZvcndhcmQgb24gdG9cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIHdhcm4gb25jZSBhbmQgdGhlbiBjYWxsIGZuXG4gKi9cbmZ1bmN0aW9uIGRlcHJlY2F0ZWQoZm5OYW1lLCBuZXdNb2R1bGUsIG5ld1BhY2thZ2UsIGN0eCwgZm4pIHtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBuZXdGbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHdhcm5lZCxcbiAgICAgIC8vIFJlcXVpcmUgZXhhbXBsZXMgaW4gdGhpcyBzdHJpbmcgbXVzdCBiZSBzcGxpdCB0byBwcmV2ZW50IFJlYWN0J3NcbiAgICAgIC8vIGJ1aWxkIHRvb2xzIGZyb20gbWlzdGFraW5nIHRoZW0gZm9yIHJlYWwgcmVxdWlyZXMuXG4gICAgICAvLyBPdGhlcndpc2UgdGhlIGJ1aWxkIHRvb2xzIHdpbGwgYXR0ZW1wdCB0byBidWlsZCBhICclcycgbW9kdWxlLlxuICAgICAgJ1JlYWN0LiVzIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgJXMuJXMgZnJvbSByZXF1aXJlJyArICcoXFwnJXNcXCcpICcgKyAnaW5zdGVhZC4nLCBmbk5hbWUsIG5ld01vZHVsZSwgZm5OYW1lLCBuZXdQYWNrYWdlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gV2UgbmVlZCB0byBtYWtlIHN1cmUgYWxsIHByb3BlcnRpZXMgb2YgdGhlIG9yaWdpbmFsIGZuIGFyZSBjb3BpZWQgb3Zlci5cbiAgICAvLyBJbiBwYXJ0aWN1bGFyLCB0aGlzIGlzIG5lZWRlZCB0byBzdXBwb3J0IFByb3BUeXBlc1xuICAgIHJldHVybiBhc3NpZ24obmV3Rm4sIGZuKTtcbiAgfVxuXG4gIHJldHVybiBmbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGVkOyJdfQ==\n},{\"./Object.assign\":54,\"_process\":30,\"fbjs/lib/warning\":29}],144:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule escapeTextContentForBrowser\n */\n\n'use strict';\n\nvar ESCAPE_LOOKUP = {\n  '&': '&amp;',\n  '>': '&gt;',\n  '<': '&lt;',\n  '\"': '&quot;',\n  '\\'': '&#x27;'\n};\n\nvar ESCAPE_REGEX = /[&><\"']/g;\n\nfunction escaper(match) {\n  return ESCAPE_LOOKUP[match];\n}\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\nfunction escapeTextContentForBrowser(text) {\n  return ('' + text).replace(ESCAPE_REGEX, escaper);\n}\n\nmodule.exports = escapeTextContentForBrowser;\n},{}],145:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findDOMNode\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactMount = require('./ReactMount');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Returns the DOM node rendered by this element.\n *\n * @param {ReactComponent|DOMElement} componentOrElement\n * @return {?DOMElement} The root node of this element.\n */\nfunction findDOMNode(componentOrElement) {\n  if (process.env.NODE_ENV !== 'production') {\n    var owner = ReactCurrentOwner.current;\n    if (owner !== null) {\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n      owner._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrElement == null) {\n    return null;\n  }\n  if (componentOrElement.nodeType === 1) {\n    return componentOrElement;\n  }\n  if (ReactInstanceMap.has(componentOrElement)) {\n    return ReactMount.getNodeFromInstance(componentOrElement);\n  }\n  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;\n}\n\nmodule.exports = findDOMNode;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZmluZERPTU5vZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZmluZERPTU5vZGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgRE9NIG5vZGUgcmVuZGVyZWQgYnkgdGhpcyBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR8RE9NRWxlbWVudH0gY29tcG9uZW50T3JFbGVtZW50XG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsICclcyBpcyBhY2Nlc3NpbmcgZ2V0RE9NTm9kZSBvciBmaW5kRE9NTm9kZSBpbnNpZGUgaXRzIHJlbmRlcigpLiAnICsgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICsgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgKyAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJywgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbXBvbmVudE9yRWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGNvbXBvbmVudE9yRWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBjb21wb25lbnRPckVsZW1lbnQ7XG4gIH1cbiAgaWYgKFJlYWN0SW5zdGFuY2VNYXAuaGFzKGNvbXBvbmVudE9yRWxlbWVudCkpIHtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5nZXROb2RlRnJvbUluc3RhbmNlKGNvbXBvbmVudE9yRWxlbWVudCk7XG4gIH1cbiAgIShjb21wb25lbnRPckVsZW1lbnQucmVuZGVyID09IG51bGwgfHwgdHlwZW9mIGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgIT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2ZpbmRET01Ob2RlIHdhcyBjYWxsZWQgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IGFwcGVhcnMgdG8gYmUgbmVpdGhlciBSZWFjdENvbXBvbmVudCBub3IgRE9NTm9kZSAoa2V5czogJXMpJywgT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRET01Ob2RlOyJdfQ==\n},{\"./ReactCurrentOwner\":68,\"./ReactInstanceMap\":96,\"./ReactMount\":99,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],146:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule flattenChildren\n */\n\n'use strict';\n\nvar traverseAllChildren = require('./traverseAllChildren');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * @param {function} traverseContext Context passed through traversal.\n * @param {?ReactComponent} child React child component.\n * @param {!string} name String name of key path to child.\n */\nfunction flattenSingleChildIntoContext(traverseContext, child, name) {\n  // We found a component instance.\n  var result = traverseContext;\n  var keyUnique = result[name] === undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;\n  }\n  if (keyUnique && child != null) {\n    result[name] = child;\n  }\n}\n\n/**\n * Flattens children that are typically specified as `props.children`. Any null\n * children will not be included in the resulting object.\n * @return {!object} flattened children keyed by name.\n */\nfunction flattenChildren(children) {\n  if (children == null) {\n    return children;\n  }\n  var result = {};\n  traverseAllChildren(children, flattenSingleChildIntoContext, result);\n  return result;\n}\n\nmodule.exports = flattenChildren;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZmxhdHRlbkNoaWxkcmVuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmbGF0dGVuQ2hpbGRyZW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBwYXNzZWQgdGhyb3VnaCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9SZWFjdENvbXBvbmVudH0gY2hpbGQgUmVhY3QgY2hpbGQgY29tcG9uZW50LlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFN0cmluZyBuYW1lIG9mIGtleSBwYXRoIHRvIGNoaWxkLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lKSB7XG4gIC8vIFdlIGZvdW5kIGEgY29tcG9uZW50IGluc3RhbmNlLlxuICB2YXIgcmVzdWx0ID0gdHJhdmVyc2VDb250ZXh0O1xuICB2YXIga2V5VW5pcXVlID0gcmVzdWx0W25hbWVdID09PSB1bmRlZmluZWQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoa2V5VW5pcXVlLCAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArICdgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSAnICsgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJywgbmFtZSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGtleVVuaXF1ZSAmJiBjaGlsZCAhPSBudWxsKSB7XG4gICAgcmVzdWx0W25hbWVdID0gY2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuIEFueSBudWxsXG4gKiBjaGlsZHJlbiB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIG9iamVjdC5cbiAqIEByZXR1cm4geyFvYmplY3R9IGZsYXR0ZW5lZCBjaGlsZHJlbiBrZXllZCBieSBuYW1lLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuQ2hpbGRyZW47Il19\n},{\"./traverseAllChildren\":164,\"_process\":30,\"fbjs/lib/warning\":29}],147:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule forEachAccumulated\n */\n\n'use strict';\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\nvar forEachAccumulated = function (arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n};\n\nmodule.exports = forEachAccumulated;\n},{}],148:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventCharCode\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {number} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent) {\n  var charCode;\n  var keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode;\n\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  }\n\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nmodule.exports = getEventCharCode;\n},{}],149:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventKey\n * @typechecks static-only\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;\n},{\"./getEventCharCode\":148}],150:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventModifierState\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\nvar modifierKeyToProp = {\n  'Alt': 'altKey',\n  'Control': 'ctrlKey',\n  'Meta': 'metaKey',\n  'Shift': 'shiftKey'\n};\n\n// IE8 does not implement getModifierState so we simply map it to the only\n// modifier keys exposed by the event itself, does not support Lock-keys.\n// Currently, all major browsers except Chrome seems to support Lock-keys.\nfunction modifierStateGetter(keyArg) {\n  var syntheticEvent = this;\n  var nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  var keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\nmodule.exports = getEventModifierState;\n},{}],151:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventTarget\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\nfunction getEventTarget(nativeEvent) {\n  var target = nativeEvent.target || nativeEvent.srcElement || window;\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType === 3 ? target.parentNode : target;\n}\n\nmodule.exports = getEventTarget;\n},{}],152:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getIteratorFn\n * @typechecks static-only\n */\n\n'use strict';\n\n/* global Symbol */\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n/**\n * Returns the iterator method function contained on the iterable object.\n *\n * Be sure to invoke the function with the iterable as context:\n *\n *     var iteratorFn = getIteratorFn(myIterable);\n *     if (iteratorFn) {\n *       var iterator = iteratorFn.call(myIterable);\n *       ...\n *     }\n *\n * @param {?object} maybeIterable\n * @return {?function}\n */\nfunction getIteratorFn(maybeIterable) {\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nmodule.exports = getIteratorFn;\n},{}],153:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getNodeForCharacterOffset\n */\n\n'use strict';\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports = getNodeForCharacterOffset;\n},{}],154:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getTextContentAccessor\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar contentKey = null;\n\n/**\n * Gets the key used to access text content on a DOM node.\n *\n * @return {?string} Key used to access text content.\n * @internal\n */\nfunction getTextContentAccessor() {\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {\n    // Prefer textContent to innerText because many browsers support both but\n    // SVG <text> elements don't support innerText even when <div> does.\n    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';\n  }\n  return contentKey;\n}\n\nmodule.exports = getTextContentAccessor;\n},{\"fbjs/lib/ExecutionEnvironment\":4}],155:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule instantiateReactComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactCompositeComponent = require('./ReactCompositeComponent');\nvar ReactEmptyComponent = require('./ReactEmptyComponent');\nvar ReactNativeComponent = require('./ReactNativeComponent');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n// To avoid a cyclic dependency, we create the final class in this module\nvar ReactCompositeComponentWrapper = function () {};\nassign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {\n  _instantiateReactComponent: instantiateReactComponent\n});\n\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the type reference is a known internal type. I.e. not a user\n * provided composite type.\n *\n * @param {function} type\n * @return {boolean} Returns true if this is a valid internal type.\n */\nfunction isInternalComponentType(type) {\n  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';\n}\n\n/**\n * Given a ReactNode, create an instance that will actually be mounted.\n *\n * @param {ReactNode} node\n * @return {object} A new instance of the element's constructor.\n * @protected\n */\nfunction instantiateReactComponent(node) {\n  var instance;\n\n  if (node === null || node === false) {\n    instance = new ReactEmptyComponent(instantiateReactComponent);\n  } else if (typeof node === 'object') {\n    var element = node;\n    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;\n\n    // Special case string values\n    if (typeof element.type === 'string') {\n      instance = ReactNativeComponent.createInternalComponent(element);\n    } else if (isInternalComponentType(element.type)) {\n      // This is temporarily available for custom components that are not string\n      // representations. I.e. ART. Once those are updated to use the string\n      // representation, we can drop this code path.\n      instance = new element.type(element);\n    } else {\n      instance = new ReactCompositeComponentWrapper();\n    }\n  } else if (typeof node === 'string' || typeof node === 'number') {\n    instance = ReactNativeComponent.createInstanceForText(node);\n  } else {\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;\n  }\n\n  // Sets up the instance. This can probably just move into the constructor now.\n  instance.construct(node);\n\n  // These two fields are used by the DOM and ART diffing algorithms\n  // respectively. Instead of using expandos on components, we should be\n  // storing the state needed by the diffing algorithms elsewhere.\n  instance._mountIndex = 0;\n  instance._mountImage = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    instance._isOwnerNecessary = false;\n    instance._warnedAboutRefsInRender = false;\n  }\n\n  // Internal instances should fully constructed at this point, so they should\n  // not get any new fields added to them at this point.\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.preventExtensions) {\n      Object.preventExtensions(instance);\n    }\n  }\n\n  return instance;\n}\n\nmodule.exports = instantiateReactComponent;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RW1wdHlDb21wb25lbnQnKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3ROYXRpdmVDb21wb25lbnQnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8vIFRvIGF2b2lkIGEgY3ljbGljIGRlcGVuZGVuY3ksIHdlIGNyZWF0ZSB0aGUgZmluYWwgY2xhc3MgaW4gdGhpcyBtb2R1bGVcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7fTtcbmFzc2lnbihSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIucHJvdG90eXBlLCBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5NaXhpbiwge1xuICBfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDogaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFxufSk7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikge1xuICBpZiAob3duZXIpIHtcbiAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSB0eXBlIHJlZmVyZW5jZSBpcyBhIGtub3duIGludGVybmFsIHR5cGUuIEkuZS4gbm90IGEgdXNlclxuICogcHJvdmlkZWQgY29tcG9zaXRlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSB2YWxpZCBpbnRlcm5hbCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc0ludGVybmFsQ29tcG9uZW50VHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlYWN0Tm9kZSwgY3JlYXRlIGFuIGluc3RhbmNlIHRoYXQgd2lsbCBhY3R1YWxseSBiZSBtb3VudGVkLlxuICpcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9IEEgbmV3IGluc3RhbmNlIG9mIHRoZSBlbGVtZW50J3MgY29uc3RydWN0b3IuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmZ1bmN0aW9uIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobm9kZSkge1xuICB2YXIgaW5zdGFuY2U7XG5cbiAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gZmFsc2UpIHtcbiAgICBpbnN0YW5jZSA9IG5ldyBSZWFjdEVtcHR5Q29tcG9uZW50KGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBlbGVtZW50ID0gbm9kZTtcbiAgICAhKGVsZW1lbnQgJiYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IHR5cGUgaXMgaW52YWxpZDogZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciBidWlsdC1pbiBjb21wb25lbnRzKSAnICsgJ29yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXMnLCBlbGVtZW50LnR5cGUgPT0gbnVsbCA/IGVsZW1lbnQudHlwZSA6IHR5cGVvZiBlbGVtZW50LnR5cGUsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShlbGVtZW50Ll9vd25lcikpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBzdHJpbmcgdmFsdWVzXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbnN0YW5jZSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAoaXNJbnRlcm5hbENvbXBvbmVudFR5cGUoZWxlbWVudC50eXBlKSkge1xuICAgICAgLy8gVGhpcyBpcyB0ZW1wb3JhcmlseSBhdmFpbGFibGUgZm9yIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIG5vdCBzdHJpbmdcbiAgICAgIC8vIHJlcHJlc2VudGF0aW9ucy4gSS5lLiBBUlQuIE9uY2UgdGhvc2UgYXJlIHVwZGF0ZWQgdG8gdXNlIHRoZSBzdHJpbmdcbiAgICAgIC8vIHJlcHJlc2VudGF0aW9uLCB3ZSBjYW4gZHJvcCB0aGlzIGNvZGUgcGF0aC5cbiAgICAgIGluc3RhbmNlID0gbmV3IGVsZW1lbnQudHlwZShlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UgPSBuZXcgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygbm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICBpbnN0YW5jZSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmNyZWF0ZUluc3RhbmNlRm9yVGV4dChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRW5jb3VudGVyZWQgaW52YWxpZCBSZWFjdCBub2RlIG9mIHR5cGUgJXMnLCB0eXBlb2Ygbm9kZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdGFuY2UuY29uc3RydWN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UudW5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJywgJ09ubHkgUmVhY3QgQ29tcG9uZW50cyBjYW4gYmUgbW91bnRlZC4nKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIFNldHMgdXAgdGhlIGluc3RhbmNlLiBUaGlzIGNhbiBwcm9iYWJseSBqdXN0IG1vdmUgaW50byB0aGUgY29uc3RydWN0b3Igbm93LlxuICBpbnN0YW5jZS5jb25zdHJ1Y3Qobm9kZSk7XG5cbiAgLy8gVGhlc2UgdHdvIGZpZWxkcyBhcmUgdXNlZCBieSB0aGUgRE9NIGFuZCBBUlQgZGlmZmluZyBhbGdvcml0aG1zXG4gIC8vIHJlc3BlY3RpdmVseS4gSW5zdGVhZCBvZiB1c2luZyBleHBhbmRvcyBvbiBjb21wb25lbnRzLCB3ZSBzaG91bGQgYmVcbiAgLy8gc3RvcmluZyB0aGUgc3RhdGUgbmVlZGVkIGJ5IHRoZSBkaWZmaW5nIGFsZ29yaXRobXMgZWxzZXdoZXJlLlxuICBpbnN0YW5jZS5fbW91bnRJbmRleCA9IDA7XG4gIGluc3RhbmNlLl9tb3VudEltYWdlID0gbnVsbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGluc3RhbmNlLl9pc093bmVyTmVjZXNzYXJ5ID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gZmFsc2U7XG4gIH1cblxuICAvLyBJbnRlcm5hbCBpbnN0YW5jZXMgc2hvdWxkIGZ1bGx5IGNvbnN0cnVjdGVkIGF0IHRoaXMgcG9pbnQsIHNvIHRoZXkgc2hvdWxkXG4gIC8vIG5vdCBnZXQgYW55IG5ldyBmaWVsZHMgYWRkZWQgdG8gdGhlbSBhdCB0aGlzIHBvaW50LlxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhpbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ7Il19\n},{\"./Object.assign\":54,\"./ReactCompositeComponent\":67,\"./ReactEmptyComponent\":88,\"./ReactNativeComponent\":102,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],156:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isEventSupported\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature = document.implementation && document.implementation.hasFeature &&\n  // always returns true in newer browsers as per the standard.\n  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n  document.implementation.hasFeature('', '') !== true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = (eventName in document);\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\n\nmodule.exports = isEventSupported;\n},{\"fbjs/lib/ExecutionEnvironment\":4}],157:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextInputElement\n */\n\n'use strict';\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nvar supportedInputTypes = {\n  'color': true,\n  'date': true,\n  'datetime': true,\n  'datetime-local': true,\n  'email': true,\n  'month': true,\n  'number': true,\n  'password': true,\n  'range': true,\n  'search': true,\n  'tel': true,\n  'text': true,\n  'time': true,\n  'url': true,\n  'week': true\n};\n\nfunction isTextInputElement(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');\n}\n\nmodule.exports = isTextInputElement;\n},{}],158:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule onlyChild\n */\n'use strict';\n\nvar ReactElement = require('./ReactElement');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection. The current implementation of this\n * function assumes that a single child gets passed without a wrapper, but the\n * purpose of this helper function is to abstract away the particular structure\n * of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactComponent} The first and only `ReactComponent` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;\n  return children;\n}\n\nmodule.exports = onlyChild;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvb25seUNoaWxkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBvbmx5Q2hpbGRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGNoaWxkIGluIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiBhbmQgdmVyaWZpZXMgdGhhdCB0aGVyZVxuICogaXMgb25seSBvbmUgY2hpbGQgaW4gdGhlIGNvbGxlY3Rpb24uIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIHRoaXNcbiAqIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBhIHNpbmdsZSBjaGlsZCBnZXRzIHBhc3NlZCB3aXRob3V0IGEgd3JhcHBlciwgYnV0IHRoZVxuICogcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0byBhYnN0cmFjdCBhd2F5IHRoZSBwYXJ0aWN1bGFyIHN0cnVjdHVyZVxuICogb2YgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBUaGUgZmlyc3QgYW5kIG9ubHkgYFJlYWN0Q29tcG9uZW50YCBjb250YWluZWQgaW4gdGhlXG4gKiBzdHJ1Y3R1cmUuXG4gKi9cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdvbmx5Q2hpbGQgbXVzdCBiZSBwYXNzZWQgYSBjaGlsZHJlbiB3aXRoIGV4YWN0bHkgb25lIGNoaWxkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9ubHlDaGlsZDsiXX0=\n},{\"./ReactElement\":86,\"_process\":30,\"fbjs/lib/invariant\":18}],159:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule quoteAttributeValueForBrowser\n */\n\n'use strict';\n\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\n\n/**\n * Escapes attribute value to prevent scripting attacks.\n *\n * @param {*} value Value to escape.\n * @return {string} An escaped string.\n */\nfunction quoteAttributeValueForBrowser(value) {\n  return '\"' + escapeTextContentForBrowser(value) + '\"';\n}\n\nmodule.exports = quoteAttributeValueForBrowser;\n},{\"./escapeTextContentForBrowser\":144}],160:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule renderSubtreeIntoContainer\n*/\n\n'use strict';\n\nvar ReactMount = require('./ReactMount');\n\nmodule.exports = ReactMount.renderSubtreeIntoContainer;\n},{\"./ReactMount\":99}],161:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function (node, html) {\n  node.innerHTML = html;\n};\n\n// Win8 apps: Allow all html to be inserted\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function (node, html) {\n    MSApp.execUnsafeLocalFunction(function () {\n      node.innerHTML = html;\n    });\n  };\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to\n        // the actual Unicode character (by Babel, for example).\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;\n},{\"fbjs/lib/ExecutionEnvironment\":4}],162:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setTextContent\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar setInnerHTML = require('./setInnerHTML');\n\n/**\n * Set the textContent property of a node, ensuring that whitespace is preserved\n * even in IE8. innerText is a poor substitute for textContent and, among many\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves\n * as it should.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\nvar setTextContent = function (node, text) {\n  node.textContent = text;\n};\n\nif (ExecutionEnvironment.canUseDOM) {\n  if (!('textContent' in document.documentElement)) {\n    setTextContent = function (node, text) {\n      setInnerHTML(node, escapeTextContentForBrowser(text));\n    };\n  }\n}\n\nmodule.exports = setTextContent;\n},{\"./escapeTextContentForBrowser\":144,\"./setInnerHTML\":161,\"fbjs/lib/ExecutionEnvironment\":4}],163:[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shouldUpdateReactComponent\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Given a `prevElement` and `nextElement`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are elements. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevElement\n * @param {?object} nextElement\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  var prevType = typeof prevElement;\n  var nextType = typeof nextElement;\n  if (prevType === 'string' || prevType === 'number') {\n    return nextType === 'string' || nextType === 'number';\n  } else {\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n  }\n  return false;\n}\n\nmodule.exports = shouldUpdateReactComponent;\n},{}],164:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule traverseAllChildren\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\n\nvar getIteratorFn = require('./getIteratorFn');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\nvar SUBSEPARATOR = ':';\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar userProvidedKeyEscaperLookup = {\n  '=': '=0',\n  '.': '=1',\n  ':': '=2'\n};\n\nvar userProvidedKeyEscapeRegex = /[=.:]/g;\n\nvar didWarnAboutMaps = false;\n\nfunction userProvidedKeyEscaper(match) {\n  return userProvidedKeyEscaperLookup[match];\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  if (component && component.key != null) {\n    // Explicit key\n    return wrapUserProvidedKey(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * Escape a component key so that it is safe to use in a reactid.\n *\n * @param {*} text Component key to be escaped.\n * @return {string} An escaped string.\n */\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);\n}\n\n/**\n * Wrap a `key` value explicitly provided by the user to distinguish it from\n * implicitly-generated keys generated by a component's index in its parent.\n *\n * @param {string} key Value of a user-provided `key` attribute\n * @return {string}\n */\nfunction wrapUserProvidedKey(key) {\n  return '$' + escapeUserProvidedKey(key);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (iteratorFn) {\n      var iterator = iteratorFn.call(children);\n      var step;\n      if (iteratorFn !== children.entries) {\n        var ii = 0;\n        while (!(step = iterator.next()).done) {\n          child = step.value;\n          nextName = nextNamePrefix + getComponentKey(child, ii++);\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n        }\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;\n          didWarnAboutMaps = true;\n        }\n        // Iterator will provide entry [k,v] tuples rather than values.\n        while (!(step = iterator.next()).done) {\n          var entry = step.value;\n          if (entry) {\n            child = entry[1];\n            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n          }\n        }\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n      if (process.env.NODE_ENV !== 'production') {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {\n          addendum = ' It looks like you\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\n        }\n        if (ReactCurrentOwner.current) {\n          var name = ReactCurrentOwner.current.getName();\n          if (name) {\n            addendum += ' Check the render method of `' + name + '`.';\n          }\n        }\n      }\n      var childrenString = String(children);\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\nmodule.exports = traverseAllChildren;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./ReactCurrentOwner\":68,\"./ReactElement\":86,\"./ReactInstanceHandles\":95,\"./getIteratorFn\":152,\"_process\":30,\"fbjs/lib/invariant\":18,\"fbjs/lib/warning\":29}],165:[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule validateDOMNesting\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar warning = require('fbjs/lib/warning');\n\nvar validateDOMNesting = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  // This validation code was written based on the HTML5 parsing spec:\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  //\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's\n  // not clear what practical benefit doing so provides); instead, we warn only\n  // for cases where the parser will give a parse tree differing from what React\n  // intended. For example, <b><div></div></b> is invalid but we don't warn\n  // because it still parses correctly; we do warn for other cases like nested\n  // <p> tags where the beginning of the second element implicitly closes the\n  // first, causing a confusing mess.\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#special\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point\n  // TODO: Distinguish by namespace here -- for <title>, including it here\n  // errs on the side of fewer warnings\n  'foreignObject', 'desc', 'title'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope\n  var buttonScopeTags = inScopeTags.concat(['button']);\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];\n\n  var emptyAncestorInfo = {\n    parentTag: null,\n\n    formTag: null,\n    aTagInScope: null,\n    buttonTagInScope: null,\n    nobrTagInScope: null,\n    pTagInButtonScope: null,\n\n    listItemTagAutoclosing: null,\n    dlItemTagAutoclosing: null\n  };\n\n  var updatedAncestorInfo = function (oldInfo, tag, instance) {\n    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);\n    var info = { tag: tag, instance: instance };\n\n    if (inScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.aTagInScope = null;\n      ancestorInfo.buttonTagInScope = null;\n      ancestorInfo.nobrTagInScope = null;\n    }\n    if (buttonScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.pTagInButtonScope = null;\n    }\n\n    // See rules for 'li', 'dd', 'dt' start tags in\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {\n      ancestorInfo.listItemTagAutoclosing = null;\n      ancestorInfo.dlItemTagAutoclosing = null;\n    }\n\n    ancestorInfo.parentTag = info;\n\n    if (tag === 'form') {\n      ancestorInfo.formTag = info;\n    }\n    if (tag === 'a') {\n      ancestorInfo.aTagInScope = info;\n    }\n    if (tag === 'button') {\n      ancestorInfo.buttonTagInScope = info;\n    }\n    if (tag === 'nobr') {\n      ancestorInfo.nobrTagInScope = info;\n    }\n    if (tag === 'p') {\n      ancestorInfo.pTagInButtonScope = info;\n    }\n    if (tag === 'li') {\n      ancestorInfo.listItemTagAutoclosing = info;\n    }\n    if (tag === 'dd' || tag === 'dt') {\n      ancestorInfo.dlItemTagAutoclosing = info;\n    }\n\n    return ancestorInfo;\n  };\n\n  /**\n   * Returns whether\n   */\n  var isTagValidWithParent = function (tag, parentTag) {\n    // First, let's check if we're in an unusual parsing mode...\n    switch (parentTag) {\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\n      case 'select':\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';\n      case 'optgroup':\n        return tag === 'option' || tag === '#text';\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>\n      // but\n      case 'option':\n        return tag === '#text';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\n      // No special behavior since these rules fall back to \"in body\" mode for\n      // all except special table nodes which cause bad parsing behavior anyway.\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\n      case 'tr':\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\n      case 'tbody':\n      case 'thead':\n      case 'tfoot':\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\n      case 'colgroup':\n        return tag === 'col' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\n      case 'table':\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\n      case 'head':\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\n      case 'html':\n        return tag === 'head' || tag === 'body';\n    }\n\n    // Probably in the \"in body\" parsing mode, so we outlaw only tag combos\n    // where the parsing rules cause implicit opens or closes to be added.\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    switch (tag) {\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n\n      case 'rp':\n      case 'rt':\n        return impliedEndTags.indexOf(parentTag) === -1;\n\n      case 'caption':\n      case 'col':\n      case 'colgroup':\n      case 'frame':\n      case 'head':\n      case 'tbody':\n      case 'td':\n      case 'tfoot':\n      case 'th':\n      case 'thead':\n      case 'tr':\n        // These tags are only valid with a few parents that have special child\n        // parsing rules -- if we're down here, then none of those matched and\n        // so we allow it only if we don't know what the parent is, as all other\n        // cases are invalid.\n        return parentTag == null;\n    }\n\n    return true;\n  };\n\n  /**\n   * Returns whether\n   */\n  var findInvalidAncestorForTag = function (tag, ancestorInfo) {\n    switch (tag) {\n      case 'address':\n      case 'article':\n      case 'aside':\n      case 'blockquote':\n      case 'center':\n      case 'details':\n      case 'dialog':\n      case 'dir':\n      case 'div':\n      case 'dl':\n      case 'fieldset':\n      case 'figcaption':\n      case 'figure':\n      case 'footer':\n      case 'header':\n      case 'hgroup':\n      case 'main':\n      case 'menu':\n      case 'nav':\n      case 'ol':\n      case 'p':\n      case 'section':\n      case 'summary':\n      case 'ul':\n\n      case 'pre':\n      case 'listing':\n\n      case 'table':\n\n      case 'hr':\n\n      case 'xmp':\n\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return ancestorInfo.pTagInButtonScope;\n\n      case 'form':\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;\n\n      case 'li':\n        return ancestorInfo.listItemTagAutoclosing;\n\n      case 'dd':\n      case 'dt':\n        return ancestorInfo.dlItemTagAutoclosing;\n\n      case 'button':\n        return ancestorInfo.buttonTagInScope;\n\n      case 'a':\n        // Spec says something about storing a list of markers, but it sounds\n        // equivalent to this check.\n        return ancestorInfo.aTagInScope;\n\n      case 'nobr':\n        return ancestorInfo.nobrTagInScope;\n    }\n\n    return null;\n  };\n\n  /**\n   * Given a ReactCompositeComponent instance, return a list of its recursive\n   * owners, starting at the root and ending with the instance itself.\n   */\n  var findOwnerStack = function (instance) {\n    if (!instance) {\n      return [];\n    }\n\n    var stack = [];\n    /*eslint-disable space-after-keywords */\n    do {\n      /*eslint-enable space-after-keywords */\n      stack.push(instance);\n    } while (instance = instance._currentElement._owner);\n    stack.reverse();\n    return stack;\n  };\n\n  var didWarn = {};\n\n  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.parentTag;\n    var parentTag = parentInfo && parentInfo.tag;\n\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);\n    var problematic = invalidParent || invalidAncestor;\n\n    if (problematic) {\n      var ancestorTag = problematic.tag;\n      var ancestorInstance = problematic.instance;\n\n      var childOwner = childInstance && childInstance._currentElement._owner;\n      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;\n\n      var childOwners = findOwnerStack(childOwner);\n      var ancestorOwners = findOwnerStack(ancestorOwner);\n\n      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);\n      var i;\n\n      var deepestCommon = -1;\n      for (i = 0; i < minStackLen; i++) {\n        if (childOwners[i] === ancestorOwners[i]) {\n          deepestCommon = i;\n        } else {\n          break;\n        }\n      }\n\n      var UNKNOWN = '(unknown)';\n      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {\n        return inst.getName() || UNKNOWN;\n      });\n      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {\n        return inst.getName() || UNKNOWN;\n      });\n      var ownerInfo = [].concat(\n      // If the parent and child instances have a common owner ancestor, start\n      // with that -- otherwise we just start with the parent's owners.\n      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,\n      // If we're warning about an invalid (non-parent) ancestry, add '...'\n      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');\n\n      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;\n      if (didWarn[warnKey]) {\n        return;\n      }\n      didWarn[warnKey] = true;\n\n      if (invalidParent) {\n        var info = '';\n        if (ancestorTag === 'table' && childTag === 'tr') {\n          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';\n        }\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;\n      } else {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;\n      }\n    }\n  };\n\n  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);\n\n  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;\n\n  // For testing\n  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.parentTag;\n    var parentTag = parentInfo && parentInfo.tag;\n    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);\n  };\n}\n\nmodule.exports = validateDOMNesting;\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./Object.assign\":54,\"_process\":30,\"fbjs/lib/emptyFunction\":10,\"fbjs/lib/warning\":29}],166:[function(require,module,exports){\n'use strict';\n\nmodule.exports = require('./lib/React');\n\n},{\"./lib/React\":56}],167:[function(require,module,exports){\n/*eslint-env browser */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction getHead() {\n  return document.head || document.getElementsByTagName('head')[0];\n}\n\nfunction attachAttributes(tag, attributes) {\n  for (var key in attributes) {\n    if (!attributes.hasOwnProperty(key)) {\n      continue;\n    }\n    var value = attributes[key];\n    tag.setAttribute('data-' + key, value);\n  }\n}\n\nvar insertCSS = {\n  // Create a <link> tag with optional data attributes\n  createLink: function createLink(href) {\n    var head = getHead();\n    var link = document.createElement('link');\n\n    link.href = href;\n    link.rel = 'stylesheet';\n\n    attachAttributes(link);\n\n    head.appendChild(link);\n\n    return link;\n  },\n  // Create a <style> tag with optional data attributes\n  createStyle: function createStyle(cssText, attributes) {\n    var head = getHead();\n    var style = document.createElement('style');\n\n    style.type = 'text/css';\n\n    attachAttributes(style, attributes);\n\n    if (style.sheet) {\n      // for jsdom and IE9+\n      style.innerHTML = cssText;\n      style.sheet.cssText = cssText;\n      head.appendChild(style);\n    } else if (style.styleSheet) {\n      // for IE8 and below\n      head.appendChild(style);\n      style.styleSheet.cssText = cssText;\n    } else {\n      // for Chrome, Firefox, and Safari\n      style.appendChild(document.createTextNode(cssText));\n      head.appendChild(style);\n    }\n\n    return style;\n  }\n};\n\nexports['default'] = insertCSS;\nmodule.exports = exports['default'];\n},{}],168:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');\n\nvar _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);\n\nrequire('./index.scss');\n\n/**\n *\n * 处理数字每隔3位加一个逗号\n *\n */\nfunction numToStr(num) {\n    return num.toString().replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g, '$1,');\n}\nvar A = [0, 1, 2, 3, 4];\nvar ALLCARDS = ['a-1', 'a-2', 'a-3', 'a-4', 'a-5', 'a-6', 'a-7', 'a-8', 'a-9', 'a-10', 'a-11', 'a-12', 'a-13', 'b-1', 'b-2', 'b-3', 'b-4', 'b-5', 'b-6', 'b-7', 'b-8', 'b-9', 'b-10', 'b-11', 'b-12', 'b-13', 'c-1', 'c-2', 'c-3', 'c-4', 'c-5', 'c-6', 'c-7', 'c-8', 'c-9', 'c-10', 'c-11', 'c-12', 'c-13', 'd-1', 'd-2', 'd-3', 'd-4', 'd-5', 'd-6', 'd-7', 'd-8', 'd-9', 'd-10', 'd-11', 'd-12', 'd-13'];\nvar LSKEY = '__poker__storage';\nvar Poker = _react2['default'].createClass({\n    displayName: 'Poker',\n\n    getInitialState: function getInitialState() {\n        var str = localStorage.getItem(LSKEY);\n        var json = undefined;\n        if (str) {\n            try {\n                json = JSON.parse(str);\n            } catch (e) {\n                json = {\n                    total: 1000,\n                    bet: 10\n                };\n            }\n        } else {\n            json = {\n                total: 1000,\n                bet: 10\n            };\n        }\n        return {\n            total: json.total,\n            bet: json.bet,\n            win: 0,\n            dealing: false,\n            cards: ['', '', '', '', ''],\n            holds: [false, false, false, false, false],\n            step: 0,\n            gaming: false,\n            times: 0,\n            text: null,\n            random: 0,\n            randomResult: '',\n            waiting: false,\n            help: !str,\n            inputText: '',\n            runOut: json.total < json.bet\n        };\n    },\n    componentWillMount: function componentWillMount() {\n        this.preLoadImages();\n    },\n    preLoadImages: function preLoadImages() {\n        var images = ['./img/heitao.jpg', './img/hongtao.jpg', './img/meihua.jpg', './img/fangkuai.jpg'];\n        images.forEach(function (url) {\n            var img = new Image();\n            img.src = url;\n        });\n    },\n    inputTextChange: function inputTextChange(e) {\n        var inputText = e.target.value;\n        this.setState({\n            inputText: inputText\n        });\n    },\n    hideInput: function hideInput() {\n        this.setState({\n            inputText: '',\n            runOut: false,\n            total: 1000,\n            bet: 10\n        }, this.persistData);\n    },\n    checkRunOut: function checkRunOut() {\n        if (this.state.total < this.state.bet) {\n            this.setState({\n                runOut: true\n            });\n        }\n    },\n    showHelp: function showHelp() {\n        this.setState({\n            help: true\n        });\n    },\n    hideHelp: function hideHelp() {\n        this.setState({\n            help: false\n        });\n    },\n    persistData: function persistData() {\n        var str = JSON.stringify({\n            total: this.state.total,\n            bet: this.state.bet\n        });\n        localStorage.setItem(LSKEY, str);\n    },\n    winMoney: function winMoney() {\n        var _this = this;\n\n        this.setState({\n            total: this.state.total + this.state.win,\n            win: 0\n        }, function () {\n            return _this.resetOneCard(0);\n        });\n    },\n    resetState: function resetState() {\n        this.setState({\n            dealing: false,\n            cards: ['', '', '', '', ''],\n            holds: [false, false, false, false, false],\n            step: 0,\n            gaming: false,\n            times: 0,\n            text: null,\n            random: 0,\n            randomResult: '',\n            waiting: false\n        }, function () {\n            this.persistData();\n            this.clearTimer();\n        });\n    },\n    clearTimer: function clearTimer() {\n        clearInterval(this.timer);\n    },\n    clearRandom: function clearRandom() {\n        this.setState({\n            random: 0,\n            randomResult: ''\n        });\n    },\n    startRandom: function startRandom() {\n        this.timer = setInterval((function () {\n            var random = Math.ceil(Math.random() * 6);\n            this.setState({\n                random: random\n            });\n        }).bind(this), 125);\n    },\n    randomGuessBig: function randomGuessBig() {\n        if (this.state.random >= 4) {\n            this.randomWin();\n        } else {\n            this.randomLose();\n        }\n    },\n    randomGuessSmall: function randomGuessSmall() {\n        if (this.state.random <= 3) {\n            this.randomWin();\n        } else {\n            this.randomLose();\n        }\n    },\n    randomWin: function randomWin() {\n        this.clearTimer();\n        this.setState({\n            randomResult: 'Win',\n            win: this.state.win * 2,\n            waiting: true\n        }, function () {\n            setTimeout((function () {\n                this.startRandom();\n                this.setState({\n                    randomResult: '',\n                    waiting: false\n                });\n            }).bind(this), 1000);\n        });\n    },\n    randomLose: function randomLose() {\n        this.clearTimer();\n        this.setState({\n            randomResult: 'Lose',\n            waiting: true\n        }, function () {\n            setTimeout((function () {\n                this.clearRandom();\n                this.setState({\n                    win: 0,\n                    waiting: false\n                }, function () {\n                    this.checkRunOut();\n                    this.resetOneCard(0);\n                });\n            }).bind(this), 1200);\n        });\n    },\n    betMinus: function betMinus() {\n        this.setState({\n            bet: --this.state.bet\n        });\n    },\n    betPlus: function betPlus() {\n        this.setState({\n            bet: ++this.state.bet\n        });\n    },\n    rollGame: function rollGame() {\n        if (this.state.step === 0) {\n            this.minusTotal();\n        }\n        this.setState({\n            step: ++this.state.step,\n            dealing: true,\n            gaming: true\n        }, this.dealCards);\n    },\n    minusTotal: function minusTotal() {\n        this.setState({\n            total: this.state.total - this.state.bet\n        });\n    },\n    toggleHold: function toggleHold(index) {\n        if (this.state.step !== 2 || this.state.dealing) return;\n        this.setState({\n            holds: [].concat(_toConsumableArray(this.state.holds.slice(0, index)), [!this.state.holds[index]], _toConsumableArray(this.state.holds.slice(index + 1)))\n        });\n    },\n    dealCards: function dealCards() {\n        this.dealOneCard(0);\n    },\n    resetOneCard: function resetOneCard(index) {\n        if (index >= 5) {\n            this.resetState();\n            return;\n        }\n        setTimeout((function () {\n            var _state = this.state;\n            var cards = _state.cards;\n            var holds = _state.holds;\n\n            this.setState({\n                cards: [].concat(_toConsumableArray(cards.slice(0, index)), [''], _toConsumableArray(cards.slice(index + 1))),\n                holds: [].concat(_toConsumableArray(holds.slice(0, index)), [false], _toConsumableArray(holds.slice(index + 1)))\n            });\n            this.resetOneCard(++index);\n        }).bind(this), 250);\n    },\n    dealOneCard: function dealOneCard(index) {\n        if (index >= 5) {\n            this.setState({\n                step: ++this.state.step,\n                dealing: false\n            }, function () {\n                if (this.state.step === 4) {\n                    var times = this.gameResult();\n                    if (times === 0) {\n                        setTimeout((function () {\n                            this.setState({\n                                text: 'You Lose!!!'\n                            }, function () {\n                                setTimeout((function () {\n                                    this.setState({\n                                        text: null\n                                    }, function () {\n                                        this.checkRunOut();\n                                        this.resetOneCard(0);\n                                    });\n                                }).bind(this), 1200);\n                            });\n                        }).bind(this), 1200);\n                    } else {\n                        this.setState({\n                            text: 'You Win!!!',\n                            win: this.state.bet * times,\n                            times: times\n                        }, function () {\n                            this.startRandom();\n                            setTimeout((function () {\n                                this.setState({\n                                    text: null\n                                });\n                            }).bind(this), 1200);\n                        });\n                    }\n                }\n            });\n            return;\n        }\n        if (this.state.holds[index]) {\n            this.dealOneCard(++index);\n            return;\n        }\n        setTimeout((function () {\n            var card = this.getOneShuffleCard();\n            this.setState({\n                cards: [].concat(_toConsumableArray(this.state.cards.slice(0, index)), [card], _toConsumableArray(this.state.cards.slice(index + 1)))\n            });\n            this.dealOneCard(++index);\n        }).bind(this), 250);\n    },\n    getOneShuffleCard: function getOneShuffleCard() {\n        var ran = parseInt(Math.floor(Math.random() * 51));\n        while (this.state.cards.indexOf(ALLCARDS[ran]) >= 0) {\n            ran = parseInt(Math.floor(Math.random() * 51));\n        }\n        return ALLCARDS[ran];\n    },\n    gameResult: function gameResult() {\n        var ts = [];\n        var ns = [];\n        var card = undefined,\n            cArr = undefined;\n        A.forEach((function (i) {\n            card = this.state.cards[i];\n            cArr = card.split('-');\n            ts.push(cArr[0]);\n            ns.push(parseInt(cArr[1]));\n        }).bind(this));\n        ns.sort(function (a, b) {\n            return a - b;\n        });\n        if (ts[0] == ts[1] && ts[0] == ts[2] && ts[0] == ts[3] && ts[0] == ts[4]) {\n            if (ns[4] - ns[0] == 4) return 250; //同花顺\n            return 7; //同花\n        }\n        if (ns[0] != ns[1] && ns[1] != ns[2] && ns[2] != ns[3] && ns[3] != ns[4]) {\n            if (ns[4] - ns[0] == 4 || ns[0] == 1 && ns[1] == 10) return 10; //顺子\n            return 0; //什么也不是\n        }\n        if (ns[0] == ns[3] || ns[1] == ns[4]) return 60; //四条\n        if (ns[0] == ns[2] && ns[3] == ns[4] || ns[0] == ns[1] && ns[2] == ns[4]) return 20; //葫芦\n        if (ns[0] == ns[2] || ns[1] == ns[3] || ns[2] == ns[4]) return 5; //三条\n        if (ns[0] == ns[1] && (ns[2] == ns[3] || ns[3] == ns[4]) || ns[1] == ns[2] && ns[3] == ns[4]) return 2; //两对\n        if (ns[1] == 1 || ns[0] == ns[1] && ns[0] >= 8 || ns[1] == ns[2] && ns[1] >= 8 || ns[2] == ns[3] && ns[2] >= 8 || ns[3] == ns[4] && ns[3] >= 8) return 1; //大于8一对\n        return 0;\n    },\n    render: function render() {\n        var state = this.state;\n        var cardsArr = [];\n        A.forEach((function (index) {\n            var card = state.cards[index];\n            if (card) {\n                var r = card.split('-');\n                var c = r[0] + '-card p-' + r[1];\n                cardsArr.push(_react2['default'].createElement('div', {\n                    key: index,\n                    className: 'card ' + c + ' ' + (state.holds[index] ? 'hold' : ''),\n                    onClick: this.toggleHold.bind(this, index)\n                }));\n            } else {\n                cardsArr.push(_react2['default'].createElement('div', {\n                    key: index,\n                    className: 'card back ' + (state.holds[index] ? 'hold' : ''),\n                    onClick: this.toggleHold.bind(this, index)\n                }));\n            }\n        }).bind(this));\n        return _react2['default'].createElement(\n            'div',\n            null,\n            _react2['default'].createElement(\n                'div',\n                { className: 'container' },\n                _react2['default'].createElement(\n                    'div',\n                    { className: 'title' },\n                    _react2['default'].createElement(\n                        'h1',\n                        { className: 'ui center aligned header' },\n                        'Poker Game',\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'sub header' },\n                            'Thanks to ',\n                            _react2['default'].createElement(\n                                'a',\n                                { target: '_blank', href: 'https://facebook.github.io/react/' },\n                                'React'\n                            ),\n                            ' and ',\n                            _react2['default'].createElement(\n                                'a',\n                                { target: '_blank', href: 'http://semantic-ui.com/' },\n                                'Semantic-UI'\n                            )\n                        )\n                    )\n                ),\n                _react2['default'].createElement(\n                    'div',\n                    { className: 'left' },\n                    _react2['default'].createElement(\n                        'div',\n                        { className: 'ui vertical menu' },\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'item ' + (state.times === 250 ? 'blink' : '') },\n                            '同花顺',\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui teal label' },\n                                '250'\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'item ' + (state.times === 60 ? 'blink' : '') },\n                            '四条',\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui teal label' },\n                                '60'\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'item ' + (state.times === 20 ? 'blink' : '') },\n                            '葫芦',\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui teal label' },\n                                '20'\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'item ' + (state.times === 10 ? 'blink' : '') },\n                            '顺子',\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui teal label' },\n                                '10'\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'item ' + (state.times === 7 ? 'blink' : '') },\n                            '同花',\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui teal label' },\n                                '7'\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'item ' + (state.times === 5 ? 'blink' : '') },\n                            '三条',\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui teal label' },\n                                '5'\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'item ' + (state.times === 2 ? 'blink' : '') },\n                            '两对',\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui teal label' },\n                                '2'\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'item ' + (state.times === 1 ? 'blink' : '') },\n                            '大于8一对',\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui teal label' },\n                                '1'\n                            )\n                        )\n                    )\n                ),\n                _react2['default'].createElement(\n                    'div',\n                    { className: 'right' },\n                    _react2['default'].createElement(\n                        'div',\n                        { className: 'top' },\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'ui form' },\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'fields' },\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'five wide field' },\n                                    _react2['default'].createElement(\n                                        'label',\n                                        null,\n                                        'Total'\n                                    ),\n                                    _react2['default'].createElement(\n                                        'div',\n                                        { className: 'ui tiny statistic' },\n                                        _react2['default'].createElement(\n                                            'div',\n                                            { className: 'value' },\n                                            '￥',\n                                            numToStr(state.total)\n                                        )\n                                    )\n                                ),\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'four wide field' },\n                                    _react2['default'].createElement(\n                                        'label',\n                                        null,\n                                        'Win'\n                                    ),\n                                    _react2['default'].createElement(\n                                        'div',\n                                        { className: 'ui tiny statistic' },\n                                        _react2['default'].createElement(\n                                            'div',\n                                            { className: 'value' },\n                                            '￥',\n                                            numToStr(state.win)\n                                        )\n                                    )\n                                ),\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'field' },\n                                    _react2['default'].createElement(\n                                        'label',\n                                        null,\n                                        'Bet'\n                                    ),\n                                    _react2['default'].createElement(\n                                        'div',\n                                        { className: 'ui buttons' },\n                                        _react2['default'].createElement(\n                                            'button',\n                                            {\n                                                className: 'ui icon red button',\n                                                onClick: this.betMinus,\n                                                disabled: state.bet <= 1 || state.gaming },\n                                            _react2['default'].createElement('i', { className: 'icon minus' })\n                                        ),\n                                        _react2['default'].createElement(\n                                            'button',\n                                            { className: 'ui blue basic button', disabled: 'disabled' },\n                                            state.bet\n                                        ),\n                                        _react2['default'].createElement(\n                                            'button',\n                                            {\n                                                className: 'ui icon green button',\n                                                onClick: this.betPlus,\n                                                disabled: state.bet >= 100 || state.bet >= state.total || state.gaming },\n                                            _react2['default'].createElement('i', { className: 'icon plus' })\n                                        )\n                                    )\n                                ),\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'field' },\n                                    _react2['default'].createElement(\n                                        'label',\n                                        null,\n                                        ' '\n                                    ),\n                                    _react2['default'].createElement(\n                                        'button',\n                                        { className: 'ui icon button teal', onClick: this.showHelp },\n                                        'Help',\n                                        _react2['default'].createElement('i', { className: 'icon help' })\n                                    )\n                                )\n                            )\n                        )\n                    ),\n                    _react2['default'].createElement(\n                        'div',\n                        { className: 'middle' },\n                        state.text ? _react2['default'].createElement(\n                            'div',\n                            { className: 'ui red floating message massive' },\n                            _react2['default'].createElement(\n                                'p',\n                                null,\n                                state.text\n                            )\n                        ) : cardsArr\n                    ),\n                    _react2['default'].createElement(\n                        'div',\n                        { className: 'bottom' },\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'ui form' },\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'fields' },\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'five wide field' },\n                                    _react2['default'].createElement(\n                                        'div',\n                                        { className: 'ui large buttons' },\n                                        _react2['default'].createElement(\n                                            'button',\n                                            {\n                                                className: 'ui red button',\n                                                disabled: state.step !== 4 || state.win === 0 || state.waiting,\n                                                onClick: this.randomGuessBig\n                                            },\n                                            'Big'\n                                        ),\n                                        _react2['default'].createElement('div', { className: 'or' }),\n                                        _react2['default'].createElement(\n                                            'button',\n                                            {\n                                                className: 'ui green button',\n                                                disabled: state.step !== 4 || state.win === 0 || state.waiting,\n                                                onClick: this.randomGuessSmall\n                                            },\n                                            'Small'\n                                        )\n                                    )\n                                ),\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'five wide field random-area' },\n                                    state.win === 0 ? null : _react2['default'].createElement(\n                                        'div',\n                                        null,\n                                        _react2['default'].createElement(\n                                            'span',\n                                            { className: 'random-number' },\n                                            state.random\n                                        ),\n                                        _react2['default'].createElement(\n                                            'span',\n                                            { className: 'random-result' },\n                                            state.randomResult\n                                        )\n                                    )\n                                ),\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'six wide field right-area' },\n                                    _react2['default'].createElement(\n                                        'div',\n                                        { className: 'ui large buttons' },\n                                        _react2['default'].createElement(\n                                            'button',\n                                            {\n                                                className: 'ui red button',\n                                                disabled: state.win === 0,\n                                                onClick: this.winMoney\n                                            },\n                                            'Check'\n                                        ),\n                                        _react2['default'].createElement('div', { className: 'or' }),\n                                        _react2['default'].createElement(\n                                            'button',\n                                            { className: 'ui green button',\n                                                onClick: this.rollGame,\n                                                disabled: state.dealing || state.step >= 3\n                                            },\n                                            [0, 1].indexOf(state.step) >= 0 ? 'Roll' : 'Go on'\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            ),\n            state.help ? _react2['default'].createElement(\n                _reactAddonsCssTransitionGroup2['default'],\n                { transitionName: 'help', transitionAppear: true, transitionAppearTimeout: 500, transitionEnter: false, transitionLeave: false },\n                _react2['default'].createElement(\n                    'div',\n                    { className: 'ui dimmer modals page active' },\n                    _react2['default'].createElement(\n                        'div',\n                        { className: 'ui small basic modal active' },\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'ui icon header orange' },\n                            _react2['default'].createElement('i', { className: 'help circle icon' }),\n                            ' 游戏规则 '\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'content' },\n                            _react2['default'].createElement(\n                                'p',\n                                null,\n                                '点击 Roll 按钮发牌，第一次发牌后点击牌可以选择保留该牌，再次点击该按钮会替换掉未被保留的牌，形成最终牌型，当有四条，或同花，或葫芦，或顺子，或三条，或两对，或大于一对8的牌型时胜利，可选择继续猜大小，猜对则奖金加倍，猜错则奖金清零，也可以随时点击 Check 按钮结算奖金。'\n                            ),\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui list' },\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'item' },\n                                    _react2['default'].createElement('i', { className: 'info circle icon olive' }),\n                                    _react2['default'].createElement(\n                                        'div',\n                                        { className: 'content' },\n                                        '投注范围 1-100'\n                                    )\n                                ),\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'item' },\n                                    _react2['default'].createElement('i', { className: 'info circle icon olive' }),\n                                    _react2['default'].createElement(\n                                        'div',\n                                        { className: 'content' },\n                                        '牌型对应倍数见左侧栏'\n                                    )\n                                ),\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'item' },\n                                    _react2['default'].createElement('i', { className: 'info circle icon olive' }),\n                                    _react2['default'].createElement(\n                                        'div',\n                                        { className: 'content' },\n                                        '猜大小数字 1、2、3 为小，4、5、6 为大'\n                                    )\n                                )\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'actions' },\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui green ok inverted button', onClick: this.hideHelp },\n                                _react2['default'].createElement('i', { className: 'checkmark icon' }),\n                                ' OK, I See '\n                            )\n                        )\n                    )\n                )\n            ) : null,\n            state.runOut ? _react2['default'].createElement(\n                _reactAddonsCssTransitionGroup2['default'],\n                { transitionName: 'help', transitionAppear: true, transitionAppearTimeout: 500, transitionEnter: false, transitionLeave: false },\n                _react2['default'].createElement(\n                    'div',\n                    { className: 'ui dimmer modals page active' },\n                    _react2['default'].createElement(\n                        'div',\n                        { className: 'ui small basic modal active' },\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'ui icon header red' },\n                            _react2['default'].createElement('i', { className: 'warning circle icon' }),\n                            ' 胜败乃兵家常事，大侠请重新来过 '\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'content' },\n                            _react2['default'].createElement(\n                                'p',\n                                null,\n                                '没钱了，看起来运气不太好啊。在下边的框里输入『作者真帅』重新来过吧！'\n                            ),\n                            _react2['default'].createElement(\n                                'div',\n                                { className: 'ui form' },\n                                _react2['default'].createElement(\n                                    'div',\n                                    { className: 'field' },\n                                    _react2['default'].createElement('input', { type: 'text', placeholder: '', value: state.inputText || '', onChange: this.inputTextChange })\n                                )\n                            )\n                        ),\n                        _react2['default'].createElement(\n                            'div',\n                            { className: 'actions' },\n                            _react2['default'].createElement(\n                                'button',\n                                {\n                                    className: 'ui green ok inverted button',\n                                    onClick: this.hideInput,\n                                    disabled: state.inputText !== '作者真帅' },\n                                _react2['default'].createElement('i', { className: 'checkmark icon' }),\n                                ' Fight Again '\n                            )\n                        )\n                    )\n                )\n            ) : null\n        );\n    }\n});\n\nexports['default'] = Poker;\nmodule.exports = exports['default'];\n\n},{\"./index.scss\":169,\"react\":166,\"react-addons-css-transition-group\":31}],169:[function(require,module,exports){\nmodule.exports.tag = require('scssify').createLink(\"data:text/css;base64,Kntib3gtc2l6aW5nOmJvcmRlci1ib3h9LmNvbnRhaW5lcnt3aWR0aDoxMDAlO21heC13aWR0aDo4MDBweDtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTUwJSk7Ym9yZGVyOjFweCBzb2xpZCAjZjFmMWYxO3BhZGRpbmc6NXB4IDA7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwfS5jb250YWluZXIgLnRpdGxle2ZsZXg6MTAwJTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTYwcHg7bGVmdDowO3dpZHRoOjEwMCV9LmNvbnRhaW5lciAubGVmdHtkaXNwbGF5OmZsZXg7ZmxleDoyMCU7bWluLWhlaWdodDozMDBweDtwYWRkaW5nOjVweDtib3JkZXItcmlnaHQ6MXB4IGRvdHRlZCAjZWVlfS5jb250YWluZXIgLmxlZnQgLnVpLm1lbnV7ZGlzcGxheTpmbGV4O3dpZHRoOjEwMCU7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7Ym9yZGVyOjAgbm9uZTtib3gtc2hhZG93Om5vbmV9LmNvbnRhaW5lciAubGVmdCAudWkubWVudSAuaXRlbXtwYWRkaW5nLWxlZnQ6NXB4O3BhZGRpbmctcmlnaHQ6NXB4fS5jb250YWluZXIgLmxlZnQgLnVpLm1lbnUgLml0ZW06YmVmb3Jle2Rpc3BsYXk6bm9uZX0uY29udGFpbmVyIC5sZWZ0IC51aS5tZW51IC5pdGVtLmJsaW5re2FuaW1hdGlvbjpibGluayAuOHMgSW5maW5pdGV9LmNvbnRhaW5lciAucmlnaHR7ZGlzcGxheTpmbGV4O2ZsZXg6ODAlO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjttaW4taGVpZ2h0OjMwMHB4O3BhZGRpbmc6NXB4fS5jb250YWluZXIgLnJpZ2h0IC50b3B7ZGlzcGxheTpmbGV4fS5jb250YWluZXIgLnJpZ2h0IC50b3AgLnVpLnRpbnkuc3RhdGlzdGlje21hcmdpbjo2cHggMCAwfS5jb250YWluZXIgLnJpZ2h0IC5taWRkbGV7ZGlzcGxheTpmbGV4O2ZsZXg6NjAlO2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbjoxMHB4IDA7Ym9yZGVyLXRvcDoxcHggZG90dGVkICNlZWU7Ym9yZGVyLWJvdHRvbToxcHggZG90dGVkICNlZWV9LmNvbnRhaW5lciAucmlnaHQgLm1pZGRsZSAuY2FyZHtjdXJzb3I6cG9pbnRlcjt3aWR0aDoxMDBweDtoZWlnaHQ6MTM5cHg7bWFyZ2luOjVweDtib3JkZXItcmFkaXVzOjlweDtwb3NpdGlvbjpyZWxhdGl2ZX0uY29udGFpbmVyIC5yaWdodCAubWlkZGxlIC5jYXJkLmhvbGR7Ym94LXNoYWRvdzotNHB4IC00cHggMTBweCAjZjExIGluc2V0fS5jb250YWluZXIgLnJpZ2h0IC5taWRkbGUgLmNhcmQuaG9sZDphZnRlcntjb250ZW50OiJob2xkIjt3aWR0aDoxMDBweDtoZWlnaHQ6MTM5cHg7ei1pbmRleDoxO2JhY2tncm91bmQ6cmdiYSgyMDAsNTAsNTAsMC4zKTtjb2xvcjojZjExO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDtsaW5lLWhlaWdodDoxMzlweDt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MzZweDtib3JkZXItcmFkaXVzOjlweH0uY29udGFpbmVyIC5yaWdodCAuYm90dG9te2Rpc3BsYXk6ZmxleH0uY29udGFpbmVyIC5yaWdodCAudWkuZm9ybXt3aWR0aDoxMDAlfS5jb250YWluZXIgLnJpZ2h0IC51aS5mb3JtIC5yaWdodC1hcmVhe3RleHQtYWxpZ246cmlnaHR9LmNvbnRhaW5lciAucmlnaHQgLnVpLmZvcm0gLnJhbmRvbS1hcmVhe2xpbmUtaGVpZ2h0OjQwcHh9LmNvbnRhaW5lciAucmlnaHQgLnVpLmZvcm0gLnJhbmRvbS1hcmVhIC5yYW5kb20tbnVtYmVye21hcmdpbi1yaWdodDoyMHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjUwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmNvbnRhaW5lciAucmlnaHQgLnVpLmZvcm0gLnJhbmRvbS1hcmVhIC5yYW5kb20tcmVzdWx0e2NvbG9yOiMyMUJBNDV9LmNvbnRhaW5lciAucmlnaHQgLnVpLmZvcm0gLnJhbmRvbS1hcmVhIC5yYW5kb20tcmVzdWx0Lmxvc2V7Y29sb3I6I0NDMTgxRX0ucC0xe2JhY2tncm91bmQtcG9zaXRpb246MCAwfS5wLTJ7YmFja2dyb3VuZC1wb3NpdGlvbjotMTEycHggMH0ucC0ze2JhY2tncm91bmQtcG9zaXRpb246LTIyNXB4IDB9LnAtNHtiYWNrZ3JvdW5kLXBvc2l0aW9uOi0zMzhweCAwfS5wLTV7YmFja2dyb3VuZC1wb3NpdGlvbjotNDUwcHggMH0ucC02e2JhY2tncm91bmQtcG9zaXRpb246MCAtMTQ3cHh9LnAtN3tiYWNrZ3JvdW5kLXBvc2l0aW9uOi0xMTJweCAtMTQ3cHh9LnAtOHtiYWNrZ3JvdW5kLXBvc2l0aW9uOi0yMjVweCAtMTQ3cHh9LnAtOXtiYWNrZ3JvdW5kLXBvc2l0aW9uOi0zMzhweCAtMTQ3cHh9LnAtMTB7YmFja2dyb3VuZC1wb3NpdGlvbjotNDUwcHggLTE0N3B4fS5wLTExe2JhY2tncm91bmQtcG9zaXRpb246MCAtMjk1cHh9LnAtMTJ7YmFja2dyb3VuZC1wb3NpdGlvbjotMTEycHggLTI5NXB4fS5wLTEze2JhY2tncm91bmQtcG9zaXRpb246LTIyNXB4IC0yOTVweH0uYmFja3tiYWNrZ3JvdW5kLXBvc2l0aW9uOi00NTBweCAtMjk1cHh9QGtleWZyYW1lcyBibGlua3tmcm9te29wYWNpdHk6MX10b3tvcGFjaXR5OjAuMDV9fS51aS5kaW1tZXIubW9kYWxzIC51aS5zbWFsbC5tb2RhbHt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsIC01MCUpfS51aS5kaW1tZXIubW9kYWxzLmhlbHAtYXBwZWFyIC51aS5zbWFsbC5tb2RhbHt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGUoMCwgLTUwJSl9LnVpLmRpbW1lci5tb2RhbHMuaGVscC1hcHBlYXItYWN0aXZlIC51aS5zbWFsbC5tb2RhbHt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKDAsIC01MCUpO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuM3MgY3ViaWMtYmV6aWVyKDAuNjgsIDAsIDAuMjcsIDEuNTUpIDBzfQo=\"); module.exports.css = \"*{box-sizing:border-box}.container{width:100%;max-width:800px;position:absolute;left:50%;top:50%;transform:translate(-50%, -50%);border:1px solid #f1f1f1;padding:5px 0;display:flex;flex-wrap:wrap}.container .title{flex:100%;position:absolute;top:-60px;left:0;width:100%}.container .left{display:flex;flex:20%;min-height:300px;padding:5px;border-right:1px dotted #eee}.container .left .ui.menu{display:flex;width:100%;flex-direction:column;justify-content:space-around;border:0 none;box-shadow:none}.container .left .ui.menu .item{padding-left:5px;padding-right:5px}.container .left .ui.menu .item:before{display:none}.container .left .ui.menu .item.blink{animation:blink .8s Infinite}.container .right{display:flex;flex:80%;flex-direction:column;min-height:300px;padding:5px}.container .right .top{display:flex}.container .right .top .ui.tiny.statistic{margin:6px 0 0}.container .right .middle{display:flex;flex:60%;justify-content:space-around;align-items:center;margin:10px 0;border-top:1px dotted #eee;border-bottom:1px dotted #eee}.container .right .middle .card{cursor:pointer;width:100px;height:139px;margin:5px;border-radius:9px;position:relative}.container .right .middle .card.hold{box-shadow:-4px -4px 10px #f11 inset}.container .right .middle .card.hold:after{content:\\\"hold\\\";width:100px;height:139px;z-index:1;background:rgba(200,50,50,0.3);color:#f11;position:absolute;left:0;top:0;line-height:139px;text-align:center;font-size:36px;border-radius:9px}.container .right .bottom{display:flex}.container .right .ui.form{width:100%}.container .right .ui.form .right-area{text-align:right}.container .right .ui.form .random-area{line-height:40px}.container .right .ui.form .random-area .random-number{margin-right:20px;display:inline-block;width:50px;text-align:center}.container .right .ui.form .random-area .random-result{color:#21BA45}.container .right .ui.form .random-area .random-result.lose{color:#CC181E}.p-1{background-position:0 0}.p-2{background-position:-112px 0}.p-3{background-position:-225px 0}.p-4{background-position:-338px 0}.p-5{background-position:-450px 0}.p-6{background-position:0 -147px}.p-7{background-position:-112px -147px}.p-8{background-position:-225px -147px}.p-9{background-position:-338px -147px}.p-10{background-position:-450px -147px}.p-11{background-position:0 -295px}.p-12{background-position:-112px -295px}.p-13{background-position:-225px -295px}.back{background-position:-450px -295px}@keyframes blink{from{opacity:1}to{opacity:0.05}}.ui.dimmer.modals .ui.small.modal{transform:translate(0, -50%)}.ui.dimmer.modals.help-appear .ui.small.modal{transform:scale(0.1) translate(0, -50%)}.ui.dimmer.modals.help-appear-active .ui.small.modal{transform:scale(1) translate(0, -50%);transition:transform 0.3s cubic-bezier(0.68, 0, 0.27, 1.55) 0s}\\n\";\n},{\"scssify\":167}]},{},[1])\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbGlueWUvd29ya3NwYWNlL3Bva2VyL21haW4uanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvQ1NTQ29yZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9FdmVudExpc3RlbmVyLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2NhbWVsaXplLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2NhbWVsaXplU3R5bGVOYW1lLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9mb2N1c05vZGUuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRNYXJrdXBXcmFwLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2h5cGhlbmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2tleU1pcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9rZXlPZi5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9tYXBPYmplY3QuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvbWVtb2l6ZVN0cmluZ09ubHkuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvcGVyZm9ybWFuY2UuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvcGVyZm9ybWFuY2VOb3cuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL3RvQXJyYXkuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYWRkb25zLWNzcy10cmFuc2l0aW9uLWdyb3VwL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvQXV0b0ZvY3VzVXRpbHMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0NTU1Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0NhbGxiYWNrUXVldWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0NoYW5nZUV2ZW50UGx1Z2luLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DbGllbnRSZWFjdFJvb3RJbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHlPcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9EYW5nZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FbnRlckxlYXZlRXZlbnRQbHVnaW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50Q29uc3RhbnRzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpbkh1Yi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5SZWdpc3RyeS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9IVE1MRE9NUHJvcGVydHlDb25maWcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0xpbmtlZFZhbHVlVXRpbHMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXAuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET00uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NQnV0dG9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01GYWN0b3JpZXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NRmVhdHVyZUZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUlET3BlcmF0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01JbnB1dC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01PcHRpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NU2VsZWN0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVNlbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01TZXJ2ZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NVGV4dENvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01UZXh0YXJlYS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0SW5qZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERlZmF1bHRQZXJmLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50VmFsaWRhdG9yLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXJyb3JVdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFdmVudEVtaXR0ZXJNaXhpbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFdmVudExpc3RlbmVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEluamVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnB1dFNlbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnN0YW5jZUhhbmRsZXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VNYXAuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SXNvbW9ycGhpYy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNYXJrdXBDaGVja3N1bS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNb3VudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNdWx0aUNoaWxkLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROYXRpdmVDb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE93bmVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFBlcmYuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJlZi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSb290SW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RUcmFuc2l0aW9uRXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFRyYW5zaXRpb25Hcm91cC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVRdWV1ZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFZlcnNpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1NWR0RPTVByb3BlcnR5Q29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TZWxlY3RFdmVudFBsdWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2VydmVyUmVhY3RSb290SW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1NpbXBsZUV2ZW50UGx1Z2luLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRHJhZ0V2ZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRm9jdXNFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljSW5wdXRFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljS2V5Ym9hcmRFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljTW91c2VFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljVG91Y2hFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljVUlFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljV2hlZWxFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvVHJhbnNhY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1ZpZXdwb3J0TWV0cmljcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvYWNjdW11bGF0ZUludG8uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2FkbGVyMzIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2NhbkRlZmluZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9kZXByZWNhdGVkLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZpbmRET01Ob2RlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9mbGF0dGVuQ2hpbGRyZW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZvckVhY2hBY2N1bXVsYXRlZC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRDaGFyQ29kZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRLZXkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50TW9kaWZpZXJTdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRUYXJnZXQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEl0ZXJhdG9yRm4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldFRleHRDb250ZW50QWNjZXNzb3IuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzVGV4dElucHV0RWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvb25seUNoaWxkLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvcmVuZGVyU3VidHJlZUludG9Db250YWluZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL3NldElubmVySFRNTC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2V0VGV4dENvbnRlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi90cmF2ZXJzZUFsbENoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi92YWxpZGF0ZURPTU5lc3RpbmcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanMiLCJub2RlX21vZHVsZXMvc2Nzc2lmeS9saWIvYnJvd3Nlci5qcyIsIi9Vc2Vycy9saW55ZS93b3Jrc3BhY2UvcG9rZXIvc3JjL2luZGV4LmpzIiwic3JjL2luZGV4LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3pDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzs7QUFFekMsTUFBTSxDQUFDLG9CQUFDLFdBQVcsT0FBRyxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzs7O0FDSjlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDck9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcndCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3A4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25MQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbk5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3AxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDblFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN2tCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3V0E7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7cUJDakVrQixPQUFPOzs7OzZDQUNXLG1DQUFtQzs7OztRQUVoRSxjQUFjOzs7Ozs7O0FBT3JCLFNBQVMsUUFBUSxDQUFDLEdBQUcsRUFBQztBQUNsQixXQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLEVBQUMsS0FBSyxDQUFDLENBQUM7Q0FDekU7QUFDRCxJQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMxQixJQUFNLFFBQVEsR0FBRyxDQUNiLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFDakYsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUNqRixLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQ2pGLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE1BQU0sQ0FDcEYsQ0FBQztBQUNGLElBQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDO0FBQ2pDLElBQU0sS0FBSyxHQUFHLG1CQUFNLFdBQVcsQ0FBQzs7O0FBQzVCLG1CQUFlLEVBQUEsMkJBQUc7QUFDZCxZQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLFlBQUksSUFBSSxZQUFBLENBQUM7QUFDVCxZQUFHLEdBQUcsRUFBQztBQUNILGdCQUFHO0FBQ0Msb0JBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzFCLENBQUEsT0FBTSxDQUFDLEVBQUM7QUFDTCxvQkFBSSxHQUFHO0FBQ0gseUJBQUssRUFBRyxJQUFJO0FBQ1osdUJBQUcsRUFBRyxFQUFFO2lCQUNYLENBQUE7YUFDSjtTQUNKLE1BQUk7QUFDRCxnQkFBSSxHQUFHO0FBQ0gscUJBQUssRUFBRyxJQUFJO0FBQ1osbUJBQUcsRUFBRyxFQUFFO2FBQ1gsQ0FBQTtTQUNKO0FBQ0QsZUFBTTtBQUNGLGlCQUFLLEVBQUcsSUFBSSxDQUFDLEtBQUs7QUFDbEIsZUFBRyxFQUFHLElBQUksQ0FBQyxHQUFHO0FBQ2QsZUFBRyxFQUFHLENBQUM7QUFDUCxtQkFBTyxFQUFHLEtBQUs7QUFDZixpQkFBSyxFQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUM1QixpQkFBSyxFQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztBQUMzQyxnQkFBSSxFQUFHLENBQUM7QUFDUixrQkFBTSxFQUFHLEtBQUs7QUFDZCxpQkFBSyxFQUFHLENBQUM7QUFDVCxnQkFBSSxFQUFHLElBQUk7QUFDWCxrQkFBTSxFQUFHLENBQUM7QUFDVix3QkFBWSxFQUFHLEVBQUU7QUFDakIsbUJBQU8sRUFBRyxLQUFLO0FBQ2YsZ0JBQUksRUFBRyxDQUFDLEdBQUc7QUFDWCxxQkFBUyxFQUFHLEVBQUU7QUFDZCxrQkFBTSxFQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUc7U0FDakMsQ0FBQTtLQUNKO0FBQ0Qsc0JBQWtCLEVBQUEsOEJBQUc7QUFDakIsWUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQ3hCO0FBQ0QsaUJBQWEsRUFBQSx5QkFBRztBQUNaLFlBQUksTUFBTSxHQUFHLENBQUMsa0JBQWtCLEVBQUUsbUJBQW1CLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUNqRyxjQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRyxFQUFLO0FBQ3BCLGdCQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ3RCLGVBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1NBQ2pCLENBQUMsQ0FBQztLQUNOO0FBQ0QsbUJBQWUsRUFBQSx5QkFBQyxDQUFDLEVBQUU7QUFDZixZQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUMvQixZQUFJLENBQUMsUUFBUSxDQUFDO0FBQ1YscUJBQVMsRUFBVCxTQUFTO1NBQ1osQ0FBQyxDQUFDO0tBQ047QUFDRCxhQUFTLEVBQUEscUJBQUc7QUFDUixZQUFJLENBQUMsUUFBUSxDQUFDO0FBQ1YscUJBQVMsRUFBRyxFQUFFO0FBQ2Qsa0JBQU0sRUFBRyxLQUFLO0FBQ2QsaUJBQUssRUFBRyxJQUFJO0FBQ1osZUFBRyxFQUFHLEVBQUU7U0FDWCxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUN4QjtBQUNELGVBQVcsRUFBQSx1QkFBRztBQUNWLFlBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUM7QUFDakMsZ0JBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixzQkFBTSxFQUFHLElBQUk7YUFDaEIsQ0FBQyxDQUFDO1NBQ047S0FDSjtBQUNELFlBQVEsRUFBQSxvQkFBRztBQUNQLFlBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixnQkFBSSxFQUFHLElBQUk7U0FDZCxDQUFDLENBQUM7S0FDTjtBQUNELFlBQVEsRUFBQSxvQkFBRztBQUNQLFlBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixnQkFBSSxFQUFHLEtBQUs7U0FDZixDQUFDLENBQUM7S0FDTjtBQUNELGVBQVcsRUFBQSx1QkFBRztBQUNWLFlBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDckIsaUJBQUssRUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUs7QUFDeEIsZUFBRyxFQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRztTQUN2QixDQUFDLENBQUM7QUFDSCxvQkFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDcEM7QUFDRCxZQUFRLEVBQUEsb0JBQUc7OztBQUNQLFlBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixpQkFBSyxFQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRztBQUN6QyxlQUFHLEVBQUcsQ0FBQztTQUNWLEVBQUU7bUJBQU0sTUFBSyxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQUEsQ0FBQyxDQUFDO0tBQ2xDO0FBQ0QsY0FBVSxFQUFBLHNCQUFHO0FBQ1QsWUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNWLG1CQUFPLEVBQUcsS0FBSztBQUNmLGlCQUFLLEVBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQzVCLGlCQUFLLEVBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0FBQzNDLGdCQUFJLEVBQUcsQ0FBQztBQUNSLGtCQUFNLEVBQUcsS0FBSztBQUNkLGlCQUFLLEVBQUcsQ0FBQztBQUNULGdCQUFJLEVBQUcsSUFBSTtBQUNYLGtCQUFNLEVBQUcsQ0FBQztBQUNWLHdCQUFZLEVBQUcsRUFBRTtBQUNqQixtQkFBTyxFQUFHLEtBQUs7U0FDbEIsRUFBRSxZQUFVO0FBQ1QsZ0JBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNuQixnQkFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JCLENBQUMsQ0FBQztLQUNOO0FBQ0QsY0FBVSxFQUFBLHNCQUFHO0FBQ1QscUJBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDN0I7QUFDRCxlQUFXLEVBQUEsdUJBQUc7QUFDVixZQUFJLENBQUMsUUFBUSxDQUFDO0FBQ1Ysa0JBQU0sRUFBRyxDQUFDO0FBQ1Ysd0JBQVksRUFBRyxFQUFFO1NBQ3BCLENBQUMsQ0FBQztLQUNOO0FBQ0QsZUFBVyxFQUFBLHVCQUFHO0FBQ1YsWUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsQ0FBQSxZQUFVO0FBQy9CLGdCQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxQyxnQkFBSSxDQUFDLFFBQVEsQ0FBQztBQUNWLHNCQUFNLEVBQU4sTUFBTTthQUNULENBQUMsQ0FBQztTQUNOLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDdEI7QUFDRCxrQkFBYyxFQUFBLDBCQUFHO0FBQ2IsWUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUM7QUFDdEIsZ0JBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNwQixNQUFJO0FBQ0QsZ0JBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjtLQUNKO0FBQ0Qsb0JBQWdCLEVBQUEsNEJBQUc7QUFDZixZQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBQztBQUN0QixnQkFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ3BCLE1BQUk7QUFDRCxnQkFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JCO0tBQ0o7QUFDRCxhQUFTLEVBQUEscUJBQUc7QUFDUixZQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDbEIsWUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNWLHdCQUFZLEVBQUcsS0FBSztBQUNwQixlQUFHLEVBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUN4QixtQkFBTyxFQUFHLElBQUk7U0FDakIsRUFBRSxZQUFVO0FBQ1Qsc0JBQVUsQ0FBQyxDQUFBLFlBQVU7QUFDakIsb0JBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNuQixvQkFBSSxDQUFDLFFBQVEsQ0FBQztBQUNWLGdDQUFZLEVBQUcsRUFBRTtBQUNqQiwyQkFBTyxFQUFHLEtBQUs7aUJBQ2xCLENBQUMsQ0FBQzthQUNOLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDdkIsQ0FBQyxDQUFDO0tBQ047QUFDRCxjQUFVLEVBQUEsc0JBQUc7QUFDVCxZQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDbEIsWUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNWLHdCQUFZLEVBQUcsTUFBTTtBQUNyQixtQkFBTyxFQUFHLElBQUk7U0FDakIsRUFBRSxZQUFVO0FBQ1Qsc0JBQVUsQ0FBQyxDQUFBLFlBQVU7QUFDakIsb0JBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNuQixvQkFBSSxDQUFDLFFBQVEsQ0FBQztBQUNWLHVCQUFHLEVBQUcsQ0FBQztBQUNQLDJCQUFPLEVBQUcsS0FBSztpQkFDbEIsRUFBRSxZQUFVO0FBQ1Qsd0JBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNuQix3QkFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDeEIsQ0FBQyxDQUFDO2FBQ04sQ0FBQSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN2QixDQUFDLENBQUM7S0FDTjtBQUNELFlBQVEsRUFBQSxvQkFBRztBQUNQLFlBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixlQUFHLEVBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7U0FDekIsQ0FBQyxDQUFDO0tBQ047QUFDRCxXQUFPLEVBQUEsbUJBQUc7QUFDTixZQUFJLENBQUMsUUFBUSxDQUFDO0FBQ1YsZUFBRyxFQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHO1NBQ3pCLENBQUMsQ0FBQztLQUNOO0FBQ0QsWUFBUSxFQUFBLG9CQUFHO0FBQ1AsWUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUM7QUFDckIsZ0JBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjtBQUNELFlBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixnQkFBSSxFQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO0FBQ3hCLG1CQUFPLEVBQUcsSUFBSTtBQUNkLGtCQUFNLEVBQUcsSUFBSTtTQUNoQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN0QjtBQUNELGNBQVUsRUFBQSxzQkFBRztBQUNULFlBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixpQkFBSyxFQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRztTQUM1QyxDQUFDLENBQUM7S0FDTjtBQUNELGNBQVUsRUFBQSxvQkFBQyxLQUFLLEVBQUU7QUFDZCxZQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPO0FBQ3ZELFlBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixpQkFBSywrQkFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHNCQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUM7U0FDaEgsQ0FBQyxDQUFDO0tBQ047QUFDRCxhQUFTLEVBQUEscUJBQUc7QUFDUixZQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0QsZ0JBQVksRUFBQSxzQkFBQyxLQUFLLEVBQUU7QUFDaEIsWUFBRyxLQUFLLElBQUksQ0FBQyxFQUFDO0FBQ1YsZ0JBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNsQixtQkFBTztTQUNWO0FBQ0Qsa0JBQVUsQ0FBQyxDQUFBLFlBQVU7eUJBQ0ksSUFBSSxDQUFDLEtBQUs7Z0JBQTFCLEtBQUssVUFBTCxLQUFLO2dCQUFFLEtBQUssVUFBTCxLQUFLOztBQUNqQixnQkFBSSxDQUFDLFFBQVEsQ0FBQztBQUNWLHFCQUFLLCtCQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFFLEVBQUUsc0JBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUM7QUFDakUscUJBQUssK0JBQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUUsS0FBSyxzQkFBSyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBQzthQUN2RSxDQUFDLENBQUM7QUFDSCxnQkFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzlCLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDdEI7QUFDRCxlQUFXLEVBQUEscUJBQUMsS0FBSyxFQUFFO0FBQ2YsWUFBRyxLQUFLLElBQUksQ0FBQyxFQUFDO0FBQ1YsZ0JBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixvQkFBSSxFQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO0FBQ3hCLHVCQUFPLEVBQUcsS0FBSzthQUNsQixFQUFFLFlBQVU7QUFDVCxvQkFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUM7QUFDckIsd0JBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUM5Qix3QkFBRyxLQUFLLEtBQUssQ0FBQyxFQUFDO0FBQ1gsa0NBQVUsQ0FBQyxDQUFBLFlBQVU7QUFDakIsZ0NBQUksQ0FBQyxRQUFRLENBQUM7QUFDVixvQ0FBSSxFQUFHLGFBQWE7NkJBQ3ZCLEVBQUUsWUFBVTtBQUNULDBDQUFVLENBQUMsQ0FBQSxZQUFVO0FBQ2pCLHdDQUFJLENBQUMsUUFBUSxDQUFDO0FBQ1YsNENBQUksRUFBRyxJQUFJO3FDQUNkLEVBQUUsWUFBVTtBQUNULDRDQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDbkIsNENBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7cUNBQ3hCLENBQUMsQ0FBQztpQ0FDTixDQUFBLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDOzZCQUN2QixDQUFDLENBQUM7eUJBQ04sQ0FBQSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztxQkFDdkIsTUFBSTtBQUNELDRCQUFJLENBQUMsUUFBUSxDQUFDO0FBQ1YsZ0NBQUksRUFBRyxZQUFZO0FBQ25CLCtCQUFHLEVBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSztBQUM1QixpQ0FBSyxFQUFHLEtBQUs7eUJBQ2hCLEVBQUUsWUFBVTtBQUNULGdDQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDbkIsc0NBQVUsQ0FBQyxDQUFBLFlBQVU7QUFDakIsb0NBQUksQ0FBQyxRQUFRLENBQUM7QUFDVix3Q0FBSSxFQUFHLElBQUk7aUNBQ2QsQ0FBQyxDQUFDOzZCQUNOLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7eUJBQ3ZCLENBQUMsQ0FBQztxQkFDTjtpQkFDSjthQUNKLENBQUMsQ0FBQztBQUNILG1CQUFNO1NBQ1Q7QUFDRCxZQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDO0FBQ3ZCLGdCQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUIsbUJBQU07U0FDVDtBQUNELGtCQUFVLENBQUMsQ0FBQSxZQUFVO0FBQ2pCLGdCQUFJLElBQUksR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUNwQyxnQkFBSSxDQUFDLFFBQVEsQ0FBQztBQUNWLHFCQUFLLCtCQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUUsSUFBSSxzQkFBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFDO2FBQzVGLENBQUMsQ0FBQztBQUNILGdCQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDN0IsQ0FBQSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN0QjtBQUNELHFCQUFpQixFQUFBLDZCQUFHO0FBQ2hCLFlBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25ELGVBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQztBQUMvQyxlQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbEQ7QUFDRCxlQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN4QjtBQUNELGNBQVUsRUFBQSxzQkFBRztBQUNULFlBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNaLFlBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNaLFlBQUksSUFBSSxZQUFBO1lBQUUsSUFBSSxZQUFBLENBQUM7QUFDZixTQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsVUFBUyxDQUFDLEVBQUM7QUFDakIsZ0JBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixnQkFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsY0FBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixjQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlCLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNkLFVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUUsQ0FBQyxFQUFDO0FBQ2xCLG1CQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEIsQ0FBQyxDQUFDO0FBQ0gsWUFBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQ3BFLGdCQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDO0FBQ2xDLG1CQUFPLENBQUMsQ0FBQztTQUNaO0FBQ0QsWUFBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQ3BFLGdCQUFHLEFBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxBQUFDLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDbEUsbUJBQU8sQ0FBQyxDQUFDO1NBQ1o7QUFDRCxZQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUMvQyxZQUFHLEFBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQUFBQyxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ3ZGLFlBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEUsWUFBRyxBQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsSUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEFBQUMsRUFBRSxPQUFPLENB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QUFDLHFCQUFxQixHQUFLOzt5QkFBdUI7d0JBQ2xHOzs4QkFBSyxTQUFTLEVBQUMsU0FBUzs0QkFDcEI7Ozs7NkJBQXlDOzRCQUN6Qzs7a0NBQUssU0FBUyxFQUFDLFNBQVM7Z0NBQ3BCOztzQ0FBSyxTQUFTLEVBQUMsT0FBTztvQ0FDbEIsNENBQU8sSUFBSSxFQUFDLE1BQU0sRUFBQyxXQUFXLEVBQUMsRUFBRSxFQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxJQUFJLEVBQUUsQUFBQyxFQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsZUFBZSxBQUFDLEdBQUc7aUNBQ2hHOzZCQUNKO3lCQUNKO3dCQUNOOzs4QkFBSyxTQUFTLEVBQUMsU0FBUzs0QkFDcEI7OztBQUNJLDZDQUFTLEVBQUMsNkJBQTZCO0FBQ3ZDLDJDQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQUFBQztBQUN4Qiw0Q0FBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLEtBQUssTUFBTSxBQUFDO2dDQUFDLHdDQUFHLFNBQVMsRUFBQyxnQkFBZ0IsR0FBSzs7NkJBQXNCO3lCQUNoRztxQkFDSjtpQkFDSjthQUNnQixHQUN6QixJQUFJO1NBRVAsQ0FDVDtLQUNKO0NBQ0osQ0FBQyxDQUFDOztxQkFFWSxLQUFLOzs7O0FDemdCcEIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciByZW5kZXIgPSByZXF1aXJlKCdyZWFjdC1kb20nKS5yZW5kZXI7XG52YXIgUmVhY3RNb2R1bGUgPSByZXF1aXJlKCcuL3NyYy9pbmRleCcpO1xuXG5yZW5kZXIoPFJlYWN0TW9kdWxlIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJykpO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDU1NDb3JlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogVGhlIENTU0NvcmUgbW9kdWxlIHNwZWNpZmllcyB0aGUgQVBJIChhbmQgaW1wbGVtZW50cyBtb3N0IG9mIHRoZSBtZXRob2RzKVxuICogdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIGRlYWxpbmcgd2l0aCB0aGUgZGlzcGxheSBvZiBlbGVtZW50cyAodmlhIHRoZWlyXG4gKiBDU1MgY2xhc3NlcyBhbmQgdmlzaWJpbGl0eSBvbiBzY3JlZW4uIEl0IGlzIGFuIEFQSSBmb2N1c2VkIG9uIG11dGF0aW5nIHRoZVxuICogZGlzcGxheSBhbmQgbm90IHJlYWRpbmcgaXQgYXMgbm8gbG9naWNhbCBzdGF0ZSBzaG91bGQgYmUgZW5jb2RlZCBpbiB0aGVcbiAqIGRpc3BsYXkgb2YgZWxlbWVudHMuXG4gKi9cblxudmFyIENTU0NvcmUgPSB7XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGNsYXNzIHBhc3NlZCBpbiB0byB0aGUgZWxlbWVudCBpZiBpdCBkb2Vzbid0IGFscmVhZHkgaGF2ZSBpdC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIHNldCB0aGUgY2xhc3Mgb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzTmFtZVxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSB0aGUgZWxlbWVudCBwYXNzZWQgaW5cbiAgICovXG4gIGFkZENsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgISEvXFxzLy50ZXN0KGNsYXNzTmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ1NTQ29yZS5hZGRDbGFzcyB0YWtlcyBvbmx5IGEgc2luZ2xlIGNsYXNzIG5hbWUuIFwiJXNcIiBjb250YWlucyAnICsgJ211bHRpcGxlIGNsYXNzZXMuJywgY2xhc3NOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKCFDU1NDb3JlLmhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGNsYXNzIHBhc3NlZCBpbiBmcm9tIHRoZSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB0byBzZXQgdGhlIGNsYXNzIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzc05hbWVcbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gdGhlIGVsZW1lbnQgcGFzc2VkIGluXG4gICAqL1xuICByZW1vdmVDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICEhL1xccy8udGVzdChjbGFzc05hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0NTU0NvcmUucmVtb3ZlQ2xhc3MgdGFrZXMgb25seSBhIHNpbmdsZSBjbGFzcyBuYW1lLiBcIiVzXCIgY29udGFpbnMgJyArICdtdWx0aXBsZSBjbGFzc2VzLicsIGNsYXNzTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChDU1NDb3JlLmhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc05hbWUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykgLy8gbXVsdGlwbGUgc3BhY2VzIHRvIG9uZVxuICAgICAgICAucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpOyAvLyB0cmltIHRoZSBlbmRzXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gYWRkIG9yIHJlbW92ZSBhIGNsYXNzIGZyb20gYW4gZWxlbWVudCBiYXNlZCBvbiBhIGNvbmRpdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIHNldCB0aGUgY2xhc3Mgb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzTmFtZVxuICAgKiBAcGFyYW0geyp9IGJvb2wgY29uZGl0aW9uIHRvIHdoZXRoZXIgdG8gYWRkIG9yIHJlbW92ZSB0aGUgY2xhc3NcbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gdGhlIGVsZW1lbnQgcGFzc2VkIGluXG4gICAqL1xuICBjb25kaXRpb25DbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSwgYm9vbCkge1xuICAgIHJldHVybiAoYm9vbCA/IENTU0NvcmUuYWRkQ2xhc3MgOiBDU1NDb3JlLnJlbW92ZUNsYXNzKShlbGVtZW50LCBjbGFzc05hbWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUZXN0cyB3aGV0aGVyIHRoZSBlbGVtZW50IGhhcyB0aGUgY2xhc3Mgc3BlY2lmaWVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTU5vZGV8RE9NV2luZG93fSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIHNldCB0aGUgY2xhc3Mgb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzTmFtZVxuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBlbGVtZW50IGhhcyB0aGUgY2xhc3MsIGZhbHNlIGlmIG5vdFxuICAgKi9cbiAgaGFzQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAhIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDU1MuaGFzQ2xhc3MgdGFrZXMgb25seSBhIHNpbmdsZSBjbGFzcyBuYW1lLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gKCcgJyArIGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnKS5pbmRleE9mKCcgJyArIGNsYXNzTmFtZSArICcgJykgPiAtMTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU0NvcmU7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTltWW1wekwyeHBZaTlEVTFORGIzSmxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRU5UVTBOdmNtVmNiaUFxSUVCMGVYQmxZMmhsWTJ0elhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2duTGk5cGJuWmhjbWxoYm5RbktUdGNibHh1THlvcVhHNGdLaUJVYUdVZ1ExTlRRMjl5WlNCdGIyUjFiR1VnYzNCbFkybG1hV1Z6SUhSb1pTQkJVRWtnS0dGdVpDQnBiWEJzWlcxbGJuUnpJRzF2YzNRZ2IyWWdkR2hsSUcxbGRHaHZaSE1wWEc0Z0tpQjBhR0YwSUhOb2IzVnNaQ0JpWlNCMWMyVmtJSGRvWlc0Z1pHVmhiR2x1WnlCM2FYUm9JSFJvWlNCa2FYTndiR0Y1SUc5bUlHVnNaVzFsYm5SeklDaDJhV0VnZEdobGFYSmNiaUFxSUVOVFV5QmpiR0Z6YzJWeklHRnVaQ0IyYVhOcFltbHNhWFI1SUc5dUlITmpjbVZsYmk0Z1NYUWdhWE1nWVc0Z1FWQkpJR1p2WTNWelpXUWdiMjRnYlhWMFlYUnBibWNnZEdobFhHNGdLaUJrYVhOd2JHRjVJR0Z1WkNCdWIzUWdjbVZoWkdsdVp5QnBkQ0JoY3lCdWJ5QnNiMmRwWTJGc0lITjBZWFJsSUhOb2IzVnNaQ0JpWlNCbGJtTnZaR1ZrSUdsdUlIUm9aVnh1SUNvZ1pHbHpjR3hoZVNCdlppQmxiR1Z0Wlc1MGN5NWNiaUFxTDF4dVhHNTJZWElnUTFOVFEyOXlaU0E5SUh0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVdSa2N5QjBhR1VnWTJ4aGMzTWdjR0Z6YzJWa0lHbHVJSFJ2SUhSb1pTQmxiR1Z0Wlc1MElHbG1JR2wwSUdSdlpYTnVKM1FnWVd4eVpXRmtlU0JvWVhabElHbDBMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBSUFRVVnNaVzFsYm5SOUlHVnNaVzFsYm5RZ2RHaGxJR1ZzWlcxbGJuUWdkRzhnYzJWMElIUm9aU0JqYkdGemN5QnZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1kyeGhjM05PWVcxbElIUm9aU0JEVTFNZ1kyeGhjM05PWVcxbFhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBSUFRVVnNaVzFsYm5SOUlIUm9aU0JsYkdWdFpXNTBJSEJoYzNObFpDQnBibHh1SUNBZ0tpOWNiaUFnWVdSa1EyeGhjM002SUdaMWJtTjBhVzl1SUNobGJHVnRaVzUwTENCamJHRnpjMDVoYldVcElIdGNiaUFnSUNBaElTOWNYSE12TG5SbGMzUW9ZMnhoYzNOT1lXMWxLU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZERVMU5EYjNKbExtRmtaRU5zWVhOeklIUmhhMlZ6SUc5dWJIa2dZU0J6YVc1bmJHVWdZMnhoYzNNZ2JtRnRaUzRnWENJbGMxd2lJR052Ym5SaGFXNXpJQ2NnS3lBbmJYVnNkR2x3YkdVZ1kyeGhjM05sY3k0bkxDQmpiR0Z6YzA1aGJXVXBJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUdsbUlDaGpiR0Z6YzA1aGJXVXBJSHRjYmlBZ0lDQWdJR2xtSUNobGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZENrZ2UxeHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWhaR1FvWTJ4aGMzTk9ZVzFsS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lVTlRVME52Y21VdWFHRnpRMnhoYzNNb1pXeGxiV1Z1ZEN3Z1kyeGhjM05PWVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbU5zWVhOelRtRnRaU0E5SUdWc1pXMWxiblF1WTJ4aGMzTk9ZVzFsSUNzZ0p5QW5JQ3NnWTJ4aGMzTk9ZVzFsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1pXeGxiV1Z1ZER0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ0YjNabGN5QjBhR1VnWTJ4aGMzTWdjR0Z6YzJWa0lHbHVJR1p5YjIwZ2RHaGxJR1ZzWlcxbGJuUmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRFVDAxRmJHVnRaVzUwZlNCbGJHVnRaVzUwSUhSb1pTQmxiR1Z0Wlc1MElIUnZJSE5sZENCMGFHVWdZMnhoYzNNZ2IyNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdOc1lYTnpUbUZ0WlNCMGFHVWdRMU5USUdOc1lYTnpUbUZ0WlZ4dUlDQWdLaUJBY21WMGRYSnVJSHRFVDAxRmJHVnRaVzUwZlNCMGFHVWdaV3hsYldWdWRDQndZWE56WldRZ2FXNWNiaUFnSUNvdlhHNGdJSEpsYlc5MlpVTnNZWE56T2lCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZEN3Z1kyeGhjM05PWVcxbEtTQjdYRzRnSUNBZ0lTRXZYRnh6THk1MFpYTjBLR05zWVhOelRtRnRaU2tnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5RMU5UUTI5eVpTNXlaVzF2ZG1WRGJHRnpjeUIwWVd0bGN5QnZibXg1SUdFZ2MybHVaMnhsSUdOc1lYTnpJRzVoYldVdUlGd2lKWE5jSWlCamIyNTBZV2x1Y3lBbklDc2dKMjExYkhScGNHeGxJR05zWVhOelpYTXVKeXdnWTJ4aGMzTk9ZVzFsS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQnBaaUFvWTJ4aGMzTk9ZVzFsS1NCN1hHNGdJQ0FnSUNCcFppQW9aV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXBJSHRjYmlBZ0lDQWdJQ0FnWld4bGJXVnVkQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLR05zWVhOelRtRnRaU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0VOVFUwTnZjbVV1YUdGelEyeGhjM01vWld4bGJXVnVkQ3dnWTJ4aGMzTk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExtTnNZWE56VG1GdFpTQTlJR1ZzWlcxbGJuUXVZMnhoYzNOT1lXMWxMbkpsY0d4aFkyVW9ibVYzSUZKbFowVjRjQ2duS0Y1OFhGeGNYSE1wSnlBcklHTnNZWE56VG1GdFpTQXJJQ2NvUHpwY1hGeGNjM3drS1Njc0lDZG5KeWtzSUNja01TY3BMbkpsY0d4aFkyVW9MMXhjY3lzdlp5d2dKeUFuS1NBdkx5QnRkV3gwYVhCc1pTQnpjR0ZqWlhNZ2RHOGdiMjVsWEc0Z0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M5ZVhGeHpLbnhjWEhNcUpDOW5MQ0FuSnlrN0lDOHZJSFJ5YVcwZ2RHaGxJR1Z1WkhOY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHVnNaVzFsYm5RN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWhsYkhCbGNpQjBieUJoWkdRZ2IzSWdjbVZ0YjNabElHRWdZMnhoYzNNZ1puSnZiU0JoYmlCbGJHVnRaVzUwSUdKaGMyVmtJRzl1SUdFZ1kyOXVaR2wwYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFJQVFVWc1pXMWxiblI5SUdWc1pXMWxiblFnZEdobElHVnNaVzFsYm5RZ2RHOGdjMlYwSUhSb1pTQmpiR0Z6Y3lCdmJseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWTJ4aGMzTk9ZVzFsSUhSb1pTQkRVMU1nWTJ4aGMzTk9ZVzFsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdLbjBnWW05dmJDQmpiMjVrYVhScGIyNGdkRzhnZDJobGRHaGxjaUIwYnlCaFpHUWdiM0lnY21WdGIzWmxJSFJvWlNCamJHRnpjMXh1SUNBZ0tpQkFjbVYwZFhKdUlIdEVUMDFGYkdWdFpXNTBmU0IwYUdVZ1pXeGxiV1Z1ZENCd1lYTnpaV1FnYVc1Y2JpQWdJQ292WEc0Z0lHTnZibVJwZEdsdmJrTnNZWE56T2lCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZEN3Z1kyeGhjM05PWVcxbExDQmliMjlzS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2hpYjI5c0lEOGdRMU5UUTI5eVpTNWhaR1JEYkdGemN5QTZJRU5UVTBOdmNtVXVjbVZ0YjNabFEyeGhjM01wS0dWc1pXMWxiblFzSUdOc1lYTnpUbUZ0WlNrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJsYzNSeklIZG9aWFJvWlhJZ2RHaGxJR1ZzWlcxbGJuUWdhR0Z6SUhSb1pTQmpiR0Z6Y3lCemNHVmphV1pwWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSRTlOVG05a1pYeEVUMDFYYVc1a2IzZDlJR1ZzWlcxbGJuUWdkR2hsSUdWc1pXMWxiblFnZEc4Z2MyVjBJSFJvWlNCamJHRnpjeUJ2Ymx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMnhoYzNOT1lXMWxJSFJvWlNCRFUxTWdZMnhoYzNOT1lXMWxYRzRnSUNBcUlFQnlaWFIxY200Z2UySnZiMnhsWVc1OUlIUnlkV1VnYVdZZ2RHaGxJR1ZzWlcxbGJuUWdhR0Z6SUhSb1pTQmpiR0Z6Y3l3Z1ptRnNjMlVnYVdZZ2JtOTBYRzRnSUNBcUwxeHVJQ0JvWVhORGJHRnpjem9nWm5WdVkzUnBiMjRnS0dWc1pXMWxiblFzSUdOc1lYTnpUbUZ0WlNrZ2UxeHVJQ0FnSUNFaEwxeGNjeTh1ZEdWemRDaGpiR0Z6YzA1aGJXVXBJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0owTlRVeTVvWVhORGJHRnpjeUIwWVd0bGN5QnZibXg1SUdFZ2MybHVaMnhsSUdOc1lYTnpJRzVoYldVdUp5a2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJR2xtSUNobGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZENrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNFaFkyeGhjM05PWVcxbElDWW1JR1ZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLR05zWVhOelRtRnRaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlBb0p5QW5JQ3NnWld4bGJXVnVkQzVqYkdGemMwNWhiV1VnS3lBbklDY3BMbWx1WkdWNFQyWW9KeUFuSUNzZ1kyeGhjM05PWVcxbElDc2dKeUFuS1NBK0lDMHhPMXh1SUNCOVhHNWNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ExTlRRMjl5WlRzaVhYMD0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudExpc3RlbmVyXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBVcHN0cmVhbSB2ZXJzaW9uIG9mIGV2ZW50IGxpc3RlbmVyLiBEb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCBzcGVjaWZpY1xuICogbmF0dXJlIG9mIHBsYXRmb3JtLlxuICovXG52YXIgRXZlbnRMaXN0ZW5lciA9IHtcbiAgLyoqXG4gICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgYnViYmxlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGxpc3RlbjogZnVuY3Rpb24gKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0LmF0dGFjaEV2ZW50KSB7XG4gICAgICB0YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGFyZ2V0LmRldGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBjYXB0dXJlOiBmdW5jdGlvbiAodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICsgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgKyAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbiAoKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5bVltcHpMMnhwWWk5RmRtVnVkRXhwYzNSbGJtVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnUlhabGJuUk1hWE4wWlc1bGNseHVJQ29nUUhSNWNHVmphR1ZqYTNOY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQmxiWEIwZVVaMWJtTjBhVzl1SUQwZ2NtVnhkV2x5WlNnbkxpOWxiWEIwZVVaMWJtTjBhVzl1SnlrN1hHNWNiaThxS2x4dUlDb2dWWEJ6ZEhKbFlXMGdkbVZ5YzJsdmJpQnZaaUJsZG1WdWRDQnNhWE4wWlc1bGNpNGdSRzlsY3lCdWIzUWdkR0ZyWlNCcGJuUnZJR0ZqWTI5MWJuUWdjM0JsWTJsbWFXTmNiaUFxSUc1aGRIVnlaU0J2WmlCd2JHRjBabTl5YlM1Y2JpQXFMMXh1ZG1GeUlFVjJaVzUwVEdsemRHVnVaWElnUFNCN1hHNGdJQzhxS2x4dUlDQWdLaUJNYVhOMFpXNGdkRzhnUkU5TklHVjJaVzUwY3lCa2RYSnBibWNnZEdobElHSjFZbUpzWlNCd2FHRnpaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0RVQwMUZkbVZ1ZEZSaGNtZGxkSDBnZEdGeVoyVjBJRVJQVFNCbGJHVnRaVzUwSUhSdklISmxaMmx6ZEdWeUlHeHBjM1JsYm1WeUlHOXVMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1pYWmxiblJVZVhCbElFVjJaVzUwSUhSNWNHVXNJR1V1Wnk0Z0oyTnNhV05ySnlCdmNpQW5iVzkxYzJWdmRtVnlKeTVjYmlBZ0lDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdZMkZzYkdKaFkyc2dRMkZzYkdKaFkyc2dablZ1WTNScGIyNHVYRzRnSUNBcUlFQnlaWFIxY200Z2UyOWlhbVZqZEgwZ1QySnFaV04wSUhkcGRHZ2dZU0JnY21WdGIzWmxZQ0J0WlhSb2IyUXVYRzRnSUNBcUwxeHVJQ0JzYVhOMFpXNDZJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXNJR1YyWlc1MFZIbHdaU3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0JwWmlBb2RHRnlaMlYwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElwSUh0Y2JpQWdJQ0FnSUhSaGNtZGxkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLR1YyWlc1MFZIbHdaU3dnWTJGc2JHSmhZMnNzSUdaaGJITmxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJSEpsYlc5MlpUb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUmhjbWRsZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtHVjJaVzUwVkhsd1pTd2dZMkZzYkdKaFkyc3NJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJoY21kbGRDNWhkSFJoWTJoRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnZEdGeVoyVjBMbUYwZEdGamFFVjJaVzUwS0NkdmJpY2dLeUJsZG1WdWRGUjVjR1VzSUdOaGJHeGlZV05yS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJoY21kbGRDNWtaWFJoWTJoRmRtVnVkQ2duYjI0bklDc2daWFpsYm5SVWVYQmxMQ0JqWVd4c1ltRmpheWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk1hWE4wWlc0Z2RHOGdSRTlOSUdWMlpXNTBjeUJrZFhKcGJtY2dkR2hsSUdOaGNIUjFjbVVnY0doaGMyVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3UkU5TlJYWmxiblJVWVhKblpYUjlJSFJoY21kbGRDQkVUMDBnWld4bGJXVnVkQ0IwYnlCeVpXZHBjM1JsY2lCc2FYTjBaVzVsY2lCdmJpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdWMlpXNTBWSGx3WlNCRmRtVnVkQ0IwZVhCbExDQmxMbWN1SUNkamJHbGpheWNnYjNJZ0oyMXZkWE5sYjNabGNpY3VYRzRnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlHTmhiR3hpWVdOcklFTmhiR3hpWVdOcklHWjFibU4wYVc5dUxseHVJQ0FnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5SUU5aWFtVmpkQ0IzYVhSb0lHRWdZSEpsYlc5MlpXQWdiV1YwYUc5a0xseHVJQ0FnS2k5Y2JpQWdZMkZ3ZEhWeVpUb2dablZ1WTNScGIyNGdLSFJoY21kbGRDd2daWFpsYm5SVWVYQmxMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJR2xtSUNoMFlYSm5aWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnZEdGeVoyVjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9aWFpsYm5SVWVYQmxMQ0JqWVd4c1ltRmpheXdnZEhKMVpTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1VNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMFlYSm5aWFF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lobGRtVnVkRlI1Y0dVc0lHTmhiR3hpWVdOckxDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25RWFIwWlcxd2RHVmtJSFJ2SUd4cGMzUmxiaUIwYnlCbGRtVnVkSE1nWkhWeWFXNW5JSFJvWlNCallYQjBkWEpsSUhCb1lYTmxJRzl1SUdFZ0p5QXJJQ2RpY205M2MyVnlJSFJvWVhRZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCMGFHVWdZMkZ3ZEhWeVpTQndhR0Z6WlM0Z1dXOTFjaUJoY0hCc2FXTmhkR2x2YmlBbklDc2dKM2RwYkd3Z2JtOTBJSEpsWTJWcGRtVWdjMjl0WlNCbGRtVnVkSE11SnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCeVpXMXZkbVU2SUdWdGNIUjVSblZ1WTNScGIyNWNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJSEpsWjJsemRHVnlSR1ZtWVhWc2REb2dablZ1WTNScGIyNGdLQ2tnZTMxY2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUlhabGJuUk1hWE4wWlc1bGNqc2lYWDA9IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjYW1lbGl6ZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9oeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKF8sIGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNhbWVsaXplU3R5bGVOYW1lXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhbWVsaXplID0gcmVxdWlyZSgnLi9jYW1lbGl6ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tb3otdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJNb3pUcmFuc2l0aW9uXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1zLXRyYW5zaXRpb24nKVxuICogICA8IFwibXNUcmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG4gKiAoaHR0cDovL3d3dy5hbmRpc21pdGguY29tL2Jsb2cvMjAxMi8wMi9tb2Rlcm5penItcHJlZml4ZWQvKSwgYW4gYC1tc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGNhbWVsaXplKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZVN0eWxlTmFtZTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY29udGFpbnNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqXG4gKiBAcGFyYW0gez9ET01Ob2RlfSBvdXRlck5vZGUgT3V0ZXIgRE9NIG5vZGUuXG4gKiBAcGFyYW0gez9ET01Ob2RlfSBpbm5lck5vZGUgSW5uZXIgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvdXRlck5vZGVgIGNvbnRhaW5zIG9yIGlzIGBpbm5lck5vZGVgLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUoX3gsIF94Mikge1xuICB2YXIgX2FnYWluID0gdHJ1ZTtcblxuICBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHtcbiAgICB2YXIgb3V0ZXJOb2RlID0gX3gsXG4gICAgICAgIGlubmVyTm9kZSA9IF94MjtcbiAgICBfYWdhaW4gPSBmYWxzZTtcblxuICAgIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgICBfeCA9IG91dGVyTm9kZTtcbiAgICAgIF94MiA9IGlubmVyTm9kZS5wYXJlbnROb2RlO1xuICAgICAgX2FnYWluID0gdHJ1ZTtcbiAgICAgIGNvbnRpbnVlIF9mdW5jdGlvbjtcbiAgICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb250YWlucykge1xuICAgICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICAgIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZUFycmF5RnJvbU1peGVkXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHRvQXJyYXkgPSByZXF1aXJlKCcuL3RvQXJyYXknKTtcblxuLyoqXG4gKiBQZXJmb3JtIGEgaGV1cmlzdGljIHRlc3QgdG8gZGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBcImFycmF5LWxpa2VcIi5cbiAqXG4gKiAgIEEgbW9uayBhc2tlZCBKb3NodSwgYSBaZW4gbWFzdGVyLCBcIkhhcyBhIGRvZyBCdWRkaGEgbmF0dXJlP1wiXG4gKiAgIEpvc2h1IHJlcGxpZWQ6IFwiTXUuXCJcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgaXRzIGFyZ3VtZW50IGhhcyBcImFycmF5IG5hdHVyZVwiOiBpdCByZXR1cm5zXG4gKiB0cnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhY3R1YWwgYXJyYXksIGFuIGBhcmd1bWVudHMnIG9iamVjdCwgb3IgYW5cbiAqIEhUTUxDb2xsZWN0aW9uIChlLmcuIG5vZGUuY2hpbGROb2RlcyBvciBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCkpLlxuICpcbiAqIEl0IHdpbGwgcmV0dXJuIGZhbHNlIGZvciBvdGhlciBhcnJheS1saWtlIG9iamVjdHMgbGlrZSBGaWxlbGlzdC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzQXJyYXlOYXR1cmUob2JqKSB7XG4gIHJldHVybihcbiAgICAvLyBub3QgbnVsbC9mYWxzZVxuICAgICEhb2JqICYmIChcbiAgICAvLyBhcnJheXMgYXJlIG9iamVjdHMsIE5vZGVMaXN0cyBhcmUgZnVuY3Rpb25zIGluIFNhZmFyaVxuICAgIHR5cGVvZiBvYmogPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nKSAmJlxuICAgIC8vIHF1YWNrcyBsaWtlIGFuIGFycmF5XG4gICAgJ2xlbmd0aCcgaW4gb2JqICYmXG4gICAgLy8gbm90IHdpbmRvd1xuICAgICEoJ3NldEludGVydmFsJyBpbiBvYmopICYmXG4gICAgLy8gbm8gRE9NIG5vZGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYW4gYXJyYXktbGlrZVxuICAgIC8vIGEgJ3NlbGVjdCcgZWxlbWVudCBoYXMgJ2xlbmd0aCcgYW5kICdpdGVtJyBwcm9wZXJ0aWVzIG9uIElFOFxuICAgIHR5cGVvZiBvYmoubm9kZVR5cGUgIT0gJ251bWJlcicgJiYgKFxuICAgIC8vIGEgcmVhbCBhcnJheVxuICAgIEFycmF5LmlzQXJyYXkob2JqKSB8fFxuICAgIC8vIGFyZ3VtZW50c1xuICAgICdjYWxsZWUnIGluIG9iaiB8fFxuICAgIC8vIEhUTUxDb2xsZWN0aW9uL05vZGVMaXN0XG4gICAgJ2l0ZW0nIGluIG9iailcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkgYnkgd3JhcHBpbmcgaXQgaW4gYW4gYXJyYXkgaWYgaXQgaXMgbm90LlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIGFyZ3VtZW50IGlmIGl0IGlzIGFscmVhZHkgYW4gYXJyYXkuXG4gKlxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGlkaW9tYXRpY2FsbHk6XG4gKlxuICogICB2YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCdjcmVhdGVBcnJheUZyb21NaXhlZCcpO1xuICpcbiAqICAgZnVuY3Rpb24gdGFrZXNPbmVPck1vcmVUaGluZ3ModGhpbmdzKSB7XG4gKiAgICAgdGhpbmdzID0gY3JlYXRlQXJyYXlGcm9tTWl4ZWQodGhpbmdzKTtcbiAqICAgICAuLi5cbiAqICAgfVxuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byB0cmVhdCBgdGhpbmdzJyBhcyBhbiBhcnJheSwgYnV0IGFjY2VwdCBzY2FsYXJzIGluIHRoZSBBUEkuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gY29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCwgbGlrZSBgYXJndW1lbnRzYCwgaW50byBhbiBhcnJheVxuICogdXNlIHRvQXJyYXkgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5RnJvbU1peGVkKG9iaikge1xuICBpZiAoIWhhc0FycmF5TmF0dXJlKG9iaikpIHtcbiAgICByZXR1cm4gW29ial07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0FycmF5KG9iaik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb21NaXhlZDsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCcuL2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoJy4vZ2V0TWFya3VwV3JhcCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gcmVuZGVyIGFsbCBtYXJrdXAuXG4gKi9cbnZhciBkdW1teU5vZGUgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogUGF0dGVybiB1c2VkIGJ5IGBnZXROb2RlTmFtZWAuXG4gKi9cbnZhciBub2RlTmFtZVBhdHRlcm4gPSAvXlxccyo8KFxcdyspLztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYG5vZGVOYW1lYCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICogQHJldHVybiB7P3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICB2YXIgbm9kZU5hbWVNYXRjaCA9IG1hcmt1cC5tYXRjaChub2RlTmFtZVBhdHRlcm4pO1xuICByZXR1cm4gbm9kZU5hbWVNYXRjaCAmJiBub2RlTmFtZU1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBub2RlcyByZW5kZXJlZCBmcm9tIHRoZSBzdXBwbGllZCBtYXJrdXAuIFRoZVxuICogb3B0aW9uYWxseSBzdXBwbGllZCBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBmb3IgZWFjaFxuICogPHNjcmlwdD4gZWxlbWVudCB0aGF0IGlzIHJlbmRlcmVkLiBJZiBubyBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiBpcyBzdXBwbGllZCxcbiAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgYW55IDxzY3JpcHQ+IGVsZW1lbnRzIGFyZSByZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIEEgc3RyaW5nIG9mIHZhbGlkIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGhhbmRsZVNjcmlwdCBJbnZva2VkIG9uY2UgZm9yIGVhY2ggcmVuZGVyZWQgPHNjcmlwdD4uXG4gKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50fERPTVRleHROb2RlPn0gQW4gYXJyYXkgb2YgcmVuZGVyZWQgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGhhbmRsZVNjcmlwdCkge1xuICB2YXIgbm9kZSA9IGR1bW15Tm9kZTtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCBkdW1teSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIHZhciBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cCk7XG5cbiAgdmFyIHdyYXAgPSBub2RlTmFtZSAmJiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKTtcbiAgaWYgKHdyYXApIHtcbiAgICBub2RlLmlubmVySFRNTCA9IHdyYXBbMV0gKyBtYXJrdXAgKyB3cmFwWzJdO1xuXG4gICAgdmFyIHdyYXBEZXB0aCA9IHdyYXBbMF07XG4gICAgd2hpbGUgKHdyYXBEZXB0aC0tKSB7XG4gICAgICBub2RlID0gbm9kZS5sYXN0Q2hpbGQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gbWFya3VwO1xuICB9XG5cbiAgdmFyIHNjcmlwdHMgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgaWYgKHNjcmlwdHMubGVuZ3RoKSB7XG4gICAgIWhhbmRsZVNjcmlwdCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAoLi4uKTogVW5leHBlY3RlZCA8c2NyaXB0PiBlbGVtZW50IHJlbmRlcmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBjcmVhdGVBcnJheUZyb21NaXhlZChzY3JpcHRzKS5mb3JFYWNoKGhhbmRsZVNjcmlwdCk7XG4gIH1cblxuICB2YXIgbm9kZXMgPSBjcmVhdGVBcnJheUZyb21NaXhlZChub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5bVltcHpMMnhwWWk5amNtVmhkR1ZPYjJSbGMwWnliMjFOWVhKcmRYQXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE15MHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElHTnlaV0YwWlU1dlpHVnpSbkp2YlUxaGNtdDFjRnh1SUNvZ1FIUjVjR1ZqYUdWamEzTmNiaUFxTDF4dVhHNHZLbVZ6YkdsdWRDMWthWE5oWW14bElHWmlMWGQzZHk5MWJuTmhabVV0YUhSdGJDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlFVjRaV04xZEdsdmJrVnVkbWx5YjI1dFpXNTBJRDBnY21WeGRXbHlaU2duTGk5RmVHVmpkWFJwYjI1RmJuWnBjbTl1YldWdWRDY3BPMXh1WEc1MllYSWdZM0psWVhSbFFYSnlZWGxHY205dFRXbDRaV1FnUFNCeVpYRjFhWEpsS0NjdUwyTnlaV0YwWlVGeWNtRjVSbkp2YlUxcGVHVmtKeWs3WEc1MllYSWdaMlYwVFdGeWEzVndWM0poY0NBOUlISmxjWFZwY21Vb0p5NHZaMlYwVFdGeWEzVndWM0poY0NjcE8xeHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb0p5NHZhVzUyWVhKcFlXNTBKeWs3WEc1Y2JpOHFLbHh1SUNvZ1JIVnRiWGtnWTI5dWRHRnBibVZ5SUhWelpXUWdkRzhnY21WdVpHVnlJR0ZzYkNCdFlYSnJkWEF1WEc0Z0tpOWNiblpoY2lCa2RXMXRlVTV2WkdVZ1BTQkZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQzVqWVc1VmMyVkVUMDBnUHlCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktTQTZJRzUxYkd3N1hHNWNiaThxS2x4dUlDb2dVR0YwZEdWeWJpQjFjMlZrSUdKNUlHQm5aWFJPYjJSbFRtRnRaV0F1WEc0Z0tpOWNiblpoY2lCdWIyUmxUbUZ0WlZCaGRIUmxjbTRnUFNBdlhseGNjeW84S0Z4Y2R5c3BMenRjYmx4dUx5b3FYRzRnS2lCRmVIUnlZV04wY3lCMGFHVWdZRzV2WkdWT1lXMWxZQ0J2WmlCMGFHVWdabWx5YzNRZ1pXeGxiV1Z1ZENCcGJpQmhJSE4wY21sdVp5QnZaaUJ0WVhKcmRYQXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMWhjbXQxY0NCVGRISnBibWNnYjJZZ2JXRnlhM1Z3TGx4dUlDb2dRSEpsZEhWeWJpQjdQM04wY21sdVozMGdUbTlrWlNCdVlXMWxJRzltSUhSb1pTQnpkWEJ3YkdsbFpDQnRZWEpyZFhBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdkbGRFNXZaR1ZPWVcxbEtHMWhjbXQxY0NrZ2UxeHVJQ0IyWVhJZ2JtOWtaVTVoYldWTllYUmphQ0E5SUcxaGNtdDFjQzV0WVhSamFDaHViMlJsVG1GdFpWQmhkSFJsY200cE8xeHVJQ0J5WlhSMWNtNGdibTlrWlU1aGJXVk5ZWFJqYUNBbUppQnViMlJsVG1GdFpVMWhkR05vV3pGZExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1OVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhiaUJoY25KaGVTQmpiMjUwWVdsdWFXNW5JSFJvWlNCdWIyUmxjeUJ5Wlc1a1pYSmxaQ0JtY205dElIUm9aU0J6ZFhCd2JHbGxaQ0J0WVhKcmRYQXVJRlJvWlZ4dUlDb2diM0IwYVc5dVlXeHNlU0J6ZFhCd2JHbGxaQ0JnYUdGdVpHeGxVMk55YVhCMFlDQm1kVzVqZEdsdmJpQjNhV3hzSUdKbElHbHVkbTlyWldRZ2IyNWpaU0JtYjNJZ1pXRmphRnh1SUNvZ1BITmpjbWx3ZEQ0Z1pXeGxiV1Z1ZENCMGFHRjBJR2x6SUhKbGJtUmxjbVZrTGlCSlppQnVieUJnYUdGdVpHeGxVMk55YVhCMFlDQm1kVzVqZEdsdmJpQnBjeUJ6ZFhCd2JHbGxaQ3hjYmlBcUlHRnVJR1Y0WTJWd2RHbHZiaUJwY3lCMGFISnZkMjRnYVdZZ1lXNTVJRHh6WTNKcGNIUStJR1ZzWlcxbGJuUnpJR0Z5WlNCeVpXNWtaWEpsWkM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYldGeWEzVndJRUVnYzNSeWFXNW5JRzltSUhaaGJHbGtJRWhVVFV3Z2JXRnlhM1Z3TGx4dUlDb2dRSEJoY21GdElIcy9ablZ1WTNScGIyNTlJR2hoYm1Sc1pWTmpjbWx3ZENCSmJuWnZhMlZrSUc5dVkyVWdabTl5SUdWaFkyZ2djbVZ1WkdWeVpXUWdQSE5qY21sd2RENHVYRzRnS2lCQWNtVjBkWEp1SUh0aGNuSmhlVHhFVDAxRmJHVnRaVzUwZkVSUFRWUmxlSFJPYjJSbFBuMGdRVzRnWVhKeVlYa2diMllnY21WdVpHVnlaV1FnYm05a1pYTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlU1dlpHVnpSbkp2YlUxaGNtdDFjQ2h0WVhKcmRYQXNJR2hoYm1Sc1pWTmpjbWx3ZENrZ2UxeHVJQ0IyWVhJZ2JtOWtaU0E5SUdSMWJXMTVUbTlrWlR0Y2JpQWdJU0VoWkhWdGJYbE9iMlJsSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMk55WldGMFpVNXZaR1Z6Um5KdmJVMWhjbXQxY0NCa2RXMXRlU0J1YjNRZ2FXNXBkR2xoYkdsNlpXUW5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJSFpoY2lCdWIyUmxUbUZ0WlNBOUlHZGxkRTV2WkdWT1lXMWxLRzFoY210MWNDazdYRzVjYmlBZ2RtRnlJSGR5WVhBZ1BTQnViMlJsVG1GdFpTQW1KaUJuWlhSTllYSnJkWEJYY21Gd0tHNXZaR1ZPWVcxbEtUdGNiaUFnYVdZZ0tIZHlZWEFwSUh0Y2JpQWdJQ0J1YjJSbExtbHVibVZ5U0ZSTlRDQTlJSGR5WVhCYk1WMGdLeUJ0WVhKcmRYQWdLeUIzY21Gd1d6SmRPMXh1WEc0Z0lDQWdkbUZ5SUhkeVlYQkVaWEIwYUNBOUlIZHlZWEJiTUYwN1hHNGdJQ0FnZDJocGJHVWdLSGR5WVhCRVpYQjBhQzB0S1NCN1hHNGdJQ0FnSUNCdWIyUmxJRDBnYm05a1pTNXNZWE4wUTJocGJHUTdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHNXZaR1V1YVc1dVpYSklWRTFNSUQwZ2JXRnlhM1Z3TzF4dUlDQjlYRzVjYmlBZ2RtRnlJSE5qY21sd2RITWdQU0J1YjJSbExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLQ2R6WTNKcGNIUW5LVHRjYmlBZ2FXWWdLSE5qY21sd2RITXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lXaGhibVJzWlZOamNtbHdkQ0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZGpjbVZoZEdWT2IyUmxjMFp5YjIxTllYSnJkWEFvTGk0dUtUb2dWVzVsZUhCbFkzUmxaQ0E4YzJOeWFYQjBQaUJsYkdWdFpXNTBJSEpsYm1SbGNtVmtMaWNwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCamNtVmhkR1ZCY25KaGVVWnliMjFOYVhobFpDaHpZM0pwY0hSektTNW1iM0pGWVdOb0tHaGhibVJzWlZOamNtbHdkQ2s3WEc0Z0lIMWNibHh1SUNCMllYSWdibTlrWlhNZ1BTQmpjbVZoZEdWQmNuSmhlVVp5YjIxTmFYaGxaQ2h1YjJSbExtTm9hV3hrVG05a1pYTXBPMXh1SUNCM2FHbHNaU0FvYm05a1pTNXNZWE4wUTJocGJHUXBJSHRjYmlBZ0lDQnViMlJsTG5KbGJXOTJaVU5vYVd4a0tHNXZaR1V1YkdGemRFTm9hV3hrS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYm05a1pYTTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1kzSmxZWFJsVG05a1pYTkdjbTl0VFdGeWEzVndPeUpkZlE9PSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlbXB0eUZ1bmN0aW9uXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZW1wdHlPYmplY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OW1ZbXB6TDJ4cFlpOWxiWEIwZVU5aWFtVmpkQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUdWdGNIUjVUMkpxWldOMFhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdaVzF3ZEhsUFltcGxZM1FnUFNCN2ZUdGNibHh1YVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ1QySnFaV04wTG1aeVpXVjZaU2hsYlhCMGVVOWlhbVZqZENrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWlcxd2RIbFBZbXBsWTNRN0lsMTkiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZm9jdXNOb2RlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBpbnB1dC90ZXh0YXJlYSB0byBmb2N1c1xuICovXG5mdW5jdGlvbiBmb2N1c05vZGUobm9kZSkge1xuICAvLyBJRTggY2FuIHRocm93IFwiQ2FuJ3QgbW92ZSBmb2N1cyB0byB0aGUgY29udHJvbCBiZWNhdXNlIGl0IGlzIGludmlzaWJsZSxcbiAgLy8gbm90IGVuYWJsZWQsIG9yIG9mIGEgdHlwZSB0aGF0IGRvZXMgbm90IGFjY2VwdCB0aGUgZm9jdXMuXCIgZm9yIGFsbCBraW5kcyBvZlxuICAvLyByZWFzb25zIHRoYXQgYXJlIHRvbyBleHBlbnNpdmUgYW5kIGZyYWdpbGUgdG8gdGVzdC5cbiAgdHJ5IHtcbiAgICBub2RlLmZvY3VzKCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9jdXNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRBY3RpdmVFbGVtZW50XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KCkgLyo/RE9NRWxlbWVudCove1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldE1hcmt1cFdyYXBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gZGV0ZWN0IHdoaWNoIHdyYXBzIGFyZSBuZWNlc3NhcnkuXG4gKi9cbnZhciBkdW1teU5vZGUgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogU29tZSBicm93c2VycyBjYW5ub3QgdXNlIGBpbm5lckhUTUxgIHRvIHJlbmRlciBjZXJ0YWluIGVsZW1lbnRzIHN0YW5kYWxvbmUsXG4gKiBzbyB3ZSB3cmFwIHRoZW0sIHJlbmRlciB0aGUgd3JhcHBlZCBub2RlcywgdGhlbiBleHRyYWN0IHRoZSBkZXNpcmVkIG5vZGUuXG4gKlxuICogSW4gSUU4LCBjZXJ0YWluIGVsZW1lbnRzIGNhbm5vdCByZW5kZXIgYWxvbmUsIHNvIHdyYXAgYWxsIGVsZW1lbnRzICgnKicpLlxuICovXG5cbnZhciBzaG91bGRXcmFwID0ge307XG5cbnZhciBzZWxlY3RXcmFwID0gWzEsICc8c2VsZWN0IG11bHRpcGxlPVwidHJ1ZVwiPicsICc8L3NlbGVjdD4nXTtcbnZhciB0YWJsZVdyYXAgPSBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXTtcbnZhciB0cldyYXAgPSBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXTtcblxudmFyIHN2Z1dyYXAgPSBbMSwgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPicsICc8L3N2Zz4nXTtcblxudmFyIG1hcmt1cFdyYXAgPSB7XG4gICcqJzogWzEsICc/PGRpdj4nLCAnPC9kaXY+J10sXG5cbiAgJ2FyZWEnOiBbMSwgJzxtYXA+JywgJzwvbWFwPiddLFxuICAnY29sJzogWzIsICc8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICdsZWdlbmQnOiBbMSwgJzxmaWVsZHNldD4nLCAnPC9maWVsZHNldD4nXSxcbiAgJ3BhcmFtJzogWzEsICc8b2JqZWN0PicsICc8L29iamVjdD4nXSxcbiAgJ3RyJzogWzIsICc8dGFibGU+PHRib2R5PicsICc8L3Rib2R5PjwvdGFibGU+J10sXG5cbiAgJ29wdGdyb3VwJzogc2VsZWN0V3JhcCxcbiAgJ29wdGlvbic6IHNlbGVjdFdyYXAsXG5cbiAgJ2NhcHRpb24nOiB0YWJsZVdyYXAsXG4gICdjb2xncm91cCc6IHRhYmxlV3JhcCxcbiAgJ3Rib2R5JzogdGFibGVXcmFwLFxuICAndGZvb3QnOiB0YWJsZVdyYXAsXG4gICd0aGVhZCc6IHRhYmxlV3JhcCxcblxuICAndGQnOiB0cldyYXAsXG4gICd0aCc6IHRyV3JhcFxufTtcblxuLy8gSW5pdGlhbGl6ZSB0aGUgU1ZHIGVsZW1lbnRzIHNpbmNlIHdlIGtub3cgdGhleSdsbCBhbHdheXMgbmVlZCB0byBiZSB3cmFwcGVkXG4vLyBjb25zaXN0ZW50bHkuIElmIHRoZXkgYXJlIGNyZWF0ZWQgaW5zaWRlIGEgPGRpdj4gdGhleSB3aWxsIGJlIGluaXRpYWxpemVkIGluXG4vLyB0aGUgd3JvbmcgbmFtZXNwYWNlIChhbmQgd2lsbCBub3QgZGlzcGxheSkuXG52YXIgc3ZnRWxlbWVudHMgPSBbJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3RleHQnLCAndHNwYW4nXTtcbnN2Z0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG5vZGVOYW1lKSB7XG4gIG1hcmt1cFdyYXBbbm9kZU5hbWVdID0gc3ZnV3JhcDtcbiAgc2hvdWxkV3JhcFtub2RlTmFtZV0gPSB0cnVlO1xufSk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiBmb3IgdGhlIHN1cHBsaWVkIGBub2RlTmFtZWAuXG4gKlxuICogTk9URTogVGhpcyBsYXppbHkgZGV0ZWN0cyB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5IGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlTmFtZSBMb3dlcmNhc2UgYG5vZGVOYW1lYC5cbiAqIEByZXR1cm4gez9hcnJheX0gTWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkge1xuICAhISFkdW1teU5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWFya3VwIHdyYXBwaW5nIG5vZGUgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBpZiAoIW1hcmt1cFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgbm9kZU5hbWUgPSAnKic7XG4gIH1cbiAgaWYgKCFzaG91bGRXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIGlmIChub2RlTmFtZSA9PT0gJyonKSB7XG4gICAgICBkdW1teU5vZGUuaW5uZXJIVE1MID0gJzxsaW5rIC8+JztcbiAgICB9IGVsc2Uge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8JyArIG5vZGVOYW1lICsgJz48LycgKyBub2RlTmFtZSArICc+JztcbiAgICB9XG4gICAgc2hvdWxkV3JhcFtub2RlTmFtZV0gPSAhZHVtbXlOb2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIHNob3VsZFdyYXBbbm9kZU5hbWVdID8gbWFya3VwV3JhcFtub2RlTmFtZV0gOiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcmt1cFdyYXA7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTltWW1wekwyeHBZaTluWlhSTllYSnJkWEJYY21Gd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1oyVjBUV0Z5YTNWd1YzSmhjRnh1SUNvdlhHNWNiaThxWlhOc2FXNTBMV1JwYzJGaWJHVWdabUl0ZDNkM0wzVnVjMkZtWlMxb2RHMXNJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRVY0WldOMWRHbHZia1Z1ZG1seWIyNXRaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOUZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQ2NwTzF4dVhHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOXBiblpoY21saGJuUW5LVHRjYmx4dUx5b3FYRzRnS2lCRWRXMXRlU0JqYjI1MFlXbHVaWElnZFhObFpDQjBieUJrWlhSbFkzUWdkMmhwWTJnZ2QzSmhjSE1nWVhKbElHNWxZMlZ6YzJGeWVTNWNiaUFxTDF4dWRtRnlJR1IxYlcxNVRtOWtaU0E5SUVWNFpXTjFkR2x2YmtWdWRtbHliMjV0Wlc1MExtTmhibFZ6WlVSUFRTQS9JR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwSURvZ2JuVnNiRHRjYmx4dUx5b3FYRzRnS2lCVGIyMWxJR0p5YjNkelpYSnpJR05oYm01dmRDQjFjMlVnWUdsdWJtVnlTRlJOVEdBZ2RHOGdjbVZ1WkdWeUlHTmxjblJoYVc0Z1pXeGxiV1Z1ZEhNZ2MzUmhibVJoYkc5dVpTeGNiaUFxSUhOdklIZGxJSGR5WVhBZ2RHaGxiU3dnY21WdVpHVnlJSFJvWlNCM2NtRndjR1ZrSUc1dlpHVnpMQ0IwYUdWdUlHVjRkSEpoWTNRZ2RHaGxJR1JsYzJseVpXUWdibTlrWlM1Y2JpQXFYRzRnS2lCSmJpQkpSVGdzSUdObGNuUmhhVzRnWld4bGJXVnVkSE1nWTJGdWJtOTBJSEpsYm1SbGNpQmhiRzl1WlN3Z2MyOGdkM0poY0NCaGJHd2daV3hsYldWdWRITWdLQ2NxSnlrdVhHNGdLaTljYmx4dWRtRnlJSE5vYjNWc1pGZHlZWEFnUFNCN2ZUdGNibHh1ZG1GeUlITmxiR1ZqZEZkeVlYQWdQU0JiTVN3Z0p6eHpaV3hsWTNRZ2JYVnNkR2x3YkdVOVhDSjBjblZsWENJK0p5d2dKend2YzJWc1pXTjBQaWRkTzF4dWRtRnlJSFJoWW14bFYzSmhjQ0E5SUZzeExDQW5QSFJoWW14bFBpY3NJQ2M4TDNSaFlteGxQaWRkTzF4dWRtRnlJSFJ5VjNKaGNDQTlJRnN6TENBblBIUmhZbXhsUGp4MFltOWtlVDQ4ZEhJK0p5d2dKend2ZEhJK1BDOTBZbTlrZVQ0OEwzUmhZbXhsUGlkZE8xeHVYRzUyWVhJZ2MzWm5WM0poY0NBOUlGc3hMQ0FuUEhOMlp5QjRiV3h1Y3oxY0ltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNablhDSStKeXdnSnp3dmMzWm5QaWRkTzF4dVhHNTJZWElnYldGeWEzVndWM0poY0NBOUlIdGNiaUFnSnlvbk9pQmJNU3dnSno4OFpHbDJQaWNzSUNjOEwyUnBkajRuWFN4Y2JseHVJQ0FuWVhKbFlTYzZJRnN4TENBblBHMWhjRDRuTENBblBDOXRZWEErSjEwc1hHNGdJQ2RqYjJ3bk9pQmJNaXdnSnp4MFlXSnNaVDQ4ZEdKdlpIaytQQzkwWW05a2VUNDhZMjlzWjNKdmRYQStKeXdnSnp3dlkyOXNaM0p2ZFhBK1BDOTBZV0pzWlQ0blhTeGNiaUFnSjJ4bFoyVnVaQ2M2SUZzeExDQW5QR1pwWld4a2MyVjBQaWNzSUNjOEwyWnBaV3hrYzJWMFBpZGRMRnh1SUNBbmNHRnlZVzBuT2lCYk1Td2dKenh2WW1wbFkzUStKeXdnSnp3dmIySnFaV04wUGlkZExGeHVJQ0FuZEhJbk9pQmJNaXdnSnp4MFlXSnNaVDQ4ZEdKdlpIaytKeXdnSnp3dmRHSnZaSGsrUEM5MFlXSnNaVDRuWFN4Y2JseHVJQ0FuYjNCMFozSnZkWEFuT2lCelpXeGxZM1JYY21Gd0xGeHVJQ0FuYjNCMGFXOXVKem9nYzJWc1pXTjBWM0poY0N4Y2JseHVJQ0FuWTJGd2RHbHZiaWM2SUhSaFlteGxWM0poY0N4Y2JpQWdKMk52YkdkeWIzVndKem9nZEdGaWJHVlhjbUZ3TEZ4dUlDQW5kR0p2Wkhrbk9pQjBZV0pzWlZkeVlYQXNYRzRnSUNkMFptOXZkQ2M2SUhSaFlteGxWM0poY0N4Y2JpQWdKM1JvWldGa0p6b2dkR0ZpYkdWWGNtRndMRnh1WEc0Z0lDZDBaQ2M2SUhSeVYzSmhjQ3hjYmlBZ0ozUm9Kem9nZEhKWGNtRndYRzU5TzF4dVhHNHZMeUJKYm1sMGFXRnNhWHBsSUhSb1pTQlRWa2NnWld4bGJXVnVkSE1nYzJsdVkyVWdkMlVnYTI1dmR5QjBhR1Y1SjJ4c0lHRnNkMkY1Y3lCdVpXVmtJSFJ2SUdKbElIZHlZWEJ3WldSY2JpOHZJR052Ym5OcGMzUmxiblJzZVM0Z1NXWWdkR2hsZVNCaGNtVWdZM0psWVhSbFpDQnBibk5wWkdVZ1lTQThaR2wyUGlCMGFHVjVJSGRwYkd3Z1ltVWdhVzVwZEdsaGJHbDZaV1FnYVc1Y2JpOHZJSFJvWlNCM2NtOXVaeUJ1WVcxbGMzQmhZMlVnS0dGdVpDQjNhV3hzSUc1dmRDQmthWE53YkdGNUtTNWNiblpoY2lCemRtZEZiR1Z0Wlc1MGN5QTlJRnNuWTJseVkyeGxKeXdnSjJOc2FYQlFZWFJvSnl3Z0oyUmxabk1uTENBblpXeHNhWEJ6WlNjc0lDZG5KeXdnSjJsdFlXZGxKeXdnSjJ4cGJtVW5MQ0FuYkdsdVpXRnlSM0poWkdsbGJuUW5MQ0FuYldGemF5Y3NJQ2R3WVhSb0p5d2dKM0JoZEhSbGNtNG5MQ0FuY0c5c2VXZHZiaWNzSUNkd2IyeDViR2x1WlNjc0lDZHlZV1JwWVd4SGNtRmthV1Z1ZENjc0lDZHlaV04wSnl3Z0ozTjBiM0FuTENBbmRHVjRkQ2NzSUNkMGMzQmhiaWRkTzF4dWMzWm5SV3hsYldWdWRITXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ibTlrWlU1aGJXVXBJSHRjYmlBZ2JXRnlhM1Z3VjNKaGNGdHViMlJsVG1GdFpWMGdQU0J6ZG1kWGNtRndPMXh1SUNCemFHOTFiR1JYY21Gd1cyNXZaR1ZPWVcxbFhTQTlJSFJ5ZFdVN1hHNTlLVHRjYmx4dUx5b3FYRzRnS2lCSFpYUnpJSFJvWlNCdFlYSnJkWEFnZDNKaGNDQmpiMjVtYVdkMWNtRjBhVzl1SUdadmNpQjBhR1VnYzNWd2NHeHBaV1FnWUc1dlpHVk9ZVzFsWUM1Y2JpQXFYRzRnS2lCT1QxUkZPaUJVYUdseklHeGhlbWxzZVNCa1pYUmxZM1J6SUhkb2FXTm9JSGR5WVhCeklHRnlaU0J1WldObGMzTmhjbmtnWm05eUlIUm9aU0JqZFhKeVpXNTBJR0p5YjNkelpYSXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHNXZaR1ZPWVcxbElFeHZkMlZ5WTJGelpTQmdibTlrWlU1aGJXVmdMbHh1SUNvZ1FISmxkSFZ5YmlCN1AyRnljbUY1ZlNCTllYSnJkWEFnZDNKaGNDQmpiMjVtYVdkMWNtRjBhVzl1TENCcFppQmhjSEJzYVdOaFlteGxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJOWVhKcmRYQlhjbUZ3S0c1dlpHVk9ZVzFsS1NCN1hHNGdJQ0VoSVdSMWJXMTVUbTlrWlNBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2ROWVhKcmRYQWdkM0poY0hCcGJtY2dibTlrWlNCdWIzUWdhVzVwZEdsaGJHbDZaV1FuS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUdsbUlDZ2hiV0Z5YTNWd1YzSmhjQzVvWVhOUGQyNVFjbTl3WlhKMGVTaHViMlJsVG1GdFpTa3BJSHRjYmlBZ0lDQnViMlJsVG1GdFpTQTlJQ2NxSnp0Y2JpQWdmVnh1SUNCcFppQW9JWE5vYjNWc1pGZHlZWEF1YUdGelQzZHVVSEp2Y0dWeWRIa29ibTlrWlU1aGJXVXBLU0I3WEc0Z0lDQWdhV1lnS0c1dlpHVk9ZVzFsSUQwOVBTQW5LaWNwSUh0Y2JpQWdJQ0FnSUdSMWJXMTVUbTlrWlM1cGJtNWxja2hVVFV3Z1BTQW5QR3hwYm1zZ0x6NG5PMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCa2RXMXRlVTV2WkdVdWFXNXVaWEpJVkUxTUlEMGdKenduSUNzZ2JtOWtaVTVoYldVZ0t5QW5Qand2SnlBcklHNXZaR1ZPWVcxbElDc2dKejRuTzF4dUlDQWdJSDFjYmlBZ0lDQnphRzkxYkdSWGNtRndXMjV2WkdWT1lXMWxYU0E5SUNGa2RXMXRlVTV2WkdVdVptbHljM1JEYUdsc1pEdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2MyaHZkV3hrVjNKaGNGdHViMlJsVG1GdFpWMGdQeUJ0WVhKcmRYQlhjbUZ3VzI1dlpHVk9ZVzFsWFNBNklHNTFiR3c3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaMlYwVFdGeWEzVndWM0poY0RzaVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb25cbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgc3VwcGxpZWQgZWxlbWVudCBvciB3aW5kb3cuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZXMgYXJlIHVuYm91bmRlZCwgdW5saWtlIGBnZXRTY3JvbGxQb3NpdGlvbmAuIFRoaXMgbWVhbnMgdGhleVxuICogbWF5IGJlIG5lZ2F0aXZlIG9yIGV4Y2VlZCB0aGUgZWxlbWVudCBib3VuZGFyaWVzICh3aGljaCBpcyBwb3NzaWJsZSB1c2luZ1xuICogaW5lcnRpYWwgc2Nyb2xsaW5nKS5cbiAqXG4gKiBAcGFyYW0ge0RPTVdpbmRvd3xET01FbGVtZW50fSBzY3JvbGxhYmxlXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcCB3aXRoIGB4YCBhbmQgYHlgIGtleXMuXG4gKi9cbmZ1bmN0aW9uIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHNjcm9sbGFibGUpIHtcbiAgaWYgKHNjcm9sbGFibGUgPT09IHdpbmRvdykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBzY3JvbGxhYmxlLnNjcm9sbExlZnQsXG4gICAgeTogc2Nyb2xsYWJsZS5zY3JvbGxUb3BcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaHlwaGVuYXRlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF91cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqXG4gKiBGb3IgQ1NTIHN0eWxlIG5hbWVzLCB1c2UgYGh5cGhlbmF0ZVN0eWxlTmFtZWAgaW5zdGVhZCB3aGljaCB3b3JrcyBwcm9wZXJseVxuICogd2l0aCBhbGwgdmVuZG9yIHByZWZpeGVzLCBpbmNsdWRpbmcgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF91cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoeXBoZW5hdGUgPSByZXF1aXJlKCcuL2h5cGhlbmF0ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGludmFyaWFudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5bVltcHpMMnhwWWk5cGJuWmhjbWxoYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCcGJuWmhjbWxoYm5SY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYmk4cUtseHVJQ29nVlhObElHbHVkbUZ5YVdGdWRDZ3BJSFJ2SUdGemMyVnlkQ0J6ZEdGMFpTQjNhR2xqYUNCNWIzVnlJSEJ5YjJkeVlXMGdZWE56ZFcxbGN5QjBieUJpWlNCMGNuVmxMbHh1SUNwY2JpQXFJRkJ5YjNacFpHVWdjM0J5YVc1MFppMXpkSGxzWlNCbWIzSnRZWFFnS0c5dWJIa2dKWE1nYVhNZ2MzVndjRzl5ZEdWa0tTQmhibVFnWVhKbmRXMWxiblJ6WEc0Z0tpQjBieUJ3Y205MmFXUmxJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJSGRvWVhRZ1luSnZhMlVnWVc1a0lIZG9ZWFFnZVc5MUlIZGxjbVZjYmlBcUlHVjRjR1ZqZEdsdVp5NWNiaUFxWEc0Z0tpQlVhR1VnYVc1MllYSnBZVzUwSUcxbGMzTmhaMlVnZDJsc2JDQmlaU0J6ZEhKcGNIQmxaQ0JwYmlCd2NtOWtkV04wYVc5dUxDQmlkWFFnZEdobElHbHVkbUZ5YVdGdWRGeHVJQ29nZDJsc2JDQnlaVzFoYVc0Z2RHOGdaVzV6ZFhKbElHeHZaMmxqSUdSdlpYTWdibTkwSUdScFptWmxjaUJwYmlCd2NtOWtkV04wYVc5dUxseHVJQ292WEc1Y2JtWjFibU4wYVc5dUlHbHVkbUZ5YVdGdWRDaGpiMjVrYVhScGIyNHNJR1p2Y20xaGRDd2dZU3dnWWl3Z1l5d2daQ3dnWlN3Z1ppa2dlMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR2xtSUNobWIzSnRZWFFnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHBiblpoY21saGJuUWdjbVZ4ZFdseVpYTWdZVzRnWlhKeWIzSWdiV1Z6YzJGblpTQmhjbWQxYldWdWRDY3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR2xtSUNnaFkyOXVaR2wwYVc5dUtTQjdYRzRnSUNBZ2RtRnlJR1Z5Y205eU8xeHVJQ0FnSUdsbUlDaG1iM0p0WVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnWlhKeWIzSWdQU0J1WlhjZ1JYSnliM0lvSjAxcGJtbG1hV1ZrSUdWNFkyVndkR2x2YmlCdlkyTjFjbkpsWkRzZ2RYTmxJSFJvWlNCdWIyNHRiV2x1YVdacFpXUWdaR1YySUdWdWRtbHliMjV0Wlc1MElDY2dLeUFuWm05eUlIUm9aU0JtZFd4c0lHVnljbTl5SUcxbGMzTmhaMlVnWVc1a0lHRmtaR2wwYVc5dVlXd2dhR1ZzY0daMWJDQjNZWEp1YVc1bmN5NG5LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQmJZU3dnWWl3Z1l5d2daQ3dnWlN3Z1psMDdYRzRnSUNBZ0lDQjJZWElnWVhKblNXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ1pYSnliM0lnUFNCdVpYY2dSWEp5YjNJb1ptOXliV0YwTG5KbGNHeGhZMlVvTHlWekwyY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGeVozTmJZWEpuU1c1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0I5S1NrN1hHNGdJQ0FnSUNCbGNuSnZjaTV1WVcxbElEMGdKMGx1ZG1GeWFXRnVkQ0JXYVc5c1lYUnBiMjRuTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1Z5Y205eUxtWnlZVzFsYzFSdlVHOXdJRDBnTVRzZ0x5OGdkMlVnWkc5dUozUWdZMkZ5WlNCaFltOTFkQ0JwYm5aaGNtbGhiblFuY3lCdmQyNGdabkpoYldWY2JpQWdJQ0IwYUhKdmR5Qmxjbkp2Y2p0Y2JpQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHbHVkbUZ5YVdGdWREc2lYWDA9IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzTm9kZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIE5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0Tm9kZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlNaXJyb3JcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGFuIGVudW1lcmF0aW9uIHdpdGgga2V5cyBlcXVhbCB0byB0aGVpciB2YWx1ZS5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgIHZhciBDT0xPUlMgPSBrZXlNaXJyb3Ioe2JsdWU6IG51bGwsIHJlZDogbnVsbH0pO1xuICogICB2YXIgbXlDb2xvciA9IENPTE9SUy5ibHVlO1xuICogICB2YXIgaXNDb2xvclZhbGlkID0gISFDT0xPUlNbbXlDb2xvcl07XG4gKlxuICogVGhlIGxhc3QgbGluZSBjb3VsZCBub3QgYmUgcGVyZm9ybWVkIGlmIHRoZSB2YWx1ZXMgb2YgdGhlIGdlbmVyYXRlZCBlbnVtIHdlcmVcbiAqIG5vdCBlcXVhbCB0byB0aGVpciBrZXlzLlxuICpcbiAqICAgSW5wdXQ6ICB7a2V5MTogdmFsMSwga2V5MjogdmFsMn1cbiAqICAgT3V0cHV0OiB7a2V5MToga2V5MSwga2V5Mjoga2V5Mn1cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbnZhciBrZXlNaXJyb3IgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXQgPSB7fTtcbiAgdmFyIGtleTtcbiAgIShvYmogaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkob2JqKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAna2V5TWlycm9yKC4uLik6IEFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldFtrZXldID0ga2V5O1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU1pcnJvcjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OW1ZbXB6TDJ4cFlpOXJaWGxOYVhKeWIzSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE15MHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElHdGxlVTFwY25KdmNseHVJQ29nUUhSNWNHVmphR1ZqYTNNZ2MzUmhkR2xqTFc5dWJIbGNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJwYm5aaGNtbGhiblFnUFNCeVpYRjFhWEpsS0NjdUwybHVkbUZ5YVdGdWRDY3BPMXh1WEc0dktpcGNiaUFxSUVOdmJuTjBjblZqZEhNZ1lXNGdaVzUxYldWeVlYUnBiMjRnZDJsMGFDQnJaWGx6SUdWeGRXRnNJSFJ2SUhSb1pXbHlJSFpoYkhWbExseHVJQ3BjYmlBcUlFWnZjaUJsZUdGdGNHeGxPbHh1SUNwY2JpQXFJQ0FnZG1GeUlFTlBURTlTVXlBOUlHdGxlVTFwY25KdmNpaDdZbXgxWlRvZ2JuVnNiQ3dnY21Wa09pQnVkV3hzZlNrN1hHNGdLaUFnSUhaaGNpQnRlVU52Ykc5eUlEMGdRMDlNVDFKVExtSnNkV1U3WEc0Z0tpQWdJSFpoY2lCcGMwTnZiRzl5Vm1Gc2FXUWdQU0FoSVVOUFRFOVNVMXR0ZVVOdmJHOXlYVHRjYmlBcVhHNGdLaUJVYUdVZ2JHRnpkQ0JzYVc1bElHTnZkV3hrSUc1dmRDQmlaU0J3WlhKbWIzSnRaV1FnYVdZZ2RHaGxJSFpoYkhWbGN5QnZaaUIwYUdVZ1oyVnVaWEpoZEdWa0lHVnVkVzBnZDJWeVpWeHVJQ29nYm05MElHVnhkV0ZzSUhSdklIUm9aV2x5SUd0bGVYTXVYRzRnS2x4dUlDb2dJQ0JKYm5CMWREb2dJSHRyWlhreE9pQjJZV3d4TENCclpYa3lPaUIyWVd3eWZWeHVJQ29nSUNCUGRYUndkWFE2SUh0clpYa3hPaUJyWlhreExDQnJaWGt5T2lCclpYa3lmVnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnZZbXBjYmlBcUlFQnlaWFIxY200Z2UyOWlhbVZqZEgxY2JpQXFMMXh1ZG1GeUlHdGxlVTFwY25KdmNpQTlJR1oxYm1OMGFXOXVJQ2h2WW1vcElIdGNiaUFnZG1GeUlISmxkQ0E5SUh0OU8xeHVJQ0IyWVhJZ2EyVjVPMXh1SUNBaEtHOWlhaUJwYm5OMFlXNWpaVzltSUU5aWFtVmpkQ0FtSmlBaFFYSnlZWGt1YVhOQmNuSmhlU2h2WW1vcEtTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkclpYbE5hWEp5YjNJb0xpNHVLVG9nUVhKbmRXMWxiblFnYlhWemRDQmlaU0JoYmlCdlltcGxZM1F1SnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1SUNCbWIzSWdLR3RsZVNCcGJpQnZZbW9wSUh0Y2JpQWdJQ0JwWmlBb0lXOWlhaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHJaWGtwS1NCN1hHNGdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwVzJ0bGVWMGdQU0JyWlhrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGREdGNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2EyVjVUV2x5Y205eU95SmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleU9mXG4gKi9cblxuLyoqXG4gKiBBbGxvd3MgZXh0cmFjdGlvbiBvZiBhIG1pbmlmaWVkIGtleS4gTGV0J3MgdGhlIGJ1aWxkIHN5c3RlbSBtaW5pZnkga2V5c1xuICogd2l0aG91dCBsb3NpbmcgdGhlIGFiaWxpdHkgdG8gZHluYW1pY2FsbHkgdXNlIGtleSBzdHJpbmdzIGFzIHZhbHVlc1xuICogdGhlbXNlbHZlcy4gUGFzcyBpbiBhbiBvYmplY3Qgd2l0aCBhIHNpbmdsZSBrZXkvdmFsIHBhaXIgYW5kIGl0IHdpbGwgcmV0dXJuXG4gKiB5b3UgdGhlIHN0cmluZyBrZXkgb2YgdGhhdCBzaW5nbGUgcmVjb3JkLiBTdXBwb3NlIHlvdSB3YW50IHRvIGdyYWIgdGhlXG4gKiB2YWx1ZSBmb3IgYSBrZXkgJ2NsYXNzTmFtZScgaW5zaWRlIG9mIGFuIG9iamVjdC4gS2V5L3ZhbCBtaW5pZmljYXRpb24gbWF5XG4gKiBoYXZlIGFsaWFzZWQgdGhhdCBrZXkgdG8gYmUgJ3hhMTInLiBrZXlPZih7Y2xhc3NOYW1lOiBudWxsfSkgd2lsbCByZXR1cm5cbiAqICd4YTEyJyBpbiB0aGF0IGNhc2UuIFJlc29sdmUga2V5cyB5b3Ugd2FudCB0byB1c2Ugb25jZSBhdCBzdGFydHVwIHRpbWUsIHRoZW5cbiAqIHJldXNlIHRob3NlIHJlc29sdXRpb25zLlxuICovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGtleU9mID0gZnVuY3Rpb24gKG9uZUtleU9iaikge1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBvbmVLZXlPYmopIHtcbiAgICBpZiAoIW9uZUtleU9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5T2Y7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1hcE9iamVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcHJvdmlkZWQgYGNhbGxiYWNrYCBvbmNlIGZvciBlYWNoIGVudW1lcmFibGUgb3duIHByb3BlcnR5IGluIHRoZVxuICogb2JqZWN0IGFuZCBjb25zdHJ1Y3RzIGEgbmV3IG9iamVjdCBmcm9tIHRoZSByZXN1bHRzLiBUaGUgYGNhbGxiYWNrYCBpc1xuICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqXG4gKiAgLSB0aGUgcHJvcGVydHkgdmFsdWVcbiAqICAtIHRoZSBwcm9wZXJ0eSBuYW1lXG4gKiAgLSB0aGUgb2JqZWN0IGJlaW5nIHRyYXZlcnNlZFxuICpcbiAqIFByb3BlcnRpZXMgdGhhdCBhcmUgYWRkZWQgYWZ0ZXIgdGhlIGNhbGwgdG8gYG1hcE9iamVjdGAgd2lsbCBub3QgYmUgdmlzaXRlZFxuICogYnkgYGNhbGxiYWNrYC4gSWYgdGhlIHZhbHVlcyBvZiBleGlzdGluZyBwcm9wZXJ0aWVzIGFyZSBjaGFuZ2VkLCB0aGUgdmFsdWVcbiAqIHBhc3NlZCB0byBgY2FsbGJhY2tgIHdpbGwgYmUgdGhlIHZhbHVlIGF0IHRoZSB0aW1lIGBtYXBPYmplY3RgIHZpc2l0cyB0aGVtLlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBkZWxldGVkIGJlZm9yZSBiZWluZyB2aXNpdGVkIGFyZSBub3QgdmlzaXRlZC5cbiAqXG4gKiBAZ3JlcCBmdW5jdGlvbiBvYmplY3RNYXAoKVxuICogQGdyZXAgZnVuY3Rpb24gb2JqTWFwKClcbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gY29udGV4dFxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gbWFwT2JqZWN0KG9iamVjdCwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBuYW1lKSkge1xuICAgICAgcmVzdWx0W25hbWVdID0gY2FsbGJhY2suY2FsbChjb250ZXh0LCBvYmplY3RbbmFtZV0sIG5hbWUsIG9iamVjdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwT2JqZWN0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtZW1vaXplU3RyaW5nT25seVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgcGVyZm9ybWFuY2VcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBwZXJmb3JtYW5jZTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZSB8fCB3aW5kb3cubXNQZXJmb3JtYW5jZSB8fCB3aW5kb3cud2Via2l0UGVyZm9ybWFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGVyZm9ybWFuY2UgfHwge307IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHBlcmZvcm1hbmNlTm93XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHBlcmZvcm1hbmNlID0gcmVxdWlyZSgnLi9wZXJmb3JtYW5jZScpO1xuXG52YXIgcGVyZm9ybWFuY2VOb3c7XG5cbi8qKlxuICogRGV0ZWN0IGlmIHdlIGNhbiB1c2UgYHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKWAgYW5kIGdyYWNlZnVsbHkgZmFsbGJhY2sgdG9cbiAqIGBEYXRlLm5vdygpYCBpZiBpdCBkb2Vzbid0IGV4aXN0LiBXZSBuZWVkIHRvIHN1cHBvcnQgRmlyZWZveCA8IDE1IGZvciBub3dcbiAqIGJlY2F1c2Ugb2YgRmFjZWJvb2sncyB0ZXN0aW5nIGluZnJhc3RydWN0dXJlLlxuICovXG5pZiAocGVyZm9ybWFuY2Uubm93KSB7XG4gIHBlcmZvcm1hbmNlTm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgfTtcbn0gZWxzZSB7XG4gIHBlcmZvcm1hbmNlTm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaGFsbG93RXF1YWxcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICB2YXIgYkhhc093blByb3BlcnR5ID0gaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleXNBW2ldKSB8fCBvYmpBW2tleXNBW2ldXSAhPT0gb2JqQltrZXlzQVtpXV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0b0FycmF5XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQ29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gYXJyYXlzLlxuICpcbiAqIFRoaXMgQVBJIGFzc3VtZXMgdGhlIGNhbGxlciBrbm93cyB0aGUgY29udGVudHMgb2YgdGhlIGRhdGEgdHlwZS4gRm9yIGxlc3NcbiAqIHdlbGwgZGVmaW5lZCBpbnB1dHMgdXNlIGNyZWF0ZUFycmF5RnJvbU1peGVkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufGZpbGVsaXN0fSBvYmpcbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDtcblxuICAvLyBTb21lIGJyb3dzZSBidWlsdGluIG9iamVjdHMgY2FuIHJlcG9ydCB0eXBlb2YgJ2Z1bmN0aW9uJyAoZS5nLiBOb2RlTGlzdCBpblxuICAvLyBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpKS5cbiAgISghQXJyYXkuaXNBcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogQXJyYXktbGlrZSBvYmplY3QgZXhwZWN0ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgISh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICEobGVuZ3RoID09PSAwIHx8IGxlbmd0aCAtIDEgaW4gb2JqKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAvLyBPbGQgSUUgZG9lc24ndCBnaXZlIGNvbGxlY3Rpb25zIGFjY2VzcyB0byBoYXNPd25Qcm9wZXJ0eS4gQXNzdW1lIGlucHV0c1xuICAvLyB3aXRob3V0IG1ldGhvZCB3aWxsIHRocm93IGR1cmluZyB0aGUgc2xpY2UgY2FsbCBhbmQgc2tpcCBzdHJhaWdodCB0byB0aGVcbiAgLy8gZmFsbGJhY2suXG4gIGlmIChvYmouaGFzT3duUHJvcGVydHkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSUUgPCA5IGRvZXMgbm90IHN1cHBvcnQgQXJyYXkjc2xpY2Ugb24gY29sbGVjdGlvbnMgb2JqZWN0c1xuICAgIH1cbiAgfVxuXG4gIC8vIEZhbGwgYmFjayB0byBjb3B5aW5nIGtleSBieSBrZXkuIFRoaXMgYXNzdW1lcyBhbGwga2V5cyBoYXZlIGEgdmFsdWUsXG4gIC8vIHNvIHdpbGwgbm90IHByZXNlcnZlIHNwYXJzZWx5IHBvcHVsYXRlZCBpbnB1dHMuXG4gIHZhciByZXQgPSBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuZ3RoOyBpaSsrKSB7XG4gICAgcmV0W2lpXSA9IG9ialtpaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5bVltcHpMMnhwWWk5MGIwRnljbUY1TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0IwYjBGeWNtRjVYRzRnS2lCQWRIbHdaV05vWldOcmMxeHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvSnk0dmFXNTJZWEpwWVc1MEp5azdYRzVjYmk4cUtseHVJQ29nUTI5dWRtVnlkQ0JoY25KaGVTMXNhV3RsSUc5aWFtVmpkSE1nZEc4Z1lYSnlZWGx6TGx4dUlDcGNiaUFxSUZSb2FYTWdRVkJKSUdGemMzVnRaWE1nZEdobElHTmhiR3hsY2lCcmJtOTNjeUIwYUdVZ1kyOXVkR1Z1ZEhNZ2IyWWdkR2hsSUdSaGRHRWdkSGx3WlM0Z1JtOXlJR3hsYzNOY2JpQXFJSGRsYkd3Z1pHVm1hVzVsWkNCcGJuQjFkSE1nZFhObElHTnlaV0YwWlVGeWNtRjVSbkp2YlUxcGVHVmtMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZHWjFibU4wYVc5dWZHWnBiR1ZzYVhOMGZTQnZZbXBjYmlBcUlFQnlaWFIxY200Z2UyRnljbUY1ZlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUIwYjBGeWNtRjVLRzlpYWlrZ2UxeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ2IySnFMbXhsYm1kMGFEdGNibHh1SUNBdkx5QlRiMjFsSUdKeWIzZHpaU0JpZFdsc2RHbHVJRzlpYW1WamRITWdZMkZ1SUhKbGNHOXlkQ0IwZVhCbGIyWWdKMloxYm1OMGFXOXVKeUFvWlM1bkxpQk9iMlJsVEdsemRDQnBibHh1SUNBdkx5QnZiR1FnZG1WeWMybHZibk1nYjJZZ1UyRm1ZWEpwS1M1Y2JpQWdJU2doUVhKeVlYa3VhWE5CY25KaGVTaHZZbW9wSUNZbUlDaDBlWEJsYjJZZ2IySnFJRDA5UFNBbmIySnFaV04wSnlCOGZDQjBlWEJsYjJZZ2IySnFJRDA5UFNBblpuVnVZM1JwYjI0bktTa2dQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBbmRHOUJjbkpoZVRvZ1FYSnlZWGt0YkdsclpTQnZZbXBsWTNRZ1pYaHdaV04wWldRbktTQTZJR2x1ZG1GeWFXRnVkQ2htWVd4elpTa2dPaUIxYm1SbFptbHVaV1E3WEc1Y2JpQWdJU2gwZVhCbGIyWWdiR1Z1WjNSb0lEMDlQU0FuYm5WdFltVnlKeWtnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5kRzlCY25KaGVUb2dUMkpxWldOMElHNWxaV1J6SUdFZ2JHVnVaM1JvSUhCeWIzQmxjblI1SnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1WEc0Z0lDRW9iR1Z1WjNSb0lEMDlQU0F3SUh4OElHeGxibWQwYUNBdElERWdhVzRnYjJKcUtTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkMGIwRnljbUY1T2lCUFltcGxZM1FnYzJodmRXeGtJR2hoZG1VZ2EyVjVjeUJtYjNJZ2FXNWthV05sY3ljcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQXZMeUJQYkdRZ1NVVWdaRzlsYzI0bmRDQm5hWFpsSUdOdmJHeGxZM1JwYjI1eklHRmpZMlZ6Y3lCMGJ5Qm9ZWE5QZDI1UWNtOXdaWEowZVM0Z1FYTnpkVzFsSUdsdWNIVjBjMXh1SUNBdkx5QjNhWFJvYjNWMElHMWxkR2h2WkNCM2FXeHNJSFJvY205M0lHUjFjbWx1WnlCMGFHVWdjMnhwWTJVZ1kyRnNiQ0JoYm1RZ2MydHBjQ0J6ZEhKaGFXZG9kQ0IwYnlCMGFHVmNiaUFnTHk4Z1ptRnNiR0poWTJzdVhHNGdJR2xtSUNodlltb3VhR0Z6VDNkdVVISnZjR1Z5ZEhrcElIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHOWlhaWs3WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnTHk4Z1NVVWdQQ0E1SUdSdlpYTWdibTkwSUhOMWNIQnZjblFnUVhKeVlYa2pjMnhwWTJVZ2IyNGdZMjlzYkdWamRHbHZibk1nYjJKcVpXTjBjMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2SUVaaGJHd2dZbUZqYXlCMGJ5QmpiM0I1YVc1bklHdGxlU0JpZVNCclpYa3VJRlJvYVhNZ1lYTnpkVzFsY3lCaGJHd2dhMlY1Y3lCb1lYWmxJR0VnZG1Gc2RXVXNYRzRnSUM4dklITnZJSGRwYkd3Z2JtOTBJSEJ5WlhObGNuWmxJSE53WVhKelpXeDVJSEJ2Y0hWc1lYUmxaQ0JwYm5CMWRITXVYRzRnSUhaaGNpQnlaWFFnUFNCQmNuSmhlU2hzWlc1bmRHZ3BPMXh1SUNCbWIzSWdLSFpoY2lCcGFTQTlJREE3SUdscElEd2diR1Z1WjNSb095QnBhU3NyS1NCN1hHNGdJQ0FnY21WMFcybHBYU0E5SUc5aWFsdHBhVjA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsZER0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IwYjBGeWNtRjVPeUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgd2FybmluZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkge1xuICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgQ29tcG9zaXRlQ29tcG9uZW50IHByb3B0eXBlIGNoZWNrLlxuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCAoeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OW1ZbXB6TDJ4cFlpOTNZWEp1YVc1bkxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRRdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCM1lYSnVhVzVuWEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1pXMXdkSGxHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlpXMXdkSGxHZFc1amRHbHZiaWNwTzF4dVhHNHZLaXBjYmlBcUlGTnBiV2xzWVhJZ2RHOGdhVzUyWVhKcFlXNTBJR0oxZENCdmJteDVJR3h2WjNNZ1lTQjNZWEp1YVc1bklHbG1JSFJvWlNCamIyNWthWFJwYjI0Z2FYTWdibTkwSUcxbGRDNWNiaUFxSUZSb2FYTWdZMkZ1SUdKbElIVnpaV1FnZEc4Z2JHOW5JR2x6YzNWbGN5QnBiaUJrWlhabGJHOXdiV1Z1ZENCbGJuWnBjbTl1YldWdWRITWdhVzRnWTNKcGRHbGpZV3hjYmlBcUlIQmhkR2h6TGlCU1pXMXZkbWx1WnlCMGFHVWdiRzluWjJsdVp5QmpiMlJsSUdadmNpQndjbTlrZFdOMGFXOXVJR1Z1ZG1seWIyNXRaVzUwY3lCM2FXeHNJR3RsWlhBZ2RHaGxYRzRnS2lCellXMWxJR3h2WjJsaklHRnVaQ0JtYjJ4c2IzY2dkR2hsSUhOaGJXVWdZMjlrWlNCd1lYUm9jeTVjYmlBcUwxeHVYRzUyWVhJZ2QyRnlibWx1WnlBOUlHVnRjSFI1Um5WdVkzUnBiMjQ3WEc1Y2JtbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJSGRoY201cGJtY2dQU0JtZFc1amRHbHZiaUFvWTI5dVpHbDBhVzl1TENCbWIzSnRZWFFwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJmYkdWdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDd2dZWEpuY3lBOUlFRnljbUY1S0Y5c1pXNGdQaUF5SUQ4Z1gyeGxiaUF0SURJZ09pQXdLU3dnWDJ0bGVTQTlJREk3SUY5clpYa2dQQ0JmYkdWdU95QmZhMlY1S3lzcElIdGNiaUFnSUNBZ0lHRnlaM05iWDJ0bGVTQXRJREpkSUQwZ1lYSm5kVzFsYm5SelcxOXJaWGxkTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNobWIzSnRZWFFnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGdkMkZ5Ym1sdVp5aGpiMjVrYVhScGIyNHNJR1p2Y20xaGRDd2dMaTR1WVhKbmN5bGdJSEpsY1hWcGNtVnpJR0VnZDJGeWJtbHVaeUFuSUNzZ0oyMWxjM05oWjJVZ1lYSm5kVzFsYm5RbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9abTl5YldGMExtbHVaR1Y0VDJZb0owWmhhV3hsWkNCRGIyMXdiM05wZEdVZ2NISnZjRlI1Y0dVNklDY3BJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200N0lDOHZJRWxuYm05eVpTQkRiMjF3YjNOcGRHVkRiMjF3YjI1bGJuUWdjSEp2Y0hSNWNHVWdZMmhsWTJzdVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tDRmpiMjVrYVhScGIyNHBJSHRjYmlBZ0lDQWdJSFpoY2lCaGNtZEpibVJsZUNBOUlEQTdYRzRnSUNBZ0lDQjJZWElnYldWemMyRm5aU0E5SUNkWFlYSnVhVzVuT2lBbklDc2dabTl5YldGMExuSmxjR3hoWTJVb0x5VnpMMmNzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRnlaM05iWVhKblNXNWtaWGdySzEwN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZMjl1YzI5c1pTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQzh2SUMwdExTQlhaV3hqYjIxbElIUnZJR1JsWW5WbloybHVaeUJTWldGamRDQXRMUzFjYmlBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJsY25KdmNpQjNZWE1nZEdoeWIzZHVJR0Z6SUdFZ1kyOXVkbVZ1YVdWdVkyVWdjMjhnZEdoaGRDQjViM1VnWTJGdUlIVnpaU0IwYUdseklITjBZV05yWEc0Z0lDQWdJQ0FnSUM4dklIUnZJR1pwYm1RZ2RHaGxJR05oYkd4emFYUmxJSFJvWVhRZ1kyRjFjMlZrSUhSb2FYTWdkMkZ5Ym1sdVp5QjBieUJtYVhKbExseHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNoNEtTQjdmVnh1SUNBZ0lIMWNiaUFnZlR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IzWVhKdWFXNW5PeUpkZlE9PSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gdHJ1ZTtcbiAgICB2YXIgY3VycmVudFF1ZXVlO1xuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICAgICAgICBjdXJyZW50UXVldWVbaV0oKTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG59XG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHF1ZXVlLnB1c2goZnVuKTtcbiAgICBpZiAoIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENTU1RyYW5zaXRpb25Hcm91cCcpOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RET00nKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBBdXRvRm9jdXNVdGlsc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG5cbnZhciBmaW5kRE9NTm9kZSA9IHJlcXVpcmUoJy4vZmluZERPTU5vZGUnKTtcbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKCdmYmpzL2xpYi9mb2N1c05vZGUnKTtcblxudmFyIE1peGluID0ge1xuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgZm9jdXNOb2RlKGZpbmRET01Ob2RlKHRoaXMpKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBBdXRvRm9jdXNVdGlscyA9IHtcbiAgTWl4aW46IE1peGluLFxuXG4gIGZvY3VzRE9NQ29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgZm9jdXNOb2RlKFJlYWN0TW91bnQuZ2V0Tm9kZSh0aGlzLl9yb290Tm9kZUlEKSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b0ZvY3VzVXRpbHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1IEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSA9IHJlcXVpcmUoJy4vRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlJyk7XG52YXIgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljQ29tcG9zaXRpb25FdmVudCcpO1xudmFyIFN5bnRoZXRpY0lucHV0RXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0lucHV0RXZlbnQnKTtcblxudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcblxudmFyIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXTsgLy8gVGFiLCBSZXR1cm4sIEVzYywgU3BhY2VcbnZhciBTVEFSVF9LRVlDT0RFID0gMjI5O1xuXG52YXIgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnQ29tcG9zaXRpb25FdmVudCcgaW4gd2luZG93O1xuXG52YXIgZG9jdW1lbnRNb2RlID0gbnVsbDtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHtcbiAgZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xufVxuXG4vLyBXZWJraXQgb2ZmZXJzIGEgdmVyeSB1c2VmdWwgYHRleHRJbnB1dGAgZXZlbnQgdGhhdCBjYW4gYmUgdXNlZCB0b1xuLy8gZGlyZWN0bHkgcmVwcmVzZW50IGBiZWZvcmVJbnB1dGAuIFRoZSBJRSBgdGV4dGlucHV0YCBldmVudCBpcyBub3QgYXNcbi8vIHVzZWZ1bCwgc28gd2UgZG9uJ3QgdXNlIGl0LlxudmFyIGNhblVzZVRleHRJbnB1dEV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdUZXh0RXZlbnQnIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlICYmICFpc1ByZXN0bygpO1xuXG4vLyBJbiBJRTkrLCB3ZSBoYXZlIGFjY2VzcyB0byBjb21wb3NpdGlvbiBldmVudHMsIGJ1dCB0aGUgZGF0YSBzdXBwbGllZFxuLy8gYnkgdGhlIG5hdGl2ZSBjb21wb3NpdGlvbmVuZCBldmVudCBtYXkgYmUgaW5jb3JyZWN0LiBKYXBhbmVzZSBpZGVvZ3JhcGhpY1xuLy8gc3BhY2VzLCBmb3IgaW5zdGFuY2UgKFxcdTMwMDApIGFyZSBub3QgcmVjb3JkZWQgY29ycmVjdGx5LlxudmFyIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fCBkb2N1bWVudE1vZGUgJiYgZG9jdW1lbnRNb2RlID4gOCAmJiBkb2N1bWVudE1vZGUgPD0gMTEpO1xuXG4vKipcbiAqIE9wZXJhIDw9IDEyIGluY2x1ZGVzIFRleHRFdmVudCBpbiB3aW5kb3csIGJ1dCBkb2VzIG5vdCBmaXJlXG4gKiB0ZXh0IGlucHV0IGV2ZW50cy4gUmVseSBvbiBrZXlwcmVzcyBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBpc1ByZXN0bygpIHtcbiAgdmFyIG9wZXJhID0gd2luZG93Lm9wZXJhO1xuICByZXR1cm4gdHlwZW9mIG9wZXJhID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb3BlcmEudmVyc2lvbiA9PT0gJ2Z1bmN0aW9uJyAmJiBwYXJzZUludChvcGVyYS52ZXJzaW9uKCksIDEwKSA8PSAxMjtcbn1cblxudmFyIFNQQUNFQkFSX0NPREUgPSAzMjtcbnZhciBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZShTUEFDRUJBUl9DT0RFKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG4vLyBFdmVudHMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgbmFtZXMuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmVmb3JlSW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkJlZm9yZUlucHV0OiBudWxsIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25CZWZvcmVJbnB1dENhcHR1cmU6IG51bGwgfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsIHRvcExldmVsVHlwZXMudG9wVGV4dElucHV0LCB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlXVxuICB9LFxuICBjb21wb3NpdGlvbkVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ29tcG9zaXRpb25FbmQ6IG51bGwgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZTogbnVsbCB9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kLCB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsIHRvcExldmVsVHlwZXMudG9wS2V5VXAsIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duXVxuICB9LFxuICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db21wb3NpdGlvblN0YXJ0OiBudWxsIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZTogbnVsbCB9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25dXG4gIH0sXG4gIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db21wb3NpdGlvblVwZGF0ZTogbnVsbCB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlOiBudWxsIH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcEJsdXIsIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25VcGRhdGUsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25dXG4gIH1cbn07XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcbiAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpO1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZTpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgYmVzdC1ndWVzcyBtb2RlbCB0aGluayB0aGlzIGV2ZW50IHNpZ25pZmllcyB0aGF0XG4gKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93biAmJiBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFO1xufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIG1vZGUgdGhpbmsgdGhhdCB0aGlzIGV2ZW50IGlzIHRoZSBlbmQgb2YgY29tcG9zaXRpb24/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgIC8vIENvbW1hbmQga2V5cyBpbnNlcnQgb3IgY2xlYXIgSU1FIGlucHV0LlxuICAgICAgcmV0dXJuIEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMTtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIC8vIEV4cGVjdCBJTUUga2V5Q29kZSBvbiBlYWNoIGtleWRvd24uIElmIHdlIGdldCBhbnkgb3RoZXJcbiAgICAgIC8vIGNvZGUgd2UgbXVzdCBoYXZlIGV4aXRlZCBlYXJsaWVyLlxuICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREU7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdvb2dsZSBJbnB1dCBUb29scyBwcm92aWRlcyBjb21wb3NpdGlvbiBkYXRhIHZpYSBhIEN1c3RvbUV2ZW50LFxuICogd2l0aCB0aGUgYGRhdGFgIHByb3BlcnR5IHBvcHVsYXRlZCBpbiB0aGUgYGRldGFpbGAgb2JqZWN0LiBJZiB0aGlzXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIGV2ZW50IG9iamVjdCwgdXNlIGl0LiBJZiBub3QsIHRoaXMgaXMgYSBwbGFpblxuICogY29tcG9zaXRpb24gZXZlbnQgYW5kIHdlIGhhdmUgbm90aGluZyBzcGVjaWFsIHRvIGV4dHJhY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUcmFjayB0aGUgY3VycmVudCBJTUUgY29tcG9zaXRpb24gZmFsbGJhY2sgb2JqZWN0LCBpZiBhbnkuXG52YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGV2ZW50VHlwZTtcbiAgdmFyIGZhbGxiYWNrRGF0YTtcblxuICBpZiAoY2FuVXNlQ29tcG9zaXRpb25FdmVudCkge1xuICAgIGV2ZW50VHlwZSA9IGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSk7XG4gIH0gZWxzZSBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICB9XG5cbiAgaWYgKCFldmVudFR5cGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSkge1xuICAgIC8vIFRoZSBjdXJyZW50IGNvbXBvc2l0aW9uIGlzIHN0b3JlZCBzdGF0aWNhbGx5IGFuZCBtdXN0IG5vdCBiZVxuICAgIC8vIG92ZXJ3cml0dGVuIHdoaWxlIGNvbXBvc2l0aW9uIGNvbnRpbnVlcy5cbiAgICBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbiAmJiBldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydCkge1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmdldFBvb2xlZCh0b3BMZXZlbFRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQpIHtcbiAgICAgIGlmIChjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICAgICAgZmFsbGJhY2tEYXRhID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LmdldFBvb2xlZChldmVudFR5cGUsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgaWYgKGZhbGxiYWNrRGF0YSkge1xuICAgIC8vIEluamVjdCBkYXRhIGdlbmVyYXRlZCBmcm9tIGZhbGxiYWNrIHBhdGggaW50byB0aGUgc3ludGhldGljIGV2ZW50LlxuICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgcHJvcGVydHkgb2YgbmF0aXZlIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UuXG4gICAgZXZlbnQuZGF0YSA9IGZhbGxiYWNrRGF0YTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VzdG9tRGF0YSA9IGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGlmIChjdXN0b21EYXRhICE9PSBudWxsKSB7XG4gICAgICBldmVudC5kYXRhID0gY3VzdG9tRGF0YTtcbiAgICB9XG4gIH1cblxuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHN0cmluZyBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIC8qKlxuICAgICAgICogSWYgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50cyBhcmUgYXZhaWxhYmxlLCBvdXIgZ29hbCBpcyB0byBtYWtlXG4gICAgICAgKiB1c2Ugb2YgdGhlbS4gSG93ZXZlciwgdGhlcmUgaXMgYSBzcGVjaWFsIGNhc2U6IHRoZSBzcGFjZWJhciBrZXkuXG4gICAgICAgKiBJbiBXZWJraXQsIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBhIHNwYWNlYmFyIGB0ZXh0SW5wdXRgIGV2ZW50XG4gICAgICAgKiBjYW5jZWxzIGNoYXJhY3RlciBpbnNlcnRpb24sIGJ1dCBpdCAqYWxzbyogY2F1c2VzIHRoZSBicm93c2VyXG4gICAgICAgKiB0byBmYWxsIGJhY2sgdG8gaXRzIGRlZmF1bHQgc3BhY2ViYXIgYmVoYXZpb3Igb2Ygc2Nyb2xsaW5nIHRoZVxuICAgICAgICogcGFnZS5cbiAgICAgICAqXG4gICAgICAgKiBUcmFja2luZyBhdDpcbiAgICAgICAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNTUxMDNcbiAgICAgICAqXG4gICAgICAgKiBUbyBhdm9pZCB0aGlzIGlzc3VlLCB1c2UgdGhlIGtleXByZXNzIGV2ZW50IGFzIGlmIG5vIGB0ZXh0SW5wdXRgXG4gICAgICAgKiBldmVudCBpcyBhdmFpbGFibGUuXG4gICAgICAgKi9cbiAgICAgIHZhciB3aGljaCA9IG5hdGl2ZUV2ZW50LndoaWNoO1xuICAgICAgaWYgKHdoaWNoICE9PSBTUEFDRUJBUl9DT0RFKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gdHJ1ZTtcbiAgICAgIHJldHVybiBTUEFDRUJBUl9DSEFSO1xuXG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dDpcbiAgICAgIC8vIFJlY29yZCB0aGUgY2hhcmFjdGVycyB0byBiZSBhZGRlZCB0byB0aGUgRE9NLlxuICAgICAgdmFyIGNoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTtcblxuICAgICAgLy8gSWYgaXQncyBhIHNwYWNlYmFyIGNoYXJhY3RlciwgYXNzdW1lIHRoYXQgd2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWRcbiAgICAgIC8vIGl0IGF0IHRoZSBrZXlwcmVzcyBsZXZlbCBhbmQgYmFpbCBpbW1lZGlhdGVseS4gQW5kcm9pZCBDaHJvbWVcbiAgICAgIC8vIGRvZXNuJ3QgZ2l2ZSB1cyBrZXljb2Rlcywgc28gd2UgbmVlZCB0byBibGFja2xpc3QgaXQuXG4gICAgICBpZiAoY2hhcnMgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoYXJzO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEZvciBvdGhlciBuYXRpdmUgZXZlbnQgdHlwZXMsIGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEZvciBicm93c2VycyB0aGF0IGRvIG5vdCBwcm92aWRlIHRoZSBgdGV4dElucHV0YCBldmVudCwgZXh0cmFjdCB0aGVcbiAqIGFwcHJvcHJpYXRlIHN0cmluZyB0byB1c2UgZm9yIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGZhbGxiYWNrIHN0cmluZyBmb3IgdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGNvbXBvc2luZyAoSU1FKSBhbmQgdXNpbmcgYSBmYWxsYmFjayB0byBkbyBzbyxcbiAgLy8gdHJ5IHRvIGV4dHJhY3QgdGhlIGNvbXBvc2VkIGNoYXJhY3RlcnMgZnJvbSB0aGUgZmFsbGJhY2sgb2JqZWN0LlxuICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCB8fCBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIHZhciBjaGFycyA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucmVsZWFzZShjdXJyZW50Q29tcG9zaXRpb24pO1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHJldHVybiBjaGFycztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIC8qKlxuICAgICAgICogQXMgb2YgdjI3LCBGaXJlZm94IG1heSBmaXJlIGtleXByZXNzIGV2ZW50cyBldmVuIHdoZW4gbm8gY2hhcmFjdGVyXG4gICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyBgMGAuIEFycm93IGtleXMsIEVzYyBrZXksIGV0Yy5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAqICAgRXg6ICdBbHRHciArIGRgIGluIFBvbGlzaC4gVGhlcmUgaXMgbm8gbW9kaWZpZWQgY2hhcmFjdGVyIGZvclxuICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICogICBObyBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgKiAgIGJlaW5nIHVzZWQuIEV4OiBgQ21kK0NgLiBObyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQsIGFuZCBub1xuICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKi9cbiAgICAgIGlmIChuYXRpdmVFdmVudC53aGljaCAmJiAhaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA/IG51bGwgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEV4dHJhY3QgYSBTeW50aGV0aWNJbnB1dEV2ZW50IGZvciBgYmVmb3JlSW5wdXRgLCBiYXNlZCBvbiBlaXRoZXIgbmF0aXZlXG4gKiBgdGV4dElucHV0YCBvciBmYWxsYmFjayBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGNoYXJzO1xuXG4gIGlmIChjYW5Vc2VUZXh0SW5wdXRFdmVudCkge1xuICAgIGNoYXJzID0gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBjaGFycyA9IGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgfVxuXG4gIC8vIElmIG5vIGNoYXJhY3RlcnMgYXJlIGJlaW5nIGluc2VydGVkLCBubyBCZWZvcmVJbnB1dCBldmVudCBzaG91bGRcbiAgLy8gYmUgZmlyZWQuXG4gIGlmICghY2hhcnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0lucHV0RXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuYmVmb3JlSW5wdXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgZXZlbnQuZGF0YSA9IGNoYXJzO1xuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBvbkJlZm9yZUlucHV0YCBldmVudCB0byBtYXRjaFxuICogaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDUvI2V2ZW50cy1pbnB1dGV2ZW50cy5cbiAqXG4gKiBUaGlzIGV2ZW50IHBsdWdpbiBpcyBiYXNlZCBvbiB0aGUgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50XG4gKiBhdmFpbGFibGUgaW4gQ2hyb21lLCBTYWZhcmksIE9wZXJhLCBhbmQgSUUuIFRoaXMgZXZlbnQgZmlyZXMgYWZ0ZXJcbiAqIGBvbktleVByZXNzYCBhbmQgYG9uQ29tcG9zaXRpb25FbmRgLCBidXQgYmVmb3JlIGBvbklucHV0YC5cbiAqXG4gKiBgYmVmb3JlSW5wdXRgIGlzIHNwZWMnZCBidXQgbm90IGltcGxlbWVudGVkIGluIGFueSBicm93c2VycywgYW5kXG4gKiB0aGUgYGlucHV0YCBldmVudCBkb2VzIG5vdCBwcm92aWRlIGFueSB1c2VmdWwgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBoYXNcbiAqIGFjdHVhbGx5IGJlZW4gYWRkZWQsIGNvbnRyYXJ5IHRvIHRoZSBzcGVjLiBUaHVzLCBgdGV4dElucHV0YCBpcyB0aGUgYmVzdFxuICogYXZhaWxhYmxlIGV2ZW50IHRvIGlkZW50aWZ5IHRoZSBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSBhY3R1YWxseSBiZWVuIGluc2VydGVkXG4gKiBpbnRvIHRoZSB0YXJnZXQgbm9kZS5cbiAqXG4gKiBUaGlzIHBsdWdpbiBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBlbWl0dGluZyBgY29tcG9zaXRpb25gIGV2ZW50cywgdGh1c1xuICogYWxsb3dpbmcgdXMgdG8gc2hhcmUgY29tcG9zaXRpb24gZmFsbGJhY2sgY29kZSBmb3IgYm90aCBgYmVmb3JlSW5wdXRgIGFuZFxuICogYGNvbXBvc2l0aW9uYCBldmVudCB0eXBlcy5cbiAqL1xudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFtleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpLCBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpXTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDU1NQcm9wZXJ0eVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDU1MgcHJvcGVydGllcyB3aGljaCBhY2NlcHQgbnVtYmVycyBidXQgYXJlIG5vdCBpbiB1bml0cyBvZiBcInB4XCIuXG4gKi9cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBib3hPcmRpbmFsR3JvdXA6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgc3RvcE9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IHRydWUsXG4gIHN0cm9rZU9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZVdpZHRoOiB0cnVlXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggdmVuZG9yLXNwZWNpZmljIHByZWZpeCwgZWc6IFdlYmtpdFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBzdHlsZSBuYW1lLCBlZzogdHJhbnNpdGlvbkR1cmF0aW9uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHN0eWxlIG5hbWUgcHJlZml4ZWQgd2l0aCBgcHJlZml4YCwgcHJvcGVybHkgY2FtZWxDYXNlZCwgZWc6XG4gKiBXZWJraXRUcmFuc2l0aW9uRHVyYXRpb25cbiAqL1xuZnVuY3Rpb24gcHJlZml4S2V5KHByZWZpeCwga2V5KSB7XG4gIHJldHVybiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgc3R5bGUgbmFtZXMgdGhhdCBtYXkgY29tZSBwYXNzZWQgaW4gcHJlZml4ZWQgYnkgYWRkaW5nIHBlcm11dGF0aW9uc1xuICogb2YgdmVuZG9yIHByZWZpeGVzLlxuICovXG52YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdtcycsICdNb3onLCAnTyddO1xuXG4vLyBVc2luZyBPYmplY3Qua2V5cyBoZXJlLCBvciBlbHNlIHRoZSB2YW5pbGxhIGZvci1pbiBsb29wIG1ha2VzIElFOCBnbyBpbnRvIGFuXG4vLyBpbmZpbml0ZSBsb29wLCBiZWNhdXNlIGl0IGl0ZXJhdGVzIG92ZXIgdGhlIG5ld2x5IGFkZGVkIHByb3BzIHRvby5cbk9iamVjdC5rZXlzKGlzVW5pdGxlc3NOdW1iZXIpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgaXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSBpc1VuaXRsZXNzTnVtYmVyW3Byb3BdO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIE1vc3Qgc3R5bGUgcHJvcGVydGllcyBjYW4gYmUgdW5zZXQgYnkgZG9pbmcgLnN0eWxlW3Byb3BdID0gJycgYnV0IElFOFxuICogZG9lc24ndCBsaWtlIGRvaW5nIHRoYXQgd2l0aCBzaG9ydGhhbmQgcHJvcGVydGllcyBzbyBmb3IgdGhlIHByb3BlcnRpZXMgdGhhdFxuICogSUU4IGJyZWFrcyBvbiwgd2hpY2ggYXJlIGxpc3RlZCBoZXJlLCB3ZSBpbnN0ZWFkIHVuc2V0IGVhY2ggb2YgdGhlXG4gKiBpbmRpdmlkdWFsIHByb3BlcnRpZXMuIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM4NS5cbiAqIFRoZSA0LXZhbHVlICdjbG9jaycgcHJvcGVydGllcyBsaWtlIG1hcmdpbiwgcGFkZGluZywgYm9yZGVyLXdpZHRoIHNlZW0gdG9cbiAqIGJlaGF2ZSB3aXRob3V0IGFueSBwcm9ibGVtcy4gQ3VyaW91c2x5LCBsaXN0LXN0eWxlIHdvcmtzIHRvbyB3aXRob3V0IGFueVxuICogc3BlY2lhbCBwcm9kZGluZy5cbiAqL1xudmFyIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucyA9IHtcbiAgYmFja2dyb3VuZDoge1xuICAgIGJhY2tncm91bmRBdHRhY2htZW50OiB0cnVlLFxuICAgIGJhY2tncm91bmRDb2xvcjogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IHRydWUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25ZOiB0cnVlLFxuICAgIGJhY2tncm91bmRSZXBlYXQ6IHRydWVcbiAgfSxcbiAgYmFja2dyb3VuZFBvc2l0aW9uOiB7XG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25ZOiB0cnVlXG4gIH0sXG4gIGJvcmRlcjoge1xuICAgIGJvcmRlcldpZHRoOiB0cnVlLFxuICAgIGJvcmRlclN0eWxlOiB0cnVlLFxuICAgIGJvcmRlckNvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlckJvdHRvbToge1xuICAgIGJvcmRlckJvdHRvbVdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckJvdHRvbVN0eWxlOiB0cnVlLFxuICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlckxlZnQ6IHtcbiAgICBib3JkZXJMZWZ0V2lkdGg6IHRydWUsXG4gICAgYm9yZGVyTGVmdFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlckxlZnRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJSaWdodDoge1xuICAgIGJvcmRlclJpZ2h0V2lkdGg6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJSaWdodENvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlclRvcDoge1xuICAgIGJvcmRlclRvcFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclRvcFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlclRvcENvbG9yOiB0cnVlXG4gIH0sXG4gIGZvbnQ6IHtcbiAgICBmb250U3R5bGU6IHRydWUsXG4gICAgZm9udFZhcmlhbnQ6IHRydWUsXG4gICAgZm9udFdlaWdodDogdHJ1ZSxcbiAgICBmb250U2l6ZTogdHJ1ZSxcbiAgICBsaW5lSGVpZ2h0OiB0cnVlLFxuICAgIGZvbnRGYW1pbHk6IHRydWVcbiAgfSxcbiAgb3V0bGluZToge1xuICAgIG91dGxpbmVXaWR0aDogdHJ1ZSxcbiAgICBvdXRsaW5lU3R5bGU6IHRydWUsXG4gICAgb3V0bGluZUNvbG9yOiB0cnVlXG4gIH1cbn07XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHtcbiAgaXNVbml0bGVzc051bWJlcjogaXNVbml0bGVzc051bWJlcixcbiAgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zOiBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHk7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDU1NQcm9wZXJ0eU9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5Jyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG5cbnZhciBjYW1lbGl6ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2ZianMvbGliL2NhbWVsaXplU3R5bGVOYW1lJyk7XG52YXIgZGFuZ2Vyb3VzU3R5bGVWYWx1ZSA9IHJlcXVpcmUoJy4vZGFuZ2Vyb3VzU3R5bGVWYWx1ZScpO1xudmFyIGh5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2ZianMvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZScpO1xudmFyIG1lbW9pemVTdHJpbmdPbmx5ID0gcmVxdWlyZSgnZmJqcy9saWIvbWVtb2l6ZVN0cmluZ09ubHknKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IG1lbW9pemVTdHJpbmdPbmx5KGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHlsZU5hbWUpO1xufSk7XG5cbnZhciBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyA9IGZhbHNlO1xudmFyIHN0eWxlRmxvYXRBY2Nlc3NvciA9ICdjc3NGbG9hdCc7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHZhciB0ZW1wU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgdHJ5IHtcbiAgICAvLyBJRTggdGhyb3dzIFwiSW52YWxpZCBhcmd1bWVudC5cIiBpZiByZXNldHRpbmcgc2hvcnRoYW5kIHN0eWxlIHByb3BlcnRpZXMuXG4gICAgdGVtcFN0eWxlLmZvbnQgPSAnJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhc1Nob3J0aGFuZFByb3BlcnR5QnVnID0gdHJ1ZTtcbiAgfVxuICAvLyBJRTggb25seSBzdXBwb3J0cyBhY2Nlc3NpbmcgY3NzRmxvYXQgKHN0YW5kYXJkKSBhcyBzdHlsZUZsb2F0XG4gIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0eWxlRmxvYXRBY2Nlc3NvciA9ICdzdHlsZUZsb2F0JztcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyAnbXNUcmFuc2Zvcm0nIGlzIGNvcnJlY3QsIGJ1dCB0aGUgb3RoZXIgcHJlZml4ZXMgc2hvdWxkIGJlIGNhcGl0YWxpemVkXG4gIHZhciBiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4gPSAvXig/OndlYmtpdHxtb3p8bylbQS1aXS87XG5cbiAgLy8gc3R5bGUgdmFsdWVzIHNob3VsZG4ndCBjb250YWluIGEgc2VtaWNvbG9uXG4gIHZhciBiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4gPSAvO1xccyokLztcblxuICB2YXIgd2FybmVkU3R5bGVOYW1lcyA9IHt9O1xuICB2YXIgd2FybmVkU3R5bGVWYWx1ZXMgPSB7fTtcblxuICB2YXIgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1Vuc3VwcG9ydGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JywgbmFtZSwgY2FtZWxpemVTdHlsZU5hbWUobmFtZSkpIDogdW5kZWZpbmVkO1xuICB9O1xuXG4gIHZhciB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1Vuc3VwcG9ydGVkIHZlbmRvci1wcmVmaXhlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsIG5hbWUsIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpKSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlVmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnU3R5bGUgcHJvcGVydHkgdmFsdWVzIHNob3VsZG5cXCd0IGNvbnRhaW4gYSBzZW1pY29sb24uICcgKyAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4nLCBuYW1lLCB2YWx1ZS5yZXBsYWNlKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiwgJycpKSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgdmFyIHdhcm5WYWxpZFN0eWxlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKG5hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuLnRlc3QobmFtZSkpIHtcbiAgICAgIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uKG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIENTUyBwcm9wZXJ0aWVzLlxuICovXG52YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGEgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIGZvciB1c2UgYXMgaW5saW5lIHN0eWxlczpcbiAgICpcbiAgICogICA+IGNyZWF0ZU1hcmt1cEZvclN0eWxlcyh7d2lkdGg6ICcyMDBweCcsIGhlaWdodDogMH0pXG4gICAqICAgXCJ3aWR0aDoyMDBweDtoZWlnaHQ6MDtcIlxuICAgKlxuICAgKiBVbmRlZmluZWQgdmFsdWVzIGFyZSBpZ25vcmVkIHNvIHRoYXQgZGVjbGFyYXRpdmUgcHJvZ3JhbW1pbmcgaXMgZWFzaWVyLlxuICAgKiBUaGUgcmVzdWx0IHNob3VsZCBiZSBIVE1MLWVzY2FwZWQgYmVmb3JlIGluc2VydGlvbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvclN0eWxlczogZnVuY3Rpb24gKHN0eWxlcykge1xuICAgIHZhciBzZXJpYWxpemVkID0gJyc7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXJpYWxpemVkICs9IHByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6JztcbiAgICAgICAgc2VyaWFsaXplZCArPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSkgKyAnOyc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkIHx8IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBtdWx0aXBsZSBzdHlsZXMgb24gYSBub2RlLiAgSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQgYXNcbiAgICogJycgKGVtcHR5IHN0cmluZyksIHRoZSBjb3JyZXNwb25kaW5nIHN0eWxlIHByb3BlcnR5IHdpbGwgYmUgdW5zZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqL1xuICBzZXRWYWx1ZUZvclN0eWxlczogZnVuY3Rpb24gKG5vZGUsIHN0eWxlcykge1xuICAgIHZhciBzdHlsZSA9IG5vZGUuc3R5bGU7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5WYWxpZFN0eWxlKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0pO1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlVmFsdWUgPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0pO1xuICAgICAgaWYgKHN0eWxlTmFtZSA9PT0gJ2Zsb2F0Jykge1xuICAgICAgICBzdHlsZU5hbWUgPSBzdHlsZUZsb2F0QWNjZXNzb3I7XG4gICAgICB9XG4gICAgICBpZiAoc3R5bGVWYWx1ZSkge1xuICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gc3R5bGVWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleHBhbnNpb24gPSBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyAmJiBDU1NQcm9wZXJ0eS5zaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbc3R5bGVOYW1lXTtcbiAgICAgICAgaWYgKGV4cGFuc2lvbikge1xuICAgICAgICAgIC8vIFNob3J0aGFuZCBwcm9wZXJ0eSB0aGF0IElFOCB3b24ndCBsaWtlIHVuc2V0dGluZywgc28gdW5zZXQgZWFjaFxuICAgICAgICAgIC8vIGNvbXBvbmVudCB0byBwbGFjYXRlIGl0XG4gICAgICAgICAgZm9yICh2YXIgaW5kaXZpZHVhbFN0eWxlTmFtZSBpbiBleHBhbnNpb24pIHtcbiAgICAgICAgICAgIHN0eWxlW2luZGl2aWR1YWxTdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoQ1NTUHJvcGVydHlPcGVyYXRpb25zLCAnQ1NTUHJvcGVydHlPcGVyYXRpb25zJywge1xuICBzZXRWYWx1ZUZvclN0eWxlczogJ3NldFZhbHVlRm9yU3R5bGVzJ1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlExTlRVSEp2Y0dWeWRIbFBjR1Z5WVhScGIyNXpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUVOVFUxQnliM0JsY25SNVQzQmxjbUYwYVc5dWMxeHVJQ29nUUhSNWNHVmphR1ZqYTNNZ2MzUmhkR2xqTFc5dWJIbGNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJEVTFOUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb0p5NHZRMU5UVUhKdmNHVnlkSGtuS1R0Y2JuWmhjaUJGZUdWamRYUnBiMjVGYm5acGNtOXViV1Z1ZENBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwwVjRaV04xZEdsdmJrVnVkbWx5YjI1dFpXNTBKeWs3WEc1MllYSWdVbVZoWTNSUVpYSm1JRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRkJsY21ZbktUdGNibHh1ZG1GeUlHTmhiV1ZzYVhwbFUzUjViR1ZPWVcxbElEMGdjbVZ4ZFdseVpTZ25abUpxY3k5c2FXSXZZMkZ0Wld4cGVtVlRkSGxzWlU1aGJXVW5LVHRjYm5aaGNpQmtZVzVuWlhKdmRYTlRkSGxzWlZaaGJIVmxJRDBnY21WeGRXbHlaU2duTGk5a1lXNW5aWEp2ZFhOVGRIbHNaVlpoYkhWbEp5azdYRzUyWVhJZ2FIbHdhR1Z1WVhSbFUzUjViR1ZPWVcxbElEMGdjbVZ4ZFdseVpTZ25abUpxY3k5c2FXSXZhSGx3YUdWdVlYUmxVM1I1YkdWT1lXMWxKeWs3WEc1MllYSWdiV1Z0YjJsNlpWTjBjbWx1WjA5dWJIa2dQU0J5WlhGMWFYSmxLQ2RtWW1wekwyeHBZaTl0WlcxdmFYcGxVM1J5YVc1blQyNXNlU2NwTzF4dWRtRnlJSGRoY201cGJtY2dQU0J5WlhGMWFYSmxLQ2RtWW1wekwyeHBZaTkzWVhKdWFXNW5KeWs3WEc1Y2JuWmhjaUJ3Y205alpYTnpVM1I1YkdWT1lXMWxJRDBnYldWdGIybDZaVk4wY21sdVowOXViSGtvWm5WdVkzUnBiMjRnS0hOMGVXeGxUbUZ0WlNrZ2UxeHVJQ0J5WlhSMWNtNGdhSGx3YUdWdVlYUmxVM1I1YkdWT1lXMWxLSE4wZVd4bFRtRnRaU2s3WEc1OUtUdGNibHh1ZG1GeUlHaGhjMU5vYjNKMGFHRnVaRkJ5YjNCbGNuUjVRblZuSUQwZ1ptRnNjMlU3WEc1MllYSWdjM1I1YkdWR2JHOWhkRUZqWTJWemMyOXlJRDBnSjJOemMwWnNiMkYwSnp0Y2JtbG1JQ2hGZUdWamRYUnBiMjVGYm5acGNtOXViV1Z1ZEM1allXNVZjMlZFVDAwcElIdGNiaUFnZG1GeUlIUmxiWEJUZEhsc1pTQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTG5OMGVXeGxPMXh1SUNCMGNua2dlMXh1SUNBZ0lDOHZJRWxGT0NCMGFISnZkM01nWENKSmJuWmhiR2xrSUdGeVozVnRaVzUwTGx3aUlHbG1JSEpsYzJWMGRHbHVaeUJ6YUc5eWRHaGhibVFnYzNSNWJHVWdjSEp2Y0dWeWRHbGxjeTVjYmlBZ0lDQjBaVzF3VTNSNWJHVXVabTl1ZENBOUlDY25PMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ2FHRnpVMmh2Y25Sb1lXNWtVSEp2Y0dWeWRIbENkV2NnUFNCMGNuVmxPMXh1SUNCOVhHNGdJQzh2SUVsRk9DQnZibXg1SUhOMWNIQnZjblJ6SUdGalkyVnpjMmx1WnlCamMzTkdiRzloZENBb2MzUmhibVJoY21RcElHRnpJSE4wZVd4bFJteHZZWFJjYmlBZ2FXWWdLR1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNXpkSGxzWlM1amMzTkdiRzloZENBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdjM1I1YkdWR2JHOWhkRUZqWTJWemMyOXlJRDBnSjNOMGVXeGxSbXh2WVhRbk8xeHVJQ0I5WEc1OVhHNWNibWxtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUM4dklDZHRjMVJ5WVc1elptOXliU2NnYVhNZ1kyOXljbVZqZEN3Z1luVjBJSFJvWlNCdmRHaGxjaUJ3Y21WbWFYaGxjeUJ6YUc5MWJHUWdZbVVnWTJGd2FYUmhiR2w2WldSY2JpQWdkbUZ5SUdKaFpGWmxibVJ2Y21Wa1UzUjViR1ZPWVcxbFVHRjBkR1Z5YmlBOUlDOWVLRDg2ZDJWaWEybDBmRzF2ZW54dktWdEJMVnBkTHp0Y2JseHVJQ0F2THlCemRIbHNaU0IyWVd4MVpYTWdjMmh2ZFd4a2JpZDBJR052Ym5SaGFXNGdZU0J6WlcxcFkyOXNiMjVjYmlBZ2RtRnlJR0poWkZOMGVXeGxWbUZzZFdWWGFYUm9VMlZ0YVdOdmJHOXVVR0YwZEdWeWJpQTlJQzg3WEZ4ektpUXZPMXh1WEc0Z0lIWmhjaUIzWVhKdVpXUlRkSGxzWlU1aGJXVnpJRDBnZTMwN1hHNGdJSFpoY2lCM1lYSnVaV1JUZEhsc1pWWmhiSFZsY3lBOUlIdDlPMXh1WEc0Z0lIWmhjaUIzWVhKdVNIbHdhR1Z1WVhSbFpGTjBlV3hsVG1GdFpTQTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdYRzRnSUNBZ2FXWWdLSGRoY201bFpGTjBlV3hsVG1GdFpYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2JtRnRaU2tnSmlZZ2QyRnlibVZrVTNSNWJHVk9ZVzFsYzF0dVlXMWxYU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIZGhjbTVsWkZOMGVXeGxUbUZ0WlhOYmJtRnRaVjBnUFNCMGNuVmxPMXh1SUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LR1poYkhObExDQW5WVzV6ZFhCd2IzSjBaV1FnYzNSNWJHVWdjSEp2Y0dWeWRIa2dKWE11SUVScFpDQjViM1VnYldWaGJpQWxjejhuTENCdVlXMWxMQ0JqWVcxbGJHbDZaVk4wZVd4bFRtRnRaU2h1WVcxbEtTa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJSGRoY201Q1lXUldaVzVrYjNKbFpGTjBlV3hsVG1GdFpTQTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdYRzRnSUNBZ2FXWWdLSGRoY201bFpGTjBlV3hsVG1GdFpYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2JtRnRaU2tnSmlZZ2QyRnlibVZrVTNSNWJHVk9ZVzFsYzF0dVlXMWxYU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIZGhjbTVsWkZOMGVXeGxUbUZ0WlhOYmJtRnRaVjBnUFNCMGNuVmxPMXh1SUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LR1poYkhObExDQW5WVzV6ZFhCd2IzSjBaV1FnZG1WdVpHOXlMWEJ5WldacGVHVmtJSE4wZVd4bElIQnliM0JsY25SNUlDVnpMaUJFYVdRZ2VXOTFJRzFsWVc0Z0pYTS9KeXdnYm1GdFpTd2dibUZ0WlM1amFHRnlRWFFvTUNrdWRHOVZjSEJsY2tOaGMyVW9LU0FySUc1aGJXVXVjMnhwWTJVb01Ta3BJRG9nZFc1a1pXWnBibVZrTzF4dUlDQjlPMXh1WEc0Z0lIWmhjaUIzWVhKdVUzUjViR1ZXWVd4MVpWZHBkR2hUWlcxcFkyOXNiMjRnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQnBaaUFvZDJGeWJtVmtVM1I1YkdWV1lXeDFaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29kbUZzZFdVcElDWW1JSGRoY201bFpGTjBlV3hsVm1Gc2RXVnpXM1poYkhWbFhTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhkaGNtNWxaRk4wZVd4bFZtRnNkV1Z6VzNaaGJIVmxYU0E5SUhSeWRXVTdYRzRnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29abUZzYzJVc0lDZFRkSGxzWlNCd2NtOXdaWEowZVNCMllXeDFaWE1nYzJodmRXeGtibHhjSjNRZ1kyOXVkR0ZwYmlCaElITmxiV2xqYjJ4dmJpNGdKeUFySUNkVWNua2dYQ0lsY3pvZ0pYTmNJaUJwYm5OMFpXRmtMaWNzSUc1aGJXVXNJSFpoYkhWbExuSmxjR3hoWTJVb1ltRmtVM1I1YkdWV1lXeDFaVmRwZEdoVFpXMXBZMjlzYjI1UVlYUjBaWEp1TENBbkp5a3BJRG9nZFc1a1pXWnBibVZrTzF4dUlDQjlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JtRnRaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbFhHNGdJQ0FxTDF4dUlDQjJZWElnZDJGeWJsWmhiR2xrVTNSNWJHVWdQU0JtZFc1amRHbHZiaUFvYm1GdFpTd2dkbUZzZFdVcElIdGNiaUFnSUNCcFppQW9ibUZ0WlM1cGJtUmxlRTltS0NjdEp5a2dQaUF0TVNrZ2UxeHVJQ0FnSUNBZ2QyRnlia2g1Y0dobGJtRjBaV1JUZEhsc1pVNWhiV1VvYm1GdFpTazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGlZV1JXWlc1a2IzSmxaRk4wZVd4bFRtRnRaVkJoZEhSbGNtNHVkR1Z6ZENodVlXMWxLU2tnZTF4dUlDQWdJQ0FnZDJGeWJrSmhaRlpsYm1SdmNtVmtVM1I1YkdWT1lXMWxLRzVoYldVcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1ltRmtVM1I1YkdWV1lXeDFaVmRwZEdoVFpXMXBZMjlzYjI1UVlYUjBaWEp1TG5SbGMzUW9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQjNZWEp1VTNSNWJHVldZV3gxWlZkcGRHaFRaVzFwWTI5c2IyNG9ibUZ0WlN3Z2RtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjFjYmx4dUx5b3FYRzRnS2lCUGNHVnlZWFJwYjI1eklHWnZjaUJrWldGc2FXNW5JSGRwZEdnZ1ExTlRJSEJ5YjNCbGNuUnBaWE11WEc0Z0tpOWNiblpoY2lCRFUxTlFjbTl3WlhKMGVVOXdaWEpoZEdsdmJuTWdQU0I3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sY21saGJHbDZaWE1nWVNCdFlYQndhVzVuSUc5bUlITjBlV3hsSUhCeWIzQmxjblJwWlhNZ1ptOXlJSFZ6WlNCaGN5QnBibXhwYm1VZ2MzUjViR1Z6T2x4dUlDQWdLbHh1SUNBZ0tpQWdJRDRnWTNKbFlYUmxUV0Z5YTNWd1JtOXlVM1I1YkdWektIdDNhV1IwYURvZ0p6SXdNSEI0Snl3Z2FHVnBaMmgwT2lBd2ZTbGNiaUFnSUNvZ0lDQmNJbmRwWkhSb09qSXdNSEI0TzJobGFXZG9kRG93TzF3aVhHNGdJQ0FxWEc0Z0lDQXFJRlZ1WkdWbWFXNWxaQ0IyWVd4MVpYTWdZWEpsSUdsbmJtOXlaV1FnYzI4Z2RHaGhkQ0JrWldOc1lYSmhkR2wyWlNCd2NtOW5jbUZ0YldsdVp5QnBjeUJsWVhOcFpYSXVYRzRnSUNBcUlGUm9aU0J5WlhOMWJIUWdjMmh2ZFd4a0lHSmxJRWhVVFV3dFpYTmpZWEJsWkNCaVpXWnZjbVVnYVc1elpYSjBhVzl1SUdsdWRHOGdkR2hsSUVSUFRTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJSE4wZVd4bGMxeHVJQ0FnS2lCQWNtVjBkWEp1SUhzL2MzUnlhVzVuZlZ4dUlDQWdLaTljYmlBZ1kzSmxZWFJsVFdGeWEzVndSbTl5VTNSNWJHVnpPaUJtZFc1amRHbHZiaUFvYzNSNWJHVnpLU0I3WEc0Z0lDQWdkbUZ5SUhObGNtbGhiR2w2WldRZ1BTQW5KenRjYmlBZ0lDQm1iM0lnS0haaGNpQnpkSGxzWlU1aGJXVWdhVzRnYzNSNWJHVnpLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lYTjBlV3hsY3k1b1lYTlBkMjVRY205d1pYSjBlU2h6ZEhsc1pVNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtRnlJSE4wZVd4bFZtRnNkV1VnUFNCemRIbHNaWE5iYzNSNWJHVk9ZVzFsWFR0Y2JpQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUhkaGNtNVdZV3hwWkZOMGVXeGxLSE4wZVd4bFRtRnRaU3dnYzNSNWJHVldZV3gxWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9jM1I1YkdWV1lXeDFaU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhObGNtbGhiR2w2WldRZ0t6MGdjSEp2WTJWemMxTjBlV3hsVG1GdFpTaHpkSGxzWlU1aGJXVXBJQ3NnSnpvbk8xeHVJQ0FnSUNBZ0lDQnpaWEpwWVd4cGVtVmtJQ3M5SUdSaGJtZGxjbTkxYzFOMGVXeGxWbUZzZFdVb2MzUjViR1ZPWVcxbExDQnpkSGxzWlZaaGJIVmxLU0FySUNjN0p6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSE5sY21saGJHbDZaV1FnZkh3Z2JuVnNiRHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBjeUIwYUdVZ2RtRnNkV1VnWm05eUlHMTFiSFJwY0d4bElITjBlV3hsY3lCdmJpQmhJRzV2WkdVdUlDQkpaaUJoSUhaaGJIVmxJR2x6SUhOd1pXTnBabWxsWkNCaGMxeHVJQ0FnS2lBbkp5QW9aVzF3ZEhrZ2MzUnlhVzVuS1N3Z2RHaGxJR052Y25KbGMzQnZibVJwYm1jZ2MzUjViR1VnY0hKdmNHVnlkSGtnZDJsc2JDQmlaU0IxYm5ObGRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRFVDAxRmJHVnRaVzUwZlNCdWIyUmxYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCemRIbHNaWE5jYmlBZ0lDb3ZYRzRnSUhObGRGWmhiSFZsUm05eVUzUjViR1Z6T2lCbWRXNWpkR2x2YmlBb2JtOWtaU3dnYzNSNWJHVnpLU0I3WEc0Z0lDQWdkbUZ5SUhOMGVXeGxJRDBnYm05a1pTNXpkSGxzWlR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ6ZEhsc1pVNWhiV1VnYVc0Z2MzUjViR1Z6S1NCN1hHNGdJQ0FnSUNCcFppQW9JWE4wZVd4bGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNoemRIbHNaVTVoYldVcEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdkMkZ5YmxaaGJHbGtVM1I1YkdVb2MzUjViR1ZPWVcxbExDQnpkSGxzWlhOYmMzUjViR1ZPWVcxbFhTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjJZWElnYzNSNWJHVldZV3gxWlNBOUlHUmhibWRsY205MWMxTjBlV3hsVm1Gc2RXVW9jM1I1YkdWT1lXMWxMQ0J6ZEhsc1pYTmJjM1I1YkdWT1lXMWxYU2s3WEc0Z0lDQWdJQ0JwWmlBb2MzUjViR1ZPWVcxbElEMDlQU0FuWm14dllYUW5LU0I3WEc0Z0lDQWdJQ0FnSUhOMGVXeGxUbUZ0WlNBOUlITjBlV3hsUm14dllYUkJZMk5sYzNOdmNqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2h6ZEhsc1pWWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lITjBlV3hsVzNOMGVXeGxUbUZ0WlYwZ1BTQnpkSGxzWlZaaGJIVmxPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWNGNHRnVjMmx2YmlBOUlHaGhjMU5vYjNKMGFHRnVaRkJ5YjNCbGNuUjVRblZuSUNZbUlFTlRVMUJ5YjNCbGNuUjVMbk5vYjNKMGFHRnVaRkJ5YjNCbGNuUjVSWGh3WVc1emFXOXVjMXR6ZEhsc1pVNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCcFppQW9aWGh3WVc1emFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVMmh2Y25Sb1lXNWtJSEJ5YjNCbGNuUjVJSFJvWVhRZ1NVVTRJSGR2YmlkMElHeHBhMlVnZFc1elpYUjBhVzVuTENCemJ5QjFibk5sZENCbFlXTm9YRzRnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXRjRzl1Wlc1MElIUnZJSEJzWVdOaGRHVWdhWFJjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcGJtUnBkbWxrZFdGc1UzUjViR1ZPWVcxbElHbHVJR1Y0Y0dGdWMybHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdWYmFXNWthWFpwWkhWaGJGTjBlV3hsVG1GdFpWMGdQU0FuSnp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnYzNSNWJHVmJjM1I1YkdWT1lXMWxYU0E5SUNjbk8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JuMDdYRzVjYmxKbFlXTjBVR1Z5Wmk1dFpXRnpkWEpsVFdWMGFHOWtjeWhEVTFOUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5Nc0lDZERVMU5RY205d1pYSjBlVTl3WlhKaGRHbHZibk1uTENCN1hHNGdJSE5sZEZaaGJIVmxSbTl5VTNSNWJHVnpPaUFuYzJWMFZtRnNkV1ZHYjNKVGRIbHNaWE1uWEc1OUtUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JEVTFOUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NN0lsMTkiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENhbGxiYWNrUXVldWVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgcHNldWRvLWV2ZW50IG1vZHVsZSB0byBoZWxwIGtlZXAgdHJhY2sgb2YgY29tcG9uZW50cyB3YWl0aW5nIHRvXG4gKiBiZSBub3RpZmllZCB3aGVuIHRoZWlyIERPTSByZXByZXNlbnRhdGlvbnMgYXJlIGF2YWlsYWJsZSBmb3IgdXNlLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50cyBgUG9vbGVkQ2xhc3NgLCBzbyB5b3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gaW5zdGFudGlhdGUgdGhpcy5cbiAqIEluc3RlYWQsIHVzZSBgQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKWAuXG4gKlxuICogQGNsYXNzIFJlYWN0TW91bnRSZWFkeVxuICogQGltcGxlbWVudHMgUG9vbGVkQ2xhc3NcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBDYWxsYmFja1F1ZXVlKCkge1xuICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG59XG5cbmFzc2lnbihDYWxsYmFja1F1ZXVlLnByb3RvdHlwZSwge1xuXG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBhIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBJbnZva2VkIHdoZW4gYG5vdGlmeUFsbGAgaXMgaW52b2tlZC5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBjb250ZXh0IENvbnRleHQgdG8gY2FsbCBgY2FsbGJhY2tgIHdpdGguXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZTogZnVuY3Rpb24gKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IFtdO1xuICAgIHRoaXMuX2NvbnRleHRzID0gdGhpcy5fY29udGV4dHMgfHwgW107XG4gICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHRoaXMuX2NvbnRleHRzLnB1c2goY29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZXMgYWxsIGVucXVldWVkIGNhbGxiYWNrcyBhbmQgY2xlYXJzIHRoZSBxdWV1ZS4gVGhpcyBpcyBpbnZva2VkIGFmdGVyXG4gICAqIHRoZSBET00gcmVwcmVzZW50YXRpb24gb2YgYSBjb21wb25lbnQgaGFzIGJlZW4gY3JlYXRlZCBvciB1cGRhdGVkLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG5vdGlmeUFsbDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gICAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHM7XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgIShjYWxsYmFja3MubGVuZ3RoID09PSBjb250ZXh0cy5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01pc21hdGNoZWQgbGlzdCBvZiBjb250ZXh0cyBpbiBjYWxsYmFjayBxdWV1ZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChjb250ZXh0c1tpXSk7XG4gICAgICB9XG4gICAgICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICAgIGNvbnRleHRzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGludGVybmFsIHF1ZXVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2FsbGJhY2tRdWV1ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FsbGJhY2tRdWV1ZTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZRMkZzYkdKaFkydFJkV1YxWlM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnUTJGc2JHSmhZMnRSZFdWMVpWeHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkJ2YjJ4bFpFTnNZWE56SUQwZ2NtVnhkV2x5WlNnbkxpOVFiMjlzWldSRGJHRnpjeWNwTzF4dVhHNTJZWElnWVhOemFXZHVJRDBnY21WeGRXbHlaU2duTGk5UFltcGxZM1F1WVhOemFXZHVKeWs3WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2YVc1MllYSnBZVzUwSnlrN1hHNWNiaThxS2x4dUlDb2dRU0J6Y0dWamFXRnNhWHBsWkNCd2MyVjFaRzh0WlhabGJuUWdiVzlrZFd4bElIUnZJR2hsYkhBZ2EyVmxjQ0IwY21GamF5QnZaaUJqYjIxd2IyNWxiblJ6SUhkaGFYUnBibWNnZEc5Y2JpQXFJR0psSUc1dmRHbG1hV1ZrSUhkb1pXNGdkR2hsYVhJZ1JFOU5JSEpsY0hKbGMyVnVkR0YwYVc5dWN5QmhjbVVnWVhaaGFXeGhZbXhsSUdadmNpQjFjMlV1WEc0Z0tseHVJQ29nVkdocGN5QnBiWEJzWlcxbGJuUnpJR0JRYjI5c1pXUkRiR0Z6YzJBc0lITnZJSGx2ZFNCemFHOTFiR1FnYm1WMlpYSWdibVZsWkNCMGJ5QnBibk4wWVc1MGFXRjBaU0IwYUdsekxseHVJQ29nU1c1emRHVmhaQ3dnZFhObElHQkRZV3hzWW1GamExRjFaWFZsTG1kbGRGQnZiMnhsWkNncFlDNWNiaUFxWEc0Z0tpQkFZMnhoYzNNZ1VtVmhZM1JOYjNWdWRGSmxZV1I1WEc0Z0tpQkFhVzF3YkdWdFpXNTBjeUJRYjI5c1pXUkRiR0Z6YzF4dUlDb2dRR2x1ZEdWeWJtRnNYRzRnS2k5Y2JtWjFibU4wYVc5dUlFTmhiR3hpWVdOclVYVmxkV1VvS1NCN1hHNGdJSFJvYVhNdVgyTmhiR3hpWVdOcmN5QTlJRzUxYkd3N1hHNGdJSFJvYVhNdVgyTnZiblJsZUhSeklEMGdiblZzYkR0Y2JuMWNibHh1WVhOemFXZHVLRU5oYkd4aVlXTnJVWFZsZFdVdWNISnZkRzkwZVhCbExDQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFVnVjWFZsZFdWeklHRWdZMkZzYkdKaFkyc2dkRzhnWW1VZ2FXNTJiMnRsWkNCM2FHVnVJR0J1YjNScFpubEJiR3hnSUdseklHbHVkbTlyWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR05oYkd4aVlXTnJJRWx1ZG05clpXUWdkMmhsYmlCZ2JtOTBhV1o1UVd4c1lDQnBjeUJwYm5admEyVmtMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V6OXZZbXBsWTNSOUlHTnZiblJsZUhRZ1EyOXVkR1Y0ZENCMGJ5QmpZV3hzSUdCallXeHNZbUZqYTJBZ2QybDBhQzVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0JsYm5GMVpYVmxPaUJtZFc1amRHbHZiaUFvWTJGc2JHSmhZMnNzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IwYUdsekxsOWpZV3hzWW1GamEzTWdQU0IwYUdsekxsOWpZV3hzWW1GamEzTWdmSHdnVzEwN1hHNGdJQ0FnZEdocGN5NWZZMjl1ZEdWNGRITWdQU0IwYUdsekxsOWpiMjUwWlhoMGN5QjhmQ0JiWFR0Y2JpQWdJQ0IwYUdsekxsOWpZV3hzWW1GamEzTXVjSFZ6YUNoallXeHNZbUZqYXlrN1hHNGdJQ0FnZEdocGN5NWZZMjl1ZEdWNGRITXVjSFZ6YUNoamIyNTBaWGgwS1R0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzUyYjJ0bGN5QmhiR3dnWlc1eGRXVjFaV1FnWTJGc2JHSmhZMnR6SUdGdVpDQmpiR1ZoY25NZ2RHaGxJSEYxWlhWbExpQlVhR2x6SUdseklHbHVkbTlyWldRZ1lXWjBaWEpjYmlBZ0lDb2dkR2hsSUVSUFRTQnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQmhJR052YlhCdmJtVnVkQ0JvWVhNZ1ltVmxiaUJqY21WaGRHVmtJRzl5SUhWd1pHRjBaV1F1WEc0Z0lDQXFYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdibTkwYVdaNVFXeHNPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZG1GeUlHTmhiR3hpWVdOcmN5QTlJSFJvYVhNdVgyTmhiR3hpWVdOcmN6dGNiaUFnSUNCMllYSWdZMjl1ZEdWNGRITWdQU0IwYUdsekxsOWpiMjUwWlhoMGN6dGNiaUFnSUNCcFppQW9ZMkZzYkdKaFkydHpLU0I3WEc0Z0lDQWdJQ0FoS0dOaGJHeGlZV05yY3k1c1pXNW5kR2dnUFQwOUlHTnZiblJsZUhSekxteGxibWQwYUNrZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuVFdsemJXRjBZMmhsWkNCc2FYTjBJRzltSUdOdmJuUmxlSFJ6SUdsdUlHTmhiR3hpWVdOcklIRjFaWFZsSnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdkR2hwY3k1ZlkyRnNiR0poWTJ0eklEMGdiblZzYkR0Y2JpQWdJQ0FnSUhSb2FYTXVYMk52Ym5SbGVIUnpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZMkZzYkdKaFkydHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHTmhiR3hpWVdOcmMxdHBYUzVqWVd4c0tHTnZiblJsZUhSelcybGRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR05oYkd4aVlXTnJjeTVzWlc1bmRHZ2dQU0F3TzF4dUlDQWdJQ0FnWTI5dWRHVjRkSE11YkdWdVozUm9JRDBnTUR0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxjMlYwY3lCMGFHVWdhVzUwWlhKdVlXd2djWFZsZFdVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnY21WelpYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxsOWpZV3hzWW1GamEzTWdQU0J1ZFd4c08xeHVJQ0FnSUhSb2FYTXVYMk52Ym5SbGVIUnpJRDBnYm5Wc2JEdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nWUZCdmIyeGxaRU5zWVhOellDQnNiMjlyY3lCbWIzSWdkR2hwY3k1Y2JpQWdJQ292WEc0Z0lHUmxjM1J5ZFdOMGIzSTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxuSmxjMlYwS0NrN1hHNGdJSDFjYmx4dWZTazdYRzVjYmxCdmIyeGxaRU5zWVhOekxtRmtaRkJ2YjJ4cGJtZFVieWhEWVd4c1ltRmphMUYxWlhWbEtUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JEWVd4c1ltRmphMUYxWlhWbE95SmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENoYW5nZUV2ZW50UGx1Z2luXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuL2dldEV2ZW50VGFyZ2V0Jyk7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xudmFyIGlzVGV4dElucHV0RWxlbWVudCA9IHJlcXVpcmUoJy4vaXNUZXh0SW5wdXRFbGVtZW50Jyk7XG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBjaGFuZ2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNoYW5nZTogbnVsbCB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ2hhbmdlQ2FwdHVyZTogbnVsbCB9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSwgdG9wTGV2ZWxUeXBlcy50b3BDbGljaywgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cywgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dCwgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLCB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLCB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZV1cbiAgfVxufTtcblxuLyoqXG4gKiBGb3IgSUUgc2hpbXNcbiAqL1xudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNoYW5nZWAgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2hhbmdlRXZlbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnc2VsZWN0JyB8fCBub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBlbGVtLnR5cGUgPT09ICdmaWxlJztcbn1cblxudmFyIGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSA9IGZhbHNlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBTZWUgYGhhbmRsZUNoYW5nZWAgY29tbWVudCBiZWxvd1xuICBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBpc0V2ZW50U3VwcG9ydGVkKCdjaGFuZ2UnKSAmJiAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCk7XG59XG5cbmZ1bmN0aW9uIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuY2hhbmdlLCBhY3RpdmVFbGVtZW50SUQsIG5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkpO1xuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuXG4gIC8vIElmIGNoYW5nZSBhbmQgcHJvcGVydHljaGFuZ2UgYnViYmxlZCwgd2UnZCBqdXN0IGJpbmQgdG8gaXQgbGlrZSBhbGwgdGhlXG4gIC8vIG90aGVyIGV2ZW50cyBhbmQgaGF2ZSBpdCBnbyB0aHJvdWdoIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci4gU2luY2UgaXRcbiAgLy8gZG9lc24ndCwgd2UgbWFudWFsbHkgbGlzdGVuIGZvciB0aGUgZXZlbnRzIGFuZCBzbyB3ZSBoYXZlIHRvIGVucXVldWUgYW5kXG4gIC8vIHByb2Nlc3MgdGhlIGFic3RyYWN0IGV2ZW50IG1hbnVhbGx5LlxuICAvL1xuICAvLyBCYXRjaGluZyBpcyBuZWNlc3NhcnkgaGVyZSBpbiBvcmRlciB0byBlbnN1cmUgdGhhdCBhbGwgZXZlbnQgaGFuZGxlcnMgcnVuXG4gIC8vIGJlZm9yZSB0aGUgbmV4dCByZXJlbmRlciAoaW5jbHVkaW5nIGV2ZW50IGhhbmRsZXJzIGF0dGFjaGVkIHRvIGFuY2VzdG9yXG4gIC8vIGVsZW1lbnRzIGluc3RlYWQgb2YgZGlyZWN0bHkgb24gdGhlIGlucHV0KS4gV2l0aG91dCB0aGlzLCBjb250cm9sbGVkXG4gIC8vIGNvbXBvbmVudHMgZG9uJ3Qgd29yayBwcm9wZXJseSBpbiBjb25qdW5jdGlvbiB3aXRoIGV2ZW50IGJ1YmJsaW5nIGJlY2F1c2VcbiAgLy8gdGhlIGNvbXBvbmVudCBpcyByZXJlbmRlcmVkIGFuZCB0aGUgdmFsdWUgcmV2ZXJ0ZWQgYmVmb3JlIGFsbCB0aGUgZXZlbnRcbiAgLy8gaGFuZGxlcnMgY2FuIHJ1bi4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzA4LlxuICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMocnVuRXZlbnRJbkJhdGNoLCBldmVudCk7XG59XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50SW5CYXRjaChldmVudCkge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50KTtcbiAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodGFyZ2V0LCB0YXJnZXRJRCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SUQgPSB0YXJnZXRJRDtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ2hhbmdlKSB7XG4gICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4KHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cykge1xuICAgIC8vIHN0b3BXYXRjaGluZygpIHNob3VsZCBiZSBhIG5vb3AgaGVyZSBidXQgd2UgY2FsbCBpdCBqdXN0IGluIGNhc2Ugd2VcbiAgICAvLyBtaXNzZWQgYSBibHVyIGV2ZW50IHNvbWVob3cuXG4gICAgc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKTtcbiAgICBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpO1xuICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG4gICAgc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKTtcbiAgfVxufVxuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgaW5wdXRgIGV2ZW50XG4gKi9cbnZhciBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU5IGNsYWltcyB0byBzdXBwb3J0IHRoZSBpbnB1dCBldmVudCBidXQgZmFpbHMgdG8gdHJpZ2dlciBpdCB3aGVuXG4gIC8vIGRlbGV0aW5nIHRleHQsIHNvIHdlIGlnbm9yZSBpdHMgaW5wdXQgZXZlbnRzXG4gIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9IGlzRXZlbnRTdXBwb3J0ZWQoJ2lucHV0JykgJiYgKCEoJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+IDkpO1xufVxuXG4vKipcbiAqIChGb3Igb2xkIElFLikgUmVwbGFjZW1lbnQgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGB2YWx1ZWAgcHJvcGVydHkgdGhhdCBnZXRzXG4gKiBzZXQgb24gdGhlIGFjdGl2ZSBlbGVtZW50LlxuICovXG52YXIgbmV3VmFsdWVQcm9wID0ge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYWN0aXZlRWxlbWVudFZhbHVlUHJvcC5nZXQuY2FsbCh0aGlzKTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgLy8gQ2FzdCB0byBhIHN0cmluZyBzbyB3ZSBjYW4gZG8gZXF1YWxpdHkgY2hlY2tzLlxuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9ICcnICsgdmFsO1xuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3Auc2V0LmNhbGwodGhpcywgdmFsKTtcbiAgfVxufTtcblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFN0YXJ0cyB0cmFja2luZyBwcm9wZXJ0eWNoYW5nZSBldmVudHMgb24gdGhlIHBhc3NlZC1pbiBlbGVtZW50XG4gKiBhbmQgb3ZlcnJpZGUgdGhlIHZhbHVlIHByb3BlcnR5IHNvIHRoYXQgd2UgY2FuIGRpc3Rpbmd1aXNoIHVzZXIgZXZlbnRzIGZyb21cbiAqIHZhbHVlIGNoYW5nZXMgaW4gSlMuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldElEKSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IHRhcmdldElEO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSB0YXJnZXQudmFsdWU7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICd2YWx1ZScpO1xuXG4gIC8vIE5vdCBndWFyZGVkIGluIGEgY2FuRGVmaW5lUHJvcGVydHkgY2hlY2s6IElFOCBzdXBwb3J0cyBkZWZpbmVQcm9wZXJ0eSBvbmx5XG4gIC8vIG9uIERPTSBlbGVtZW50c1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWN0aXZlRWxlbWVudCwgJ3ZhbHVlJywgbmV3VmFsdWVQcm9wKTtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGRlbGV0ZSByZXN0b3JlcyB0aGUgb3JpZ2luYWwgcHJvcGVydHkgZGVmaW5pdGlvblxuICBkZWxldGUgYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcblxuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG59XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBIYW5kbGVzIGEgcHJvcGVydHljaGFuZ2UgZXZlbnQsIHNlbmRpbmcgYSBgY2hhbmdlYCBldmVudCBpZlxuICogdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmUgZWxlbWVudCBoYXMgY2hhbmdlZC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3ZhbHVlJykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgdmFsdWUgPSBuYXRpdmVFdmVudC5zcmNFbGVtZW50LnZhbHVlO1xuICBpZiAodmFsdWUgPT09IGFjdGl2ZUVsZW1lbnRWYWx1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50VmFsdWUgPSB2YWx1ZTtcblxuICBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KTtcbn1cblxuLyoqXG4gKiBJZiBhIGBjaGFuZ2VgIGV2ZW50IHNob3VsZCBiZSBmaXJlZCwgcmV0dXJucyB0aGUgdGFyZ2V0J3MgSUQuXG4gKi9cbmZ1bmN0aW9uIGdldFRhcmdldElERm9ySW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wSW5wdXQpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgKGkuZS4sIG5vdCBJRTggb3IgSUU5KSwgdGhlIGlucHV0IGV2ZW50IGlzIGV4YWN0bHlcbiAgICAvLyB3aGF0IHdlIHdhbnQgc28gZmFsbCB0aHJvdWdoIGhlcmUgYW5kIHRyaWdnZXIgYW4gYWJzdHJhY3QgZXZlbnRcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG4gICAgLy8gSW4gSUU4LCB3ZSBjYW4gY2FwdHVyZSBhbG1vc3QgYWxsIC52YWx1ZSBjaGFuZ2VzIGJ5IGFkZGluZyBhXG4gICAgLy8gcHJvcGVydHljaGFuZ2UgaGFuZGxlciBhbmQgbG9va2luZyBmb3IgZXZlbnRzIHdpdGggcHJvcGVydHlOYW1lXG4gICAgLy8gZXF1YWwgdG8gJ3ZhbHVlJ1xuICAgIC8vIEluIElFOSwgcHJvcGVydHljaGFuZ2UgZmlyZXMgZm9yIG1vc3QgaW5wdXQgZXZlbnRzIGJ1dCBpcyBidWdneSBhbmRcbiAgICAvLyBkb2Vzbid0IGZpcmUgd2hlbiB0ZXh0IGlzIGRlbGV0ZWQsIGJ1dCBjb252ZW5pZW50bHksIHNlbGVjdGlvbmNoYW5nZVxuICAgIC8vIGFwcGVhcnMgdG8gZmlyZSBpbiBhbGwgb2YgdGhlIHJlbWFpbmluZyBjYXNlcyBzbyB3ZSBjYXRjaCB0aG9zZSBhbmRcbiAgICAvLyBmb3J3YXJkIHRoZSBldmVudCBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWRcbiAgICAvLyBJbiBlaXRoZXIgY2FzZSwgd2UgZG9uJ3Qgd2FudCB0byBjYWxsIHRoZSBldmVudCBoYW5kbGVyIGlmIHRoZSB2YWx1ZVxuICAgIC8vIGlzIGNoYW5nZWQgZnJvbSBKUyBzbyB3ZSByZWRlZmluZSBhIHNldHRlciBmb3IgYC52YWx1ZWAgdGhhdCB1cGRhdGVzXG4gICAgLy8gb3VyIGFjdGl2ZUVsZW1lbnRWYWx1ZSB2YXJpYWJsZSwgYWxsb3dpbmcgdXMgdG8gaWdub3JlIHRob3NlIGNoYW5nZXNcbiAgICAvL1xuICAgIC8vIHN0b3BXYXRjaGluZygpIHNob3VsZCBiZSBhIG5vb3AgaGVyZSBidXQgd2UgY2FsbCBpdCBqdXN0IGluIGNhc2Ugd2VcbiAgICAvLyBtaXNzZWQgYSBibHVyIGV2ZW50IHNvbWVob3cuXG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgICBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpO1xuICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvcklucHV0RXZlbnRJRSh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlIHx8IHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93bikge1xuICAgIC8vIE9uIHRoZSBzZWxlY3Rpb25jaGFuZ2UgZXZlbnQsIHRoZSB0YXJnZXQgaXMganVzdCBkb2N1bWVudCB3aGljaCBpc24ndFxuICAgIC8vIGhlbHBmdWwgZm9yIHVzIHNvIGp1c3QgY2hlY2sgYWN0aXZlRWxlbWVudCBpbnN0ZWFkLlxuICAgIC8vXG4gICAgLy8gOTklIG9mIHRoZSB0aW1lLCBrZXlkb3duIGFuZCBrZXl1cCBhcmVuJ3QgbmVjZXNzYXJ5LiBJRTggZmFpbHMgdG8gZmlyZVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIG9uIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhZnRlciBzZXR0aW5nIGB2YWx1ZWAgZnJvbSBhXG4gICAgLy8gc2NyaXB0IGFuZCBmaXJlcyBvbmx5IGtleWRvd24sIGtleXByZXNzLCBrZXl1cC4gQ2F0Y2hpbmcga2V5dXAgdXN1YWxseVxuICAgIC8vIGdldHMgaXQgYW5kIGNhdGNoaW5nIGtleWRvd24gbGV0cyB1cyBmaXJlIGFuIGV2ZW50IGZvciB0aGUgZmlyc3RcbiAgICAvLyBrZXlzdHJva2UgaWYgdXNlciBkb2VzIGEga2V5IHJlcGVhdCAoaXQnbGwgYmUgYSBsaXR0bGUgZGVsYXllZDogcmlnaHRcbiAgICAvLyBiZWZvcmUgdGhlIHNlY29uZCBrZXlzdHJva2UpLiBPdGhlciBpbnB1dCBtZXRob2RzIChlLmcuLCBwYXN0ZSkgc2VlbSB0b1xuICAgIC8vIGZpcmUgc2VsZWN0aW9uY2hhbmdlIG5vcm1hbGx5LlxuICAgIGlmIChhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQudmFsdWUgIT09IGFjdGl2ZUVsZW1lbnRWYWx1ZSkge1xuICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50SUQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjbGlja2AgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gIC8vIFVzZSB0aGUgYGNsaWNrYCBldmVudCB0byBkZXRlY3QgY2hhbmdlcyB0byBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzLlxuICAvLyBUaGlzIGFwcHJvYWNoIHdvcmtzIGFjcm9zcyBhbGwgYnJvd3NlcnMsIHdoZXJlYXMgYGNoYW5nZWAgZG9lcyBub3QgZmlyZVxuICAvLyB1bnRpbCBgYmx1cmAgaW4gSUU4LlxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKGVsZW0udHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBlbGVtLnR5cGUgPT09ICdyYWRpbycpO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvckNsaWNrRXZlbnQodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrKSB7XG4gICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvbkNoYW5nZWAgZXZlbnQgdGhhdCBub3JtYWxpemVzIGNoYW5nZSBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLiBUaGlzIGV2ZW50IGZpcmVzIGF0IGEgdGltZSB3aGVuIGl0J3MgcG9zc2libGUgdG9cbiAqIGNoYW5nZSB0aGUgZWxlbWVudCdzIHZhbHVlIHdpdGhvdXQgc2VlaW5nIGEgZmxpY2tlci5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBzZWxlY3RcbiAqL1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuXG4gICAgdmFyIGdldFRhcmdldElERnVuYywgaGFuZGxlRXZlbnRGdW5jO1xuICAgIGlmIChzaG91bGRVc2VDaGFuZ2VFdmVudCh0b3BMZXZlbFRhcmdldCkpIHtcbiAgICAgIGlmIChkb2VzQ2hhbmdlRXZlbnRCdWJibGUpIHtcbiAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZCkge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvcklucHV0RXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvcklucHV0RXZlbnRJRTtcbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudElFO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2hvdWxkVXNlQ2xpY2tFdmVudCh0b3BMZXZlbFRhcmdldCkpIHtcbiAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9yQ2xpY2tFdmVudDtcbiAgICB9XG5cbiAgICBpZiAoZ2V0VGFyZ2V0SURGdW5jKSB7XG4gICAgICB2YXIgdGFyZ2V0SUQgPSBnZXRUYXJnZXRJREZ1bmModG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCk7XG4gICAgICBpZiAodGFyZ2V0SUQpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuY2hhbmdlLCB0YXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgZXZlbnQudHlwZSA9ICdjaGFuZ2UnO1xuICAgICAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZUV2ZW50RnVuYykge1xuICAgICAgaGFuZGxlRXZlbnRGdW5jKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoYW5nZUV2ZW50UGx1Z2luOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDbGllbnRSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBuZXh0UmVhY3RSb290SW5kZXggPSAwO1xuXG52YXIgQ2xpZW50UmVhY3RSb290SW5kZXggPSB7XG4gIGNyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5leHRSZWFjdFJvb3RJbmRleCsrO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsaWVudFJlYWN0Um9vdEluZGV4OyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRE9NQ2hpbGRyZW5PcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERhbmdlciA9IHJlcXVpcmUoJy4vRGFuZ2VyJyk7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcblxudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG52YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKCcuL3NldFRleHRDb250ZW50Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogSW5zZXJ0cyBgY2hpbGROb2RlYCBhcyBhIGNoaWxkIG9mIGBwYXJlbnROb2RlYCBhdCB0aGUgYGluZGV4YC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUgaW4gd2hpY2ggdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjaGlsZE5vZGUgQ2hpbGQgbm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgaW5kZXgpIHtcbiAgLy8gQnkgZXhwbG9pdGluZyBhcnJheXMgcmV0dXJuaW5nIGB1bmRlZmluZWRgIGZvciBhbiB1bmRlZmluZWQgaW5kZXgsIHdlIGNhblxuICAvLyByZWx5IGV4Y2x1c2l2ZWx5IG9uIGBpbnNlcnRCZWZvcmUobm9kZSwgbnVsbClgIGluc3RlYWQgb2YgYWxzbyB1c2luZ1xuICAvLyBgYXBwZW5kQ2hpbGQobm9kZSlgLiBIb3dldmVyLCB1c2luZyBgdW5kZWZpbmVkYCBpcyBub3QgYWxsb3dlZCBieSBhbGxcbiAgLy8gYnJvd3NlcnMgc28gd2UgbXVzdCByZXBsYWNlIGl0IHdpdGggYG51bGxgLlxuXG4gIC8vIGZpeCByZW5kZXIgb3JkZXIgZXJyb3IgaW4gc2FmYXJpXG4gIC8vIElFOCB3aWxsIHRocm93IGVycm9yIHdoZW4gaW5kZXggb3V0IG9mIGxpc3Qgc2l6ZS5cbiAgdmFyIGJlZm9yZUNoaWxkID0gaW5kZXggPj0gcGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA/IG51bGwgOiBwYXJlbnROb2RlLmNoaWxkTm9kZXMuaXRlbShpbmRleCk7XG5cbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBiZWZvcmVDaGlsZCk7XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgdXBkYXRpbmcgd2l0aCBET00gY2hpbGRyZW4uXG4gKi9cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSB7XG5cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IERhbmdlci5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCxcblxuICB1cGRhdGVUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuIFRoZVxuICAgKiB1cGRhdGUgY29uZmlndXJhdGlvbnMgYXJlIGVhY2ggZXhwZWN0ZWQgdG8gaGF2ZSBhIGBwYXJlbnROb2RlYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cExpc3QgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzVXBkYXRlczogZnVuY3Rpb24gKHVwZGF0ZXMsIG1hcmt1cExpc3QpIHtcbiAgICB2YXIgdXBkYXRlO1xuICAgIC8vIE1hcHBpbmcgZnJvbSBwYXJlbnQgSURzIHRvIGluaXRpYWwgY2hpbGQgb3JkZXJpbmdzLlxuICAgIHZhciBpbml0aWFsQ2hpbGRyZW4gPSBudWxsO1xuICAgIC8vIExpc3Qgb2YgY2hpbGRyZW4gdGhhdCB3aWxsIGJlIG1vdmVkIG9yIHJlbW92ZWQuXG4gICAgdmFyIHVwZGF0ZWRDaGlsZHJlbiA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNbaV07XG4gICAgICBpZiAodXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcgfHwgdXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFKSB7XG4gICAgICAgIHZhciB1cGRhdGVkSW5kZXggPSB1cGRhdGUuZnJvbUluZGV4O1xuICAgICAgICB2YXIgdXBkYXRlZENoaWxkID0gdXBkYXRlLnBhcmVudE5vZGUuY2hpbGROb2Rlc1t1cGRhdGVkSW5kZXhdO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSB1cGRhdGUucGFyZW50SUQ7XG5cbiAgICAgICAgIXVwZGF0ZWRDaGlsZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzVXBkYXRlcygpOiBVbmFibGUgdG8gZmluZCBjaGlsZCAlcyBvZiBlbGVtZW50LiBUaGlzICcgKyAncHJvYmFibHkgbWVhbnMgdGhlIERPTSB3YXMgdW5leHBlY3RlZGx5IG11dGF0ZWQgKGUuZy4sIGJ5IHRoZSAnICsgJ2Jyb3dzZXIpLCB1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgJyArICduZXN0aW5nIHRhZ3MgbGlrZSA8Zm9ybT4sIDxwPiwgb3IgPGE+LCBvciB1c2luZyBub24tU1ZHIGVsZW1lbnRzICcgKyAnaW4gYW4gPHN2Zz4gcGFyZW50LiBUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgJyArICd3aXRoIFJlYWN0IElEIGAlc2AuJywgdXBkYXRlZEluZGV4LCBwYXJlbnRJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGluaXRpYWxDaGlsZHJlbiA9IGluaXRpYWxDaGlsZHJlbiB8fCB7fTtcbiAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSA9IGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gfHwgW107XG4gICAgICAgIGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF1bdXBkYXRlZEluZGV4XSA9IHVwZGF0ZWRDaGlsZDtcblxuICAgICAgICB1cGRhdGVkQ2hpbGRyZW4gPSB1cGRhdGVkQ2hpbGRyZW4gfHwgW107XG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbi5wdXNoKHVwZGF0ZWRDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlcmVkTWFya3VwO1xuICAgIC8vIG1hcmt1cExpc3QgaXMgZWl0aGVyIGEgbGlzdCBvZiBtYXJrdXAgb3IganVzdCBhIGxpc3Qgb2YgZWxlbWVudHNcbiAgICBpZiAobWFya3VwTGlzdC5sZW5ndGggJiYgdHlwZW9mIG1hcmt1cExpc3RbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZW5kZXJlZE1hcmt1cCA9IERhbmdlci5kYW5nZXJvdXNseVJlbmRlck1hcmt1cChtYXJrdXBMaXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVuZGVyZWRNYXJrdXAgPSBtYXJrdXBMaXN0O1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB1cGRhdGVkIGNoaWxkcmVuIGZpcnN0IHNvIHRoYXQgYHRvSW5kZXhgIGlzIGNvbnNpc3RlbnQuXG4gICAgaWYgKHVwZGF0ZWRDaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB1cGRhdGVkQ2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdXBkYXRlZENoaWxkcmVuW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodXBkYXRlZENoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHVwZGF0ZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNba107XG4gICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUDpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KHVwZGF0ZS5wYXJlbnROb2RlLCByZW5kZXJlZE1hcmt1cFt1cGRhdGUubWFya3VwSW5kZXhdLCB1cGRhdGUudG9JbmRleCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORzpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KHVwZGF0ZS5wYXJlbnROb2RlLCBpbml0aWFsQ2hpbGRyZW5bdXBkYXRlLnBhcmVudElEXVt1cGRhdGUuZnJvbUluZGV4XSwgdXBkYXRlLnRvSW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlNFVF9NQVJLVVA6XG4gICAgICAgICAgc2V0SW5uZXJIVE1MKHVwZGF0ZS5wYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5UOlxuICAgICAgICAgIHNldFRleHRDb250ZW50KHVwZGF0ZS5wYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG4gICAgICAgICAgLy8gQWxyZWFkeSByZW1vdmVkIGJ5IHRoZSBmb3ItbG9vcCBhYm92ZS5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKERPTUNoaWxkcmVuT3BlcmF0aW9ucywgJ0RPTUNoaWxkcmVuT3BlcmF0aW9ucycsIHtcbiAgdXBkYXRlVGV4dENvbnRlbnQ6ICd1cGRhdGVUZXh0Q29udGVudCdcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTUNoaWxkcmVuT3BlcmF0aW9ucztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZSRTlOUTJocGJHUnlaVzVQY0dWeVlYUnBiMjV6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JFVDAxRGFHbHNaSEpsYms5d1pYSmhkR2x2Ym5OY2JpQXFJRUIwZVhCbFkyaGxZMnR6SUhOMFlYUnBZeTF2Ym14NVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdSR0Z1WjJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlFWVc1blpYSW5LVHRjYm5aaGNpQlNaV0ZqZEUxMWJIUnBRMmhwYkdSVmNHUmhkR1ZVZVhCbGN5QTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUk5kV3gwYVVOb2FXeGtWWEJrWVhSbFZIbHdaWE1uS1R0Y2JuWmhjaUJTWldGamRGQmxjbVlnUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wVUdWeVppY3BPMXh1WEc1MllYSWdjMlYwU1c1dVpYSklWRTFNSUQwZ2NtVnhkV2x5WlNnbkxpOXpaWFJKYm01bGNraFVUVXduS1R0Y2JuWmhjaUJ6WlhSVVpYaDBRMjl1ZEdWdWRDQTlJSEpsY1hWcGNtVW9KeTR2YzJWMFZHVjRkRU52Ym5SbGJuUW5LVHRjYm5aaGNpQnBiblpoY21saGJuUWdQU0J5WlhGMWFYSmxLQ2RtWW1wekwyeHBZaTlwYm5aaGNtbGhiblFuS1R0Y2JseHVMeW9xWEc0Z0tpQkpibk5sY25SeklHQmphR2xzWkU1dlpHVmdJR0Z6SUdFZ1kyaHBiR1FnYjJZZ1lIQmhjbVZ1ZEU1dlpHVmdJR0YwSUhSb1pTQmdhVzVrWlhoZ0xseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1JFOU5SV3hsYldWdWRIMGdjR0Z5Wlc1MFRtOWtaU0JRWVhKbGJuUWdibTlrWlNCcGJpQjNhR2xqYUNCMGJ5QnBibk5sY25RdVhHNGdLaUJBY0dGeVlXMGdlMFJQVFVWc1pXMWxiblI5SUdOb2FXeGtUbTlrWlNCRGFHbHNaQ0J1YjJSbElIUnZJR2x1YzJWeWRDNWNiaUFxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JwYm1SbGVDQkpibVJsZUNCaGRDQjNhR2xqYUNCMGJ5QnBibk5sY25RZ2RHaGxJR05vYVd4a0xseHVJQ29nUUdsdWRHVnlibUZzWEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x1YzJWeWRFTm9hV3hrUVhRb2NHRnlaVzUwVG05a1pTd2dZMmhwYkdST2IyUmxMQ0JwYm1SbGVDa2dlMXh1SUNBdkx5QkNlU0JsZUhCc2IybDBhVzVuSUdGeWNtRjVjeUJ5WlhSMWNtNXBibWNnWUhWdVpHVm1hVzVsWkdBZ1ptOXlJR0Z1SUhWdVpHVm1hVzVsWkNCcGJtUmxlQ3dnZDJVZ1kyRnVYRzRnSUM4dklISmxiSGtnWlhoamJIVnphWFpsYkhrZ2IyNGdZR2x1YzJWeWRFSmxabTl5WlNodWIyUmxMQ0J1ZFd4c0tXQWdhVzV6ZEdWaFpDQnZaaUJoYkhOdklIVnphVzVuWEc0Z0lDOHZJR0JoY0hCbGJtUkRhR2xzWkNodWIyUmxLV0F1SUVodmQyVjJaWElzSUhWemFXNW5JR0IxYm1SbFptbHVaV1JnSUdseklHNXZkQ0JoYkd4dmQyVmtJR0o1SUdGc2JGeHVJQ0F2THlCaWNtOTNjMlZ5Y3lCemJ5QjNaU0J0ZFhOMElISmxjR3hoWTJVZ2FYUWdkMmwwYUNCZ2JuVnNiR0F1WEc1Y2JpQWdMeThnWm1sNElISmxibVJsY2lCdmNtUmxjaUJsY25KdmNpQnBiaUJ6WVdaaGNtbGNiaUFnTHk4Z1NVVTRJSGRwYkd3Z2RHaHliM2NnWlhKeWIzSWdkMmhsYmlCcGJtUmxlQ0J2ZFhRZ2IyWWdiR2x6ZENCemFYcGxMbHh1SUNCMllYSWdZbVZtYjNKbFEyaHBiR1FnUFNCcGJtUmxlQ0ErUFNCd1lYSmxiblJPYjJSbExtTm9hV3hrVG05a1pYTXViR1Z1WjNSb0lEOGdiblZzYkNBNklIQmhjbVZ1ZEU1dlpHVXVZMmhwYkdST2IyUmxjeTVwZEdWdEtHbHVaR1Y0S1R0Y2JseHVJQ0J3WVhKbGJuUk9iMlJsTG1sdWMyVnlkRUpsWm05eVpTaGphR2xzWkU1dlpHVXNJR0psWm05eVpVTm9hV3hrS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJQY0dWeVlYUnBiMjV6SUdadmNpQjFjR1JoZEdsdVp5QjNhWFJvSUVSUFRTQmphR2xzWkhKbGJpNWNiaUFxTDF4dWRtRnlJRVJQVFVOb2FXeGtjbVZ1VDNCbGNtRjBhVzl1Y3lBOUlIdGNibHh1SUNCa1lXNW5aWEp2ZFhOc2VWSmxjR3hoWTJWT2IyUmxWMmwwYUUxaGNtdDFjRG9nUkdGdVoyVnlMbVJoYm1kbGNtOTFjMng1VW1Wd2JHRmpaVTV2WkdWWGFYUm9UV0Z5YTNWd0xGeHVYRzRnSUhWd1pHRjBaVlJsZUhSRGIyNTBaVzUwT2lCelpYUlVaWGgwUTI5dWRHVnVkQ3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWWEJrWVhSbGN5QmhJR052YlhCdmJtVnVkQ2R6SUdOb2FXeGtjbVZ1SUdKNUlIQnliMk5sYzNOcGJtY2dZU0J6WlhKcFpYTWdiMllnZFhCa1lYUmxjeTRnVkdobFhHNGdJQ0FxSUhWd1pHRjBaU0JqYjI1bWFXZDFjbUYwYVc5dWN5QmhjbVVnWldGamFDQmxlSEJsWTNSbFpDQjBieUJvWVhabElHRWdZSEJoY21WdWRFNXZaR1ZnSUhCeWIzQmxjblI1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyRnljbUY1UEc5aWFtVmpkRDU5SUhWd1pHRjBaWE1nVEdsemRDQnZaaUIxY0dSaGRHVWdZMjl1Wm1sbmRYSmhkR2x2Ym5NdVhHNGdJQ0FxSUVCd1lYSmhiU0I3WVhKeVlYazhjM1J5YVc1blBuMGdiV0Z5YTNWd1RHbHpkQ0JNYVhOMElHOW1JRzFoY210MWNDQnpkSEpwYm1kekxseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lIQnliMk5sYzNOVmNHUmhkR1Z6T2lCbWRXNWpkR2x2YmlBb2RYQmtZWFJsY3l3Z2JXRnlhM1Z3VEdsemRDa2dlMXh1SUNBZ0lIWmhjaUIxY0dSaGRHVTdYRzRnSUNBZ0x5OGdUV0Z3Y0dsdVp5Qm1jbTl0SUhCaGNtVnVkQ0JKUkhNZ2RHOGdhVzVwZEdsaGJDQmphR2xzWkNCdmNtUmxjbWx1WjNNdVhHNGdJQ0FnZG1GeUlHbHVhWFJwWVd4RGFHbHNaSEpsYmlBOUlHNTFiR3c3WEc0Z0lDQWdMeThnVEdsemRDQnZaaUJqYUdsc1pISmxiaUIwYUdGMElIZHBiR3dnWW1VZ2JXOTJaV1FnYjNJZ2NtVnRiM1psWkM1Y2JpQWdJQ0IyWVhJZ2RYQmtZWFJsWkVOb2FXeGtjbVZ1SUQwZ2JuVnNiRHRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZFhCa1lYUmxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RYQmtZWFJsSUQwZ2RYQmtZWFJsYzF0cFhUdGNiaUFnSUNBZ0lHbG1JQ2gxY0dSaGRHVXVkSGx3WlNBOVBUMGdVbVZoWTNSTmRXeDBhVU5vYVd4a1ZYQmtZWFJsVkhsd1pYTXVUVTlXUlY5RldFbFRWRWxPUnlCOGZDQjFjR1JoZEdVdWRIbHdaU0E5UFQwZ1VtVmhZM1JOZFd4MGFVTm9hV3hrVlhCa1lYUmxWSGx3WlhNdVVrVk5UMVpGWDA1UFJFVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIVndaR0YwWldSSmJtUmxlQ0E5SUhWd1pHRjBaUzVtY205dFNXNWtaWGc3WEc0Z0lDQWdJQ0FnSUhaaGNpQjFjR1JoZEdWa1EyaHBiR1FnUFNCMWNHUmhkR1V1Y0dGeVpXNTBUbTlrWlM1amFHbHNaRTV2WkdWelczVndaR0YwWldSSmJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEpsYm5SSlJDQTlJSFZ3WkdGMFpTNXdZWEpsYm5SSlJEdGNibHh1SUNBZ0lDQWdJQ0FoZFhCa1lYUmxaRU5vYVd4a0lEOGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUdsdWRtRnlhV0Z1ZENobVlXeHpaU3dnSjNCeWIyTmxjM05WY0dSaGRHVnpLQ2s2SUZWdVlXSnNaU0IwYnlCbWFXNWtJR05vYVd4a0lDVnpJRzltSUdWc1pXMWxiblF1SUZSb2FYTWdKeUFySUNkd2NtOWlZV0pzZVNCdFpXRnVjeUIwYUdVZ1JFOU5JSGRoY3lCMWJtVjRjR1ZqZEdWa2JIa2diWFYwWVhSbFpDQW9aUzVuTGl3Z1lua2dkR2hsSUNjZ0t5QW5Zbkp2ZDNObGNpa3NJSFZ6ZFdGc2JIa2daSFZsSUhSdklHWnZjbWRsZEhScGJtY2dZU0E4ZEdKdlpIaytJSGRvWlc0Z2RYTnBibWNnZEdGaWJHVnpMQ0FuSUNzZ0oyNWxjM1JwYm1jZ2RHRm5jeUJzYVd0bElEeG1iM0p0UGl3Z1BIQStMQ0J2Y2lBOFlUNHNJRzl5SUhWemFXNW5JRzV2YmkxVFZrY2daV3hsYldWdWRITWdKeUFySUNkcGJpQmhiaUE4YzNablBpQndZWEpsYm5RdUlGUnllU0JwYm5Od1pXTjBhVzVuSUhSb1pTQmphR2xzWkNCdWIyUmxjeUJ2WmlCMGFHVWdaV3hsYldWdWRDQW5JQ3NnSjNkcGRHZ2dVbVZoWTNRZ1NVUWdZQ1Z6WUM0bkxDQjFjR1JoZEdWa1NXNWtaWGdzSUhCaGNtVnVkRWxFS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQWdJQ0FnYVc1cGRHbGhiRU5vYVd4a2NtVnVJRDBnYVc1cGRHbGhiRU5vYVd4a2NtVnVJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQnBibWwwYVdGc1EyaHBiR1J5Wlc1YmNHRnlaVzUwU1VSZElEMGdhVzVwZEdsaGJFTm9hV3hrY21WdVczQmhjbVZ1ZEVsRVhTQjhmQ0JiWFR0Y2JpQWdJQ0FnSUNBZ2FXNXBkR2xoYkVOb2FXeGtjbVZ1VzNCaGNtVnVkRWxFWFZ0MWNHUmhkR1ZrU1c1a1pYaGRJRDBnZFhCa1lYUmxaRU5vYVd4a08xeHVYRzRnSUNBZ0lDQWdJSFZ3WkdGMFpXUkRhR2xzWkhKbGJpQTlJSFZ3WkdGMFpXUkRhR2xzWkhKbGJpQjhmQ0JiWFR0Y2JpQWdJQ0FnSUNBZ2RYQmtZWFJsWkVOb2FXeGtjbVZ1TG5CMWMyZ29kWEJrWVhSbFpFTm9hV3hrS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2NtVnVaR1Z5WldSTllYSnJkWEE3WEc0Z0lDQWdMeThnYldGeWEzVndUR2x6ZENCcGN5QmxhWFJvWlhJZ1lTQnNhWE4wSUc5bUlHMWhjbXQxY0NCdmNpQnFkWE4wSUdFZ2JHbHpkQ0J2WmlCbGJHVnRaVzUwYzF4dUlDQWdJR2xtSUNodFlYSnJkWEJNYVhOMExteGxibWQwYUNBbUppQjBlWEJsYjJZZ2JXRnlhM1Z3VEdsemRGc3dYU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lISmxibVJsY21Wa1RXRnlhM1Z3SUQwZ1JHRnVaMlZ5TG1SaGJtZGxjbTkxYzJ4NVVtVnVaR1Z5VFdGeWEzVndLRzFoY210MWNFeHBjM1FwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaVzVrWlhKbFpFMWhjbXQxY0NBOUlHMWhjbXQxY0V4cGMzUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdVbVZ0YjNabElIVndaR0YwWldRZ1kyaHBiR1J5Wlc0Z1ptbHljM1FnYzI4Z2RHaGhkQ0JnZEc5SmJtUmxlR0FnYVhNZ1kyOXVjMmx6ZEdWdWRDNWNiaUFnSUNCcFppQW9kWEJrWVhSbFpFTm9hV3hrY21WdUtTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnFJRDBnTURzZ2FpQThJSFZ3WkdGMFpXUkRhR2xzWkhKbGJpNXNaVzVuZEdnN0lHb3JLeWtnZTF4dUlDQWdJQ0FnSUNCMWNHUmhkR1ZrUTJocGJHUnlaVzViYWwwdWNHRnlaVzUwVG05a1pTNXlaVzF2ZG1WRGFHbHNaQ2gxY0dSaGRHVmtRMmhwYkdSeVpXNWJhbDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR3NnUFNBd095QnJJRHdnZFhCa1lYUmxjeTVzWlc1bmRHZzdJR3NyS3lrZ2UxeHVJQ0FnSUNBZ2RYQmtZWFJsSUQwZ2RYQmtZWFJsYzF0clhUdGNiaUFnSUNBZ0lITjNhWFJqYUNBb2RYQmtZWFJsTG5SNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnWTJGelpTQlNaV0ZqZEUxMWJIUnBRMmhwYkdSVmNHUmhkR1ZVZVhCbGN5NUpUbE5GVWxSZlRVRlNTMVZRT2x4dUlDQWdJQ0FnSUNBZ0lHbHVjMlZ5ZEVOb2FXeGtRWFFvZFhCa1lYUmxMbkJoY21WdWRFNXZaR1VzSUhKbGJtUmxjbVZrVFdGeWEzVndXM1Z3WkdGMFpTNXRZWEpyZFhCSmJtUmxlRjBzSUhWd1pHRjBaUzUwYjBsdVpHVjRLVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnWTJGelpTQlNaV0ZqZEUxMWJIUnBRMmhwYkdSVmNHUmhkR1ZVZVhCbGN5NU5UMVpGWDBWWVNWTlVTVTVIT2x4dUlDQWdJQ0FnSUNBZ0lHbHVjMlZ5ZEVOb2FXeGtRWFFvZFhCa1lYUmxMbkJoY21WdWRFNXZaR1VzSUdsdWFYUnBZV3hEYUdsc1pISmxibHQxY0dSaGRHVXVjR0Z5Wlc1MFNVUmRXM1Z3WkdGMFpTNW1jbTl0U1c1a1pYaGRMQ0IxY0dSaGRHVXVkRzlKYm1SbGVDazdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ1VtVmhZM1JOZFd4MGFVTm9hV3hrVlhCa1lYUmxWSGx3WlhNdVUwVlVYMDFCVWt0VlVEcGNiaUFnSUNBZ0lDQWdJQ0J6WlhSSmJtNWxja2hVVFV3b2RYQmtZWFJsTG5CaGNtVnVkRTV2WkdVc0lIVndaR0YwWlM1amIyNTBaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0JTWldGamRFMTFiSFJwUTJocGJHUlZjR1JoZEdWVWVYQmxjeTVVUlZoVVgwTlBUbFJGVGxRNlhHNGdJQ0FnSUNBZ0lDQWdjMlYwVkdWNGRFTnZiblJsYm5Rb2RYQmtZWFJsTG5CaGNtVnVkRTV2WkdVc0lIVndaR0YwWlM1amIyNTBaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0JTWldGamRFMTFiSFJwUTJocGJHUlZjR1JoZEdWVWVYQmxjeTVTUlUxUFZrVmZUazlFUlRwY2JpQWdJQ0FnSUNBZ0lDQXZMeUJCYkhKbFlXUjVJSEpsYlc5MlpXUWdZbmtnZEdobElHWnZjaTFzYjI5d0lHRmliM1psTGx4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzU5TzF4dVhHNVNaV0ZqZEZCbGNtWXViV1ZoYzNWeVpVMWxkR2h2WkhNb1JFOU5RMmhwYkdSeVpXNVBjR1Z5WVhScGIyNXpMQ0FuUkU5TlEyaHBiR1J5Wlc1UGNHVnlZWFJwYjI1ekp5d2dlMXh1SUNCMWNHUmhkR1ZVWlhoMFEyOXVkR1Z1ZERvZ0ozVndaR0YwWlZSbGVIUkRiMjUwWlc1MEoxeHVmU2s3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1JFOU5RMmhwYkdSeVpXNVBjR1Z5WVhScGIyNXpPeUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRE9NUHJvcGVydHlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIGNoZWNrTWFzayh2YWx1ZSwgYml0bWFzaykge1xuICByZXR1cm4gKHZhbHVlICYgYml0bWFzaykgPT09IGJpdG1hc2s7XG59XG5cbnZhciBET01Qcm9wZXJ0eUluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkLCBjYW1lbGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGEgY29uZmlndXJhdGlvbiB0aGF0XG4gICAqIHNwZWNpZmllcyBob3cgdGhlIGFzc29jaWF0ZWQgRE9NIHByb3BlcnR5IHNob3VsZCBiZSBhY2Nlc3NlZCBvciByZW5kZXJlZC5cbiAgICovXG4gIE1VU1RfVVNFX0FUVFJJQlVURTogMHgxLFxuICBNVVNUX1VTRV9QUk9QRVJUWTogMHgyLFxuICBIQVNfU0lERV9FRkZFQ1RTOiAweDQsXG4gIEhBU19CT09MRUFOX1ZBTFVFOiAweDgsXG4gIEhBU19OVU1FUklDX1ZBTFVFOiAweDEwLFxuICBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTogMHgyMCB8IDB4MTAsXG4gIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6IDB4NDAsXG5cbiAgLyoqXG4gICAqIEluamVjdCBzb21lIHNwZWNpYWxpemVkIGtub3dsZWRnZSBhYm91dCB0aGUgRE9NLiBUaGlzIHRha2VzIGEgY29uZmlnIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gYW4gYXR0cmlidXRlIG5hbWUgd2lsbCByZXR1cm4gdHJ1ZVxuICAgKiBpZiBpdCBjYW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NIHZlcmJhdGltLiBVc2VmdWwgZm9yIGRhdGEtKiBvciBhcmlhLSpcbiAgICogYXR0cmlidXRlcyB3aGVyZSBpdCdzIGltcG9zc2libGUgdG8gZW51bWVyYXRlIGFsbCBvZiB0aGUgcG9zc2libGVcbiAgICogYXR0cmlidXRlIG5hbWVzLFxuICAgKlxuICAgKiBQcm9wZXJ0aWVzOiBvYmplY3QgbWFwcGluZyBET00gcHJvcGVydHkgbmFtZSB0byBvbmUgb2YgdGhlXG4gICAqIERPTVByb3BlcnR5SW5qZWN0aW9uIGNvbnN0YW50cyBvciBudWxsLiBJZiB5b3VyIGF0dHJpYnV0ZSBpc24ndCBpbiBoZXJlLFxuICAgKiBpdCB3b24ndCBnZXQgd3JpdHRlbiB0byB0aGUgRE9NLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZS4gQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSAqKmxvd2VyY2FzZSoqXG4gICAqIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NQXR0cmlidXRlTmFtZXNwYWNlczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZXNwYWNlIFVSTC4gKEF0dHJpYnV0ZSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSBubyBuYW1lc3BhY2UuKVxuICAgKlxuICAgKiBET01Qcm9wZXJ0eU5hbWVzOiBzaW1pbGFyIHRvIERPTUF0dHJpYnV0ZU5hbWVzIGJ1dCBmb3IgRE9NIHByb3BlcnRpZXMuXG4gICAqIFByb3BlcnR5IG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSBub3JtYWxpemVkIG5hbWUuXG4gICAqXG4gICAqIERPTU11dGF0aW9uTWV0aG9kczogUHJvcGVydGllcyB0aGF0IHJlcXVpcmUgc3BlY2lhbCBtdXRhdGlvbiBtZXRob2RzLiBJZlxuICAgKiBgdmFsdWVgIGlzIHVuZGVmaW5lZCwgdGhlIG11dGF0aW9uIG1ldGhvZCBzaG91bGQgdW5zZXQgdGhlIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZG9tUHJvcGVydHlDb25maWcgdGhlIGNvbmZpZyBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqL1xuICBpbmplY3RET01Qcm9wZXJ0eUNvbmZpZzogZnVuY3Rpb24gKGRvbVByb3BlcnR5Q29uZmlnKSB7XG4gICAgdmFyIEluamVjdGlvbiA9IERPTVByb3BlcnR5SW5qZWN0aW9uO1xuICAgIHZhciBQcm9wZXJ0aWVzID0gZG9tUHJvcGVydHlDb25maWcuUHJvcGVydGllcyB8fCB7fTtcbiAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXNwYWNlcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXMgfHwge307XG4gICAgdmFyIERPTUF0dHJpYnV0ZU5hbWVzID0gZG9tUHJvcGVydHlDb25maWcuRE9NQXR0cmlidXRlTmFtZXMgfHwge307XG4gICAgdmFyIERPTVByb3BlcnR5TmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01Qcm9wZXJ0eU5hbWVzIHx8IHt9O1xuICAgIHZhciBET01NdXRhdGlvbk1ldGhvZHMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01NdXRhdGlvbk1ldGhvZHMgfHwge307XG5cbiAgICBpZiAoZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpIHtcbiAgICAgIERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5wdXNoKGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBQcm9wZXJ0aWVzKSB7XG4gICAgICAhIURPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2luamVjdERPTVByb3BlcnR5Q29uZmlnKC4uLik6IFlvdVxcJ3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5ICcgKyAnXFwnJXNcXCcgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgJyArICdpbmplY3RpbmcgdGhlIHNhbWUgRE9NIHByb3BlcnR5IGNvbmZpZyB0d2ljZSwgb3IgeW91IG1heSBiZSAnICsgJ2luamVjdGluZyB0d28gY29uZmlncyB0aGF0IGhhdmUgY29uZmxpY3RpbmcgcHJvcGVydHkgbmFtZXMuJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGxvd2VyQ2FzZWQgPSBwcm9wTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHByb3BDb25maWcgPSBQcm9wZXJ0aWVzW3Byb3BOYW1lXTtcblxuICAgICAgdmFyIHByb3BlcnR5SW5mbyA9IHtcbiAgICAgICAgYXR0cmlidXRlTmFtZTogbG93ZXJDYXNlZCxcbiAgICAgICAgYXR0cmlidXRlTmFtZXNwYWNlOiBudWxsLFxuICAgICAgICBwcm9wZXJ0eU5hbWU6IHByb3BOYW1lLFxuICAgICAgICBtdXRhdGlvbk1ldGhvZDogbnVsbCxcblxuICAgICAgICBtdXN0VXNlQXR0cmlidXRlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURSksXG4gICAgICAgIG11c3RVc2VQcm9wZXJ0eTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWSksXG4gICAgICAgIGhhc1NpZGVFZmZlY3RzOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19TSURFX0VGRkVDVFMpLFxuICAgICAgICBoYXNCb29sZWFuVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUpLFxuICAgICAgICBoYXNOdW1lcmljVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUUpLFxuICAgICAgICBoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSksXG4gICAgICAgIGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSlcbiAgICAgIH07XG5cbiAgICAgICEoIXByb3BlcnR5SW5mby5tdXN0VXNlQXR0cmlidXRlIHx8ICFwcm9wZXJ0eUluZm8ubXVzdFVzZVByb3BlcnR5KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdET01Qcm9wZXJ0eTogQ2Fubm90IHJlcXVpcmUgdXNpbmcgYm90aCBhdHRyaWJ1dGUgYW5kIHByb3BlcnR5OiAlcycsIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAhKHByb3BlcnR5SW5mby5tdXN0VXNlUHJvcGVydHkgfHwgIXByb3BlcnR5SW5mby5oYXNTaWRlRWZmZWN0cykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRE9NUHJvcGVydHk6IFByb3BlcnRpZXMgdGhhdCBoYXZlIHNpZGUgZWZmZWN0cyBtdXN0IHVzZSBwcm9wZXJ0eTogJXMnLCBwcm9wTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgIShwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICsgcHJvcGVydHlJbmZvLmhhc051bWVyaWNWYWx1ZSArIHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIDw9IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RPTVByb3BlcnR5OiBWYWx1ZSBjYW4gYmUgb25lIG9mIGJvb2xlYW4sIG92ZXJsb2FkZWQgYm9vbGVhbiwgb3IgJyArICdudW1lcmljIHZhbHVlLCBidXQgbm90IGEgY29tYmluYXRpb246ICVzJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZF0gPSBwcm9wTmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTUF0dHJpYnV0ZU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgICAgcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2F0dHJpYnV0ZU5hbWVdID0gcHJvcE5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2UgPSBET01BdHRyaWJ1dGVOYW1lc3BhY2VzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTVByb3BlcnR5TmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWUgPSBET01Qcm9wZXJ0eU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTU11dGF0aW9uTWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcGVydHlJbmZvLm11dGF0aW9uTWV0aG9kID0gRE9NTXV0YXRpb25NZXRob2RzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wTmFtZV0gPSBwcm9wZXJ0eUluZm87XG4gICAgfVxuICB9XG59O1xudmFyIGRlZmF1bHRWYWx1ZUNhY2hlID0ge307XG5cbi8qKlxuICogRE9NUHJvcGVydHkgZXhwb3J0cyBsb29rdXAgb2JqZWN0cyB0aGF0IGNhbiBiZSB1c2VkIGxpa2UgZnVuY3Rpb25zOlxuICpcbiAqICAgPiBET01Qcm9wZXJ0eS5pc1ZhbGlkWydpZCddXG4gKiAgIHRydWVcbiAqICAgPiBET01Qcm9wZXJ0eS5pc1ZhbGlkWydmb29iYXInXVxuICogICB1bmRlZmluZWRcbiAqXG4gKiBBbHRob3VnaCB0aGlzIG1heSBiZSBjb25mdXNpbmcsIGl0IHBlcmZvcm1zIGJldHRlciBpbiBnZW5lcmFsLlxuICpcbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20va2V5LWV4aXN0c1xuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9rZXktbWlzc2luZ1xuICovXG52YXIgRE9NUHJvcGVydHkgPSB7XG5cbiAgSURfQVRUUklCVVRFX05BTUU6ICdkYXRhLXJlYWN0aWQnLFxuXG4gIC8qKlxuICAgKiBNYXAgZnJvbSBwcm9wZXJ0eSBcInN0YW5kYXJkIG5hbWVcIiB0byBhbiBvYmplY3Qgd2l0aCBpbmZvIGFib3V0IGhvdyB0byBzZXRcbiAgICogdGhlIHByb3BlcnR5IGluIHRoZSBET00uIEVhY2ggb2JqZWN0IGNvbnRhaW5zOlxuICAgKlxuICAgKiBhdHRyaWJ1dGVOYW1lOlxuICAgKiAgIFVzZWQgd2hlbiByZW5kZXJpbmcgbWFya3VwIG9yIHdpdGggYCpBdHRyaWJ1dGUoKWAuXG4gICAqIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICAgKiBwcm9wZXJ0eU5hbWU6XG4gICAqICAgVXNlZCBvbiBET00gbm9kZSBpbnN0YW5jZXMuIChUaGlzIGluY2x1ZGVzIHByb3BlcnRpZXMgdGhhdCBtdXRhdGUgZHVlIHRvXG4gICAqICAgZXh0ZXJuYWwgZmFjdG9ycy4pXG4gICAqIG11dGF0aW9uTWV0aG9kOlxuICAgKiAgIElmIG5vbi1udWxsLCB1c2VkIGluc3RlYWQgb2YgdGhlIHByb3BlcnR5IG9yIGBzZXRBdHRyaWJ1dGUoKWAgYWZ0ZXJcbiAgICogICBpbml0aWFsIHJlbmRlci5cbiAgICogbXVzdFVzZUF0dHJpYnV0ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIHVzaW5nIGAqQXR0cmlidXRlKClgLlxuICAgKiAgIChUaGlzIGluY2x1ZGVzIGFueXRoaW5nIHRoYXQgZmFpbHMgYDxwcm9wTmFtZT4gaW4gPGVsZW1lbnQ+YC4pXG4gICAqIG11c3RVc2VQcm9wZXJ0eTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eS5cbiAgICogaGFzU2lkZUVmZmVjdHM6XG4gICAqICAgV2hldGhlciBvciBub3Qgc2V0dGluZyBhIHZhbHVlIGNhdXNlcyBzaWRlIGVmZmVjdHMgc3VjaCBhcyB0cmlnZ2VyaW5nXG4gICAqICAgcmVzb3VyY2VzIHRvIGJlIGxvYWRlZCBvciB0ZXh0IHNlbGVjdGlvbiBjaGFuZ2VzLiBJZiB0cnVlLCB3ZSByZWFkIGZyb21cbiAgICogICB0aGUgRE9NIGJlZm9yZSB1cGRhdGluZyB0byBlbnN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgaWYgaXQgaGFzXG4gICAqICAgY2hhbmdlZC5cbiAgICogaGFzQm9vbGVhblZhbHVlOlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBoYXNOdW1lcmljVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgbnVtZXJpYyBhbmQgc2hvdWxkIGJlXG4gICAqICAgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBwb3NpdGl2ZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgcG9zaXRpdmVcbiAgICogICBudW1lcmljIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBhcyBhIGZsYWcgYXMgd2VsbCBhcyB3aXRoIGEgdmFsdWUuXG4gICAqICAgUmVtb3ZlZCB3aGVuIHN0cmljdGx5IGVxdWFsIHRvIGZhbHNlOyBwcmVzZW50IHdpdGhvdXQgYSB2YWx1ZSB3aGVuXG4gICAqICAgc3RyaWN0bHkgZXF1YWwgdG8gdHJ1ZTsgcHJlc2VudCB3aXRoIGEgdmFsdWUgb3RoZXJ3aXNlLlxuICAgKi9cbiAgcHJvcGVydGllczoge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBsb3dlcmNhc2UgcHJvcGVydHkgbmFtZXMgdG8gdGhlIHByb3Blcmx5IGNhc2VkIHZlcnNpb24sIHVzZWRcbiAgICogdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIHByb3BlcnRpZXMuIEF2YWlsYWJsZSBvbmx5IGluIF9fREVWX18uXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHt9IDogbnVsbCxcblxuICAvKipcbiAgICogQWxsIG9mIHRoZSBpc0N1c3RvbUF0dHJpYnV0ZSgpIGZ1bmN0aW9ucyB0aGF0IGhhdmUgYmVlbiBpbmplY3RlZC5cbiAgICovXG4gIF9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uczogW10sXG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGEgcHJvcGVydHkgbmFtZSBpcyBhIGN1c3RvbSBhdHRyaWJ1dGUuXG4gICAqIEBtZXRob2RcbiAgICovXG4gIGlzQ3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXNDdXN0b21BdHRyaWJ1dGVGbiA9IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uc1tpXTtcbiAgICAgIGlmIChpc0N1c3RvbUF0dHJpYnV0ZUZuKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgcHJvcGVydHkgdmFsdWUgZm9yIGEgRE9NIHByb3BlcnR5IChpLmUuLCBub3QgYW5cbiAgICogYXR0cmlidXRlKS4gTW9zdCBkZWZhdWx0IHZhbHVlcyBhcmUgJycgb3IgZmFsc2UsIGJ1dCBub3QgYWxsLiBXb3JzZSB5ZXQsXG4gICAqIHNvbWUgKGluIHBhcnRpY3VsYXIsIGB0eXBlYCkgdmFyeSBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgZWxlbWVudC5cbiAgICpcbiAgICogVE9ETzogSXMgaXQgYmV0dGVyIHRvIGdyYWIgYWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIHdoZW4gY3JlYXRpbmcgYW5cbiAgICogZWxlbWVudCB0byBhdm9pZCBoYXZpbmcgdG8gY3JlYXRlIHRoZSBzYW1lIGVsZW1lbnQgdHdpY2U/XG4gICAqL1xuICBnZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24gKG5vZGVOYW1lLCBwcm9wKSB7XG4gICAgdmFyIG5vZGVEZWZhdWx0cyA9IGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXTtcbiAgICB2YXIgdGVzdEVsZW1lbnQ7XG4gICAgaWYgKCFub2RlRGVmYXVsdHMpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXSA9IG5vZGVEZWZhdWx0cyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIShwcm9wIGluIG5vZGVEZWZhdWx0cykpIHtcbiAgICAgIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XG4gICAgICBub2RlRGVmYXVsdHNbcHJvcF0gPSB0ZXN0RWxlbWVudFtwcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVEZWZhdWx0c1twcm9wXTtcbiAgfSxcblxuICBpbmplY3Rpb246IERPTVByb3BlcnR5SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJFOU5VSEp2Y0dWeWRIa3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRVJQVFZCeWIzQmxjblI1WEc0Z0tpQkFkSGx3WldOb1pXTnJjeUJ6ZEdGMGFXTXRiMjVzZVZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMmx1ZG1GeWFXRnVkQ2NwTzF4dVhHNW1kVzVqZEdsdmJpQmphR1ZqYTAxaGMyc29kbUZzZFdVc0lHSnBkRzFoYzJzcElIdGNiaUFnY21WMGRYSnVJQ2gyWVd4MVpTQW1JR0pwZEcxaGMyc3BJRDA5UFNCaWFYUnRZWE5yTzF4dWZWeHVYRzUyWVhJZ1JFOU5VSEp2Y0dWeWRIbEpibXBsWTNScGIyNGdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQk5ZWEJ3YVc1bklHWnliMjBnYm05eWJXRnNhWHBsWkN3Z1kyRnRaV3hqWVhObFpDQndjbTl3WlhKMGVTQnVZVzFsY3lCMGJ5QmhJR052Ym1acFozVnlZWFJwYjI0Z2RHaGhkRnh1SUNBZ0tpQnpjR1ZqYVdacFpYTWdhRzkzSUhSb1pTQmhjM052WTJsaGRHVmtJRVJQVFNCd2NtOXdaWEowZVNCemFHOTFiR1FnWW1VZ1lXTmpaWE56WldRZ2IzSWdjbVZ1WkdWeVpXUXVYRzRnSUNBcUwxeHVJQ0JOVlZOVVgxVlRSVjlCVkZSU1NVSlZWRVU2SURCNE1TeGNiaUFnVFZWVFZGOVZVMFZmVUZKUFVFVlNWRms2SURCNE1peGNiaUFnU0VGVFgxTkpSRVZmUlVaR1JVTlVVem9nTUhnMExGeHVJQ0JJUVZOZlFrOVBURVZCVGw5V1FVeFZSVG9nTUhnNExGeHVJQ0JJUVZOZlRsVk5SVkpKUTE5V1FVeFZSVG9nTUhneE1DeGNiaUFnU0VGVFgxQlBVMGxVU1ZaRlgwNVZUVVZTU1VOZlZrRk1WVVU2SURCNE1qQWdmQ0F3ZURFd0xGeHVJQ0JJUVZOZlQxWkZVa3hQUVVSRlJGOUNUMDlNUlVGT1gxWkJURlZGT2lBd2VEUXdMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibXBsWTNRZ2MyOXRaU0J6Y0dWamFXRnNhWHBsWkNCcmJtOTNiR1ZrWjJVZ1lXSnZkWFFnZEdobElFUlBUUzRnVkdocGN5QjBZV3RsY3lCaElHTnZibVpwWnlCdlltcGxZM1JjYmlBZ0lDb2dkMmwwYUNCMGFHVWdabTlzYkc5M2FXNW5JSEJ5YjNCbGNuUnBaWE02WEc0Z0lDQXFYRzRnSUNBcUlHbHpRM1Z6ZEc5dFFYUjBjbWxpZFhSbE9pQm1kVzVqZEdsdmJpQjBhR0YwSUdkcGRtVnVJR0Z1SUdGMGRISnBZblYwWlNCdVlXMWxJSGRwYkd3Z2NtVjBkWEp1SUhSeWRXVmNiaUFnSUNvZ2FXWWdhWFFnWTJGdUlHSmxJR2x1YzJWeWRHVmtJR2x1ZEc4Z2RHaGxJRVJQVFNCMlpYSmlZWFJwYlM0Z1ZYTmxablZzSUdadmNpQmtZWFJoTFNvZ2IzSWdZWEpwWVMwcVhHNGdJQ0FxSUdGMGRISnBZblYwWlhNZ2QyaGxjbVVnYVhRbmN5QnBiWEJ2YzNOcFlteGxJSFJ2SUdWdWRXMWxjbUYwWlNCaGJHd2diMllnZEdobElIQnZjM05wWW14bFhHNGdJQ0FxSUdGMGRISnBZblYwWlNCdVlXMWxjeXhjYmlBZ0lDcGNiaUFnSUNvZ1VISnZjR1Z5ZEdsbGN6b2diMkpxWldOMElHMWhjSEJwYm1jZ1JFOU5JSEJ5YjNCbGNuUjVJRzVoYldVZ2RHOGdiMjVsSUc5bUlIUm9aVnh1SUNBZ0tpQkVUMDFRY205d1pYSjBlVWx1YW1WamRHbHZiaUJqYjI1emRHRnVkSE1nYjNJZ2JuVnNiQzRnU1dZZ2VXOTFjaUJoZEhSeWFXSjFkR1VnYVhOdUozUWdhVzRnYUdWeVpTeGNiaUFnSUNvZ2FYUWdkMjl1SjNRZ1oyVjBJSGR5YVhSMFpXNGdkRzhnZEdobElFUlBUUzVjYmlBZ0lDcGNiaUFnSUNvZ1JFOU5RWFIwY21saWRYUmxUbUZ0WlhNNklHOWlhbVZqZENCdFlYQndhVzVuSUZKbFlXTjBJR0YwZEhKcFluVjBaU0J1WVcxbElIUnZJSFJvWlNCRVQwMWNiaUFnSUNvZ1lYUjBjbWxpZFhSbElHNWhiV1V1SUVGMGRISnBZblYwWlNCdVlXMWxjeUJ1YjNRZ2MzQmxZMmxtYVdWa0lIVnpaU0IwYUdVZ0tpcHNiM2RsY21OaGMyVXFLbHh1SUNBZ0tpQnViM0p0WVd4cGVtVmtJRzVoYldVdVhHNGdJQ0FxWEc0Z0lDQXFJRVJQVFVGMGRISnBZblYwWlU1aGJXVnpjR0ZqWlhNNklHOWlhbVZqZENCdFlYQndhVzVuSUZKbFlXTjBJR0YwZEhKcFluVjBaU0J1WVcxbElIUnZJSFJvWlNCRVQwMWNiaUFnSUNvZ1lYUjBjbWxpZFhSbElHNWhiV1Z6Y0dGalpTQlZVa3d1SUNoQmRIUnlhV0oxZEdVZ2JtRnRaWE1nYm05MElITndaV05wWm1sbFpDQjFjMlVnYm04Z2JtRnRaWE53WVdObExpbGNiaUFnSUNwY2JpQWdJQ29nUkU5TlVISnZjR1Z5ZEhsT1lXMWxjem9nYzJsdGFXeGhjaUIwYnlCRVQwMUJkSFJ5YVdKMWRHVk9ZVzFsY3lCaWRYUWdabTl5SUVSUFRTQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0tpQlFjbTl3WlhKMGVTQnVZVzFsY3lCdWIzUWdjM0JsWTJsbWFXVmtJSFZ6WlNCMGFHVWdibTl5YldGc2FYcGxaQ0J1WVcxbExseHVJQ0FnS2x4dUlDQWdLaUJFVDAxTmRYUmhkR2x2YmsxbGRHaHZaSE02SUZCeWIzQmxjblJwWlhNZ2RHaGhkQ0J5WlhGMWFYSmxJSE53WldOcFlXd2diWFYwWVhScGIyNGdiV1YwYUc5a2N5NGdTV1pjYmlBZ0lDb2dZSFpoYkhWbFlDQnBjeUIxYm1SbFptbHVaV1FzSUhSb1pTQnRkWFJoZEdsdmJpQnRaWFJvYjJRZ2MyaHZkV3hrSUhWdWMyVjBJSFJvWlNCd2NtOXdaWEowZVM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHUnZiVkJ5YjNCbGNuUjVRMjl1Wm1sbklIUm9aU0JqYjI1bWFXY2dZWE1nWkdWelkzSnBZbVZrSUdGaWIzWmxMbHh1SUNBZ0tpOWNiaUFnYVc1cVpXTjBSRTlOVUhKdmNHVnlkSGxEYjI1bWFXYzZJR1oxYm1OMGFXOXVJQ2hrYjIxUWNtOXdaWEowZVVOdmJtWnBaeWtnZTF4dUlDQWdJSFpoY2lCSmJtcGxZM1JwYjI0Z1BTQkVUMDFRY205d1pYSjBlVWx1YW1WamRHbHZianRjYmlBZ0lDQjJZWElnVUhKdmNHVnlkR2xsY3lBOUlHUnZiVkJ5YjNCbGNuUjVRMjl1Wm1sbkxsQnliM0JsY25ScFpYTWdmSHdnZTMwN1hHNGdJQ0FnZG1GeUlFUlBUVUYwZEhKcFluVjBaVTVoYldWemNHRmpaWE1nUFNCa2IyMVFjbTl3WlhKMGVVTnZibVpwWnk1RVQwMUJkSFJ5YVdKMWRHVk9ZVzFsYzNCaFkyVnpJSHg4SUh0OU8xeHVJQ0FnSUhaaGNpQkVUMDFCZEhSeWFXSjFkR1ZPWVcxbGN5QTlJR1J2YlZCeWIzQmxjblI1UTI5dVptbG5Ma1JQVFVGMGRISnBZblYwWlU1aGJXVnpJSHg4SUh0OU8xeHVJQ0FnSUhaaGNpQkVUMDFRY205d1pYSjBlVTVoYldWeklEMGdaRzl0VUhKdmNHVnlkSGxEYjI1bWFXY3VSRTlOVUhKdmNHVnlkSGxPWVcxbGN5QjhmQ0I3ZlR0Y2JpQWdJQ0IyWVhJZ1JFOU5UWFYwWVhScGIyNU5aWFJvYjJSeklEMGdaRzl0VUhKdmNHVnlkSGxEYjI1bWFXY3VSRTlOVFhWMFlYUnBiMjVOWlhSb2IyUnpJSHg4SUh0OU8xeHVYRzRnSUNBZ2FXWWdLR1J2YlZCeWIzQmxjblI1UTI5dVptbG5MbWx6UTNWemRHOXRRWFIwY21saWRYUmxLU0I3WEc0Z0lDQWdJQ0JFVDAxUWNtOXdaWEowZVM1ZmFYTkRkWE4wYjIxQmRIUnlhV0oxZEdWR2RXNWpkR2x2Ym5NdWNIVnphQ2hrYjIxUWNtOXdaWEowZVVOdmJtWnBaeTVwYzBOMWMzUnZiVUYwZEhKcFluVjBaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoMllYSWdjSEp2Y0U1aGJXVWdhVzRnVUhKdmNHVnlkR2xsY3lrZ2UxeHVJQ0FnSUNBZ0lTRkVUMDFRY205d1pYSjBlUzV3Y205d1pYSjBhV1Z6TG1oaGMwOTNibEJ5YjNCbGNuUjVLSEJ5YjNCT1lXMWxLU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZHBibXBsWTNSRVQwMVFjbTl3WlhKMGVVTnZibVpwWnlndUxpNHBPaUJaYjNWY1hDZHlaU0IwY25scGJtY2dkRzhnYVc1cVpXTjBJRVJQVFNCd2NtOXdaWEowZVNBbklDc2dKMXhjSnlWelhGd25JSGRvYVdOb0lHaGhjeUJoYkhKbFlXUjVJR0psWlc0Z2FXNXFaV04wWldRdUlGbHZkU0J0WVhrZ1ltVWdZV05qYVdSbGJuUmhiR3g1SUNjZ0t5QW5hVzVxWldOMGFXNW5JSFJvWlNCellXMWxJRVJQVFNCd2NtOXdaWEowZVNCamIyNW1hV2NnZEhkcFkyVXNJRzl5SUhsdmRTQnRZWGtnWW1VZ0p5QXJJQ2RwYm1wbFkzUnBibWNnZEhkdklHTnZibVpwWjNNZ2RHaGhkQ0JvWVhabElHTnZibVpzYVdOMGFXNW5JSEJ5YjNCbGNuUjVJRzVoYldWekxpY3NJSEJ5YjNCT1lXMWxLU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNBZ0lIWmhjaUJzYjNkbGNrTmhjMlZrSUQwZ2NISnZjRTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmlBZ0lDQWdJSFpoY2lCd2NtOXdRMjl1Wm1sbklEMGdVSEp2Y0dWeWRHbGxjMXR3Y205d1RtRnRaVjA3WEc1Y2JpQWdJQ0FnSUhaaGNpQndjbTl3WlhKMGVVbHVabThnUFNCN1hHNGdJQ0FnSUNBZ0lHRjBkSEpwWW5WMFpVNWhiV1U2SUd4dmQyVnlRMkZ6WldRc1hHNGdJQ0FnSUNBZ0lHRjBkSEpwWW5WMFpVNWhiV1Z6Y0dGalpUb2diblZzYkN4Y2JpQWdJQ0FnSUNBZ2NISnZjR1Z5ZEhsT1lXMWxPaUJ3Y205d1RtRnRaU3hjYmlBZ0lDQWdJQ0FnYlhWMFlYUnBiMjVOWlhSb2IyUTZJRzUxYkd3c1hHNWNiaUFnSUNBZ0lDQWdiWFZ6ZEZWelpVRjBkSEpwWW5WMFpUb2dZMmhsWTJ0TllYTnJLSEJ5YjNCRGIyNW1hV2NzSUVsdWFtVmpkR2x2Ymk1TlZWTlVYMVZUUlY5QlZGUlNTVUpWVkVVcExGeHVJQ0FnSUNBZ0lDQnRkWE4wVlhObFVISnZjR1Z5ZEhrNklHTm9aV05yVFdGemF5aHdjbTl3UTI5dVptbG5MQ0JKYm1wbFkzUnBiMjR1VFZWVFZGOVZVMFZmVUZKUFVFVlNWRmtwTEZ4dUlDQWdJQ0FnSUNCb1lYTlRhV1JsUldabVpXTjBjem9nWTJobFkydE5ZWE5yS0hCeWIzQkRiMjVtYVdjc0lFbHVhbVZqZEdsdmJpNUlRVk5mVTBsRVJWOUZSa1pGUTFSVEtTeGNiaUFnSUNBZ0lDQWdhR0Z6UW05dmJHVmhibFpoYkhWbE9pQmphR1ZqYTAxaGMyc29jSEp2Y0VOdmJtWnBaeXdnU1c1cVpXTjBhVzl1TGtoQlUxOUNUMDlNUlVGT1gxWkJURlZGS1N4Y2JpQWdJQ0FnSUNBZ2FHRnpUblZ0WlhKcFkxWmhiSFZsT2lCamFHVmphMDFoYzJzb2NISnZjRU52Ym1acFp5d2dTVzVxWldOMGFXOXVMa2hCVTE5T1ZVMUZVa2xEWDFaQlRGVkZLU3hjYmlBZ0lDQWdJQ0FnYUdGelVHOXphWFJwZG1WT2RXMWxjbWxqVm1Gc2RXVTZJR05vWldOclRXRnpheWh3Y205d1EyOXVabWxuTENCSmJtcGxZM1JwYjI0dVNFRlRYMUJQVTBsVVNWWkZYMDVWVFVWU1NVTmZWa0ZNVlVVcExGeHVJQ0FnSUNBZ0lDQm9ZWE5QZG1WeWJHOWhaR1ZrUW05dmJHVmhibFpoYkhWbE9pQmphR1ZqYTAxaGMyc29jSEp2Y0VOdmJtWnBaeXdnU1c1cVpXTjBhVzl1TGtoQlUxOVBWa1ZTVEU5QlJFVkVYMEpQVDB4RlFVNWZWa0ZNVlVVcFhHNGdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWhLQ0Z3Y205d1pYSjBlVWx1Wm04dWJYVnpkRlZ6WlVGMGRISnBZblYwWlNCOGZDQWhjSEp2Y0dWeWRIbEpibVp2TG0xMWMzUlZjMlZRY205d1pYSjBlU2tnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5SRTlOVUhKdmNHVnlkSGs2SUVOaGJtNXZkQ0J5WlhGMWFYSmxJSFZ6YVc1bklHSnZkR2dnWVhSMGNtbGlkWFJsSUdGdVpDQndjbTl3WlhKMGVUb2dKWE1uTENCd2NtOXdUbUZ0WlNrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJU2h3Y205d1pYSjBlVWx1Wm04dWJYVnpkRlZ6WlZCeWIzQmxjblI1SUh4OElDRndjbTl3WlhKMGVVbHVabTh1YUdGelUybGtaVVZtWm1WamRITXBJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0owUlBUVkJ5YjNCbGNuUjVPaUJRY205d1pYSjBhV1Z6SUhSb1lYUWdhR0YyWlNCemFXUmxJR1ZtWm1WamRITWdiWFZ6ZENCMWMyVWdjSEp2Y0dWeWRIazZJQ1Z6Snl3Z2NISnZjRTVoYldVcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0VvY0hKdmNHVnlkSGxKYm1adkxtaGhjMEp2YjJ4bFlXNVdZV3gxWlNBcklIQnliM0JsY25SNVNXNW1ieTVvWVhOT2RXMWxjbWxqVm1Gc2RXVWdLeUJ3Y205d1pYSjBlVWx1Wm04dWFHRnpUM1psY214dllXUmxaRUp2YjJ4bFlXNVdZV3gxWlNBOFBTQXhLU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZEVUMDFRY205d1pYSjBlVG9nVm1Gc2RXVWdZMkZ1SUdKbElHOXVaU0J2WmlCaWIyOXNaV0Z1TENCdmRtVnliRzloWkdWa0lHSnZiMnhsWVc0c0lHOXlJQ2NnS3lBbmJuVnRaWEpwWXlCMllXeDFaU3dnWW5WMElHNXZkQ0JoSUdOdmJXSnBibUYwYVc5dU9pQWxjeWNzSUhCeWIzQk9ZVzFsS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJRVJQVFZCeWIzQmxjblI1TG1kbGRGQnZjM05wWW14bFUzUmhibVJoY21ST1lXMWxXMnh2ZDJWeVEyRnpaV1JkSUQwZ2NISnZjRTVoYldVN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2hFVDAxQmRIUnlhV0oxZEdWT1lXMWxjeTVvWVhOUGQyNVFjbTl3WlhKMGVTaHdjbTl3VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRjBkSEpwWW5WMFpVNWhiV1VnUFNCRVQwMUJkSFJ5YVdKMWRHVk9ZVzFsYzF0d2NtOXdUbUZ0WlYwN1hHNGdJQ0FnSUNBZ0lIQnliM0JsY25SNVNXNW1ieTVoZEhSeWFXSjFkR1ZPWVcxbElEMGdZWFIwY21saWRYUmxUbUZ0WlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQkVUMDFRY205d1pYSjBlUzVuWlhSUWIzTnphV0pzWlZOMFlXNWtZWEprVG1GdFpWdGhkSFJ5YVdKMWRHVk9ZVzFsWFNBOUlIQnliM0JPWVcxbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoRVQwMUJkSFJ5YVdKMWRHVk9ZVzFsYzNCaFkyVnpMbWhoYzA5M2JsQnliM0JsY25SNUtIQnliM0JPWVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0J3Y205d1pYSjBlVWx1Wm04dVlYUjBjbWxpZFhSbFRtRnRaWE53WVdObElEMGdSRTlOUVhSMGNtbGlkWFJsVG1GdFpYTndZV05sYzF0d2NtOXdUbUZ0WlYwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2hFVDAxUWNtOXdaWEowZVU1aGJXVnpMbWhoYzA5M2JsQnliM0JsY25SNUtIQnliM0JPWVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0J3Y205d1pYSjBlVWx1Wm04dWNISnZjR1Z5ZEhsT1lXMWxJRDBnUkU5TlVISnZjR1Z5ZEhsT1lXMWxjMXR3Y205d1RtRnRaVjA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaEVUMDFOZFhSaGRHbHZiazFsZEdodlpITXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NISnZjRTVoYldVcEtTQjdYRzRnSUNBZ0lDQWdJSEJ5YjNCbGNuUjVTVzVtYnk1dGRYUmhkR2x2YmsxbGRHaHZaQ0E5SUVSUFRVMTFkR0YwYVc5dVRXVjBhRzlrYzF0d2NtOXdUbUZ0WlYwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lFUlBUVkJ5YjNCbGNuUjVMbkJ5YjNCbGNuUnBaWE5iY0hKdmNFNWhiV1ZkSUQwZ2NISnZjR1Z5ZEhsSmJtWnZPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZUdGNiblpoY2lCa1pXWmhkV3gwVm1Gc2RXVkRZV05vWlNBOUlIdDlPMXh1WEc0dktpcGNiaUFxSUVSUFRWQnliM0JsY25SNUlHVjRjRzl5ZEhNZ2JHOXZhM1Z3SUc5aWFtVmpkSE1nZEdoaGRDQmpZVzRnWW1VZ2RYTmxaQ0JzYVd0bElHWjFibU4wYVc5dWN6cGNiaUFxWEc0Z0tpQWdJRDRnUkU5TlVISnZjR1Z5ZEhrdWFYTldZV3hwWkZzbmFXUW5YVnh1SUNvZ0lDQjBjblZsWEc0Z0tpQWdJRDRnUkU5TlVISnZjR1Z5ZEhrdWFYTldZV3hwWkZzblptOXZZbUZ5SjExY2JpQXFJQ0FnZFc1a1pXWnBibVZrWEc0Z0tseHVJQ29nUVd4MGFHOTFaMmdnZEdocGN5QnRZWGtnWW1VZ1kyOXVablZ6YVc1bkxDQnBkQ0J3WlhKbWIzSnRjeUJpWlhSMFpYSWdhVzRnWjJWdVpYSmhiQzVjYmlBcVhHNGdLaUJBYzJWbElHaDBkSEE2THk5cWMzQmxjbVl1WTI5dEwydGxlUzFsZUdsemRITmNiaUFxSUVCelpXVWdhSFIwY0RvdkwycHpjR1Z5Wmk1amIyMHZhMlY1TFcxcGMzTnBibWRjYmlBcUwxeHVkbUZ5SUVSUFRWQnliM0JsY25SNUlEMGdlMXh1WEc0Z0lFbEVYMEZVVkZKSlFsVlVSVjlPUVUxRk9pQW5aR0YwWVMxeVpXRmpkR2xrSnl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVFdGd0lHWnliMjBnY0hKdmNHVnlkSGtnWENKemRHRnVaR0Z5WkNCdVlXMWxYQ0lnZEc4Z1lXNGdiMkpxWldOMElIZHBkR2dnYVc1bWJ5QmhZbTkxZENCb2IzY2dkRzhnYzJWMFhHNGdJQ0FxSUhSb1pTQndjbTl3WlhKMGVTQnBiaUIwYUdVZ1JFOU5MaUJGWVdOb0lHOWlhbVZqZENCamIyNTBZV2x1Y3pwY2JpQWdJQ3BjYmlBZ0lDb2dZWFIwY21saWRYUmxUbUZ0WlRwY2JpQWdJQ29nSUNCVmMyVmtJSGRvWlc0Z2NtVnVaR1Z5YVc1bklHMWhjbXQxY0NCdmNpQjNhWFJvSUdBcVFYUjBjbWxpZFhSbEtDbGdMbHh1SUNBZ0tpQmhkSFJ5YVdKMWRHVk9ZVzFsYzNCaFkyVmNiaUFnSUNvZ2NISnZjR1Z5ZEhsT1lXMWxPbHh1SUNBZ0tpQWdJRlZ6WldRZ2IyNGdSRTlOSUc1dlpHVWdhVzV6ZEdGdVkyVnpMaUFvVkdocGN5QnBibU5zZFdSbGN5QndjbTl3WlhKMGFXVnpJSFJvWVhRZ2JYVjBZWFJsSUdSMVpTQjBiMXh1SUNBZ0tpQWdJR1Y0ZEdWeWJtRnNJR1poWTNSdmNuTXVLVnh1SUNBZ0tpQnRkWFJoZEdsdmJrMWxkR2h2WkRwY2JpQWdJQ29nSUNCSlppQnViMjR0Ym5Wc2JDd2dkWE5sWkNCcGJuTjBaV0ZrSUc5bUlIUm9aU0J3Y205d1pYSjBlU0J2Y2lCZ2MyVjBRWFIwY21saWRYUmxLQ2xnSUdGbWRHVnlYRzRnSUNBcUlDQWdhVzVwZEdsaGJDQnlaVzVrWlhJdVhHNGdJQ0FxSUcxMWMzUlZjMlZCZEhSeWFXSjFkR1U2WEc0Z0lDQXFJQ0FnVjJobGRHaGxjaUIwYUdVZ2NISnZjR1Z5ZEhrZ2JYVnpkQ0JpWlNCaFkyTmxjM05sWkNCaGJtUWdiWFYwWVhSbFpDQjFjMmx1WnlCZ0trRjBkSEpwWW5WMFpTZ3BZQzVjYmlBZ0lDb2dJQ0FvVkdocGN5QnBibU5zZFdSbGN5QmhibmwwYUdsdVp5QjBhR0YwSUdaaGFXeHpJR0E4Y0hKdmNFNWhiV1UrSUdsdUlEeGxiR1Z0Wlc1MFBtQXVLVnh1SUNBZ0tpQnRkWE4wVlhObFVISnZjR1Z5ZEhrNlhHNGdJQ0FxSUNBZ1YyaGxkR2hsY2lCMGFHVWdjSEp2Y0dWeWRIa2diWFZ6ZENCaVpTQmhZMk5sYzNObFpDQmhibVFnYlhWMFlYUmxaQ0JoY3lCaGJpQnZZbXBsWTNRZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FxSUdoaGMxTnBaR1ZGWm1abFkzUnpPbHh1SUNBZ0tpQWdJRmRvWlhSb1pYSWdiM0lnYm05MElITmxkSFJwYm1jZ1lTQjJZV3gxWlNCallYVnpaWE1nYzJsa1pTQmxabVpsWTNSeklITjFZMmdnWVhNZ2RISnBaMmRsY21sdVoxeHVJQ0FnS2lBZ0lISmxjMjkxY21ObGN5QjBieUJpWlNCc2IyRmtaV1FnYjNJZ2RHVjRkQ0J6Wld4bFkzUnBiMjRnWTJoaGJtZGxjeTRnU1dZZ2RISjFaU3dnZDJVZ2NtVmhaQ0JtY205dFhHNGdJQ0FxSUNBZ2RHaGxJRVJQVFNCaVpXWnZjbVVnZFhCa1lYUnBibWNnZEc4Z1pXNXpkWEpsSUhSb1lYUWdkR2hsSUhaaGJIVmxJR2x6SUc5dWJIa2djMlYwSUdsbUlHbDBJR2hoYzF4dUlDQWdLaUFnSUdOb1lXNW5aV1F1WEc0Z0lDQXFJR2hoYzBKdmIyeGxZVzVXWVd4MVpUcGNiaUFnSUNvZ0lDQlhhR1YwYUdWeUlIUm9aU0J3Y205d1pYSjBlU0J6YUc5MWJHUWdZbVVnY21WdGIzWmxaQ0IzYUdWdUlITmxkQ0IwYnlCaElHWmhiSE5sZVNCMllXeDFaUzVjYmlBZ0lDb2dhR0Z6VG5WdFpYSnBZMVpoYkhWbE9seHVJQ0FnS2lBZ0lGZG9aWFJvWlhJZ2RHaGxJSEJ5YjNCbGNuUjVJRzExYzNRZ1ltVWdiblZ0WlhKcFl5QnZjaUJ3WVhKelpTQmhjeUJoSUc1MWJXVnlhV01nWVc1a0lITm9iM1ZzWkNCaVpWeHVJQ0FnS2lBZ0lISmxiVzkyWldRZ2QyaGxiaUJ6WlhRZ2RHOGdZU0JtWVd4elpYa2dkbUZzZFdVdVhHNGdJQ0FxSUdoaGMxQnZjMmwwYVhabFRuVnRaWEpwWTFaaGJIVmxPbHh1SUNBZ0tpQWdJRmRvWlhSb1pYSWdkR2hsSUhCeWIzQmxjblI1SUcxMWMzUWdZbVVnY0c5emFYUnBkbVVnYm5WdFpYSnBZeUJ2Y2lCd1lYSnpaU0JoY3lCaElIQnZjMmwwYVhabFhHNGdJQ0FxSUNBZ2JuVnRaWEpwWXlCaGJtUWdjMmh2ZFd4a0lHSmxJSEpsYlc5MlpXUWdkMmhsYmlCelpYUWdkRzhnWVNCbVlXeHpaWGtnZG1Gc2RXVXVYRzRnSUNBcUlHaGhjMDkyWlhKc2IyRmtaV1JDYjI5c1pXRnVWbUZzZFdVNlhHNGdJQ0FxSUNBZ1YyaGxkR2hsY2lCMGFHVWdjSEp2Y0dWeWRIa2dZMkZ1SUdKbElIVnpaV1FnWVhNZ1lTQm1iR0ZuSUdGeklIZGxiR3dnWVhNZ2QybDBhQ0JoSUhaaGJIVmxMbHh1SUNBZ0tpQWdJRkpsYlc5MlpXUWdkMmhsYmlCemRISnBZM1JzZVNCbGNYVmhiQ0IwYnlCbVlXeHpaVHNnY0hKbGMyVnVkQ0IzYVhSb2IzVjBJR0VnZG1Gc2RXVWdkMmhsYmx4dUlDQWdLaUFnSUhOMGNtbGpkR3g1SUdWeGRXRnNJSFJ2SUhSeWRXVTdJSEJ5WlhObGJuUWdkMmwwYUNCaElIWmhiSFZsSUc5MGFHVnlkMmx6WlM1Y2JpQWdJQ292WEc0Z0lIQnliM0JsY25ScFpYTTZJSHQ5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJOWVhCd2FXNW5JR1p5YjIwZ2JHOTNaWEpqWVhObElIQnliM0JsY25SNUlHNWhiV1Z6SUhSdklIUm9aU0J3Y205d1pYSnNlU0JqWVhObFpDQjJaWEp6YVc5dUxDQjFjMlZrWEc0Z0lDQXFJSFJ2SUhkaGNtNGdhVzRnZEdobElHTmhjMlVnYjJZZ2JXbHpjMmx1WnlCd2NtOXdaWEowYVdWekxpQkJkbUZwYkdGaWJHVWdiMjVzZVNCcGJpQmZYMFJGVmw5ZkxseHVJQ0FnS2lCQWRIbHdaU0I3VDJKcVpXTjBmVnh1SUNBZ0tpOWNiaUFnWjJWMFVHOXpjMmxpYkdWVGRHRnVaR0Z5WkU1aGJXVTZJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCN2ZTQTZJRzUxYkd3c1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGc2JDQnZaaUIwYUdVZ2FYTkRkWE4wYjIxQmRIUnlhV0oxZEdVb0tTQm1kVzVqZEdsdmJuTWdkR2hoZENCb1lYWmxJR0psWlc0Z2FXNXFaV04wWldRdVhHNGdJQ0FxTDF4dUlDQmZhWE5EZFhOMGIyMUJkSFJ5YVdKMWRHVkdkVzVqZEdsdmJuTTZJRnRkTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYUdWamEzTWdkMmhsZEdobGNpQmhJSEJ5YjNCbGNuUjVJRzVoYldVZ2FYTWdZU0JqZFhOMGIyMGdZWFIwY21saWRYUmxMbHh1SUNBZ0tpQkFiV1YwYUc5a1hHNGdJQ0FxTDF4dUlDQnBjME4xYzNSdmJVRjBkSEpwWW5WMFpUb2dablZ1WTNScGIyNGdLR0YwZEhKcFluVjBaVTVoYldVcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElFUlBUVkJ5YjNCbGNuUjVMbDlwYzBOMWMzUnZiVUYwZEhKcFluVjBaVVoxYm1OMGFXOXVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR2x6UTNWemRHOXRRWFIwY21saWRYUmxSbTRnUFNCRVQwMVFjbTl3WlhKMGVTNWZhWE5EZFhOMGIyMUJkSFJ5YVdKMWRHVkdkVzVqZEdsdmJuTmJhVjA3WEc0Z0lDQWdJQ0JwWmlBb2FYTkRkWE4wYjIxQmRIUnlhV0oxZEdWR2JpaGhkSFJ5YVdKMWRHVk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQmtaV1poZFd4MElIQnliM0JsY25SNUlIWmhiSFZsSUdadmNpQmhJRVJQVFNCd2NtOXdaWEowZVNBb2FTNWxMaXdnYm05MElHRnVYRzRnSUNBcUlHRjBkSEpwWW5WMFpTa3VJRTF2YzNRZ1pHVm1ZWFZzZENCMllXeDFaWE1nWVhKbElDY25JRzl5SUdaaGJITmxMQ0JpZFhRZ2JtOTBJR0ZzYkM0Z1YyOXljMlVnZVdWMExGeHVJQ0FnS2lCemIyMWxJQ2hwYmlCd1lYSjBhV04xYkdGeUxDQmdkSGx3WldBcElIWmhjbmtnWkdWd1pXNWthVzVuSUc5dUlIUm9aU0IwZVhCbElHOW1JR1ZzWlcxbGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUZSUFJFODZJRWx6SUdsMElHSmxkSFJsY2lCMGJ5Qm5jbUZpSUdGc2JDQjBhR1VnY0c5emMybGliR1VnY0hKdmNHVnlkR2xsY3lCM2FHVnVJR055WldGMGFXNW5JR0Z1WEc0Z0lDQXFJR1ZzWlcxbGJuUWdkRzhnWVhadmFXUWdhR0YyYVc1bklIUnZJR055WldGMFpTQjBhR1VnYzJGdFpTQmxiR1Z0Wlc1MElIUjNhV05sUDF4dUlDQWdLaTljYmlBZ1oyVjBSR1ZtWVhWc2RGWmhiSFZsUm05eVVISnZjR1Z5ZEhrNklHWjFibU4wYVc5dUlDaHViMlJsVG1GdFpTd2djSEp2Y0NrZ2UxeHVJQ0FnSUhaaGNpQnViMlJsUkdWbVlYVnNkSE1nUFNCa1pXWmhkV3gwVm1Gc2RXVkRZV05vWlZ0dWIyUmxUbUZ0WlYwN1hHNGdJQ0FnZG1GeUlIUmxjM1JGYkdWdFpXNTBPMXh1SUNBZ0lHbG1JQ2doYm05a1pVUmxabUYxYkhSektTQjdYRzRnSUNBZ0lDQmtaV1poZFd4MFZtRnNkV1ZEWVdOb1pWdHViMlJsVG1GdFpWMGdQU0J1YjJSbFJHVm1ZWFZzZEhNZ1BTQjdmVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ0VvY0hKdmNDQnBiaUJ1YjJSbFJHVm1ZWFZzZEhNcEtTQjdYRzRnSUNBZ0lDQjBaWE4wUld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9ibTlrWlU1aGJXVXBPMXh1SUNBZ0lDQWdibTlrWlVSbFptRjFiSFJ6VzNCeWIzQmRJRDBnZEdWemRFVnNaVzFsYm5SYmNISnZjRjA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWIyUmxSR1ZtWVhWc2RITmJjSEp2Y0YwN1hHNGdJSDBzWEc1Y2JpQWdhVzVxWldOMGFXOXVPaUJFVDAxUWNtOXdaWEowZVVsdWFtVmpkR2x2Ymx4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JFVDAxUWNtOXdaWEowZVRzaVhYMD0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTVByb3BlcnR5T3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xuXG52YXIgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIgPSByZXF1aXJlKCcuL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLy8gU2ltcGxpZmllZCBzdWJzZXRcbnZhciBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IC9eW2EtekEtWl9dW1xcd1xcLlxcLV0qJC87XG52YXIgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xudmFyIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZS5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lOiBgJXNgJywgYXR0cmlidXRlTmFtZSkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCBwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICYmICF2YWx1ZSB8fCBwcm9wZXJ0eUluZm8uaGFzTnVtZXJpY1ZhbHVlICYmIGlzTmFOKHZhbHVlKSB8fCBwcm9wZXJ0eUluZm8uaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUgJiYgdmFsdWUgPCAxIHx8IHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlICYmIHZhbHVlID09PSBmYWxzZTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHJlYWN0UHJvcHMgPSB7XG4gICAgY2hpbGRyZW46IHRydWUsXG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHRydWUsXG4gICAga2V5OiB0cnVlLFxuICAgIHJlZjogdHJ1ZVxuICB9O1xuICB2YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xuXG4gIHZhciB3YXJuVW5rbm93blByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAocmVhY3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiByZWFjdFByb3BzW25hbWVdIHx8IHdhcm5lZFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkUHJvcGVydGllc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIGRhdGEtKiBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsb3dlcmNhc2U7IHN1Z2dlc3QgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG4gICAgdmFyIHN0YW5kYXJkTmFtZSA9IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKGxvd2VyQ2FzZWROYW1lKSA/IGxvd2VyQ2FzZWROYW1lIDogRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID8gRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZE5hbWVdIDogbnVsbDtcblxuICAgIC8vIEZvciBub3csIG9ubHkgd2FybiB3aGVuIHdlIGhhdmUgYSBzdWdnZXN0ZWQgY29ycmVjdGlvbi4gVGhpcyBwcmV2ZW50c1xuICAgIC8vIGxvZ2dpbmcgdG9vIG11Y2ggd2hlbiB1c2luZyB0cmFuc2ZlclByb3BzVG8uXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoc3RhbmRhcmROYW1lID09IG51bGwsICdVbmtub3duIERPTSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsIG5hbWUsIHN0YW5kYXJkTmFtZSkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIERPTSBwcm9wZXJ0aWVzLlxuICovXG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIElEIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVW5lc2NhcGVkIElELlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JJRDogZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIoaWQpO1xuICB9LFxuXG4gIHNldEF0dHJpYnV0ZUZvcklEOiBmdW5jdGlvbiAobm9kZSwgaWQpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRSwgaWQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBNYXJrdXAgc3RyaW5nLCBvciBudWxsIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvclByb3BlcnR5OiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgIGlmIChzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lO1xuICAgICAgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPVwiXCInO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgY3VzdG9tIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZywgb3IgZW1wdHkgc3RyaW5nIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uIChub2RlLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBwcm9wZXJ0eUluZm8gPSBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gRE9NUHJvcGVydHkucHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG4gICAgaWYgKHByb3BlcnR5SW5mbykge1xuICAgICAgdmFyIG11dGF0aW9uTWV0aG9kID0gcHJvcGVydHlJbmZvLm11dGF0aW9uTWV0aG9kO1xuICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluZm8ubXVzdFVzZUF0dHJpYnV0ZSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lO1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWVzcGFjZTtcbiAgICAgICAgLy8gYHNldEF0dHJpYnV0ZWAgd2l0aCBvYmplY3RzIGJlY29tZXMgb25seSBgW29iamVjdF1gIGluIElFOC85LFxuICAgICAgICAvLyAoJycgKyB2YWx1ZSkgbWFrZXMgaXQgb3V0cHV0IHRoZSBjb3JyZWN0IHRvU3RyaW5nKCktdmFsdWUuXG4gICAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLmhhc0Jvb2xlYW5WYWx1ZSB8fCBwcm9wZXJ0eUluZm8uaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSAmJiB2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCAnJyArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcbiAgICAgICAgLy8gTXVzdCBleHBsaWNpdGx5IGNhc3QgdmFsdWVzIGZvciBIQVNfU0lERV9FRkZFQ1RTLXByb3BlcnRpZXMgdG8gdGhlXG4gICAgICAgIC8vIHByb3BlcnR5IHR5cGUgYmVmb3JlIGNvbXBhcmluZzsgb25seSBgdmFsdWVgIGRvZXMgYW5kIGlzIHN0cmluZy5cbiAgICAgICAgaWYgKCFwcm9wZXJ0eUluZm8uaGFzU2lkZUVmZmVjdHMgfHwgJycgKyBub2RlW3Byb3BOYW1lXSAhPT0gJycgKyB2YWx1ZSkge1xuICAgICAgICAgIC8vIENvbnRyYXJ5IHRvIGBzZXRBdHRyaWJ1dGVgLCBvYmplY3QgcHJvcGVydGllcyBhcmUgcHJvcGVybHlcbiAgICAgICAgICAvLyBgdG9TdHJpbmdgZWQgYnkgSUU4LzkuXG4gICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvckF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICBzZXRWYWx1ZUZvckF0dHJpYnV0ZTogZnVuY3Rpb24gKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24gKG5vZGUsIG5hbWUpIHtcbiAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IHByb3BlcnR5SW5mby5tdXRhdGlvbk1ldGhvZDtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB1bmRlZmluZWQpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluZm8ubXVzdFVzZUF0dHJpYnV0ZSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gRE9NUHJvcGVydHkuZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHkobm9kZS5ub2RlTmFtZSwgcHJvcE5hbWUpO1xuICAgICAgICBpZiAoIXByb3BlcnR5SW5mby5oYXNTaWRlRWZmZWN0cyB8fCAnJyArIG5vZGVbcHJvcE5hbWVdICE9PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKERPTVByb3BlcnR5T3BlcmF0aW9ucywgJ0RPTVByb3BlcnR5T3BlcmF0aW9ucycsIHtcbiAgc2V0VmFsdWVGb3JQcm9wZXJ0eTogJ3NldFZhbHVlRm9yUHJvcGVydHknLFxuICBzZXRWYWx1ZUZvckF0dHJpYnV0ZTogJ3NldFZhbHVlRm9yQXR0cmlidXRlJyxcbiAgZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogJ2RlbGV0ZVZhbHVlRm9yUHJvcGVydHknXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnM7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2UkU5TlVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1ekxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQkVUMDFRY205d1pYSjBlVTl3WlhKaGRHbHZibk5jYmlBcUlFQjBlWEJsWTJobFkydHpJSE4wWVhScFl5MXZibXg1WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1JFOU5VSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDBSUFRWQnliM0JsY25SNUp5azdYRzUyWVhJZ1VtVmhZM1JRWlhKbUlEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRGQmxjbVluS1R0Y2JseHVkbUZ5SUhGMWIzUmxRWFIwY21saWRYUmxWbUZzZFdWR2IzSkNjbTkzYzJWeUlEMGdjbVZ4ZFdseVpTZ25MaTl4ZFc5MFpVRjBkSEpwWW5WMFpWWmhiSFZsUm05eVFuSnZkM05sY2ljcE8xeHVkbUZ5SUhkaGNtNXBibWNnUFNCeVpYRjFhWEpsS0NkbVltcHpMMnhwWWk5M1lYSnVhVzVuSnlrN1hHNWNiaTh2SUZOcGJYQnNhV1pwWldRZ2MzVmljMlYwWEc1MllYSWdWa0ZNU1VSZlFWUlVVa2xDVlZSRlgwNUJUVVZmVWtWSFJWZ2dQU0F2WGx0aExYcEJMVnBmWFZ0Y1hIZGNYQzVjWEMxZEtpUXZPMXh1ZG1GeUlHbHNiR1ZuWVd4QmRIUnlhV0oxZEdWT1lXMWxRMkZqYUdVZ1BTQjdmVHRjYm5aaGNpQjJZV3hwWkdGMFpXUkJkSFJ5YVdKMWRHVk9ZVzFsUTJGamFHVWdQU0I3ZlR0Y2JseHVablZ1WTNScGIyNGdhWE5CZEhSeWFXSjFkR1ZPWVcxbFUyRm1aU2hoZEhSeWFXSjFkR1ZPWVcxbEtTQjdYRzRnSUdsbUlDaDJZV3hwWkdGMFpXUkJkSFJ5YVdKMWRHVk9ZVzFsUTJGamFHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1lYUjBjbWxpZFhSbFRtRnRaU2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdmVnh1SUNCcFppQW9hV3hzWldkaGJFRjBkSEpwWW5WMFpVNWhiV1ZEWVdOb1pTNW9ZWE5QZDI1UWNtOXdaWEowZVNoaGRIUnlhV0oxZEdWT1lXMWxLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1SUNCcFppQW9Wa0ZNU1VSZlFWUlVVa2xDVlZSRlgwNUJUVVZmVWtWSFJWZ3VkR1Z6ZENoaGRIUnlhV0oxZEdWT1lXMWxLU2tnZTF4dUlDQWdJSFpoYkdsa1lYUmxaRUYwZEhKcFluVjBaVTVoYldWRFlXTm9aVnRoZEhSeWFXSjFkR1ZPWVcxbFhTQTlJSFJ5ZFdVN1hHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmlBZ2FXeHNaV2RoYkVGMGRISnBZblYwWlU1aGJXVkRZV05vWlZ0aGRIUnlhV0oxZEdWT1lXMWxYU0E5SUhSeWRXVTdYRzRnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktHWmhiSE5sTENBblNXNTJZV3hwWkNCaGRIUnlhV0oxZEdVZ2JtRnRaVG9nWUNWellDY3NJR0YwZEhKcFluVjBaVTVoYldVcElEb2dkVzVrWldacGJtVmtPMXh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITm9iM1ZzWkVsbmJtOXlaVlpoYkhWbEtIQnliM0JsY25SNVNXNW1ieXdnZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUhaaGJIVmxJRDA5SUc1MWJHd2dmSHdnY0hKdmNHVnlkSGxKYm1adkxtaGhjMEp2YjJ4bFlXNVdZV3gxWlNBbUppQWhkbUZzZFdVZ2ZId2djSEp2Y0dWeWRIbEpibVp2TG1oaGMwNTFiV1Z5YVdOV1lXeDFaU0FtSmlCcGMwNWhUaWgyWVd4MVpTa2dmSHdnY0hKdmNHVnlkSGxKYm1adkxtaGhjMUJ2YzJsMGFYWmxUblZ0WlhKcFkxWmhiSFZsSUNZbUlIWmhiSFZsSUR3Z01TQjhmQ0J3Y205d1pYSjBlVWx1Wm04dWFHRnpUM1psY214dllXUmxaRUp2YjJ4bFlXNVdZV3gxWlNBbUppQjJZV3gxWlNBOVBUMGdabUZzYzJVN1hHNTlYRzVjYm1sbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lIWmhjaUJ5WldGamRGQnliM0J6SUQwZ2UxeHVJQ0FnSUdOb2FXeGtjbVZ1T2lCMGNuVmxMRnh1SUNBZ0lHUmhibWRsY205MWMyeDVVMlYwU1c1dVpYSklWRTFNT2lCMGNuVmxMRnh1SUNBZ0lHdGxlVG9nZEhKMVpTeGNiaUFnSUNCeVpXWTZJSFJ5ZFdWY2JpQWdmVHRjYmlBZ2RtRnlJSGRoY201bFpGQnliM0JsY25ScFpYTWdQU0I3ZlR0Y2JseHVJQ0IyWVhJZ2QyRnlibFZ1YTI1dmQyNVFjbTl3WlhKMGVTQTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdYRzRnSUNBZ2FXWWdLSEpsWVdOMFVISnZjSE11YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrZ0ppWWdjbVZoWTNSUWNtOXdjMXR1WVcxbFhTQjhmQ0IzWVhKdVpXUlFjbTl3WlhKMGFXVnpMbWhoYzA5M2JsQnliM0JsY25SNUtHNWhiV1VwSUNZbUlIZGhjbTVsWkZCeWIzQmxjblJwWlhOYmJtRnRaVjBwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjNZWEp1WldSUWNtOXdaWEowYVdWelcyNWhiV1ZkSUQwZ2RISjFaVHRjYmlBZ0lDQjJZWElnYkc5M1pYSkRZWE5sWkU1aGJXVWdQU0J1WVcxbExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2JpQWdJQ0F2THlCa1lYUmhMU29nWVhSMGNtbGlkWFJsY3lCemFHOTFiR1FnWW1VZ2JHOTNaWEpqWVhObE95QnpkV2RuWlhOMElIUm9aU0JzYjNkbGNtTmhjMlVnZG1WeWMybHZibHh1SUNBZ0lIWmhjaUJ6ZEdGdVpHRnlaRTVoYldVZ1BTQkVUMDFRY205d1pYSjBlUzVwYzBOMWMzUnZiVUYwZEhKcFluVjBaU2hzYjNkbGNrTmhjMlZrVG1GdFpTa2dQeUJzYjNkbGNrTmhjMlZrVG1GdFpTQTZJRVJQVFZCeWIzQmxjblI1TG1kbGRGQnZjM05wWW14bFUzUmhibVJoY21ST1lXMWxMbWhoYzA5M2JsQnliM0JsY25SNUtHeHZkMlZ5UTJGelpXUk9ZVzFsS1NBL0lFUlBUVkJ5YjNCbGNuUjVMbWRsZEZCdmMzTnBZbXhsVTNSaGJtUmhjbVJPWVcxbFcyeHZkMlZ5UTJGelpXUk9ZVzFsWFNBNklHNTFiR3c3WEc1Y2JpQWdJQ0F2THlCR2IzSWdibTkzTENCdmJteDVJSGRoY200Z2QyaGxiaUIzWlNCb1lYWmxJR0VnYzNWbloyVnpkR1ZrSUdOdmNuSmxZM1JwYjI0dUlGUm9hWE1nY0hKbGRtVnVkSE5jYmlBZ0lDQXZMeUJzYjJkbmFXNW5JSFJ2YnlCdGRXTm9JSGRvWlc0Z2RYTnBibWNnZEhKaGJuTm1aWEpRY205d2MxUnZMbHh1SUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LSE4wWVc1a1lYSmtUbUZ0WlNBOVBTQnVkV3hzTENBblZXNXJibTkzYmlCRVQwMGdjSEp2Y0dWeWRIa2dKWE11SUVScFpDQjViM1VnYldWaGJpQWxjejhuTENCdVlXMWxMQ0J6ZEdGdVpHRnlaRTVoYldVcElEb2dkVzVrWldacGJtVmtPMXh1SUNCOU8xeHVmVnh1WEc0dktpcGNiaUFxSUU5d1pYSmhkR2x2Ym5NZ1ptOXlJR1JsWVd4cGJtY2dkMmwwYUNCRVQwMGdjSEp2Y0dWeWRHbGxjeTVjYmlBcUwxeHVkbUZ5SUVSUFRWQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5QTlJSHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QnRZWEpyZFhBZ1ptOXlJSFJvWlNCSlJDQndjbTl3WlhKMGVTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2xrSUZWdVpYTmpZWEJsWkNCSlJDNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN2MzUnlhVzVuZlNCTllYSnJkWEFnYzNSeWFXNW5MbHh1SUNBZ0tpOWNiaUFnWTNKbFlYUmxUV0Z5YTNWd1JtOXlTVVE2SUdaMWJtTjBhVzl1SUNocFpDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCRVQwMVFjbTl3WlhKMGVTNUpSRjlCVkZSU1NVSlZWRVZmVGtGTlJTQXJJQ2M5SnlBcklIRjFiM1JsUVhSMGNtbGlkWFJsVm1Gc2RXVkdiM0pDY205M2MyVnlLR2xrS1R0Y2JpQWdmU3hjYmx4dUlDQnpaWFJCZEhSeWFXSjFkR1ZHYjNKSlJEb2dablZ1WTNScGIyNGdLRzV2WkdVc0lHbGtLU0I3WEc0Z0lDQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9SRTlOVUhKdmNHVnlkSGt1U1VSZlFWUlVVa2xDVlZSRlgwNUJUVVVzSUdsa0tUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJ0WVhKcmRYQWdabTl5SUdFZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdLbjBnZG1Gc2RXVmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1AzTjBjbWx1WjMwZ1RXRnlhM1Z3SUhOMGNtbHVaeXdnYjNJZ2JuVnNiQ0JwWmlCMGFHVWdjSEp2Y0dWeWRIa2dkMkZ6SUdsdWRtRnNhV1F1WEc0Z0lDQXFMMXh1SUNCamNtVmhkR1ZOWVhKcmRYQkdiM0pRY205d1pYSjBlVG9nWm5WdVkzUnBiMjRnS0c1aGJXVXNJSFpoYkhWbEtTQjdYRzRnSUNBZ2RtRnlJSEJ5YjNCbGNuUjVTVzVtYnlBOUlFUlBUVkJ5YjNCbGNuUjVMbkJ5YjNCbGNuUnBaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrZ1B5QkVUMDFRY205d1pYSjBlUzV3Y205d1pYSjBhV1Z6VzI1aGJXVmRJRG9nYm5Wc2JEdGNiaUFnSUNCcFppQW9jSEp2Y0dWeWRIbEpibVp2S1NCN1hHNGdJQ0FnSUNCcFppQW9jMmh2ZFd4a1NXZHViM0psVm1Gc2RXVW9jSEp2Y0dWeWRIbEpibVp2TENCMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjbk8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtRnlJR0YwZEhKcFluVjBaVTVoYldVZ1BTQndjbTl3WlhKMGVVbHVabTh1WVhSMGNtbGlkWFJsVG1GdFpUdGNiaUFnSUNBZ0lHbG1JQ2h3Y205d1pYSjBlVWx1Wm04dWFHRnpRbTl2YkdWaGJsWmhiSFZsSUh4OElIQnliM0JsY25SNVNXNW1ieTVvWVhOUGRtVnliRzloWkdWa1FtOXZiR1ZoYmxaaGJIVmxJQ1ltSUhaaGJIVmxJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoZEhSeWFXSjFkR1ZPWVcxbElDc2dKejFjSWx3aUp6dGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCaGRIUnlhV0oxZEdWT1lXMWxJQ3NnSnowbklDc2djWFZ2ZEdWQmRIUnlhV0oxZEdWV1lXeDFaVVp2Y2tKeWIzZHpaWElvZG1Gc2RXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9SRTlOVUhKdmNHVnlkSGt1YVhORGRYTjBiMjFCZEhSeWFXSjFkR1VvYm1GdFpTa3BJSHRjYmlBZ0lDQWdJR2xtSUNoMllXeDFaU0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuSnp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJ1WVcxbElDc2dKejBuSUNzZ2NYVnZkR1ZCZEhSeWFXSjFkR1ZXWVd4MVpVWnZja0p5YjNkelpYSW9kbUZzZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdkMkZ5YmxWdWEyNXZkMjVRY205d1pYSjBlU2h1WVcxbEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpYTWdiV0Z5YTNWd0lHWnZjaUJoSUdOMWMzUnZiU0J3Y205d1pYSjBlUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVmNiaUFnSUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3gxWlZ4dUlDQWdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJRTFoY210MWNDQnpkSEpwYm1jc0lHOXlJR1Z0Y0hSNUlITjBjbWx1WnlCcFppQjBhR1VnY0hKdmNHVnlkSGtnZDJGeklHbHVkbUZzYVdRdVhHNGdJQ0FxTDF4dUlDQmpjbVZoZEdWTllYSnJkWEJHYjNKRGRYTjBiMjFCZEhSeWFXSjFkR1U2SUdaMWJtTjBhVzl1SUNodVlXMWxMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lHbG1JQ2doYVhOQmRIUnlhV0oxZEdWT1lXMWxVMkZtWlNodVlXMWxLU0I4ZkNCMllXeDFaU0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdVlXMWxJQ3NnSnowbklDc2djWFZ2ZEdWQmRIUnlhV0oxZEdWV1lXeDFaVVp2Y2tKeWIzZHpaWElvZG1Gc2RXVXBPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUnpJSFJvWlNCMllXeDFaU0JtYjNJZ1lTQndjbTl3WlhKMGVTQnZiaUJoSUc1dlpHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3UkU5TlJXeGxiV1Z1ZEgwZ2JtOWtaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JtRnRaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbFhHNGdJQ0FxTDF4dUlDQnpaWFJXWVd4MVpVWnZjbEJ5YjNCbGNuUjVPaUJtZFc1amRHbHZiaUFvYm05a1pTd2dibUZ0WlN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0IyWVhJZ2NISnZjR1Z5ZEhsSmJtWnZJRDBnUkU5TlVISnZjR1Z5ZEhrdWNISnZjR1Z5ZEdsbGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNodVlXMWxLU0EvSUVSUFRWQnliM0JsY25SNUxuQnliM0JsY25ScFpYTmJibUZ0WlYwZ09pQnVkV3hzTzF4dUlDQWdJR2xtSUNod2NtOXdaWEowZVVsdVptOHBJSHRjYmlBZ0lDQWdJSFpoY2lCdGRYUmhkR2x2YmsxbGRHaHZaQ0E5SUhCeWIzQmxjblI1U1c1bWJ5NXRkWFJoZEdsdmJrMWxkR2h2WkR0Y2JpQWdJQ0FnSUdsbUlDaHRkWFJoZEdsdmJrMWxkR2h2WkNrZ2UxeHVJQ0FnSUNBZ0lDQnRkWFJoZEdsdmJrMWxkR2h2WkNodWIyUmxMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5vYjNWc1pFbG5ibTl5WlZaaGJIVmxLSEJ5YjNCbGNuUjVTVzVtYnl3Z2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWc1pYUmxWbUZzZFdWR2IzSlFjbTl3WlhKMGVTaHViMlJsTENCdVlXMWxLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvY0hKdmNHVnlkSGxKYm1adkxtMTFjM1JWYzJWQmRIUnlhV0oxZEdVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGMGRISnBZblYwWlU1aGJXVWdQU0J3Y205d1pYSjBlVWx1Wm04dVlYUjBjbWxpZFhSbFRtRnRaVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNWhiV1Z6Y0dGalpTQTlJSEJ5YjNCbGNuUjVTVzVtYnk1aGRIUnlhV0oxZEdWT1lXMWxjM0JoWTJVN1hHNGdJQ0FnSUNBZ0lDOHZJR0J6WlhSQmRIUnlhV0oxZEdWZ0lIZHBkR2dnYjJKcVpXTjBjeUJpWldOdmJXVnpJRzl1YkhrZ1lGdHZZbXBsWTNSZFlDQnBiaUJKUlRndk9TeGNiaUFnSUNBZ0lDQWdMeThnS0NjbklDc2dkbUZzZFdVcElHMWhhMlZ6SUdsMElHOTFkSEIxZENCMGFHVWdZMjl5Y21WamRDQjBiMU4wY21sdVp5Z3BMWFpoYkhWbExseHVJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpYTndZV05sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVk9VeWh1WVcxbGMzQmhZMlVzSUdGMGRISnBZblYwWlU1aGJXVXNJQ2NuSUNzZ2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIQnliM0JsY25SNVNXNW1ieTVvWVhOQ2IyOXNaV0Z1Vm1Gc2RXVWdmSHdnY0hKdmNHVnlkSGxKYm1adkxtaGhjMDkyWlhKc2IyRmtaV1JDYjI5c1pXRnVWbUZzZFdVZ0ppWWdkbUZzZFdVZ1BUMDlJSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0J1YjJSbExuTmxkRUYwZEhKcFluVjBaU2hoZEhSeWFXSjFkR1ZPWVcxbExDQW5KeWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaUzV6WlhSQmRIUnlhV0oxZEdVb1lYUjBjbWxpZFhSbFRtRnRaU3dnSnljZ0t5QjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3Y205d1RtRnRaU0E5SUhCeWIzQmxjblI1U1c1bWJ5NXdjbTl3WlhKMGVVNWhiV1U3WEc0Z0lDQWdJQ0FnSUM4dklFMTFjM1FnWlhod2JHbGphWFJzZVNCallYTjBJSFpoYkhWbGN5Qm1iM0lnU0VGVFgxTkpSRVZmUlVaR1JVTlVVeTF3Y205d1pYSjBhV1Z6SUhSdklIUm9aVnh1SUNBZ0lDQWdJQ0F2THlCd2NtOXdaWEowZVNCMGVYQmxJR0psWm05eVpTQmpiMjF3WVhKcGJtYzdJRzl1YkhrZ1lIWmhiSFZsWUNCa2IyVnpJR0Z1WkNCcGN5QnpkSEpwYm1jdVhHNGdJQ0FnSUNBZ0lHbG1JQ2doY0hKdmNHVnlkSGxKYm1adkxtaGhjMU5wWkdWRlptWmxZM1J6SUh4OElDY25JQ3NnYm05a1pWdHdjbTl3VG1GdFpWMGdJVDA5SUNjbklDc2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCRGIyNTBjbUZ5ZVNCMGJ5QmdjMlYwUVhSMGNtbGlkWFJsWUN3Z2IySnFaV04wSUhCeWIzQmxjblJwWlhNZ1lYSmxJSEJ5YjNCbGNteDVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1lIUnZVM1J5YVc1bllHVmtJR0o1SUVsRk9DODVMbHh1SUNBZ0lDQWdJQ0FnSUc1dlpHVmJjSEp2Y0U1aGJXVmRJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRVJQVFZCeWIzQmxjblI1TG1selEzVnpkRzl0UVhSMGNtbGlkWFJsS0c1aGJXVXBLU0I3WEc0Z0lDQWdJQ0JFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NdWMyVjBWbUZzZFdWR2IzSkJkSFJ5YVdKMWRHVW9ibTlrWlN3Z2JtRnRaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJQ0FnZDJGeWJsVnVhMjV2ZDI1UWNtOXdaWEowZVNodVlXMWxLVHRjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnYzJWMFZtRnNkV1ZHYjNKQmRIUnlhV0oxZEdVNklHWjFibU4wYVc5dUlDaHViMlJsTENCdVlXMWxMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lHbG1JQ2doYVhOQmRIUnlhV0oxZEdWT1lXMWxVMkZtWlNodVlXMWxLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kbUZzZFdVZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2JtOWtaUzV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9ibUZ0WlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJRzV2WkdVdWMyVjBRWFIwY21saWRYUmxLRzVoYldVc0lDY25JQ3NnZG1Gc2RXVXBPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUkdWc1pYUmxjeUIwYUdVZ2RtRnNkV1VnWm05eUlHRWdjSEp2Y0dWeWRIa2diMjRnWVNCdWIyUmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBSUFRVVnNaVzFsYm5SOUlHNXZaR1ZjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHNWhiV1ZjYmlBZ0lDb3ZYRzRnSUdSbGJHVjBaVlpoYkhWbFJtOXlVSEp2Y0dWeWRIazZJR1oxYm1OMGFXOXVJQ2h1YjJSbExDQnVZVzFsS1NCN1hHNGdJQ0FnZG1GeUlIQnliM0JsY25SNVNXNW1ieUE5SUVSUFRWQnliM0JsY25SNUxuQnliM0JsY25ScFpYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2JtRnRaU2tnUHlCRVQwMVFjbTl3WlhKMGVTNXdjbTl3WlhKMGFXVnpXMjVoYldWZElEb2diblZzYkR0Y2JpQWdJQ0JwWmlBb2NISnZjR1Z5ZEhsSmJtWnZLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2JYVjBZWFJwYjI1TlpYUm9iMlFnUFNCd2NtOXdaWEowZVVsdVptOHViWFYwWVhScGIyNU5aWFJvYjJRN1hHNGdJQ0FnSUNCcFppQW9iWFYwWVhScGIyNU5aWFJvYjJRcElIdGNiaUFnSUNBZ0lDQWdiWFYwWVhScGIyNU5aWFJvYjJRb2JtOWtaU3dnZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NISnZjR1Z5ZEhsSmJtWnZMbTExYzNSVmMyVkJkSFJ5YVdKMWRHVXBJSHRjYmlBZ0lDQWdJQ0FnYm05a1pTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb2NISnZjR1Z5ZEhsSmJtWnZMbUYwZEhKcFluVjBaVTVoYldVcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJ5YjNCT1lXMWxJRDBnY0hKdmNHVnlkSGxKYm1adkxuQnliM0JsY25SNVRtRnRaVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmxabUYxYkhSV1lXeDFaU0E5SUVSUFRWQnliM0JsY25SNUxtZGxkRVJsWm1GMWJIUldZV3gxWlVadmNsQnliM0JsY25SNUtHNXZaR1V1Ym05a1pVNWhiV1VzSUhCeWIzQk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z3Y205d1pYSjBlVWx1Wm04dWFHRnpVMmxrWlVWbVptVmpkSE1nZkh3Z0p5Y2dLeUJ1YjJSbFczQnliM0JPWVcxbFhTQWhQVDBnWkdWbVlYVnNkRlpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYm05a1pWdHdjbTl3VG1GdFpWMGdQU0JrWldaaGRXeDBWbUZzZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tFUlBUVkJ5YjNCbGNuUjVMbWx6UTNWemRHOXRRWFIwY21saWRYUmxLRzVoYldVcEtTQjdYRzRnSUNBZ0lDQnViMlJsTG5KbGJXOTJaVUYwZEhKcFluVjBaU2h1WVcxbEtUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSGRoY201VmJtdHViM2R1VUhKdmNHVnlkSGtvYm1GdFpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JuMDdYRzVjYmxKbFlXTjBVR1Z5Wmk1dFpXRnpkWEpsVFdWMGFHOWtjeWhFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5Nc0lDZEVUMDFRY205d1pYSjBlVTl3WlhKaGRHbHZibk1uTENCN1hHNGdJSE5sZEZaaGJIVmxSbTl5VUhKdmNHVnlkSGs2SUNkelpYUldZV3gxWlVadmNsQnliM0JsY25SNUp5eGNiaUFnYzJWMFZtRnNkV1ZHYjNKQmRIUnlhV0oxZEdVNklDZHpaWFJXWVd4MVpVWnZja0YwZEhKcFluVjBaU2NzWEc0Z0lHUmxiR1YwWlZaaGJIVmxSbTl5VUhKdmNHVnlkSGs2SUNka1pXeGxkR1ZXWVd4MVpVWnZjbEJ5YjNCbGNuUjVKMXh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdSRTlOVUhKdmNHVnlkSGxQY0dWeVlYUnBiMjV6T3lKZGZRPT0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERhbmdlclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgPSByZXF1aXJlKCdmYmpzL2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAnKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGdldE1hcmt1cFdyYXAgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRNYXJrdXBXcmFwJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBPUEVOX1RBR19OQU1FX0VYUCA9IC9eKDxbXiBcXC8+XSspLztcbnZhciBSRVNVTFRfSU5ERVhfQVRUUiA9ICdkYXRhLWRhbmdlci1pbmRleCc7XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGBub2RlTmFtZWAgZnJvbSBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogTk9URTogRXh0cmFjdGluZyB0aGUgYG5vZGVOYW1lYCBkb2VzIG5vdCByZXF1aXJlIGEgcmVndWxhciBleHByZXNzaW9uIG1hdGNoXG4gKiBiZWNhdXNlIHdlIG1ha2UgYXNzdW1wdGlvbnMgYWJvdXQgUmVhY3QtZ2VuZXJhdGVkIG1hcmt1cCAoaS5lLiB0aGVyZSBhcmUgbm9cbiAqIHNwYWNlcyBzdXJyb3VuZGluZyB0aGUgb3BlbmluZyB0YWcgYW5kIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBhdHRyaWJ1dGUpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2V4dHJhY3Qtbm9kZW5hbWVcbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKSB7XG4gIHJldHVybiBtYXJrdXAuc3Vic3RyaW5nKDEsIG1hcmt1cC5pbmRleE9mKCcgJykpO1xufVxuXG52YXIgRGFuZ2VyID0ge1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIG1hcmt1cCBpbnRvIGFuIGFycmF5IG9mIG5vZGVzLiBUaGUgbWFya3VwIGlzIGV4cGVjdGVkIHRvIHJlbmRlclxuICAgKiBpbnRvIGEgbGlzdCBvZiByb290IG5vZGVzLiBBbHNvLCB0aGUgbGVuZ3RoIG9mIGByZXN1bHRMaXN0YCBhbmRcbiAgICogYG1hcmt1cExpc3RgIHNob3VsZCBiZSB0aGUgc2FtZS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBtYXJrdXBMaXN0IExpc3Qgb2YgbWFya3VwIHN0cmluZ3MgdG8gcmVuZGVyLlxuICAgKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50Pn0gTGlzdCBvZiByZW5kZXJlZCBub2Rlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVJlbmRlck1hcmt1cDogZnVuY3Rpb24gKG1hcmt1cExpc3QpIHtcbiAgICAhRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVuZGVyTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgd29ya2VyICcgKyAndGhyZWFkLiBNYWtlIHN1cmUgYHdpbmRvd2AgYW5kIGBkb2N1bWVudGAgYXJlIGF2YWlsYWJsZSBnbG9iYWxseSAnICsgJ2JlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlICcgKyAnUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcgZm9yIHNlcnZlciByZW5kZXJpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIHZhciBub2RlTmFtZTtcbiAgICB2YXIgbWFya3VwQnlOb2RlTmFtZSA9IHt9O1xuICAgIC8vIEdyb3VwIG1hcmt1cCBieSBgbm9kZU5hbWVgIGlmIGEgd3JhcCBpcyBuZWNlc3NhcnksIGVsc2UgYnkgJyonLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3VwTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgIW1hcmt1cExpc3RbaV0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShtYXJrdXBMaXN0W2ldKTtcbiAgICAgIG5vZGVOYW1lID0gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkgPyBub2RlTmFtZSA6ICcqJztcbiAgICAgIG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdID0gbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV0gfHwgW107XG4gICAgICBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXVtpXSA9IG1hcmt1cExpc3RbaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRMaXN0ID0gW107XG4gICAgdmFyIHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgPSAwO1xuICAgIGZvciAobm9kZU5hbWUgaW4gbWFya3VwQnlOb2RlTmFtZSkge1xuICAgICAgaWYgKCFtYXJrdXBCeU5vZGVOYW1lLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXJrdXBMaXN0QnlOb2RlTmFtZSA9IG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdO1xuXG4gICAgICAvLyBUaGlzIGZvci1pbiBsb29wIHNraXBzIHRoZSBob2xlcyBvZiB0aGUgc3BhcnNlIGFycmF5LiBUaGUgb3JkZXIgb2ZcbiAgICAgIC8vIGl0ZXJhdGlvbiBzaG91bGQgZm9sbG93IHRoZSBvcmRlciBvZiBhc3NpZ25tZW50LCB3aGljaCBoYXBwZW5zIHRvIG1hdGNoXG4gICAgICAvLyBudW1lcmljYWwgaW5kZXggb3JkZXIsIGJ1dCB3ZSBkb24ndCByZWx5IG9uIHRoYXQuXG4gICAgICB2YXIgcmVzdWx0SW5kZXg7XG4gICAgICBmb3IgKHJlc3VsdEluZGV4IGluIG1hcmt1cExpc3RCeU5vZGVOYW1lKSB7XG4gICAgICAgIGlmIChtYXJrdXBMaXN0QnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkpIHtcbiAgICAgICAgICB2YXIgbWFya3VwID0gbWFya3VwTGlzdEJ5Tm9kZU5hbWVbcmVzdWx0SW5kZXhdO1xuXG4gICAgICAgICAgLy8gUHVzaCB0aGUgcmVxdWVzdGVkIG1hcmt1cCB3aXRoIGFuIGFkZGl0aW9uYWwgUkVTVUxUX0lOREVYX0FUVFJcbiAgICAgICAgICAvLyBhdHRyaWJ1dGUuICBJZiB0aGUgbWFya3VwIGRvZXMgbm90IHN0YXJ0IHdpdGggYSA8IGNoYXJhY3RlciwgaXRcbiAgICAgICAgICAvLyB3aWxsIGJlIGRpc2NhcmRlZCBiZWxvdyAod2l0aCBhbiBhcHByb3ByaWF0ZSBjb25zb2xlLmVycm9yKS5cbiAgICAgICAgICBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF0gPSBtYXJrdXAucmVwbGFjZShPUEVOX1RBR19OQU1FX0VYUCxcbiAgICAgICAgICAvLyBUaGlzIGluZGV4IHdpbGwgYmUgcGFyc2VkIGJhY2sgb3V0IGJlbG93LlxuICAgICAgICAgICckMSAnICsgUkVTVUxUX0lOREVYX0FUVFIgKyAnPVwiJyArIHJlc3VsdEluZGV4ICsgJ1wiICcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbmRlciBlYWNoIGdyb3VwIG9mIG1hcmt1cCB3aXRoIHNpbWlsYXIgd3JhcHBpbmcgYG5vZGVOYW1lYC5cbiAgICAgIHZhciByZW5kZXJOb2RlcyA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXBMaXN0QnlOb2RlTmFtZS5qb2luKCcnKSwgZW1wdHlGdW5jdGlvbiAvLyBEbyBub3RoaW5nIHNwZWNpYWwgd2l0aCA8c2NyaXB0PiB0YWdzLlxuICAgICAgKTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByZW5kZXJOb2Rlcy5sZW5ndGg7ICsraikge1xuICAgICAgICB2YXIgcmVuZGVyTm9kZSA9IHJlbmRlck5vZGVzW2pdO1xuICAgICAgICBpZiAocmVuZGVyTm9kZS5oYXNBdHRyaWJ1dGUgJiYgcmVuZGVyTm9kZS5oYXNBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpKSB7XG5cbiAgICAgICAgICByZXN1bHRJbmRleCA9ICtyZW5kZXJOb2RlLmdldEF0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUik7XG4gICAgICAgICAgcmVuZGVyTm9kZS5yZW1vdmVBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpO1xuXG4gICAgICAgICAgISFyZXN1bHRMaXN0Lmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEYW5nZXI6IEFzc2lnbmluZyB0byBhbiBhbHJlYWR5LW9jY3VwaWVkIHJlc3VsdCBpbmRleC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICByZXN1bHRMaXN0W3Jlc3VsdEluZGV4XSA9IHJlbmRlck5vZGU7XG5cbiAgICAgICAgICAvLyBUaGlzIHNob3VsZCBtYXRjaCByZXN1bHRMaXN0Lmxlbmd0aCBhbmQgbWFya3VwTGlzdC5sZW5ndGggd2hlblxuICAgICAgICAgIC8vIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCArPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdEYW5nZXI6IERpc2NhcmRpbmcgdW5leHBlY3RlZCBub2RlOicsIHJlbmRlck5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWx0aG91Z2ggcmVzdWx0TGlzdCB3YXMgcG9wdWxhdGVkIG91dCBvZiBvcmRlciwgaXQgc2hvdWxkIG5vdyBiZSBhIGRlbnNlXG4gICAgLy8gYXJyYXkuXG4gICAgIShyZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID09PSByZXN1bHRMaXN0Lmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRGFuZ2VyOiBEaWQgbm90IGFzc2lnbiB0byBldmVyeSBpbmRleCBvZiByZXN1bHRMaXN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICEocmVzdWx0TGlzdC5sZW5ndGggPT09IG1hcmt1cExpc3QubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEYW5nZXI6IEV4cGVjdGVkIG1hcmt1cCB0byByZW5kZXIgJXMgbm9kZXMsIGJ1dCByZW5kZXJlZCAlcy4nLCBtYXJrdXBMaXN0Lmxlbmd0aCwgcmVzdWx0TGlzdC5sZW5ndGgpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiByZXN1bHRMaXN0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIG5vZGUgd2l0aCBhIHN0cmluZyBvZiBtYXJrdXAgYXQgaXRzIGN1cnJlbnQgcG9zaXRpb24gd2l0aGluIGl0c1xuICAgKiBwYXJlbnQuIFRoZSBtYXJrdXAgbXVzdCByZW5kZXIgaW50byBhIHNpbmdsZSByb290IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gb2xkQ2hpbGQgQ2hpbGQgbm9kZSB0byByZXBsYWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0byByZW5kZXIgaW4gcGxhY2Ugb2YgdGhlIGNoaWxkIG5vZGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGZ1bmN0aW9uIChvbGRDaGlsZCwgbWFya3VwKSB7XG4gICAgIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhICcgKyAnd29ya2VyIHRocmVhZC4gTWFrZSBzdXJlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGFyZSBhdmFpbGFibGUgJyArICdnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIFJlYWN0IHdoZW4gdW5pdCB0ZXN0aW5nIG9yIHVzZSAnICsgJ1JlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkgZm9yIHNlcnZlciByZW5kZXJpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICFtYXJrdXAgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICEob2xkQ2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnaHRtbCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IENhbm5vdCByZXBsYWNlIG1hcmt1cCBvZiB0aGUgJyArICc8aHRtbD4gbm9kZS4gVGhpcyBpcyBiZWNhdXNlIGJyb3dzZXIgcXVpcmtzIG1ha2UgdGhpcyB1bnJlbGlhYmxlICcgKyAnYW5kL29yIHNsb3cuIElmIHlvdSB3YW50IHRvIHJlbmRlciB0byB0aGUgcm9vdCB5b3UgbXVzdCB1c2UgJyArICdzZXJ2ZXIgcmVuZGVyaW5nLiBTZWUgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgbmV3Q2hpbGQ7XG4gICAgaWYgKHR5cGVvZiBtYXJrdXAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuZXdDaGlsZCA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGVtcHR5RnVuY3Rpb24pWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDaGlsZCA9IG1hcmt1cDtcbiAgICB9XG4gICAgb2xkQ2hpbGQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Q2hpbGQsIG9sZENoaWxkKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhbmdlcjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZSR0Z1WjJWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUVSaGJtZGxjbHh1SUNvZ1FIUjVjR1ZqYUdWamEzTWdjM1JoZEdsakxXOXViSGxjYmlBcUwxeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCRmVHVmpkWFJwYjI1RmJuWnBjbTl1YldWdWRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMFY0WldOMWRHbHZia1Z1ZG1seWIyNXRaVzUwSnlrN1hHNWNiblpoY2lCamNtVmhkR1ZPYjJSbGMwWnliMjFOWVhKcmRYQWdQU0J5WlhGMWFYSmxLQ2RtWW1wekwyeHBZaTlqY21WaGRHVk9iMlJsYzBaeWIyMU5ZWEpyZFhBbktUdGNiblpoY2lCbGJYQjBlVVoxYm1OMGFXOXVJRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2Wlcxd2RIbEdkVzVqZEdsdmJpY3BPMXh1ZG1GeUlHZGxkRTFoY210MWNGZHlZWEFnUFNCeVpYRjFhWEpsS0NkbVltcHpMMnhwWWk5blpYUk5ZWEpyZFhCWGNtRndKeWs3WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2YVc1MllYSnBZVzUwSnlrN1hHNWNiblpoY2lCUFVFVk9YMVJCUjE5T1FVMUZYMFZZVUNBOUlDOWVLRHhiWGlCY1hDOCtYU3NwTHp0Y2JuWmhjaUJTUlZOVlRGUmZTVTVFUlZoZlFWUlVVaUE5SUNka1lYUmhMV1JoYm1kbGNpMXBibVJsZUNjN1hHNWNiaThxS2x4dUlDb2dSWGgwY21GamRITWdkR2hsSUdCdWIyUmxUbUZ0WldBZ1puSnZiU0JoSUhOMGNtbHVaeUJ2WmlCdFlYSnJkWEF1WEc0Z0tseHVJQ29nVGs5VVJUb2dSWGgwY21GamRHbHVaeUIwYUdVZ1lHNXZaR1ZPWVcxbFlDQmtiMlZ6SUc1dmRDQnlaWEYxYVhKbElHRWdjbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVJRzFoZEdOb1hHNGdLaUJpWldOaGRYTmxJSGRsSUcxaGEyVWdZWE56ZFcxd2RHbHZibk1nWVdKdmRYUWdVbVZoWTNRdFoyVnVaWEpoZEdWa0lHMWhjbXQxY0NBb2FTNWxMaUIwYUdWeVpTQmhjbVVnYm05Y2JpQXFJSE53WVdObGN5QnpkWEp5YjNWdVpHbHVaeUIwYUdVZ2IzQmxibWx1WnlCMFlXY2dZVzVrSUhSb1pYSmxJR2x6SUdGMElHeGxZWE4wSUc5dVpTQmhkSFJ5YVdKMWRHVXBMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnRZWEpyZFhBZ1UzUnlhVzVuSUc5bUlHMWhjbXQxY0M1Y2JpQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdUbTlrWlNCdVlXMWxJRzltSUhSb1pTQnpkWEJ3YkdsbFpDQnRZWEpyZFhBdVhHNGdLaUJBYzJWbElHaDBkSEE2THk5cWMzQmxjbVl1WTI5dEwyVjRkSEpoWTNRdGJtOWtaVzVoYldWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFRtOWtaVTVoYldVb2JXRnlhM1Z3S1NCN1hHNGdJSEpsZEhWeWJpQnRZWEpyZFhBdWMzVmljM1J5YVc1bktERXNJRzFoY210MWNDNXBibVJsZUU5bUtDY2dKeWtwTzF4dWZWeHVYRzUyWVhJZ1JHRnVaMlZ5SUQwZ2UxeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXNWtaWEp6SUcxaGNtdDFjQ0JwYm5SdklHRnVJR0Z5Y21GNUlHOW1JRzV2WkdWekxpQlVhR1VnYldGeWEzVndJR2x6SUdWNGNHVmpkR1ZrSUhSdklISmxibVJsY2x4dUlDQWdLaUJwYm5SdklHRWdiR2x6ZENCdlppQnliMjkwSUc1dlpHVnpMaUJCYkhOdkxDQjBhR1VnYkdWdVozUm9JRzltSUdCeVpYTjFiSFJNYVhOMFlDQmhibVJjYmlBZ0lDb2dZRzFoY210MWNFeHBjM1JnSUhOb2IzVnNaQ0JpWlNCMGFHVWdjMkZ0WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdGhjbkpoZVR4emRISnBibWMrZlNCdFlYSnJkWEJNYVhOMElFeHBjM1FnYjJZZ2JXRnlhM1Z3SUhOMGNtbHVaM01nZEc4Z2NtVnVaR1Z5TGx4dUlDQWdLaUJBY21WMGRYSnVJSHRoY25KaGVUeEVUMDFGYkdWdFpXNTBQbjBnVEdsemRDQnZaaUJ5Wlc1a1pYSmxaQ0J1YjJSbGN5NWNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmtZVzVuWlhKdmRYTnNlVkpsYm1SbGNrMWhjbXQxY0RvZ1puVnVZM1JwYjI0Z0tHMWhjbXQxY0V4cGMzUXBJSHRjYmlBZ0lDQWhSWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblF1WTJGdVZYTmxSRTlOSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMlJoYm1kbGNtOTFjMng1VW1WdVpHVnlUV0Z5YTNWd0tDNHVMaWs2SUVOaGJtNXZkQ0J5Wlc1a1pYSWdiV0Z5YTNWd0lHbHVJR0VnZDI5eWEyVnlJQ2NnS3lBbmRHaHlaV0ZrTGlCTllXdGxJSE4xY21VZ1lIZHBibVJ2ZDJBZ1lXNWtJR0JrYjJOMWJXVnVkR0FnWVhKbElHRjJZV2xzWVdKc1pTQm5iRzlpWVd4c2VTQW5JQ3NnSjJKbFptOXlaU0J5WlhGMWFYSnBibWNnVW1WaFkzUWdkMmhsYmlCMWJtbDBJSFJsYzNScGJtY2diM0lnZFhObElDY2dLeUFuVW1WaFkzUkVUMDFUWlhKMlpYSXVjbVZ1WkdWeVZHOVRkSEpwYm1jZ1ptOXlJSE5sY25abGNpQnlaVzVrWlhKcGJtY3VKeWtnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUhaaGNpQnViMlJsVG1GdFpUdGNiaUFnSUNCMllYSWdiV0Z5YTNWd1FubE9iMlJsVG1GdFpTQTlJSHQ5TzF4dUlDQWdJQzh2SUVkeWIzVndJRzFoY210MWNDQmllU0JnYm05a1pVNWhiV1ZnSUdsbUlHRWdkM0poY0NCcGN5QnVaV05sYzNOaGNua3NJR1ZzYzJVZ1lua2dKeW9uTGx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYldGeWEzVndUR2x6ZEM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJVzFoY210MWNFeHBjM1JiYVYwZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuWkdGdVoyVnliM1Z6YkhsU1pXNWtaWEpOWVhKcmRYQW9MaTR1S1RvZ1RXbHpjMmx1WnlCdFlYSnJkWEF1SnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdibTlrWlU1aGJXVWdQU0JuWlhST2IyUmxUbUZ0WlNodFlYSnJkWEJNYVhOMFcybGRLVHRjYmlBZ0lDQWdJRzV2WkdWT1lXMWxJRDBnWjJWMFRXRnlhM1Z3VjNKaGNDaHViMlJsVG1GdFpTa2dQeUJ1YjJSbFRtRnRaU0E2SUNjcUp6dGNiaUFnSUNBZ0lHMWhjbXQxY0VKNVRtOWtaVTVoYldWYmJtOWtaVTVoYldWZElEMGdiV0Z5YTNWd1FubE9iMlJsVG1GdFpWdHViMlJsVG1GdFpWMGdmSHdnVzEwN1hHNGdJQ0FnSUNCdFlYSnJkWEJDZVU1dlpHVk9ZVzFsVzI1dlpHVk9ZVzFsWFZ0cFhTQTlJRzFoY210MWNFeHBjM1JiYVYwN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCeVpYTjFiSFJNYVhOMElEMGdXMTA3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkRXhwYzNSQmMzTnBaMjV0Wlc1MFEyOTFiblFnUFNBd08xeHVJQ0FnSUdadmNpQW9ibTlrWlU1aGJXVWdhVzRnYldGeWEzVndRbmxPYjJSbFRtRnRaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRnRZWEpyZFhCQ2VVNXZaR1ZPWVcxbExtaGhjMDkzYmxCeWIzQmxjblI1S0c1dlpHVk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJ0WVhKcmRYQk1hWE4wUW5sT2IyUmxUbUZ0WlNBOUlHMWhjbXQxY0VKNVRtOWtaVTVoYldWYmJtOWtaVTVoYldWZE8xeHVYRzRnSUNBZ0lDQXZMeUJVYUdseklHWnZjaTFwYmlCc2IyOXdJSE5yYVhCeklIUm9aU0JvYjJ4bGN5QnZaaUIwYUdVZ2MzQmhjbk5sSUdGeWNtRjVMaUJVYUdVZ2IzSmtaWElnYjJaY2JpQWdJQ0FnSUM4dklHbDBaWEpoZEdsdmJpQnphRzkxYkdRZ1ptOXNiRzkzSUhSb1pTQnZjbVJsY2lCdlppQmhjM05wWjI1dFpXNTBMQ0IzYUdsamFDQm9ZWEJ3Wlc1eklIUnZJRzFoZEdOb1hHNGdJQ0FnSUNBdkx5QnVkVzFsY21sallXd2dhVzVrWlhnZ2IzSmtaWElzSUdKMWRDQjNaU0JrYjI0bmRDQnlaV3g1SUc5dUlIUm9ZWFF1WEc0Z0lDQWdJQ0IyWVhJZ2NtVnpkV3gwU1c1a1pYZzdYRzRnSUNBZ0lDQm1iM0lnS0hKbGMzVnNkRWx1WkdWNElHbHVJRzFoY210MWNFeHBjM1JDZVU1dlpHVk9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h0WVhKcmRYQk1hWE4wUW5sT2IyUmxUbUZ0WlM1b1lYTlBkMjVRY205d1pYSjBlU2h5WlhOMWJIUkpibVJsZUNrcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2JXRnlhM1Z3SUQwZ2JXRnlhM1Z3VEdsemRFSjVUbTlrWlU1aGJXVmJjbVZ6ZFd4MFNXNWtaWGhkTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnVUhWemFDQjBhR1VnY21WeGRXVnpkR1ZrSUcxaGNtdDFjQ0IzYVhSb0lHRnVJR0ZrWkdsMGFXOXVZV3dnVWtWVFZVeFVYMGxPUkVWWVgwRlVWRkpjYmlBZ0lDQWdJQ0FnSUNBdkx5QmhkSFJ5YVdKMWRHVXVJQ0JKWmlCMGFHVWdiV0Z5YTNWd0lHUnZaWE1nYm05MElITjBZWEowSUhkcGRHZ2dZU0E4SUdOb1lYSmhZM1JsY2l3Z2FYUmNiaUFnSUNBZ0lDQWdJQ0F2THlCM2FXeHNJR0psSUdScGMyTmhjbVJsWkNCaVpXeHZkeUFvZDJsMGFDQmhiaUJoY0hCeWIzQnlhV0YwWlNCamIyNXpiMnhsTG1WeWNtOXlLUzVjYmlBZ0lDQWdJQ0FnSUNCdFlYSnJkWEJNYVhOMFFubE9iMlJsVG1GdFpWdHlaWE4xYkhSSmJtUmxlRjBnUFNCdFlYSnJkWEF1Y21Wd2JHRmpaU2hQVUVWT1gxUkJSMTlPUVUxRlgwVllVQ3hjYmlBZ0lDQWdJQ0FnSUNBdkx5QlVhR2x6SUdsdVpHVjRJSGRwYkd3Z1ltVWdjR0Z5YzJWa0lHSmhZMnNnYjNWMElHSmxiRzkzTGx4dUlDQWdJQ0FnSUNBZ0lDY2tNU0FuSUNzZ1VrVlRWVXhVWDBsT1JFVllYMEZVVkZJZ0t5QW5QVndpSnlBcklISmxjM1ZzZEVsdVpHVjRJQ3NnSjF3aUlDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGSmxibVJsY2lCbFlXTm9JR2R5YjNWd0lHOW1JRzFoY210MWNDQjNhWFJvSUhOcGJXbHNZWElnZDNKaGNIQnBibWNnWUc1dlpHVk9ZVzFsWUM1Y2JpQWdJQ0FnSUhaaGNpQnlaVzVrWlhKT2IyUmxjeUE5SUdOeVpXRjBaVTV2WkdWelJuSnZiVTFoY210MWNDaHRZWEpyZFhCTWFYTjBRbmxPYjJSbFRtRnRaUzVxYjJsdUtDY25LU3dnWlcxd2RIbEdkVzVqZEdsdmJpQXZMeUJFYnlCdWIzUm9hVzVuSUhOd1pXTnBZV3dnZDJsMGFDQThjMk55YVhCMFBpQjBZV2R6TGx4dUlDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQnlaVzVrWlhKT2IyUmxjeTVzWlc1bmRHZzdJQ3NyYWlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WdVpHVnlUbTlrWlNBOUlISmxibVJsY2s1dlpHVnpXMnBkTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ1WkdWeVRtOWtaUzVvWVhOQmRIUnlhV0oxZEdVZ0ppWWdjbVZ1WkdWeVRtOWtaUzVvWVhOQmRIUnlhV0oxZEdVb1VrVlRWVXhVWDBsT1JFVllYMEZVVkZJcEtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJKYm1SbGVDQTlJQ3R5Wlc1a1pYSk9iMlJsTG1kbGRFRjBkSEpwWW5WMFpTaFNSVk5WVEZSZlNVNUVSVmhmUVZSVVVpazdYRzRnSUNBZ0lDQWdJQ0FnY21WdVpHVnlUbTlrWlM1eVpXMXZkbVZCZEhSeWFXSjFkR1VvVWtWVFZVeFVYMGxPUkVWWVgwRlVWRklwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJU0Z5WlhOMWJIUk1hWE4wTG1oaGMwOTNibEJ5YjNCbGNuUjVLSEpsYzNWc2RFbHVaR1Y0S1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RFWVc1blpYSTZJRUZ6YzJsbmJtbHVaeUIwYnlCaGJpQmhiSEpsWVdSNUxXOWpZM1Z3YVdWa0lISmxjM1ZzZENCcGJtUmxlQzRuS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJNYVhOMFczSmxjM1ZzZEVsdVpHVjRYU0E5SUhKbGJtUmxjazV2WkdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCVWFHbHpJSE5vYjNWc1pDQnRZWFJqYUNCeVpYTjFiSFJNYVhOMExteGxibWQwYUNCaGJtUWdiV0Z5YTNWd1RHbHpkQzVzWlc1bmRHZ2dkMmhsYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJSGRsSjNKbElHUnZibVV1WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpkV3gwVEdsemRFRnpjMmxuYm0xbGJuUkRiM1Z1ZENBclBTQXhPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZEVZVzVuWlhJNklFUnBjMk5oY21ScGJtY2dkVzVsZUhCbFkzUmxaQ0J1YjJSbE9pY3NJSEpsYm1SbGNrNXZaR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1FXeDBhRzkxWjJnZ2NtVnpkV3gwVEdsemRDQjNZWE1nY0c5d2RXeGhkR1ZrSUc5MWRDQnZaaUJ2Y21SbGNpd2dhWFFnYzJodmRXeGtJRzV2ZHlCaVpTQmhJR1JsYm5ObFhHNGdJQ0FnTHk4Z1lYSnlZWGt1WEc0Z0lDQWdJU2h5WlhOMWJIUk1hWE4wUVhOemFXZHViV1Z1ZEVOdmRXNTBJRDA5UFNCeVpYTjFiSFJNYVhOMExteGxibWQwYUNrZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuUkdGdVoyVnlPaUJFYVdRZ2JtOTBJR0Z6YzJsbmJpQjBieUJsZG1WeWVTQnBibVJsZUNCdlppQnlaWE4xYkhSTWFYTjBMaWNwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lDRW9jbVZ6ZFd4MFRHbHpkQzVzWlc1bmRHZ2dQVDA5SUcxaGNtdDFjRXhwYzNRdWJHVnVaM1JvS1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RFWVc1blpYSTZJRVY0Y0dWamRHVmtJRzFoY210MWNDQjBieUJ5Wlc1a1pYSWdKWE1nYm05a1pYTXNJR0oxZENCeVpXNWtaWEpsWkNBbGN5NG5MQ0J0WVhKcmRYQk1hWE4wTG14bGJtZDBhQ3dnY21WemRXeDBUR2x6ZEM1c1pXNW5kR2dwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFJNYVhOME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhCc1lXTmxjeUJoSUc1dlpHVWdkMmwwYUNCaElITjBjbWx1WnlCdlppQnRZWEpyZFhBZ1lYUWdhWFJ6SUdOMWNuSmxiblFnY0c5emFYUnBiMjRnZDJsMGFHbHVJR2wwYzF4dUlDQWdLaUJ3WVhKbGJuUXVJRlJvWlNCdFlYSnJkWEFnYlhWemRDQnlaVzVrWlhJZ2FXNTBieUJoSUhOcGJtZHNaU0J5YjI5MElHNXZaR1V1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JFOU5SV3hsYldWdWRIMGdiMnhrUTJocGJHUWdRMmhwYkdRZ2JtOWtaU0IwYnlCeVpYQnNZV05sTGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiV0Z5YTNWd0lFMWhjbXQxY0NCMGJ5QnlaVzVrWlhJZ2FXNGdjR3hoWTJVZ2IyWWdkR2hsSUdOb2FXeGtJRzV2WkdVdVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ1pHRnVaMlZ5YjNWemJIbFNaWEJzWVdObFRtOWtaVmRwZEdoTllYSnJkWEE2SUdaMWJtTjBhVzl1SUNodmJHUkRhR2xzWkN3Z2JXRnlhM1Z3S1NCN1hHNGdJQ0FnSVVWNFpXTjFkR2x2YmtWdWRtbHliMjV0Wlc1MExtTmhibFZ6WlVSUFRTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNka1lXNW5aWEp2ZFhOc2VWSmxjR3hoWTJWT2IyUmxWMmwwYUUxaGNtdDFjQ2d1TGk0cE9pQkRZVzV1YjNRZ2NtVnVaR1Z5SUcxaGNtdDFjQ0JwYmlCaElDY2dLeUFuZDI5eWEyVnlJSFJvY21WaFpDNGdUV0ZyWlNCemRYSmxJR0IzYVc1a2IzZGdJR0Z1WkNCZ1pHOWpkVzFsYm5SZ0lHRnlaU0JoZG1GcGJHRmliR1VnSnlBcklDZG5iRzlpWVd4c2VTQmlaV1p2Y21VZ2NtVnhkV2x5YVc1bklGSmxZV04wSUhkb1pXNGdkVzVwZENCMFpYTjBhVzVuSUc5eUlIVnpaU0FuSUNzZ0oxSmxZV04wUkU5TlUyVnlkbVZ5TG5KbGJtUmxjbFJ2VTNSeWFXNW5LQ2tnWm05eUlITmxjblpsY2lCeVpXNWtaWEpwYm1jdUp5a2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0Z0WVhKcmRYQWdQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBblpHRnVaMlZ5YjNWemJIbFNaWEJzWVdObFRtOWtaVmRwZEdoTllYSnJkWEFvTGk0dUtUb2dUV2x6YzJsdVp5QnRZWEpyZFhBdUp5a2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0VvYjJ4a1EyaHBiR1F1ZEdGblRtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncElDRTlQU0FuYUhSdGJDY3BJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oyUmhibWRsY205MWMyeDVVbVZ3YkdGalpVNXZaR1ZYYVhSb1RXRnlhM1Z3S0M0dUxpazZJRU5oYm01dmRDQnlaWEJzWVdObElHMWhjbXQxY0NCdlppQjBhR1VnSnlBcklDYzhhSFJ0YkQ0Z2JtOWtaUzRnVkdocGN5QnBjeUJpWldOaGRYTmxJR0p5YjNkelpYSWdjWFZwY210eklHMWhhMlVnZEdocGN5QjFibkpsYkdsaFlteGxJQ2NnS3lBbllXNWtMMjl5SUhOc2IzY3VJRWxtSUhsdmRTQjNZVzUwSUhSdklISmxibVJsY2lCMGJ5QjBhR1VnY205dmRDQjViM1VnYlhWemRDQjFjMlVnSnlBcklDZHpaWEoyWlhJZ2NtVnVaR1Z5YVc1bkxpQlRaV1VnVW1WaFkzUkVUMDFUWlhKMlpYSXVjbVZ1WkdWeVZHOVRkSEpwYm1jb0tTNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNCMllYSWdibVYzUTJocGJHUTdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnRZWEpyZFhBZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0J1WlhkRGFHbHNaQ0E5SUdOeVpXRjBaVTV2WkdWelJuSnZiVTFoY210MWNDaHRZWEpyZFhBc0lHVnRjSFI1Um5WdVkzUnBiMjRwV3pCZE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J1WlhkRGFHbHNaQ0E5SUcxaGNtdDFjRHRjYmlBZ0lDQjlYRzRnSUNBZ2IyeGtRMmhwYkdRdWNHRnlaVzUwVG05a1pTNXlaWEJzWVdObFEyaHBiR1FvYm1WM1EyaHBiR1FzSUc5c1pFTm9hV3hrS1R0Y2JpQWdmVnh1WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRVJoYm1kbGNqc2lYWDA9IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBba2V5T2YoeyBSZXNwb25kZXJFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBTaW1wbGVFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBUYXBFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBFbnRlckxlYXZlRXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgQ2hhbmdlRXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgU2VsZWN0RXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogbnVsbCB9KV07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEVudGVyTGVhdmVFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xudmFyIGdldEZpcnN0UmVhY3RET00gPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET007XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBtb3VzZUVudGVyOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZToga2V5T2YoeyBvbk1vdXNlRW50ZXI6IG51bGwgfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJdXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7IG9uTW91c2VMZWF2ZTogbnVsbCB9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcl1cbiAgfVxufTtcblxudmFyIGV4dHJhY3RlZEV2ZW50cyA9IFtudWxsLCBudWxsXTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyICYmIChuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQgJiYgdG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcikge1xuICAgICAgLy8gTXVzdCBub3QgYmUgYSBtb3VzZSBpbiBvciBtb3VzZSBvdXQgLSBpZ25vcmluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aW47XG4gICAgaWYgKHRvcExldmVsVGFyZ2V0LndpbmRvdyA9PT0gdG9wTGV2ZWxUYXJnZXQpIHtcbiAgICAgIC8vIGB0b3BMZXZlbFRhcmdldGAgaXMgcHJvYmFibHkgYSB3aW5kb3cgb2JqZWN0LlxuICAgICAgd2luID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICAgIHZhciBkb2MgPSB0b3BMZXZlbFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHdpbmRvdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZnJvbTtcbiAgICB2YXIgdG87XG4gICAgdmFyIGZyb21JRCA9ICcnO1xuICAgIHZhciB0b0lEID0gJyc7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCkge1xuICAgICAgZnJvbSA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgZnJvbUlEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICAgIHRvID0gZ2V0Rmlyc3RSZWFjdERPTShuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudCk7XG4gICAgICBpZiAodG8pIHtcbiAgICAgICAgdG9JRCA9IFJlYWN0TW91bnQuZ2V0SUQodG8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG8gPSB3aW47XG4gICAgICB9XG4gICAgICB0byA9IHRvIHx8IHdpbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJvbSA9IHdpbjtcbiAgICAgIHRvID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgICB0b0lEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICB9XG5cbiAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgIC8vIE5vdGhpbmcgcGVydGFpbnMgdG8gb3VyIG1hbmFnZWQgY29tcG9uZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMubW91c2VMZWF2ZSwgZnJvbUlELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGxlYXZlLnR5cGUgPSAnbW91c2VsZWF2ZSc7XG4gICAgbGVhdmUudGFyZ2V0ID0gZnJvbTtcbiAgICBsZWF2ZS5yZWxhdGVkVGFyZ2V0ID0gdG87XG5cbiAgICB2YXIgZW50ZXIgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLm1vdXNlRW50ZXIsIHRvSUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgZW50ZXIudHlwZSA9ICdtb3VzZWVudGVyJztcbiAgICBlbnRlci50YXJnZXQgPSB0bztcbiAgICBlbnRlci5yZWxhdGVkVGFyZ2V0ID0gZnJvbTtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKTtcblxuICAgIGV4dHJhY3RlZEV2ZW50c1swXSA9IGxlYXZlO1xuICAgIGV4dHJhY3RlZEV2ZW50c1sxXSA9IGVudGVyO1xuXG4gICAgcmV0dXJuIGV4dHJhY3RlZEV2ZW50cztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGVyTGVhdmVFdmVudFBsdWdpbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRDb25zdGFudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlNaXJyb3InKTtcblxudmFyIFByb3BhZ2F0aW9uUGhhc2VzID0ga2V5TWlycm9yKHsgYnViYmxlZDogbnVsbCwgY2FwdHVyZWQ6IG51bGwgfSk7XG5cbi8qKlxuICogVHlwZXMgb2YgcmF3IHNpZ25hbHMgZnJvbSB0aGUgYnJvd3NlciBjYXVnaHQgYXQgdGhlIHRvcCBsZXZlbC5cbiAqL1xudmFyIHRvcExldmVsVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICB0b3BBYm9ydDogbnVsbCxcbiAgdG9wQmx1cjogbnVsbCxcbiAgdG9wQ2FuUGxheTogbnVsbCxcbiAgdG9wQ2FuUGxheVRocm91Z2g6IG51bGwsXG4gIHRvcENoYW5nZTogbnVsbCxcbiAgdG9wQ2xpY2s6IG51bGwsXG4gIHRvcENvbXBvc2l0aW9uRW5kOiBudWxsLFxuICB0b3BDb21wb3NpdGlvblN0YXJ0OiBudWxsLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogbnVsbCxcbiAgdG9wQ29udGV4dE1lbnU6IG51bGwsXG4gIHRvcENvcHk6IG51bGwsXG4gIHRvcEN1dDogbnVsbCxcbiAgdG9wRG91YmxlQ2xpY2s6IG51bGwsXG4gIHRvcERyYWc6IG51bGwsXG4gIHRvcERyYWdFbmQ6IG51bGwsXG4gIHRvcERyYWdFbnRlcjogbnVsbCxcbiAgdG9wRHJhZ0V4aXQ6IG51bGwsXG4gIHRvcERyYWdMZWF2ZTogbnVsbCxcbiAgdG9wRHJhZ092ZXI6IG51bGwsXG4gIHRvcERyYWdTdGFydDogbnVsbCxcbiAgdG9wRHJvcDogbnVsbCxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6IG51bGwsXG4gIHRvcEVtcHRpZWQ6IG51bGwsXG4gIHRvcEVuY3J5cHRlZDogbnVsbCxcbiAgdG9wRW5kZWQ6IG51bGwsXG4gIHRvcEVycm9yOiBudWxsLFxuICB0b3BGb2N1czogbnVsbCxcbiAgdG9wSW5wdXQ6IG51bGwsXG4gIHRvcEtleURvd246IG51bGwsXG4gIHRvcEtleVByZXNzOiBudWxsLFxuICB0b3BLZXlVcDogbnVsbCxcbiAgdG9wTG9hZDogbnVsbCxcbiAgdG9wTG9hZGVkRGF0YTogbnVsbCxcbiAgdG9wTG9hZGVkTWV0YWRhdGE6IG51bGwsXG4gIHRvcExvYWRTdGFydDogbnVsbCxcbiAgdG9wTW91c2VEb3duOiBudWxsLFxuICB0b3BNb3VzZU1vdmU6IG51bGwsXG4gIHRvcE1vdXNlT3V0OiBudWxsLFxuICB0b3BNb3VzZU92ZXI6IG51bGwsXG4gIHRvcE1vdXNlVXA6IG51bGwsXG4gIHRvcFBhc3RlOiBudWxsLFxuICB0b3BQYXVzZTogbnVsbCxcbiAgdG9wUGxheTogbnVsbCxcbiAgdG9wUGxheWluZzogbnVsbCxcbiAgdG9wUHJvZ3Jlc3M6IG51bGwsXG4gIHRvcFJhdGVDaGFuZ2U6IG51bGwsXG4gIHRvcFJlc2V0OiBudWxsLFxuICB0b3BTY3JvbGw6IG51bGwsXG4gIHRvcFNlZWtlZDogbnVsbCxcbiAgdG9wU2Vla2luZzogbnVsbCxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiBudWxsLFxuICB0b3BTdGFsbGVkOiBudWxsLFxuICB0b3BTdWJtaXQ6IG51bGwsXG4gIHRvcFN1c3BlbmQ6IG51bGwsXG4gIHRvcFRleHRJbnB1dDogbnVsbCxcbiAgdG9wVGltZVVwZGF0ZTogbnVsbCxcbiAgdG9wVG91Y2hDYW5jZWw6IG51bGwsXG4gIHRvcFRvdWNoRW5kOiBudWxsLFxuICB0b3BUb3VjaE1vdmU6IG51bGwsXG4gIHRvcFRvdWNoU3RhcnQ6IG51bGwsXG4gIHRvcFZvbHVtZUNoYW5nZTogbnVsbCxcbiAgdG9wV2FpdGluZzogbnVsbCxcbiAgdG9wV2hlZWw6IG51bGxcbn0pO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSB7XG4gIHRvcExldmVsVHlwZXM6IHRvcExldmVsVHlwZXMsXG4gIFByb3BhZ2F0aW9uUGhhc2VzOiBQcm9wYWdhdGlvblBoYXNlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudENvbnN0YW50czsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50UGx1Z2luSHViXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5SZWdpc3RyeScpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luVXRpbHMnKTtcbnZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKCcuL1JlYWN0RXJyb3JVdGlscycpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKCcuL2FjY3VtdWxhdGVJbnRvJyk7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZSgnLi9mb3JFYWNoQWNjdW11bGF0ZWQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vKipcbiAqIEludGVybmFsIHN0b3JlIGZvciBldmVudCBsaXN0ZW5lcnNcbiAqL1xudmFyIGxpc3RlbmVyQmFuayA9IHt9O1xuXG4vKipcbiAqIEludGVybmFsIHF1ZXVlIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWNjdW11bGF0ZWQgdGhlaXIgZGlzcGF0Y2hlcyBhbmQgYXJlXG4gKiB3YWl0aW5nIHRvIGhhdmUgdGhlaXIgZGlzcGF0Y2hlcyBleGVjdXRlZC5cbiAqL1xudmFyIGV2ZW50UXVldWUgPSBudWxsO1xuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYW5kIHJlbGVhc2VzIGl0IGJhY2sgaW50byB0aGUgcG9vbCwgdW5sZXNzIHBlcnNpc3RlbnQuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBldmVudCBTeW50aGV0aWMgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2ltdWxhdGVkIElmIHRoZSBldmVudCBpcyBzaW11bGF0ZWQgKGNoYW5nZXMgZXhuIGJlaGF2aW9yKVxuICogQHByaXZhdGVcbiAqL1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSA9IGZ1bmN0aW9uIChldmVudCwgc2ltdWxhdGVkKSB7XG4gIGlmIChldmVudCkge1xuICAgIEV2ZW50UGx1Z2luVXRpbHMuZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpO1xuXG4gICAgaWYgKCFldmVudC5pc1BlcnNpc3RlbnQoKSkge1xuICAgICAgZXZlbnQuY29uc3RydWN0b3IucmVsZWFzZShldmVudCk7XG4gICAgfVxuICB9XG59O1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCA9IGZ1bmN0aW9uIChlKSB7XG4gIHJldHVybiBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UoZSwgdHJ1ZSk7XG59O1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIC0gYEluc3RhbmNlSGFuZGxlYDogW3JlcXVpcmVkXSBNb2R1bGUgdGhhdCBwZXJmb3JtcyBsb2dpY2FsIHRyYXZlcnNhbHMgb2YgRE9NXG4gKiAgIGhpZXJhcmNoeSBnaXZlbiBpZHMgb2YgdGhlIGxvZ2ljYWwgRE9NIGVsZW1lbnRzIGludm9sdmVkLlxuICovXG52YXIgSW5zdGFuY2VIYW5kbGUgPSBudWxsO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCkge1xuICB2YXIgdmFsaWQgPSBJbnN0YW5jZUhhbmRsZSAmJiBJbnN0YW5jZUhhbmRsZS50cmF2ZXJzZVR3b1BoYXNlICYmIEluc3RhbmNlSGFuZGxlLnRyYXZlcnNlRW50ZXJMZWF2ZTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodmFsaWQsICdJbnN0YW5jZUhhbmRsZSBub3QgaW5qZWN0ZWQgYmVmb3JlIHVzZSEnKSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgdW5pZmllZCBpbnRlcmZhY2UgZm9yIGV2ZW50IHBsdWdpbnMgdG8gYmUgaW5zdGFsbGVkIGFuZCBjb25maWd1cmVkLlxuICpcbiAqIEV2ZW50IHBsdWdpbnMgY2FuIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICBgZXh0cmFjdEV2ZW50c2Age2Z1bmN0aW9uKHN0cmluZywgRE9NRXZlbnRUYXJnZXQsIHN0cmluZywgb2JqZWN0KTogKn1cbiAqICAgICBSZXF1aXJlZC4gV2hlbiBhIHRvcC1sZXZlbCBldmVudCBpcyBmaXJlZCwgdGhpcyBtZXRob2QgaXMgZXhwZWN0ZWQgdG9cbiAqICAgICBleHRyYWN0IHN5bnRoZXRpYyBldmVudHMgdGhhdCB3aWxsIGluIHR1cm4gYmUgcXVldWVkIGFuZCBkaXNwYXRjaGVkLlxuICpcbiAqICAgYGV2ZW50VHlwZXNgIHtvYmplY3R9XG4gKiAgICAgT3B0aW9uYWwsIHBsdWdpbnMgdGhhdCBmaXJlIGV2ZW50cyBtdXN0IHB1Ymxpc2ggYSBtYXBwaW5nIG9mIHJlZ2lzdHJhdGlvblxuICogICAgIG5hbWVzIHRoYXQgYXJlIHVzZWQgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzLiBWYWx1ZXMgb2YgdGhpcyBtYXBwaW5nIG11c3RcbiAqICAgICBiZSBvYmplY3RzIHRoYXQgY29udGFpbiBgcmVnaXN0cmF0aW9uTmFtZWAgb3IgYHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzYC5cbiAqXG4gKiAgIGBleGVjdXRlRGlzcGF0Y2hgIHtmdW5jdGlvbihvYmplY3QsIGZ1bmN0aW9uLCBzdHJpbmcpfVxuICogICAgIE9wdGlvbmFsLCBhbGxvd3MgcGx1Z2lucyB0byBvdmVycmlkZSBob3cgYW4gZXZlbnQgZ2V0cyBkaXNwYXRjaGVkLiBCeVxuICogICAgIGRlZmF1bHQsIHRoZSBsaXN0ZW5lciBpcyBzaW1wbHkgaW52b2tlZC5cbiAqXG4gKiBFYWNoIHBsdWdpbiB0aGF0IGlzIGluamVjdGVkIGludG8gYEV2ZW50c1BsdWdpbkh1YmAgaXMgaW1tZWRpYXRlbHkgb3BlcmFibGUuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgRXZlbnRQbHVnaW5IdWIgPSB7XG5cbiAgLyoqXG4gICAqIE1ldGhvZHMgZm9yIGluamVjdGluZyBkZXBlbmRlbmNpZXMuXG4gICAqL1xuICBpbmplY3Rpb246IHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBJbmplY3RlZE1vdW50XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdE1vdW50OiBFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RNb3VudCxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBJbmplY3RlZEluc3RhbmNlSGFuZGxlXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdEluc3RhbmNlSGFuZGxlOiBmdW5jdGlvbiAoSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZSkge1xuICAgICAgSW5zdGFuY2VIYW5kbGUgPSBJbmplY3RlZEluc3RhbmNlSGFuZGxlO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRJbnN0YW5jZUhhbmRsZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEluc3RhbmNlSGFuZGxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogRXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbk9yZGVyLFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGluamVjdGVkTmFtZXNUb1BsdWdpbnMgTWFwIGZyb20gbmFtZXMgdG8gcGx1Z2luIG1vZHVsZXMuXG4gICAgICovXG4gICAgaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZVxuXG4gIH0sXG5cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyxcblxuICByZWdpc3RyYXRpb25OYW1lTW9kdWxlczogRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcyxcblxuICAvKipcbiAgICogU3RvcmVzIGBsaXN0ZW5lcmAgYXQgYGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtpZF1gLiBJcyBpZGVtcG90ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBOYW1lIG9mIGxpc3RlbmVyIChlLmcuIGBvbkNsaWNrYCkuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gc3RvcmUuXG4gICAqL1xuICBwdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgICEodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCAlcyBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCB0eXBlICVzJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV0gfHwgKGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSA9IHt9KTtcbiAgICBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF0gPSBsaXN0ZW5lcjtcblxuICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLmRpZFB1dExpc3RlbmVyKSB7XG4gICAgICBQbHVnaW5Nb2R1bGUuZGlkUHV0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuICAgKi9cbiAgZ2V0TGlzdGVuZXI6IGZ1bmN0aW9uIChpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICByZXR1cm4gYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgJiYgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEgbGlzdGVuZXIgZnJvbSB0aGUgcmVnaXN0cmF0aW9uIGJhbmsuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICovXG4gIGRlbGV0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICBpZiAoUGx1Z2luTW9kdWxlICYmIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIpIHtcbiAgICAgIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIH1cblxuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCBuZXZlciBiZSBudWxsIC0tIHdoZW4gaXMgaXQ/XG4gICAgaWYgKGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICBkZWxldGUgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgbGlzdGVuZXJzIGZvciB0aGUgRE9NIGVsZW1lbnQgd2l0aCB0aGUgc3VwcGxpZWQgSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqL1xuICBkZWxldGVBbGxMaXN0ZW5lcnM6IGZ1bmN0aW9uIChpZCkge1xuICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gbGlzdGVuZXJCYW5rKSB7XG4gICAgICBpZiAoIWxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtpZF0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgaWYgKFBsdWdpbk1vZHVsZSAmJiBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKSB7XG4gICAgICAgIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFsbG93cyByZWdpc3RlcmVkIHBsdWdpbnMgYW4gb3Bwb3J0dW5pdHkgdG8gZXh0cmFjdCBldmVudHMgZnJvbSB0b3AtbGV2ZWxcbiAgICogbmF0aXZlIGJyb3dzZXIgZXZlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50cztcbiAgICB2YXIgcGx1Z2lucyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIE5vdCBldmVyeSBwbHVnaW4gaW4gdGhlIG9yZGVyaW5nIG1heSBiZSBsb2FkZWQgYXQgcnVudGltZS5cbiAgICAgIHZhciBwb3NzaWJsZVBsdWdpbiA9IHBsdWdpbnNbaV07XG4gICAgICBpZiAocG9zc2libGVQbHVnaW4pIHtcbiAgICAgICAgdmFyIGV4dHJhY3RlZEV2ZW50cyA9IHBvc3NpYmxlUGx1Z2luLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgaWYgKGV4dHJhY3RlZEV2ZW50cykge1xuICAgICAgICAgIGV2ZW50cyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50cywgZXh0cmFjdGVkRXZlbnRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXZlbnRzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBhIHN5bnRoZXRpYyBldmVudCB0aGF0IHNob3VsZCBiZSBkaXNwYXRjaGVkIHdoZW5cbiAgICogYHByb2Nlc3NFdmVudFF1ZXVlYCBpcyBpbnZva2VkLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGV2ZW50cyBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRXZlbnRzOiBmdW5jdGlvbiAoZXZlbnRzKSB7XG4gICAgaWYgKGV2ZW50cykge1xuICAgICAgZXZlbnRRdWV1ZSA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50UXVldWUsIGV2ZW50cyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFsbCBzeW50aGV0aWMgZXZlbnRzIG9uIHRoZSBldmVudCBxdWV1ZS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzRXZlbnRRdWV1ZTogZnVuY3Rpb24gKHNpbXVsYXRlZCkge1xuICAgIC8vIFNldCBgZXZlbnRRdWV1ZWAgdG8gbnVsbCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBzbyB0aGF0IHdlIGNhbiB0ZWxsIGlmIG1vcmVcbiAgICAvLyBldmVudHMgZ2V0IGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcuXG4gICAgdmFyIHByb2Nlc3NpbmdFdmVudFF1ZXVlID0gZXZlbnRRdWV1ZTtcbiAgICBldmVudFF1ZXVlID0gbnVsbDtcbiAgICBpZiAoc2ltdWxhdGVkKSB7XG4gICAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwpO1xuICAgIH1cbiAgICAhIWV2ZW50UXVldWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncHJvY2Vzc0V2ZW50UXVldWUoKTogQWRkaXRpb25hbCBldmVudHMgd2VyZSBlbnF1ZXVlZCB3aGlsZSBwcm9jZXNzaW5nICcgKyAnYW4gZXZlbnQgcXVldWUuIFN1cHBvcnQgZm9yIHRoaXMgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgLy8gVGhpcyB3b3VsZCBiZSBhIGdvb2QgdGltZSB0byByZXRocm93IGlmIGFueSBvZiB0aGUgZXZlbnQgaGFuZGxlcnMgdGhyZXcuXG4gICAgUmVhY3RFcnJvclV0aWxzLnJldGhyb3dDYXVnaHRFcnJvcigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGVzZSBhcmUgbmVlZGVkIGZvciB0ZXN0cyBvbmx5LiBEbyBub3QgdXNlIVxuICAgKi9cbiAgX19wdXJnZTogZnVuY3Rpb24gKCkge1xuICAgIGxpc3RlbmVyQmFuayA9IHt9O1xuICB9LFxuXG4gIF9fZ2V0TGlzdGVuZXJCYW5rOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQmFuaztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luSHViO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJYWmxiblJRYkhWbmFXNUlkV0l1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUVWMlpXNTBVR3gxWjJsdVNIVmlYRzRnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnUlhabGJuUlFiSFZuYVc1U1pXZHBjM1J5ZVNBOUlISmxjWFZwY21Vb0p5NHZSWFpsYm5SUWJIVm5hVzVTWldkcGMzUnllU2NwTzF4dWRtRnlJRVYyWlc1MFVHeDFaMmx1VlhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TDBWMlpXNTBVR3gxWjJsdVZYUnBiSE1uS1R0Y2JuWmhjaUJTWldGamRFVnljbTl5VlhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBSWEp5YjNKVmRHbHNjeWNwTzF4dVhHNTJZWElnWVdOamRXMTFiR0YwWlVsdWRHOGdQU0J5WlhGMWFYSmxLQ2N1TDJGalkzVnRkV3hoZEdWSmJuUnZKeWs3WEc1MllYSWdabTl5UldGamFFRmpZM1Z0ZFd4aGRHVmtJRDBnY21WeGRXbHlaU2duTGk5bWIzSkZZV05vUVdOamRXMTFiR0YwWldRbktUdGNiblpoY2lCcGJuWmhjbWxoYm5RZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOXBiblpoY21saGJuUW5LVHRjYm5aaGNpQjNZWEp1YVc1bklEMGdjbVZ4ZFdseVpTZ25abUpxY3k5c2FXSXZkMkZ5Ym1sdVp5Y3BPMXh1WEc0dktpcGNiaUFxSUVsdWRHVnlibUZzSUhOMGIzSmxJR1p2Y2lCbGRtVnVkQ0JzYVhOMFpXNWxjbk5jYmlBcUwxeHVkbUZ5SUd4cGMzUmxibVZ5UW1GdWF5QTlJSHQ5TzF4dVhHNHZLaXBjYmlBcUlFbHVkR1Z5Ym1Gc0lIRjFaWFZsSUc5bUlHVjJaVzUwY3lCMGFHRjBJR2hoZG1VZ1lXTmpkVzExYkdGMFpXUWdkR2hsYVhJZ1pHbHpjR0YwWTJobGN5QmhibVFnWVhKbFhHNGdLaUIzWVdsMGFXNW5JSFJ2SUdoaGRtVWdkR2hsYVhJZ1pHbHpjR0YwWTJobGN5QmxlR1ZqZFhSbFpDNWNiaUFxTDF4dWRtRnlJR1YyWlc1MFVYVmxkV1VnUFNCdWRXeHNPMXh1WEc0dktpcGNiaUFxSUVScGMzQmhkR05vWlhNZ1lXNGdaWFpsYm5RZ1lXNWtJSEpsYkdWaGMyVnpJR2wwSUdKaFkyc2dhVzUwYnlCMGFHVWdjRzl2YkN3Z2RXNXNaWE56SUhCbGNuTnBjM1JsYm5RdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUhzL2IySnFaV04wZlNCbGRtVnVkQ0JUZVc1MGFHVjBhV01nWlhabGJuUWdkRzhnWW1VZ1pHbHpjR0YwWTJobFpDNWNiaUFxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnYzJsdGRXeGhkR1ZrSUVsbUlIUm9aU0JsZG1WdWRDQnBjeUJ6YVcxMWJHRjBaV1FnS0dOb1lXNW5aWE1nWlhodUlHSmxhR0YyYVc5eUtWeHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUwxeHVkbUZ5SUdWNFpXTjFkR1ZFYVhOd1lYUmphR1Z6UVc1a1VtVnNaV0Z6WlNBOUlHWjFibU4wYVc5dUlDaGxkbVZ1ZEN3Z2MybHRkV3hoZEdWa0tTQjdYRzRnSUdsbUlDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUVWMlpXNTBVR3gxWjJsdVZYUnBiSE11WlhobFkzVjBaVVJwYzNCaGRHTm9aWE5KYms5eVpHVnlLR1YyWlc1MExDQnphVzExYkdGMFpXUXBPMXh1WEc0Z0lDQWdhV1lnS0NGbGRtVnVkQzVwYzFCbGNuTnBjM1JsYm5Rb0tTa2dlMXh1SUNBZ0lDQWdaWFpsYm5RdVkyOXVjM1J5ZFdOMGIzSXVjbVZzWldGelpTaGxkbVZ1ZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dWRtRnlJR1Y0WldOMWRHVkVhWE53WVhSamFHVnpRVzVrVW1Wc1pXRnpaVk5wYlhWc1lYUmxaQ0E5SUdaMWJtTjBhVzl1SUNobEtTQjdYRzRnSUhKbGRIVnliaUJsZUdWamRYUmxSR2x6Y0dGMFkyaGxjMEZ1WkZKbGJHVmhjMlVvWlN3Z2RISjFaU2s3WEc1OU8xeHVkbUZ5SUdWNFpXTjFkR1ZFYVhOd1lYUmphR1Z6UVc1a1VtVnNaV0Z6WlZSdmNFeGxkbVZzSUQwZ1puVnVZM1JwYjI0Z0tHVXBJSHRjYmlBZ2NtVjBkWEp1SUdWNFpXTjFkR1ZFYVhOd1lYUmphR1Z6UVc1a1VtVnNaV0Z6WlNobExDQm1ZV3h6WlNrN1hHNTlPMXh1WEc0dktpcGNiaUFxSUMwZ1lFbHVjM1JoYm1ObFNHRnVaR3hsWURvZ1czSmxjWFZwY21Wa1hTQk5iMlIxYkdVZ2RHaGhkQ0J3WlhKbWIzSnRjeUJzYjJkcFkyRnNJSFJ5WVhabGNuTmhiSE1nYjJZZ1JFOU5YRzRnS2lBZ0lHaHBaWEpoY21Ob2VTQm5hWFpsYmlCcFpITWdiMllnZEdobElHeHZaMmxqWVd3Z1JFOU5JR1ZzWlcxbGJuUnpJR2x1ZG05c2RtVmtMbHh1SUNvdlhHNTJZWElnU1c1emRHRnVZMlZJWVc1a2JHVWdQU0J1ZFd4c08xeHVYRzVtZFc1amRHbHZiaUIyWVd4cFpHRjBaVWx1YzNSaGJtTmxTR0Z1Wkd4bEtDa2dlMXh1SUNCMllYSWdkbUZzYVdRZ1BTQkpibk4wWVc1alpVaGhibVJzWlNBbUppQkpibk4wWVc1alpVaGhibVJzWlM1MGNtRjJaWEp6WlZSM2IxQm9ZWE5sSUNZbUlFbHVjM1JoYm1ObFNHRnVaR3hsTG5SeVlYWmxjbk5sUlc1MFpYSk1aV0YyWlR0Y2JpQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUhkaGNtNXBibWNvZG1Gc2FXUXNJQ2RKYm5OMFlXNWpaVWhoYm1Sc1pTQnViM1FnYVc1cVpXTjBaV1FnWW1WbWIzSmxJSFZ6WlNFbktTQTZJSFZ1WkdWbWFXNWxaRHRjYm4xY2JseHVMeW9xWEc0Z0tpQlVhR2x6SUdseklHRWdkVzVwWm1sbFpDQnBiblJsY21aaFkyVWdabTl5SUdWMlpXNTBJSEJzZFdkcGJuTWdkRzhnWW1VZ2FXNXpkR0ZzYkdWa0lHRnVaQ0JqYjI1bWFXZDFjbVZrTGx4dUlDcGNiaUFxSUVWMlpXNTBJSEJzZFdkcGJuTWdZMkZ1SUdsdGNHeGxiV1Z1ZENCMGFHVWdabTlzYkc5M2FXNW5JSEJ5YjNCbGNuUnBaWE02WEc0Z0tseHVJQ29nSUNCZ1pYaDBjbUZqZEVWMlpXNTBjMkFnZTJaMWJtTjBhVzl1S0hOMGNtbHVaeXdnUkU5TlJYWmxiblJVWVhKblpYUXNJSE4wY21sdVp5d2diMkpxWldOMEtUb2dLbjFjYmlBcUlDQWdJQ0JTWlhGMWFYSmxaQzRnVjJobGJpQmhJSFJ2Y0Mxc1pYWmxiQ0JsZG1WdWRDQnBjeUJtYVhKbFpDd2dkR2hwY3lCdFpYUm9iMlFnYVhNZ1pYaHdaV04wWldRZ2RHOWNiaUFxSUNBZ0lDQmxlSFJ5WVdOMElITjViblJvWlhScFl5QmxkbVZ1ZEhNZ2RHaGhkQ0IzYVd4c0lHbHVJSFIxY200Z1ltVWdjWFZsZFdWa0lHRnVaQ0JrYVhOd1lYUmphR1ZrTGx4dUlDcGNiaUFxSUNBZ1lHVjJaVzUwVkhsd1pYTmdJSHR2WW1wbFkzUjlYRzRnS2lBZ0lDQWdUM0IwYVc5dVlXd3NJSEJzZFdkcGJuTWdkR2hoZENCbWFYSmxJR1YyWlc1MGN5QnRkWE4wSUhCMVlteHBjMmdnWVNCdFlYQndhVzVuSUc5bUlISmxaMmx6ZEhKaGRHbHZibHh1SUNvZ0lDQWdJRzVoYldWeklIUm9ZWFFnWVhKbElIVnpaV1FnZEc4Z2NtVm5hWE4wWlhJZ2JHbHpkR1Z1WlhKekxpQldZV3gxWlhNZ2IyWWdkR2hwY3lCdFlYQndhVzVuSUcxMWMzUmNiaUFxSUNBZ0lDQmlaU0J2WW1wbFkzUnpJSFJvWVhRZ1kyOXVkR0ZwYmlCZ2NtVm5hWE4wY21GMGFXOXVUbUZ0WldBZ2IzSWdZSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWellDNWNiaUFxWEc0Z0tpQWdJR0JsZUdWamRYUmxSR2x6Y0dGMFkyaGdJSHRtZFc1amRHbHZiaWh2WW1wbFkzUXNJR1oxYm1OMGFXOXVMQ0J6ZEhKcGJtY3BmVnh1SUNvZ0lDQWdJRTl3ZEdsdmJtRnNMQ0JoYkd4dmQzTWdjR3gxWjJsdWN5QjBieUJ2ZG1WeWNtbGtaU0JvYjNjZ1lXNGdaWFpsYm5RZ1oyVjBjeUJrYVhOd1lYUmphR1ZrTGlCQ2VWeHVJQ29nSUNBZ0lHUmxabUYxYkhRc0lIUm9aU0JzYVhOMFpXNWxjaUJwY3lCemFXMXdiSGtnYVc1MmIydGxaQzVjYmlBcVhHNGdLaUJGWVdOb0lIQnNkV2RwYmlCMGFHRjBJR2x6SUdsdWFtVmpkR1ZrSUdsdWRHOGdZRVYyWlc1MGMxQnNkV2RwYmtoMVltQWdhWE1nYVcxdFpXUnBZWFJsYkhrZ2IzQmxjbUZpYkdVdVhHNGdLbHh1SUNvZ1FIQjFZbXhwWTF4dUlDb3ZYRzUyWVhJZ1JYWmxiblJRYkhWbmFXNUlkV0lnUFNCN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxbGRHaHZaSE1nWm05eUlHbHVhbVZqZEdsdVp5QmtaWEJsYm1SbGJtTnBaWE11WEc0Z0lDQXFMMXh1SUNCcGJtcGxZM1JwYjI0NklIdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQkpibXBsWTNSbFpFMXZkVzUwWEc0Z0lDQWdJQ29nUUhCMVlteHBZMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHVhbVZqZEUxdmRXNTBPaUJGZG1WdWRGQnNkV2RwYmxWMGFXeHpMbWx1YW1WamRHbHZiaTVwYm1wbFkzUk5iM1Z1ZEN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCSmJtcGxZM1JsWkVsdWMzUmhibU5sU0dGdVpHeGxYRzRnSUNBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdsdWFtVmpkRWx1YzNSaGJtTmxTR0Z1Wkd4bE9pQm1kVzVqZEdsdmJpQW9TVzVxWldOMFpXUkpibk4wWVc1alpVaGhibVJzWlNrZ2UxeHVJQ0FnSUNBZ1NXNXpkR0Z1WTJWSVlXNWtiR1VnUFNCSmJtcGxZM1JsWkVsdWMzUmhibU5sU0dGdVpHeGxPMXh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdkbUZzYVdSaGRHVkpibk4wWVc1alpVaGhibVJzWlNncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCblpYUkpibk4wWVc1alpVaGhibVJzWlRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdkbUZzYVdSaGRHVkpibk4wWVc1alpVaGhibVJzWlNncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUVsdWMzUmhibU5sU0dGdVpHeGxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMkZ5Y21GNWZTQkpibXBsWTNSbFpFVjJaVzUwVUd4MVoybHVUM0prWlhKY2JpQWdJQ0FnS2lCQWNIVmliR2xqWEc0Z0lDQWdJQ292WEc0Z0lDQWdhVzVxWldOMFJYWmxiblJRYkhWbmFXNVBjbVJsY2pvZ1JYWmxiblJRYkhWbmFXNVNaV2RwYzNSeWVTNXBibXBsWTNSRmRtVnVkRkJzZFdkcGJrOXlaR1Z5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUdsdWFtVmpkR1ZrVG1GdFpYTlViMUJzZFdkcGJuTWdUV0Z3SUdaeWIyMGdibUZ0WlhNZ2RHOGdjR3gxWjJsdUlHMXZaSFZzWlhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYVc1cVpXTjBSWFpsYm5SUWJIVm5hVzV6UW5sT1lXMWxPaUJGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1TG1sdWFtVmpkRVYyWlc1MFVHeDFaMmx1YzBKNVRtRnRaVnh1WEc0Z0lIMHNYRzVjYmlBZ1pYWmxiblJPWVcxbFJHbHpjR0YwWTJoRGIyNW1hV2R6T2lCRmRtVnVkRkJzZFdkcGJsSmxaMmx6ZEhKNUxtVjJaVzUwVG1GdFpVUnBjM0JoZEdOb1EyOXVabWxuY3l4Y2JseHVJQ0J5WldkcGMzUnlZWFJwYjI1T1lXMWxUVzlrZFd4bGN6b2dSWFpsYm5SUWJIVm5hVzVTWldkcGMzUnllUzV5WldkcGMzUnlZWFJwYjI1T1lXMWxUVzlrZFd4bGN5eGNibHh1SUNBdktpcGNiaUFnSUNvZ1UzUnZjbVZ6SUdCc2FYTjBaVzVsY21BZ1lYUWdZR3hwYzNSbGJtVnlRbUZ1YTF0eVpXZHBjM1J5WVhScGIyNU9ZVzFsWFZ0cFpGMWdMaUJKY3lCcFpHVnRjRzkwWlc1MExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnU1VRZ2IyWWdkR2hsSUVSUFRTQmxiR1Z0Wlc1MExseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY21WbmFYTjBjbUYwYVc5dVRtRnRaU0JPWVcxbElHOW1JR3hwYzNSbGJtVnlJQ2hsTG1jdUlHQnZia05zYVdOcllDa3VYRzRnSUNBcUlFQndZWEpoYlNCN1AyWjFibU4wYVc5dWZTQnNhWE4wWlc1bGNpQlVhR1VnWTJGc2JHSmhZMnNnZEc4Z2MzUnZjbVV1WEc0Z0lDQXFMMXh1SUNCd2RYUk1hWE4wWlc1bGNqb2dablZ1WTNScGIyNGdLR2xrTENCeVpXZHBjM1J5WVhScGIyNU9ZVzFsTENCc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNFb2RIbHdaVzltSUd4cGMzUmxibVZ5SUQwOVBTQW5ablZ1WTNScGIyNG5LU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZEZlSEJsWTNSbFpDQWxjeUJzYVhOMFpXNWxjaUIwYnlCaVpTQmhJR1oxYm1OMGFXOXVMQ0JwYm5OMFpXRmtJR2R2ZENCMGVYQmxJQ1Z6Snl3Z2NtVm5hWE4wY21GMGFXOXVUbUZ0WlN3Z2RIbHdaVzltSUd4cGMzUmxibVZ5S1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQjJZWElnWW1GdWEwWnZjbEpsWjJsemRISmhkR2x2Yms1aGJXVWdQU0JzYVhOMFpXNWxja0poYm10YmNtVm5hWE4wY21GMGFXOXVUbUZ0WlYwZ2ZId2dLR3hwYzNSbGJtVnlRbUZ1YTF0eVpXZHBjM1J5WVhScGIyNU9ZVzFsWFNBOUlIdDlLVHRjYmlBZ0lDQmlZVzVyUm05eVVtVm5hWE4wY21GMGFXOXVUbUZ0WlZ0cFpGMGdQU0JzYVhOMFpXNWxjanRjYmx4dUlDQWdJSFpoY2lCUWJIVm5hVzVOYjJSMWJHVWdQU0JGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1TG5KbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpXM0psWjJsemRISmhkR2x2Yms1aGJXVmRPMXh1SUNBZ0lHbG1JQ2hRYkhWbmFXNU5iMlIxYkdVZ0ppWWdVR3gxWjJsdVRXOWtkV3hsTG1ScFpGQjFkRXhwYzNSbGJtVnlLU0I3WEc0Z0lDQWdJQ0JRYkhWbmFXNU5iMlIxYkdVdVpHbGtVSFYwVEdsemRHVnVaWElvYVdRc0lISmxaMmx6ZEhKaGRHbHZiazVoYldVc0lHeHBjM1JsYm1WeUtUdGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnBaQ0JKUkNCdlppQjBhR1VnUkU5TklHVnNaVzFsYm5RdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J5WldkcGMzUnlZWFJwYjI1T1lXMWxJRTVoYldVZ2IyWWdiR2x6ZEdWdVpYSWdLR1V1Wnk0Z1lHOXVRMnhwWTJ0Z0tTNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1AyWjFibU4wYVc5dWZTQlVhR1VnYzNSdmNtVmtJR05oYkd4aVlXTnJMbHh1SUNBZ0tpOWNiaUFnWjJWMFRHbHpkR1Z1WlhJNklHWjFibU4wYVc5dUlDaHBaQ3dnY21WbmFYTjBjbUYwYVc5dVRtRnRaU2tnZTF4dUlDQWdJSFpoY2lCaVlXNXJSbTl5VW1WbmFYTjBjbUYwYVc5dVRtRnRaU0E5SUd4cGMzUmxibVZ5UW1GdWExdHlaV2RwYzNSeVlYUnBiMjVPWVcxbFhUdGNiaUFnSUNCeVpYUjFjbTRnWW1GdWEwWnZjbEpsWjJsemRISmhkR2x2Yms1aGJXVWdKaVlnWW1GdWEwWnZjbEpsWjJsemRISmhkR2x2Yms1aGJXVmJhV1JkTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaV3hsZEdWeklHRWdiR2x6ZEdWdVpYSWdabkp2YlNCMGFHVWdjbVZuYVhOMGNtRjBhVzl1SUdKaGJtc3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JwWkNCSlJDQnZaaUIwYUdVZ1JFOU5JR1ZzWlcxbGJuUXVYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeVpXZHBjM1J5WVhScGIyNU9ZVzFsSUU1aGJXVWdiMllnYkdsemRHVnVaWElnS0dVdVp5NGdZRzl1UTJ4cFkydGdLUzVjYmlBZ0lDb3ZYRzRnSUdSbGJHVjBaVXhwYzNSbGJtVnlPaUJtZFc1amRHbHZiaUFvYVdRc0lISmxaMmx6ZEhKaGRHbHZiazVoYldVcElIdGNiaUFnSUNCMllYSWdVR3gxWjJsdVRXOWtkV3hsSUQwZ1JYWmxiblJRYkhWbmFXNVNaV2RwYzNSeWVTNXlaV2RwYzNSeVlYUnBiMjVPWVcxbFRXOWtkV3hsYzF0eVpXZHBjM1J5WVhScGIyNU9ZVzFsWFR0Y2JpQWdJQ0JwWmlBb1VHeDFaMmx1VFc5a2RXeGxJQ1ltSUZCc2RXZHBiazF2WkhWc1pTNTNhV3hzUkdWc1pYUmxUR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJRkJzZFdkcGJrMXZaSFZzWlM1M2FXeHNSR1ZzWlhSbFRHbHpkR1Z1WlhJb2FXUXNJSEpsWjJsemRISmhkR2x2Yms1aGJXVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJpWVc1clJtOXlVbVZuYVhOMGNtRjBhVzl1VG1GdFpTQTlJR3hwYzNSbGJtVnlRbUZ1YTF0eVpXZHBjM1J5WVhScGIyNU9ZVzFsWFR0Y2JpQWdJQ0F2THlCVVQwUlBPaUJVYUdseklITm9iM1ZzWkNCdVpYWmxjaUJpWlNCdWRXeHNJQzB0SUhkb1pXNGdhWE1nYVhRL1hHNGdJQ0FnYVdZZ0tHSmhibXRHYjNKU1pXZHBjM1J5WVhScGIyNU9ZVzFsS1NCN1hHNGdJQ0FnSUNCa1pXeGxkR1VnWW1GdWEwWnZjbEpsWjJsemRISmhkR2x2Yms1aGJXVmJhV1JkTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1JHVnNaWFJsY3lCaGJHd2diR2x6ZEdWdVpYSnpJR1p2Y2lCMGFHVWdSRTlOSUdWc1pXMWxiblFnZDJsMGFDQjBhR1VnYzNWd2NHeHBaV1FnU1VRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnBaQ0JKUkNCdlppQjBhR1VnUkU5TklHVnNaVzFsYm5RdVhHNGdJQ0FxTDF4dUlDQmtaV3hsZEdWQmJHeE1hWE4wWlc1bGNuTTZJR1oxYm1OMGFXOXVJQ2hwWkNrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUhKbFoybHpkSEpoZEdsdmJrNWhiV1VnYVc0Z2JHbHpkR1Z1WlhKQ1lXNXJLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXeHBjM1JsYm1WeVFtRnVhMXR5WldkcGMzUnlZWFJwYjI1T1lXMWxYVnRwWkYwcElIdGNiaUFnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFpoY2lCUWJIVm5hVzVOYjJSMWJHVWdQU0JGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1TG5KbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpXM0psWjJsemRISmhkR2x2Yms1aGJXVmRPMXh1SUNBZ0lDQWdhV1lnS0ZCc2RXZHBiazF2WkhWc1pTQW1KaUJRYkhWbmFXNU5iMlIxYkdVdWQybHNiRVJsYkdWMFpVeHBjM1JsYm1WeUtTQjdYRzRnSUNBZ0lDQWdJRkJzZFdkcGJrMXZaSFZzWlM1M2FXeHNSR1ZzWlhSbFRHbHpkR1Z1WlhJb2FXUXNJSEpsWjJsemRISmhkR2x2Yms1aGJXVXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JrWld4bGRHVWdiR2x6ZEdWdVpYSkNZVzVyVzNKbFoybHpkSEpoZEdsdmJrNWhiV1ZkVzJsa1hUdGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZzYkc5M2N5QnlaV2RwYzNSbGNtVmtJSEJzZFdkcGJuTWdZVzRnYjNCd2IzSjBkVzVwZEhrZ2RHOGdaWGgwY21GamRDQmxkbVZ1ZEhNZ1puSnZiU0IwYjNBdGJHVjJaV3hjYmlBZ0lDb2dibUYwYVhabElHSnliM2R6WlhJZ1pYWmxiblJ6TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RHOXdUR1YyWld4VWVYQmxJRkpsWTI5eVpDQm1jbTl0SUdCRmRtVnVkRU52Ym5OMFlXNTBjMkF1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSRTlOUlhabGJuUlVZWEpuWlhSOUlIUnZjRXhsZG1Wc1ZHRnlaMlYwSUZSb1pTQnNhWE4wWlc1cGJtY2dZMjl0Y0c5dVpXNTBJSEp2YjNRZ2JtOWtaUzVjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUnZjRXhsZG1Wc1ZHRnlaMlYwU1VRZ1NVUWdiMllnWUhSdmNFeGxkbVZzVkdGeVoyVjBZQzVjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHNWhkR2wyWlVWMlpXNTBJRTVoZEdsMlpTQmljbTkzYzJWeUlHVjJaVzUwTGx4dUlDQWdLaUJBY21WMGRYSnVJSHNxZlNCQmJpQmhZMk4xYlhWc1lYUnBiMjRnYjJZZ2MzbHVkR2hsZEdsaklHVjJaVzUwY3k1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCbGVIUnlZV04wUlhabGJuUnpPaUJtZFc1amRHbHZiaUFvZEc5d1RHVjJaV3hVZVhCbExDQjBiM0JNWlhabGJGUmhjbWRsZEN3Z2RHOXdUR1YyWld4VVlYSm5aWFJKUkN3Z2JtRjBhWFpsUlhabGJuUXNJRzVoZEdsMlpVVjJaVzUwVkdGeVoyVjBLU0I3WEc0Z0lDQWdkbUZ5SUdWMlpXNTBjenRjYmlBZ0lDQjJZWElnY0d4MVoybHVjeUE5SUVWMlpXNTBVR3gxWjJsdVVtVm5hWE4wY25rdWNHeDFaMmx1Y3p0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhCc2RXZHBibk11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDOHZJRTV2ZENCbGRtVnllU0J3YkhWbmFXNGdhVzRnZEdobElHOXlaR1Z5YVc1bklHMWhlU0JpWlNCc2IyRmtaV1FnWVhRZ2NuVnVkR2x0WlM1Y2JpQWdJQ0FnSUhaaGNpQndiM056YVdKc1pWQnNkV2RwYmlBOUlIQnNkV2RwYm5OYmFWMDdYRzRnSUNBZ0lDQnBaaUFvY0c5emMybGliR1ZRYkhWbmFXNHBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVjRkSEpoWTNSbFpFVjJaVzUwY3lBOUlIQnZjM05wWW14bFVHeDFaMmx1TG1WNGRISmhZM1JGZG1WdWRITW9kRzl3VEdWMlpXeFVlWEJsTENCMGIzQk1aWFpsYkZSaGNtZGxkQ3dnZEc5d1RHVjJaV3hVWVhKblpYUkpSQ3dnYm1GMGFYWmxSWFpsYm5Rc0lHNWhkR2wyWlVWMlpXNTBWR0Z5WjJWMEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0dWNGRISmhZM1JsWkVWMlpXNTBjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHVjJaVzUwY3lBOUlHRmpZM1Z0ZFd4aGRHVkpiblJ2S0dWMlpXNTBjeXdnWlhoMGNtRmpkR1ZrUlhabGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1pYWmxiblJ6TzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkZibkYxWlhWbGN5QmhJSE41Ym5Sb1pYUnBZeUJsZG1WdWRDQjBhR0YwSUhOb2IzVnNaQ0JpWlNCa2FYTndZWFJqYUdWa0lIZG9aVzVjYmlBZ0lDb2dZSEJ5YjJObGMzTkZkbVZ1ZEZGMVpYVmxZQ0JwY3lCcGJuWnZhMlZrTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJR1YyWlc1MGN5QkJiaUJoWTJOMWJYVnNZWFJwYjI0Z2IyWWdjM2x1ZEdobGRHbGpJR1YyWlc1MGN5NWNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmxibkYxWlhWbFJYWmxiblJ6T2lCbWRXNWpkR2x2YmlBb1pYWmxiblJ6S1NCN1hHNGdJQ0FnYVdZZ0tHVjJaVzUwY3lrZ2UxeHVJQ0FnSUNBZ1pYWmxiblJSZFdWMVpTQTlJR0ZqWTNWdGRXeGhkR1ZKYm5SdktHVjJaVzUwVVhWbGRXVXNJR1YyWlc1MGN5azdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJFYVhOd1lYUmphR1Z6SUdGc2JDQnplVzUwYUdWMGFXTWdaWFpsYm5SeklHOXVJSFJvWlNCbGRtVnVkQ0J4ZFdWMVpTNWNiaUFnSUNwY2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCd2NtOWpaWE56UlhabGJuUlJkV1YxWlRvZ1puVnVZM1JwYjI0Z0tITnBiWFZzWVhSbFpDa2dlMXh1SUNBZ0lDOHZJRk5sZENCZ1pYWmxiblJSZFdWMVpXQWdkRzhnYm5Wc2JDQmlaV1p2Y21VZ2NISnZZMlZ6YzJsdVp5QnBkQ0J6YnlCMGFHRjBJSGRsSUdOaGJpQjBaV3hzSUdsbUlHMXZjbVZjYmlBZ0lDQXZMeUJsZG1WdWRITWdaMlYwSUdWdWNYVmxkV1ZrSUhkb2FXeGxJSEJ5YjJObGMzTnBibWN1WEc0Z0lDQWdkbUZ5SUhCeWIyTmxjM05wYm1kRmRtVnVkRkYxWlhWbElEMGdaWFpsYm5SUmRXVjFaVHRjYmlBZ0lDQmxkbVZ1ZEZGMVpYVmxJRDBnYm5Wc2JEdGNiaUFnSUNCcFppQW9jMmx0ZFd4aGRHVmtLU0I3WEc0Z0lDQWdJQ0JtYjNKRllXTm9RV05qZFcxMWJHRjBaV1FvY0hKdlkyVnpjMmx1WjBWMlpXNTBVWFZsZFdVc0lHVjRaV04xZEdWRWFYTndZWFJqYUdWelFXNWtVbVZzWldGelpWTnBiWFZzWVhSbFpDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdadmNrVmhZMmhCWTJOMWJYVnNZWFJsWkNod2NtOWpaWE56YVc1blJYWmxiblJSZFdWMVpTd2daWGhsWTNWMFpVUnBjM0JoZEdOb1pYTkJibVJTWld4bFlYTmxWRzl3VEdWMlpXd3BPMXh1SUNBZ0lIMWNiaUFnSUNBaElXVjJaVzUwVVhWbGRXVWdQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBbmNISnZZMlZ6YzBWMlpXNTBVWFZsZFdVb0tUb2dRV1JrYVhScGIyNWhiQ0JsZG1WdWRITWdkMlZ5WlNCbGJuRjFaWFZsWkNCM2FHbHNaU0J3Y205alpYTnphVzVuSUNjZ0t5QW5ZVzRnWlhabGJuUWdjWFZsZFdVdUlGTjFjSEJ2Y25RZ1ptOXlJSFJvYVhNZ2FHRnpJRzV2ZENCNVpYUWdZbVZsYmlCcGJYQnNaVzFsYm5SbFpDNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnTHk4Z1ZHaHBjeUIzYjNWc1pDQmlaU0JoSUdkdmIyUWdkR2x0WlNCMGJ5QnlaWFJvY205M0lHbG1JR0Z1ZVNCdlppQjBhR1VnWlhabGJuUWdhR0Z1Wkd4bGNuTWdkR2h5WlhjdVhHNGdJQ0FnVW1WaFkzUkZjbkp2Y2xWMGFXeHpMbkpsZEdoeWIzZERZWFZuYUhSRmNuSnZjaWdwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1Z6WlNCaGNtVWdibVZsWkdWa0lHWnZjaUIwWlhOMGN5QnZibXg1TGlCRWJ5QnViM1FnZFhObElWeHVJQ0FnS2k5Y2JpQWdYMTl3ZFhKblpUb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR3hwYzNSbGJtVnlRbUZ1YXlBOUlIdDlPMXh1SUNCOUxGeHVYRzRnSUY5ZloyVjBUR2x6ZEdWdVpYSkNZVzVyT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUd4cGMzUmxibVZ5UW1GdWF6dGNiaUFnZlZ4dVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVWMlpXNTBVR3gxWjJsdVNIVmlPeUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5SZWdpc3RyeVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG9yZGVyaW5nIG9mIGV2ZW50IHBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG1hcHBpbmcgZnJvbSBuYW1lcyB0byBldmVudCBwbHVnaW4gbW9kdWxlcy5cbiAqL1xudmFyIG5hbWVzVG9QbHVnaW5zID0ge307XG5cbi8qKlxuICogUmVjb21wdXRlcyB0aGUgcGx1Z2luIGxpc3QgdXNpbmcgdGhlIGluamVjdGVkIHBsdWdpbnMgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpIHtcbiAgaWYgKCFFdmVudFBsdWdpbk9yZGVyKSB7XG4gICAgLy8gV2FpdCB1bnRpbCBhbiBgRXZlbnRQbHVnaW5PcmRlcmAgaXMgaW5qZWN0ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgUGx1Z2luTW9kdWxlID0gbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgdmFyIHBsdWdpbkluZGV4ID0gRXZlbnRQbHVnaW5PcmRlci5pbmRleE9mKHBsdWdpbk5hbWUpO1xuICAgICEocGx1Z2luSW5kZXggPiAtMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW5zIHRoYXQgZG8gbm90IGV4aXN0IGluICcgKyAndGhlIHBsdWdpbiBvcmRlcmluZywgYCVzYC4nLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAhUGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgJyArICdtZXRob2QsIGJ1dCBgJXNgIGRvZXMgbm90LicsIHBsdWdpbk5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdID0gUGx1Z2luTW9kdWxlO1xuICAgIHZhciBwdWJsaXNoZWRFdmVudHMgPSBQbHVnaW5Nb2R1bGUuZXZlbnRUeXBlcztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gcHVibGlzaGVkRXZlbnRzKSB7XG4gICAgICAhcHVibGlzaEV2ZW50Rm9yUGx1Z2luKHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRmFpbGVkIHRvIHB1Ymxpc2ggZXZlbnQgYCVzYCBmb3IgcGx1Z2luIGAlc2AuJywgZXZlbnROYW1lLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGFuIGV2ZW50IHNvIHRoYXQgaXQgY2FuIGJlIGRpc3BhdGNoZWQgYnkgdGhlIHN1cHBsaWVkIHBsdWdpbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgRGlzcGF0Y2ggY29uZmlndXJhdGlvbiBmb3IgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCB3YXMgc3VjY2Vzc2Z1bGx5IHB1Ymxpc2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihkaXNwYXRjaENvbmZpZywgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgISFFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSAnICsgJ2V2ZW50IG5hbWUsIGAlc2AuJywgZXZlbnROYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcblxuICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcbiAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGEgcmVnaXN0cmF0aW9uIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IGRpc3BhdGNoZWQgZXZlbnRzIGFuZFxuICogY2FuIGJlIHVzZWQgd2l0aCBgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXJgIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gICEhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArICdyZWdpc3RyYXRpb24gbmFtZSwgYCVzYC4nLCByZWdpc3RyYXRpb25OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBQbHVnaW5Nb2R1bGU7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSA9IFBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBwbHVnaW5zIHNvIHRoYXQgdGhleSBjYW4gZXh0cmFjdCBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICpcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHVifVxuICovXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcblxuICAvKipcbiAgICogT3JkZXJlZCBsaXN0IG9mIGluamVjdGVkIHBsdWdpbnMuXG4gICAqL1xuICBwbHVnaW5zOiBbXSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGV2ZW50IG5hbWUgdG8gZGlzcGF0Y2ggY29uZmlnXG4gICAqL1xuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gcGx1Z2luIG1vZHVsZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gZXZlbnQgbmFtZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczoge30sXG5cbiAgLyoqXG4gICAqIEluamVjdHMgYW4gb3JkZXJpbmcgb2YgcGx1Z2lucyAoYnkgcGx1Z2luIG5hbWUpLiBUaGlzIGFsbG93cyB0aGUgb3JkZXJpbmdcbiAgICogdG8gYmUgZGVjb3VwbGVkIGZyb20gaW5qZWN0aW9uIG9mIHRoZSBhY3R1YWwgcGx1Z2lucyBzbyB0aGF0IG9yZGVyaW5nIGlzXG4gICAqIGFsd2F5cyBkZXRlcm1pbmlzdGljIHJlZ2FyZGxlc3Mgb2YgcGFja2FnaW5nLCBvbi10aGUtZmx5IGluamVjdGlvbiwgZXRjLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyfVxuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogZnVuY3Rpb24gKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcikge1xuICAgICEhRXZlbnRQbHVnaW5PcmRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbiBvcmRlcmluZyBtb3JlIHRoYW4gJyArICdvbmNlLiBZb3UgYXJlIGxpa2VseSB0cnlpbmcgdG8gbG9hZCBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIC8vIENsb25lIHRoZSBvcmRlcmluZyBzbyBpdCBjYW5ub3QgYmUgZHluYW1pY2FsbHkgbXV0YXRlZC5cbiAgICBFdmVudFBsdWdpbk9yZGVyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKTtcbiAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbmplY3RzIHBsdWdpbnMgdG8gYmUgdXNlZCBieSBgRXZlbnRQbHVnaW5IdWJgLiBUaGUgcGx1Z2luIG5hbWVzIG11c3QgYmVcbiAgICogaW4gdGhlIG9yZGVyaW5nIGluamVjdGVkIGJ5IGBpbmplY3RFdmVudFBsdWdpbk9yZGVyYC5cbiAgICpcbiAgICogUGx1Z2lucyBjYW4gYmUgaW5qZWN0ZWQgYXMgcGFydCBvZiBwYWdlIGluaXRpYWxpemF0aW9uIG9yIG9uLXRoZS1mbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZX1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogZnVuY3Rpb24gKGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgaXNPcmRlcmluZ0RpcnR5ID0gZmFsc2U7XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAoIWluamVjdGVkTmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gaW5qZWN0ZWROYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgIGlmICghbmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkgfHwgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gIT09IFBsdWdpbk1vZHVsZSkge1xuICAgICAgICAhIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgdHdvIGRpZmZlcmVudCBldmVudCBwbHVnaW5zICcgKyAndXNpbmcgdGhlIHNhbWUgbmFtZSwgYCVzYC4nLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICAgICAgICBpc09yZGVyaW5nRGlydHkgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPcmRlcmluZ0RpcnR5KSB7XG4gICAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTG9va3MgdXAgdGhlIHBsdWdpbiBmb3IgdGhlIHN1cHBsaWVkIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQSBzeW50aGV0aWMgZXZlbnQuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IFRoZSBwbHVnaW4gdGhhdCBjcmVhdGVkIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQbHVnaW5Nb2R1bGVGb3JFdmVudDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gZXZlbnQuZGlzcGF0Y2hDb25maWc7XG4gICAgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIHJldHVybiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW2Rpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWVdIHx8IG51bGw7XG4gICAgfVxuICAgIGZvciAodmFyIHBoYXNlIGluIGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAoIWRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW2Rpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXV07XG4gICAgICBpZiAoUGx1Z2luTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW5Nb2R1bGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVzZXRFdmVudFBsdWdpbnM6IGZ1bmN0aW9uICgpIHtcbiAgICBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcbiAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAobmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMubGVuZ3RoID0gMDtcblxuICAgIHZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzKSB7XG4gICAgICBpZiAoZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiByZWdpc3RyYXRpb25OYW1lTW9kdWxlcykge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJYWmxiblJRYkhWbmFXNVNaV2RwYzNSeWVTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1WEc0Z0tpQkFkSGx3WldOb1pXTnJjeUJ6ZEdGMGFXTXRiMjVzZVZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMmx1ZG1GeWFXRnVkQ2NwTzF4dVhHNHZLaXBjYmlBcUlFbHVhbVZqZEdGaWJHVWdiM0prWlhKcGJtY2diMllnWlhabGJuUWdjR3gxWjJsdWN5NWNiaUFxTDF4dWRtRnlJRVYyWlc1MFVHeDFaMmx1VDNKa1pYSWdQU0J1ZFd4c08xeHVYRzR2S2lwY2JpQXFJRWx1YW1WamRHRmliR1VnYldGd2NHbHVaeUJtY205dElHNWhiV1Z6SUhSdklHVjJaVzUwSUhCc2RXZHBiaUJ0YjJSMWJHVnpMbHh1SUNvdlhHNTJZWElnYm1GdFpYTlViMUJzZFdkcGJuTWdQU0I3ZlR0Y2JseHVMeW9xWEc0Z0tpQlNaV052YlhCMWRHVnpJSFJvWlNCd2JIVm5hVzRnYkdsemRDQjFjMmx1WnlCMGFHVWdhVzVxWldOMFpXUWdjR3gxWjJsdWN5QmhibVFnY0d4MVoybHVJRzl5WkdWeWFXNW5MbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlISmxZMjl0Y0hWMFpWQnNkV2RwYms5eVpHVnlhVzVuS0NrZ2UxeHVJQ0JwWmlBb0lVVjJaVzUwVUd4MVoybHVUM0prWlhJcElIdGNiaUFnSUNBdkx5QlhZV2wwSUhWdWRHbHNJR0Z1SUdCRmRtVnVkRkJzZFdkcGJrOXlaR1Z5WUNCcGN5QnBibXBsWTNSbFpDNWNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNiaUFnWm05eUlDaDJZWElnY0d4MVoybHVUbUZ0WlNCcGJpQnVZVzFsYzFSdlVHeDFaMmx1Y3lrZ2UxeHVJQ0FnSUhaaGNpQlFiSFZuYVc1TmIyUjFiR1VnUFNCdVlXMWxjMVJ2VUd4MVoybHVjMXR3YkhWbmFXNU9ZVzFsWFR0Y2JpQWdJQ0IyWVhJZ2NHeDFaMmx1U1c1a1pYZ2dQU0JGZG1WdWRGQnNkV2RwYms5eVpHVnlMbWx1WkdWNFQyWW9jR3gxWjJsdVRtRnRaU2s3WEc0Z0lDQWdJU2h3YkhWbmFXNUpibVJsZUNBK0lDMHhLU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZEZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVPaUJEWVc1dWIzUWdhVzVxWldOMElHVjJaVzUwSUhCc2RXZHBibk1nZEdoaGRDQmtieUJ1YjNRZ1pYaHBjM1FnYVc0Z0p5QXJJQ2QwYUdVZ2NHeDFaMmx1SUc5eVpHVnlhVzVuTENCZ0pYTmdMaWNzSUhCc2RXZHBiazVoYldVcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnBaaUFvUlhabGJuUlFiSFZuYVc1U1pXZHBjM1J5ZVM1d2JIVm5hVzV6VzNCc2RXZHBia2x1WkdWNFhTa2dlMXh1SUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUNGUWJIVm5hVzVOYjJSMWJHVXVaWGgwY21GamRFVjJaVzUwY3lBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1T2lCRmRtVnVkQ0J3YkhWbmFXNXpJRzExYzNRZ2FXMXdiR1Z0Wlc1MElHRnVJR0JsZUhSeVlXTjBSWFpsYm5SellDQW5JQ3NnSjIxbGRHaHZaQ3dnWW5WMElHQWxjMkFnWkc5bGN5QnViM1F1Snl3Z2NHeDFaMmx1VG1GdFpTa2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJRVYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbmt1Y0d4MVoybHVjMXR3YkhWbmFXNUpibVJsZUYwZ1BTQlFiSFZuYVc1TmIyUjFiR1U3WEc0Z0lDQWdkbUZ5SUhCMVlteHBjMmhsWkVWMlpXNTBjeUE5SUZCc2RXZHBiazF2WkhWc1pTNWxkbVZ1ZEZSNWNHVnpPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHVjJaVzUwVG1GdFpTQnBiaUJ3ZFdKc2FYTm9aV1JGZG1WdWRITXBJSHRjYmlBZ0lDQWdJQ0Z3ZFdKc2FYTm9SWFpsYm5SR2IzSlFiSFZuYVc0b2NIVmliR2x6YUdWa1JYWmxiblJ6VzJWMlpXNTBUbUZ0WlYwc0lGQnNkV2RwYmsxdlpIVnNaU3dnWlhabGJuUk9ZVzFsS1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1T2lCR1lXbHNaV1FnZEc4Z2NIVmliR2x6YUNCbGRtVnVkQ0JnSlhOZ0lHWnZjaUJ3YkhWbmFXNGdZQ1Z6WUM0bkxDQmxkbVZ1ZEU1aGJXVXNJSEJzZFdkcGJrNWhiV1VwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQlFkV0pzYVhOb1pYTWdZVzRnWlhabGJuUWdjMjhnZEdoaGRDQnBkQ0JqWVc0Z1ltVWdaR2x6Y0dGMFkyaGxaQ0JpZVNCMGFHVWdjM1Z3Y0d4cFpXUWdjR3gxWjJsdUxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCa2FYTndZWFJqYUVOdmJtWnBaeUJFYVhOd1lYUmphQ0JqYjI1bWFXZDFjbUYwYVc5dUlHWnZjaUIwYUdVZ1pYWmxiblF1WEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1VHeDFaMmx1VFc5a2RXeGxJRkJzZFdkcGJpQndkV0pzYVhOb2FXNW5JSFJvWlNCbGRtVnVkQzVjYmlBcUlFQnlaWFIxY200Z2UySnZiMnhsWVc1OUlGUnlkV1VnYVdZZ2RHaGxJR1YyWlc1MElIZGhjeUJ6ZFdOalpYTnpablZzYkhrZ2NIVmliR2x6YUdWa0xseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUwxeHVablZ1WTNScGIyNGdjSFZpYkdsemFFVjJaVzUwUm05eVVHeDFaMmx1S0dScGMzQmhkR05vUTI5dVptbG5MQ0JRYkhWbmFXNU5iMlIxYkdVc0lHVjJaVzUwVG1GdFpTa2dlMXh1SUNBaElVVjJaVzUwVUd4MVoybHVVbVZuYVhOMGNua3VaWFpsYm5ST1lXMWxSR2x6Y0dGMFkyaERiMjVtYVdkekxtaGhjMDkzYmxCeWIzQmxjblI1S0dWMlpXNTBUbUZ0WlNrZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuUlhabGJuUlFiSFZuYVc1SWRXSTZJRTF2Y21VZ2RHaGhiaUJ2Ym1VZ2NHeDFaMmx1SUdGMGRHVnRjSFJsWkNCMGJ5QndkV0pzYVhOb0lIUm9aU0J6WVcxbElDY2dLeUFuWlhabGJuUWdibUZ0WlN3Z1lDVnpZQzRuTENCbGRtVnVkRTVoYldVcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ1JYWmxiblJRYkhWbmFXNVNaV2RwYzNSeWVTNWxkbVZ1ZEU1aGJXVkVhWE53WVhSamFFTnZibVpwWjNOYlpYWmxiblJPWVcxbFhTQTlJR1JwYzNCaGRHTm9RMjl1Wm1sbk8xeHVYRzRnSUhaaGNpQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3lBOUlHUnBjM0JoZEdOb1EyOXVabWxuTG5Cb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPMXh1SUNCcFppQW9jR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCd2FHRnpaVTVoYldVZ2FXNGdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNcElIdGNiaUFnSUNBZ0lHbG1JQ2h3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNod2FHRnpaVTVoYldVcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCd2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxJRDBnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTmJjR2hoYzJWT1lXMWxYVHRjYmlBZ0lDQWdJQ0FnY0hWaWJHbHphRkpsWjJsemRISmhkR2x2Yms1aGJXVW9jR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlN3Z1VHeDFaMmx1VFc5a2RXeGxMQ0JsZG1WdWRFNWhiV1VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaGthWE53WVhSamFFTnZibVpwWnk1eVpXZHBjM1J5WVhScGIyNU9ZVzFsS1NCN1hHNGdJQ0FnY0hWaWJHbHphRkpsWjJsemRISmhkR2x2Yms1aGJXVW9aR2x6Y0dGMFkyaERiMjVtYVdjdWNtVm5hWE4wY21GMGFXOXVUbUZ0WlN3Z1VHeDFaMmx1VFc5a2RXeGxMQ0JsZG1WdWRFNWhiV1VwTzF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJtWVd4elpUdGNibjFjYmx4dUx5b3FYRzRnS2lCUWRXSnNhWE5vWlhNZ1lTQnlaV2RwYzNSeVlYUnBiMjRnYm1GdFpTQjBhR0YwSUdseklIVnpaV1FnZEc4Z2FXUmxiblJwWm5rZ1pHbHpjR0YwWTJobFpDQmxkbVZ1ZEhNZ1lXNWtYRzRnS2lCallXNGdZbVVnZFhObFpDQjNhWFJvSUdCRmRtVnVkRkJzZFdkcGJraDFZaTV3ZFhSTWFYTjBaVzVsY21BZ2RHOGdjbVZuYVhOMFpYSWdiR2x6ZEdWdVpYSnpMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnlaV2RwYzNSeVlYUnBiMjVPWVcxbElGSmxaMmx6ZEhKaGRHbHZiaUJ1WVcxbElIUnZJR0ZrWkM1Y2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQlFiSFZuYVc1TmIyUjFiR1VnVUd4MVoybHVJSEIxWW14cGMyaHBibWNnZEdobElHVjJaVzUwTGx4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NIVmliR2x6YUZKbFoybHpkSEpoZEdsdmJrNWhiV1VvY21WbmFYTjBjbUYwYVc5dVRtRnRaU3dnVUd4MVoybHVUVzlrZFd4bExDQmxkbVZ1ZEU1aGJXVXBJSHRjYmlBZ0lTRkZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVMbkpsWjJsemRISmhkR2x2Yms1aGJXVk5iMlIxYkdWelczSmxaMmx6ZEhKaGRHbHZiazVoYldWZElEOGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUdsdWRtRnlhV0Z1ZENobVlXeHpaU3dnSjBWMlpXNTBVR3gxWjJsdVNIVmlPaUJOYjNKbElIUm9ZVzRnYjI1bElIQnNkV2RwYmlCaGRIUmxiWEIwWldRZ2RHOGdjSFZpYkdsemFDQjBhR1VnYzJGdFpTQW5JQ3NnSjNKbFoybHpkSEpoZEdsdmJpQnVZVzFsTENCZ0pYTmdMaWNzSUhKbFoybHpkSEpoZEdsdmJrNWhiV1VwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnUlhabGJuUlFiSFZuYVc1U1pXZHBjM1J5ZVM1eVpXZHBjM1J5WVhScGIyNU9ZVzFsVFc5a2RXeGxjMXR5WldkcGMzUnlZWFJwYjI1T1lXMWxYU0E5SUZCc2RXZHBiazF2WkhWc1pUdGNiaUFnUlhabGJuUlFiSFZuYVc1U1pXZHBjM1J5ZVM1eVpXZHBjM1J5WVhScGIyNU9ZVzFsUkdWd1pXNWtaVzVqYVdWelczSmxaMmx6ZEhKaGRHbHZiazVoYldWZElEMGdVR3gxWjJsdVRXOWtkV3hsTG1WMlpXNTBWSGx3WlhOYlpYWmxiblJPWVcxbFhTNWtaWEJsYm1SbGJtTnBaWE03WEc1OVhHNWNiaThxS2x4dUlDb2dVbVZuYVhOMFpYSnpJSEJzZFdkcGJuTWdjMjhnZEdoaGRDQjBhR1Y1SUdOaGJpQmxlSFJ5WVdOMElHRnVaQ0JrYVhOd1lYUmphQ0JsZG1WdWRITXVYRzRnS2x4dUlDb2dRSE5sWlNCN1JYWmxiblJRYkhWbmFXNUlkV0o5WEc0Z0tpOWNiblpoY2lCRmRtVnVkRkJzZFdkcGJsSmxaMmx6ZEhKNUlEMGdlMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlBjbVJsY21Wa0lHeHBjM1FnYjJZZ2FXNXFaV04wWldRZ2NHeDFaMmx1Y3k1Y2JpQWdJQ292WEc0Z0lIQnNkV2RwYm5NNklGdGRMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk5ZWEJ3YVc1bklHWnliMjBnWlhabGJuUWdibUZ0WlNCMGJ5QmthWE53WVhSamFDQmpiMjVtYVdkY2JpQWdJQ292WEc0Z0lHVjJaVzUwVG1GdFpVUnBjM0JoZEdOb1EyOXVabWxuY3pvZ2UzMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFMWhjSEJwYm1jZ1puSnZiU0J5WldkcGMzUnlZWFJwYjI0Z2JtRnRaU0IwYnlCd2JIVm5hVzRnYlc5a2RXeGxYRzRnSUNBcUwxeHVJQ0J5WldkcGMzUnlZWFJwYjI1T1lXMWxUVzlrZFd4bGN6b2dlMzBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRTFoY0hCcGJtY2dabkp2YlNCeVpXZHBjM1J5WVhScGIyNGdibUZ0WlNCMGJ5QmxkbVZ1ZENCdVlXMWxYRzRnSUNBcUwxeHVJQ0J5WldkcGMzUnlZWFJwYjI1T1lXMWxSR1Z3Wlc1a1pXNWphV1Z6T2lCN2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXFaV04wY3lCaGJpQnZjbVJsY21sdVp5QnZaaUJ3YkhWbmFXNXpJQ2hpZVNCd2JIVm5hVzRnYm1GdFpTa3VJRlJvYVhNZ1lXeHNiM2R6SUhSb1pTQnZjbVJsY21sdVoxeHVJQ0FnS2lCMGJ5QmlaU0JrWldOdmRYQnNaV1FnWm5KdmJTQnBibXBsWTNScGIyNGdiMllnZEdobElHRmpkSFZoYkNCd2JIVm5hVzV6SUhOdklIUm9ZWFFnYjNKa1pYSnBibWNnYVhOY2JpQWdJQ29nWVd4M1lYbHpJR1JsZEdWeWJXbHVhWE4wYVdNZ2NtVm5ZWEprYkdWemN5QnZaaUJ3WVdOcllXZHBibWNzSUc5dUxYUm9aUzFtYkhrZ2FXNXFaV04wYVc5dUxDQmxkR011WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1lYSnlZWGw5SUVsdWFtVmpkR1ZrUlhabGJuUlFiSFZuYVc1UGNtUmxjbHh1SUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNvZ1FITmxaU0I3UlhabGJuUlFiSFZuYVc1SWRXSXVhVzVxWldOMGFXOXVMbWx1YW1WamRFVjJaVzUwVUd4MVoybHVUM0prWlhKOVhHNGdJQ0FxTDF4dUlDQnBibXBsWTNSRmRtVnVkRkJzZFdkcGJrOXlaR1Z5T2lCbWRXNWpkR2x2YmlBb1NXNXFaV04wWldSRmRtVnVkRkJzZFdkcGJrOXlaR1Z5S1NCN1hHNGdJQ0FnSVNGRmRtVnVkRkJzZFdkcGJrOXlaR1Z5SUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMFYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbms2SUVOaGJtNXZkQ0JwYm1wbFkzUWdaWFpsYm5RZ2NHeDFaMmx1SUc5eVpHVnlhVzVuSUcxdmNtVWdkR2hoYmlBbklDc2dKMjl1WTJVdUlGbHZkU0JoY21VZ2JHbHJaV3g1SUhSeWVXbHVaeUIwYnlCc2IyRmtJRzF2Y21VZ2RHaGhiaUJ2Ym1VZ1kyOXdlU0J2WmlCU1pXRmpkQzRuS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0x5OGdRMnh2Ym1VZ2RHaGxJRzl5WkdWeWFXNW5JSE52SUdsMElHTmhibTV2ZENCaVpTQmtlVzVoYldsallXeHNlU0J0ZFhSaGRHVmtMbHh1SUNBZ0lFVjJaVzUwVUd4MVoybHVUM0prWlhJZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaEpibXBsWTNSbFpFVjJaVzUwVUd4MVoybHVUM0prWlhJcE8xeHVJQ0FnSUhKbFkyOXRjSFYwWlZCc2RXZHBiazl5WkdWeWFXNW5LQ2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhbVZqZEhNZ2NHeDFaMmx1Y3lCMGJ5QmlaU0IxYzJWa0lHSjVJR0JGZG1WdWRGQnNkV2RwYmtoMVltQXVJRlJvWlNCd2JIVm5hVzRnYm1GdFpYTWdiWFZ6ZENCaVpWeHVJQ0FnS2lCcGJpQjBhR1VnYjNKa1pYSnBibWNnYVc1cVpXTjBaV1FnWW5rZ1lHbHVhbVZqZEVWMlpXNTBVR3gxWjJsdVQzSmtaWEpnTGx4dUlDQWdLbHh1SUNBZ0tpQlFiSFZuYVc1eklHTmhiaUJpWlNCcGJtcGxZM1JsWkNCaGN5QndZWEowSUc5bUlIQmhaMlVnYVc1cGRHbGhiR2w2WVhScGIyNGdiM0lnYjI0dGRHaGxMV1pzZVM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHbHVhbVZqZEdWa1RtRnRaWE5VYjFCc2RXZHBibk1nVFdGd0lHWnliMjBnYm1GdFpYTWdkRzhnY0d4MVoybHVJRzF2WkhWc1pYTXVYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2lCQWMyVmxJSHRGZG1WdWRGQnNkV2RwYmtoMVlpNXBibXBsWTNScGIyNHVhVzVxWldOMFJYWmxiblJRYkhWbmFXNXpRbmxPWVcxbGZWeHVJQ0FnS2k5Y2JpQWdhVzVxWldOMFJYWmxiblJRYkhWbmFXNXpRbmxPWVcxbE9pQm1kVzVqZEdsdmJpQW9hVzVxWldOMFpXUk9ZVzFsYzFSdlVHeDFaMmx1Y3lrZ2UxeHVJQ0FnSUhaaGNpQnBjMDl5WkdWeWFXNW5SR2x5ZEhrZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ3YkhWbmFXNU9ZVzFsSUdsdUlHbHVhbVZqZEdWa1RtRnRaWE5VYjFCc2RXZHBibk1wSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hhVzVxWldOMFpXUk9ZVzFsYzFSdlVHeDFaMmx1Y3k1b1lYTlBkMjVRY205d1pYSjBlU2h3YkhWbmFXNU9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJRYkhWbmFXNU5iMlIxYkdVZ1BTQnBibXBsWTNSbFpFNWhiV1Z6Vkc5UWJIVm5hVzV6VzNCc2RXZHBiazVoYldWZE8xeHVJQ0FnSUNBZ2FXWWdLQ0Z1WVcxbGMxUnZVR3gxWjJsdWN5NW9ZWE5QZDI1UWNtOXdaWEowZVNod2JIVm5hVzVPWVcxbEtTQjhmQ0J1WVcxbGMxUnZVR3gxWjJsdWMxdHdiSFZuYVc1T1lXMWxYU0FoUFQwZ1VHeDFaMmx1VFc5a2RXeGxLU0I3WEc0Z0lDQWdJQ0FnSUNFaGJtRnRaWE5VYjFCc2RXZHBibk5iY0d4MVoybHVUbUZ0WlYwZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuUlhabGJuUlFiSFZuYVc1U1pXZHBjM1J5ZVRvZ1EyRnVibTkwSUdsdWFtVmpkQ0IwZDI4Z1pHbG1abVZ5Wlc1MElHVjJaVzUwSUhCc2RXZHBibk1nSnlBcklDZDFjMmx1WnlCMGFHVWdjMkZ0WlNCdVlXMWxMQ0JnSlhOZ0xpY3NJSEJzZFdkcGJrNWhiV1VwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdibUZ0WlhOVWIxQnNkV2RwYm5OYmNHeDFaMmx1VG1GdFpWMGdQU0JRYkhWbmFXNU5iMlIxYkdVN1hHNGdJQ0FnSUNBZ0lHbHpUM0prWlhKcGJtZEVhWEowZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hwYzA5eVpHVnlhVzVuUkdseWRIa3BJSHRjYmlBZ0lDQWdJSEpsWTI5dGNIVjBaVkJzZFdkcGJrOXlaR1Z5YVc1bktDazdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJNYjI5cmN5QjFjQ0IwYUdVZ2NHeDFaMmx1SUdadmNpQjBhR1VnYzNWd2NHeHBaV1FnWlhabGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JsZG1WdWRDQkJJSE41Ym5Sb1pYUnBZeUJsZG1WdWRDNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1AyOWlhbVZqZEgwZ1ZHaGxJSEJzZFdkcGJpQjBhR0YwSUdOeVpXRjBaV1FnZEdobElITjFjSEJzYVdWa0lHVjJaVzUwTGx4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUdkbGRGQnNkV2RwYmsxdlpIVnNaVVp2Y2tWMlpXNTBPaUJtZFc1amRHbHZiaUFvWlhabGJuUXBJSHRjYmlBZ0lDQjJZWElnWkdsemNHRjBZMmhEYjI1bWFXY2dQU0JsZG1WdWRDNWthWE53WVhSamFFTnZibVpwWnp0Y2JpQWdJQ0JwWmlBb1pHbHpjR0YwWTJoRGIyNW1hV2N1Y21WbmFYTjBjbUYwYVc5dVRtRnRaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRVYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbmt1Y21WbmFYTjBjbUYwYVc5dVRtRnRaVTF2WkhWc1pYTmJaR2x6Y0dGMFkyaERiMjVtYVdjdWNtVm5hWE4wY21GMGFXOXVUbUZ0WlYwZ2ZId2diblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdabTl5SUNoMllYSWdjR2hoYzJVZ2FXNGdaR2x6Y0dGMFkyaERiMjVtYVdjdWNHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE1wSUh0Y2JpQWdJQ0FnSUdsbUlDZ2haR2x6Y0dGMFkyaERiMjVtYVdjdWNHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29jR2hoYzJVcEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkbUZ5SUZCc2RXZHBiazF2WkhWc1pTQTlJRVYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbmt1Y21WbmFYTjBjbUYwYVc5dVRtRnRaVTF2WkhWc1pYTmJaR2x6Y0dGMFkyaERiMjVtYVdjdWNHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE5iY0doaGMyVmRYVHRjYmlBZ0lDQWdJR2xtSUNoUWJIVm5hVzVOYjJSMWJHVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRkJzZFdkcGJrMXZaSFZzWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFVjRjRzl6WldRZ1ptOXlJSFZ1YVhRZ2RHVnpkR2x1Wnk1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5eVpYTmxkRVYyWlc1MFVHeDFaMmx1Y3pvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lFVjJaVzUwVUd4MVoybHVUM0prWlhJZ1BTQnVkV3hzTzF4dUlDQWdJR1p2Y2lBb2RtRnlJSEJzZFdkcGJrNWhiV1VnYVc0Z2JtRnRaWE5VYjFCc2RXZHBibk1wSUh0Y2JpQWdJQ0FnSUdsbUlDaHVZVzFsYzFSdlVHeDFaMmx1Y3k1b1lYTlBkMjVRY205d1pYSjBlU2h3YkhWbmFXNU9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2JtRnRaWE5VYjFCc2RXZHBibk5iY0d4MVoybHVUbUZ0WlYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJRVYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbmt1Y0d4MVoybHVjeTVzWlc1bmRHZ2dQU0F3TzF4dVhHNGdJQ0FnZG1GeUlHVjJaVzUwVG1GdFpVUnBjM0JoZEdOb1EyOXVabWxuY3lBOUlFVjJaVzUwVUd4MVoybHVVbVZuYVhOMGNua3VaWFpsYm5ST1lXMWxSR2x6Y0dGMFkyaERiMjVtYVdkek8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdWMlpXNTBUbUZ0WlNCcGJpQmxkbVZ1ZEU1aGJXVkVhWE53WVhSamFFTnZibVpwWjNNcElIdGNiaUFnSUNBZ0lHbG1JQ2hsZG1WdWRFNWhiV1ZFYVhOd1lYUmphRU52Ym1acFozTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1pYWmxiblJPWVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdaWFpsYm5ST1lXMWxSR2x6Y0dGMFkyaERiMjVtYVdkelcyVjJaVzUwVG1GdFpWMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSEpsWjJsemRISmhkR2x2Yms1aGJXVk5iMlIxYkdWeklEMGdSWFpsYm5SUWJIVm5hVzVTWldkcGMzUnllUzV5WldkcGMzUnlZWFJwYjI1T1lXMWxUVzlrZFd4bGN6dGNiaUFnSUNCbWIzSWdLSFpoY2lCeVpXZHBjM1J5WVhScGIyNU9ZVzFsSUdsdUlISmxaMmx6ZEhKaGRHbHZiazVoYldWTmIyUjFiR1Z6S1NCN1hHNGdJQ0FnSUNCcFppQW9jbVZuYVhOMGNtRjBhVzl1VG1GdFpVMXZaSFZzWlhNdWFHRnpUM2R1VUhKdmNHVnlkSGtvY21WbmFYTjBjbUYwYVc5dVRtRnRaU2twSUh0Y2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhKbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpXM0psWjJsemRISmhkR2x2Yms1aGJXVmRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVWMlpXNTBVR3gxWjJsdVVtVm5hWE4wY25rN0lsMTkiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50UGx1Z2luVXRpbHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKCcuL1JlYWN0RXJyb3JVdGlscycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBJbmplY3RlZCBkZXBlbmRlbmNpZXM6XG4gKi9cblxuLyoqXG4gKiAtIGBNb3VudGA6IFtyZXF1aXJlZF0gTW9kdWxlIHRoYXQgY2FuIGNvbnZlcnQgYmV0d2VlbiBSZWFjdCBkb20gSURzIGFuZFxuICogICBhY3R1YWwgbm9kZSByZWZlcmVuY2VzLlxuICovXG52YXIgaW5qZWN0aW9uID0ge1xuICBNb3VudDogbnVsbCxcbiAgaW5qZWN0TW91bnQ6IGZ1bmN0aW9uIChJbmplY3RlZE1vdW50KSB7XG4gICAgaW5qZWN0aW9uLk1vdW50ID0gSW5qZWN0ZWRNb3VudDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoSW5qZWN0ZWRNb3VudCAmJiBJbmplY3RlZE1vdW50LmdldE5vZGUgJiYgSW5qZWN0ZWRNb3VudC5nZXRJRCwgJ0V2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdE1vdW50KC4uLik6IEluamVjdGVkIE1vdW50ICcgKyAnbW9kdWxlIGlzIG1pc3NpbmcgZ2V0Tm9kZSBvciBnZXRJRC4nKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxuZnVuY3Rpb24gaXNFbmRpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VVcCB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQgfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsO1xufVxuXG5mdW5jdGlvbiBpc01vdmVpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VNb3ZlIHx8IHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmU7XG59XG5mdW5jdGlvbiBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93biB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hTdGFydDtcbn1cblxudmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gICAgdmFyIGRpc3BhdGNoSURzID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuXG4gICAgdmFyIGxpc3RlbmVyc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycyk7XG4gICAgdmFyIGlkc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaElEcyk7XG4gICAgdmFyIElEc0xlbiA9IGlkc0lzQXJyID8gZGlzcGF0Y2hJRHMubGVuZ3RoIDogZGlzcGF0Y2hJRHMgPyAxIDogMDtcbiAgICB2YXIgbGlzdGVuZXJzTGVuID0gbGlzdGVuZXJzSXNBcnIgPyBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGggOiBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwO1xuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoaWRzSXNBcnIgPT09IGxpc3RlbmVyc0lzQXJyICYmIElEc0xlbiA9PT0gbGlzdGVuZXJzTGVuLCAnRXZlbnRQbHVnaW5VdGlsczogSW52YWxpZCBgZXZlbnRgLicpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIHRoZSBldmVudCB0byB0aGUgbGlzdGVuZXIuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCBTeW50aGV0aWNFdmVudCB0byBoYW5kbGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2ltdWxhdGVkIElmIHRoZSBldmVudCBpcyBzaW11bGF0ZWQgKGNoYW5nZXMgZXhuIGJlaGF2aW9yKVxuICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgQXBwbGljYXRpb24tbGV2ZWwgY2FsbGJhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBkb21JRCBET00gaWQgdG8gcGFzcyB0byB0aGUgY2FsbGJhY2suXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBsaXN0ZW5lciwgZG9tSUQpIHtcbiAgdmFyIHR5cGUgPSBldmVudC50eXBlIHx8ICd1bmtub3duLWV2ZW50JztcbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IGluamVjdGlvbi5Nb3VudC5nZXROb2RlKGRvbUlEKTtcbiAgaWYgKHNpbXVsYXRlZCkge1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2tXaXRoQ2F0Y2godHlwZSwgbGlzdGVuZXIsIGV2ZW50LCBkb21JRCk7XG4gIH0gZWxzZSB7XG4gICAgUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFjayh0eXBlLCBsaXN0ZW5lciwgZXZlbnQsIGRvbUlEKTtcbiAgfVxuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZC9zaW1wbGUgaXRlcmF0aW9uIHRocm91Z2ggYW4gZXZlbnQncyBjb2xsZWN0ZWQgZGlzcGF0Y2hlcy5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTGlzdGVuZXJzIGFuZCBJRHMgYXJlIHR3byBwYXJhbGxlbCBhcnJheXMgdGhhdCBhcmUgYWx3YXlzIGluIHN5bmMuXG4gICAgICBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgZGlzcGF0Y2hMaXN0ZW5lcnNbaV0sIGRpc3BhdGNoSURzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMpIHtcbiAgICBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgZGlzcGF0Y2hMaXN0ZW5lcnMsIGRpc3BhdGNoSURzKTtcbiAgfVxuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hJRHMgPSBudWxsO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLCBidXQgc3RvcHNcbiAqIGF0IHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gcmV0dXJuaW5nIHRydWUsIGFuZCByZXR1cm5zIHRoYXQgaWQuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gaWQgb2YgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiB3aG8ncyBsaXN0ZW5lciByZXR1cm5zXG4gKiB0cnVlLCBvciBudWxsIGlmIG5vIGxpc3RlbmVyIHJldHVybmVkIHRydWUuXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsKGV2ZW50KSB7XG4gIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSURzID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSURzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzW2ldKGV2ZW50LCBkaXNwYXRjaElEc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoSURzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGlmIChkaXNwYXRjaExpc3RlbmVycyhldmVudCwgZGlzcGF0Y2hJRHMpKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hJRHM7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBzZWUgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGxcbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuICB2YXIgcmV0ID0gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpO1xuICBldmVudC5fZGlzcGF0Y2hJRHMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEV4ZWN1dGlvbiBvZiBhIFwiZGlyZWN0XCIgZGlzcGF0Y2ggLSB0aGVyZSBtdXN0IGJlIGF0IG1vc3Qgb25lIGRpc3BhdGNoXG4gKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuICogc2Vuc2UgZm9yIGFuIGV2ZW50IHdpdGggbXVsdGlwbGUgZGlzcGF0Y2hlcyAoYnViYmxlZCkgdG8ga2VlcCB0cmFjayBvZiB0aGVcbiAqIHJldHVybiB2YWx1ZXMgYXQgZWFjaCBkaXNwYXRjaCBleGVjdXRpb24sIGJ1dCBpdCBkb2VzIHRlbmQgdG8gbWFrZSBzZW5zZSB3aGVuXG4gKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuICpcbiAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgZXhlY3V0aW5nIHRoZSBzaW5nbGUgZGlzcGF0Y2guXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXJlY3REaXNwYXRjaChldmVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lciA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSUQgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG4gICEhQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdleGVjdXRlRGlyZWN0RGlzcGF0Y2goLi4uKTogSW52YWxpZCBgZXZlbnRgLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgdmFyIHJlcyA9IGRpc3BhdGNoTGlzdGVuZXIgPyBkaXNwYXRjaExpc3RlbmVyKGV2ZW50LCBkaXNwYXRjaElEKSA6IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWZmIG51bWJlciBvZiBkaXNwYXRjaGVzIGFjY3VtdWxhdGVkIGlzIGdyZWF0ZXIgdGhhbiAwLlxuICovXG5mdW5jdGlvbiBoYXNEaXNwYXRjaGVzKGV2ZW50KSB7XG4gIHJldHVybiAhIWV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbn1cblxuLyoqXG4gKiBHZW5lcmFsIHV0aWxpdGllcyB0aGF0IGFyZSB1c2VmdWwgaW4gY3JlYXRpbmcgY3VzdG9tIEV2ZW50IFBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpblV0aWxzID0ge1xuICBpc0VuZGlzaDogaXNFbmRpc2gsXG4gIGlzTW92ZWlzaDogaXNNb3ZlaXNoLFxuICBpc1N0YXJ0aXNoOiBpc1N0YXJ0aXNoLFxuXG4gIGV4ZWN1dGVEaXJlY3REaXNwYXRjaDogZXhlY3V0ZURpcmVjdERpc3BhdGNoLFxuICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXI6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcixcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZTogZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSxcbiAgaGFzRGlzcGF0Y2hlczogaGFzRGlzcGF0Y2hlcyxcblxuICBnZXROb2RlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gaW5qZWN0aW9uLk1vdW50LmdldE5vZGUoaWQpO1xuICB9LFxuICBnZXRJRDogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gaW5qZWN0aW9uLk1vdW50LmdldElEKG5vZGUpO1xuICB9LFxuXG4gIGluamVjdGlvbjogaW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luVXRpbHM7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2UlhabGJuUlFiSFZuYVc1VmRHbHNjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCRmRtVnVkRkJzZFdkcGJsVjBhV3h6WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1JYWmxiblJEYjI1emRHRnVkSE1nUFNCeVpYRjFhWEpsS0NjdUwwVjJaVzUwUTI5dWMzUmhiblJ6SnlrN1hHNTJZWElnVW1WaFkzUkZjbkp2Y2xWMGFXeHpJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRVZ5Y205eVZYUnBiSE1uS1R0Y2JseHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwybHVkbUZ5YVdGdWRDY3BPMXh1ZG1GeUlIZGhjbTVwYm1jZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOTNZWEp1YVc1bkp5azdYRzVjYmk4cUtseHVJQ29nU1c1cVpXTjBaV1FnWkdWd1pXNWtaVzVqYVdWek9seHVJQ292WEc1Y2JpOHFLbHh1SUNvZ0xTQmdUVzkxYm5SZ09pQmJjbVZ4ZFdseVpXUmRJRTF2WkhWc1pTQjBhR0YwSUdOaGJpQmpiMjUyWlhKMElHSmxkSGRsWlc0Z1VtVmhZM1FnWkc5dElFbEVjeUJoYm1SY2JpQXFJQ0FnWVdOMGRXRnNJRzV2WkdVZ2NtVm1aWEpsYm1ObGN5NWNiaUFxTDF4dWRtRnlJR2x1YW1WamRHbHZiaUE5SUh0Y2JpQWdUVzkxYm5RNklHNTFiR3dzWEc0Z0lHbHVhbVZqZEUxdmRXNTBPaUJtZFc1amRHbHZiaUFvU1c1cVpXTjBaV1JOYjNWdWRDa2dlMXh1SUNBZ0lHbHVhbVZqZEdsdmJpNU5iM1Z1ZENBOUlFbHVhbVZqZEdWa1RXOTFiblE3WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LRWx1YW1WamRHVmtUVzkxYm5RZ0ppWWdTVzVxWldOMFpXUk5iM1Z1ZEM1blpYUk9iMlJsSUNZbUlFbHVhbVZqZEdWa1RXOTFiblF1WjJWMFNVUXNJQ2RGZG1WdWRGQnNkV2RwYmxWMGFXeHpMbWx1YW1WamRHbHZiaTVwYm1wbFkzUk5iM1Z1ZENndUxpNHBPaUJKYm1wbFkzUmxaQ0JOYjNWdWRDQW5JQ3NnSjIxdlpIVnNaU0JwY3lCdGFYTnphVzVuSUdkbGRFNXZaR1VnYjNJZ1oyVjBTVVF1SnlrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzUyWVhJZ2RHOXdUR1YyWld4VWVYQmxjeUE5SUVWMlpXNTBRMjl1YzNSaGJuUnpMblJ2Y0V4bGRtVnNWSGx3WlhNN1hHNWNibVoxYm1OMGFXOXVJR2x6Ulc1a2FYTm9LSFJ2Y0V4bGRtVnNWSGx3WlNrZ2UxeHVJQ0J5WlhSMWNtNGdkRzl3VEdWMlpXeFVlWEJsSUQwOVBTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFMXZkWE5sVlhBZ2ZId2dkRzl3VEdWMlpXeFVlWEJsSUQwOVBTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNGUnZkV05vUlc1a0lIeDhJSFJ2Y0V4bGRtVnNWSGx3WlNBOVBUMGdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQlViM1ZqYUVOaGJtTmxiRHRjYm4xY2JseHVablZ1WTNScGIyNGdhWE5OYjNabGFYTm9LSFJ2Y0V4bGRtVnNWSGx3WlNrZ2UxeHVJQ0J5WlhSMWNtNGdkRzl3VEdWMlpXeFVlWEJsSUQwOVBTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFMXZkWE5sVFc5MlpTQjhmQ0IwYjNCTVpYWmxiRlI1Y0dVZ1BUMDlJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdWRzkxWTJoTmIzWmxPMXh1ZlZ4dVpuVnVZM1JwYjI0Z2FYTlRkR0Z5ZEdsemFDaDBiM0JNWlhabGJGUjVjR1VwSUh0Y2JpQWdjbVYwZFhKdUlIUnZjRXhsZG1Wc1ZIbHdaU0E5UFQwZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCTmIzVnpaVVJ2ZDI0Z2ZId2dkRzl3VEdWMlpXeFVlWEJsSUQwOVBTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNGUnZkV05vVTNSaGNuUTdYRzU5WEc1Y2JuWmhjaUIyWVd4cFpHRjBaVVYyWlc1MFJHbHpjR0YwWTJobGN6dGNibWxtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUhaaGJHbGtZWFJsUlhabGJuUkVhWE53WVhSamFHVnpJRDBnWm5WdVkzUnBiMjRnS0dWMlpXNTBLU0I3WEc0Z0lDQWdkbUZ5SUdScGMzQmhkR05vVEdsemRHVnVaWEp6SUQwZ1pYWmxiblF1WDJScGMzQmhkR05vVEdsemRHVnVaWEp6TzF4dUlDQWdJSFpoY2lCa2FYTndZWFJqYUVsRWN5QTlJR1YyWlc1MExsOWthWE53WVhSamFFbEVjenRjYmx4dUlDQWdJSFpoY2lCc2FYTjBaVzVsY25OSmMwRnljaUE5SUVGeWNtRjVMbWx6UVhKeVlYa29aR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTXBPMXh1SUNBZ0lIWmhjaUJwWkhOSmMwRnljaUE5SUVGeWNtRjVMbWx6UVhKeVlYa29aR2x6Y0dGMFkyaEpSSE1wTzF4dUlDQWdJSFpoY2lCSlJITk1aVzRnUFNCcFpITkpjMEZ5Y2lBL0lHUnBjM0JoZEdOb1NVUnpMbXhsYm1kMGFDQTZJR1JwYzNCaGRHTm9TVVJ6SUQ4Z01TQTZJREE3WEc0Z0lDQWdkbUZ5SUd4cGMzUmxibVZ5YzB4bGJpQTlJR3hwYzNSbGJtVnljMGx6UVhKeUlEOGdaR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTXViR1Z1WjNSb0lEb2daR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTWdQeUF4SURvZ01EdGNibHh1SUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LR2xrYzBselFYSnlJRDA5UFNCc2FYTjBaVzVsY25OSmMwRnljaUFtSmlCSlJITk1aVzRnUFQwOUlHeHBjM1JsYm1WeWMweGxiaXdnSjBWMlpXNTBVR3gxWjJsdVZYUnBiSE02SUVsdWRtRnNhV1FnWUdWMlpXNTBZQzRuS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnZlR0Y2JuMWNibHh1THlvcVhHNGdLaUJFYVhOd1lYUmphQ0IwYUdVZ1pYWmxiblFnZEc4Z2RHaGxJR3hwYzNSbGJtVnlMbHh1SUNvZ1FIQmhjbUZ0SUh0VGVXNTBhR1YwYVdORmRtVnVkSDBnWlhabGJuUWdVM2x1ZEdobGRHbGpSWFpsYm5RZ2RHOGdhR0Z1Wkd4bFhHNGdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJSE5wYlhWc1lYUmxaQ0JKWmlCMGFHVWdaWFpsYm5RZ2FYTWdjMmx0ZFd4aGRHVmtJQ2hqYUdGdVoyVnpJR1Y0YmlCaVpXaGhkbWx2Y2lsY2JpQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR3hwYzNSbGJtVnlJRUZ3Y0d4cFkyRjBhVzl1TFd4bGRtVnNJR05oYkd4aVlXTnJYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWkc5dFNVUWdSRTlOSUdsa0lIUnZJSEJoYzNNZ2RHOGdkR2hsSUdOaGJHeGlZV05yTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJsZUdWamRYUmxSR2x6Y0dGMFkyZ29aWFpsYm5Rc0lITnBiWFZzWVhSbFpDd2diR2x6ZEdWdVpYSXNJR1J2YlVsRUtTQjdYRzRnSUhaaGNpQjBlWEJsSUQwZ1pYWmxiblF1ZEhsd1pTQjhmQ0FuZFc1cmJtOTNiaTFsZG1WdWRDYzdYRzRnSUdWMlpXNTBMbU4xY25KbGJuUlVZWEpuWlhRZ1BTQnBibXBsWTNScGIyNHVUVzkxYm5RdVoyVjBUbTlrWlNoa2IyMUpSQ2s3WEc0Z0lHbG1JQ2h6YVcxMWJHRjBaV1FwSUh0Y2JpQWdJQ0JTWldGamRFVnljbTl5VlhScGJITXVhVzUyYjJ0bFIzVmhjbVJsWkVOaGJHeGlZV05yVjJsMGFFTmhkR05vS0hSNWNHVXNJR3hwYzNSbGJtVnlMQ0JsZG1WdWRDd2daRzl0U1VRcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lGSmxZV04wUlhKeWIzSlZkR2xzY3k1cGJuWnZhMlZIZFdGeVpHVmtRMkZzYkdKaFkyc29kSGx3WlN3Z2JHbHpkR1Z1WlhJc0lHVjJaVzUwTENCa2IyMUpSQ2s3WEc0Z0lIMWNiaUFnWlhabGJuUXVZM1Z5Y21WdWRGUmhjbWRsZENBOUlHNTFiR3c3WEc1OVhHNWNiaThxS2x4dUlDb2dVM1JoYm1SaGNtUXZjMmx0Y0d4bElHbDBaWEpoZEdsdmJpQjBhSEp2ZFdkb0lHRnVJR1YyWlc1MEozTWdZMjlzYkdWamRHVmtJR1JwYzNCaGRHTm9aWE11WEc0Z0tpOWNibVoxYm1OMGFXOXVJR1Y0WldOMWRHVkVhWE53WVhSamFHVnpTVzVQY21SbGNpaGxkbVZ1ZEN3Z2MybHRkV3hoZEdWa0tTQjdYRzRnSUhaaGNpQmthWE53WVhSamFFeHBjM1JsYm1WeWN5QTlJR1YyWlc1MExsOWthWE53WVhSamFFeHBjM1JsYm1WeWN6dGNiaUFnZG1GeUlHUnBjM0JoZEdOb1NVUnpJRDBnWlhabGJuUXVYMlJwYzNCaGRHTm9TVVJ6TzF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUhaaGJHbGtZWFJsUlhabGJuUkVhWE53WVhSamFHVnpLR1YyWlc1MEtUdGNiaUFnZlZ4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGthWE53WVhSamFFeHBjM1JsYm1WeWN5a3BJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1JwYzNCaGRHTm9UR2x6ZEdWdVpYSnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCcFppQW9aWFpsYm5RdWFYTlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUW9LU2tnZTF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzh2SUV4cGMzUmxibVZ5Y3lCaGJtUWdTVVJ6SUdGeVpTQjBkMjhnY0dGeVlXeHNaV3dnWVhKeVlYbHpJSFJvWVhRZ1lYSmxJR0ZzZDJGNWN5QnBiaUJ6ZVc1akxseHVJQ0FnSUNBZ1pYaGxZM1YwWlVScGMzQmhkR05vS0dWMlpXNTBMQ0J6YVcxMWJHRjBaV1FzSUdScGMzQmhkR05vVEdsemRHVnVaWEp6VzJsZExDQmthWE53WVhSamFFbEVjMXRwWFNrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLR1JwYzNCaGRHTm9UR2x6ZEdWdVpYSnpLU0I3WEc0Z0lDQWdaWGhsWTNWMFpVUnBjM0JoZEdOb0tHVjJaVzUwTENCemFXMTFiR0YwWldRc0lHUnBjM0JoZEdOb1RHbHpkR1Z1WlhKekxDQmthWE53WVhSamFFbEVjeWs3WEc0Z0lIMWNiaUFnWlhabGJuUXVYMlJwYzNCaGRHTm9UR2x6ZEdWdVpYSnpJRDBnYm5Wc2JEdGNiaUFnWlhabGJuUXVYMlJwYzNCaGRHTm9TVVJ6SUQwZ2JuVnNiRHRjYm4xY2JseHVMeW9xWEc0Z0tpQlRkR0Z1WkdGeVpDOXphVzF3YkdVZ2FYUmxjbUYwYVc5dUlIUm9jbTkxWjJnZ1lXNGdaWFpsYm5RbmN5QmpiMnhzWldOMFpXUWdaR2x6Y0dGMFkyaGxjeXdnWW5WMElITjBiM0J6WEc0Z0tpQmhkQ0IwYUdVZ1ptbHljM1FnWkdsemNHRjBZMmdnWlhobFkzVjBhVzl1SUhKbGRIVnlibWx1WnlCMGNuVmxMQ0JoYm1RZ2NtVjBkWEp1Y3lCMGFHRjBJR2xrTGx4dUlDcGNiaUFxSUVCeVpYUjFjbTRnZXo5emRISnBibWQ5SUdsa0lHOW1JSFJvWlNCbWFYSnpkQ0JrYVhOd1lYUmphQ0JsZUdWamRYUnBiMjRnZDJodkozTWdiR2x6ZEdWdVpYSWdjbVYwZFhKdWMxeHVJQ29nZEhKMVpTd2diM0lnYm5Wc2JDQnBaaUJ1YnlCc2FYTjBaVzVsY2lCeVpYUjFjbTVsWkNCMGNuVmxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmxlR1ZqZFhSbFJHbHpjR0YwWTJobGMwbHVUM0prWlhKVGRHOXdRWFJVY25WbFNXMXdiQ2hsZG1WdWRDa2dlMXh1SUNCMllYSWdaR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTWdQU0JsZG1WdWRDNWZaR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTTdYRzRnSUhaaGNpQmthWE53WVhSamFFbEVjeUE5SUdWMlpXNTBMbDlrYVhOd1lYUmphRWxFY3p0Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNCMllXeHBaR0YwWlVWMlpXNTBSR2x6Y0dGMFkyaGxjeWhsZG1WdWRDazdYRzRnSUgxY2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTXBLU0I3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JrYVhOd1lYUmphRXhwYzNSbGJtVnljeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1YyWlc1MExtbHpVSEp2Y0dGbllYUnBiMjVUZEc5d2NHVmtLQ2twSUh0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCTWFYTjBaVzVsY25NZ1lXNWtJRWxFY3lCaGNtVWdkSGR2SUhCaGNtRnNiR1ZzSUdGeWNtRjVjeUIwYUdGMElHRnlaU0JoYkhkaGVYTWdhVzRnYzNsdVl5NWNiaUFnSUNBZ0lHbG1JQ2hrYVhOd1lYUmphRXhwYzNSbGJtVnljMXRwWFNobGRtVnVkQ3dnWkdsemNHRjBZMmhKUkhOYmFWMHBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrYVhOd1lYUmphRWxFYzF0cFhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvWkdsemNHRjBZMmhNYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0JwWmlBb1pHbHpjR0YwWTJoTWFYTjBaVzVsY25Nb1pYWmxiblFzSUdScGMzQmhkR05vU1VSektTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHUnBjM0JoZEdOb1NVUnpPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2JuVnNiRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkFjMlZsSUdWNFpXTjFkR1ZFYVhOd1lYUmphR1Z6U1c1UGNtUmxjbE4wYjNCQmRGUnlkV1ZKYlhCc1hHNGdLaTljYm1aMWJtTjBhVzl1SUdWNFpXTjFkR1ZFYVhOd1lYUmphR1Z6U1c1UGNtUmxjbE4wYjNCQmRGUnlkV1VvWlhabGJuUXBJSHRjYmlBZ2RtRnlJSEpsZENBOUlHVjRaV04xZEdWRWFYTndZWFJqYUdWelNXNVBjbVJsY2xOMGIzQkJkRlJ5ZFdWSmJYQnNLR1YyWlc1MEtUdGNiaUFnWlhabGJuUXVYMlJwYzNCaGRHTm9TVVJ6SUQwZ2JuVnNiRHRjYmlBZ1pYWmxiblF1WDJScGMzQmhkR05vVEdsemRHVnVaWEp6SUQwZ2JuVnNiRHRjYmlBZ2NtVjBkWEp1SUhKbGREdGNibjFjYmx4dUx5b3FYRzRnS2lCRmVHVmpkWFJwYjI0Z2IyWWdZU0JjSW1ScGNtVmpkRndpSUdScGMzQmhkR05vSUMwZ2RHaGxjbVVnYlhWemRDQmlaU0JoZENCdGIzTjBJRzl1WlNCa2FYTndZWFJqYUZ4dUlDb2dZV05qZFcxMWJHRjBaV1FnYjI0Z2RHaGxJR1YyWlc1MElHOXlJR2wwSUdseklHTnZibk5wWkdWeVpXUWdZVzRnWlhKeWIzSXVJRWwwSUdSdlpYTnVKM1FnY21WaGJHeDVJRzFoYTJWY2JpQXFJSE5sYm5ObElHWnZjaUJoYmlCbGRtVnVkQ0IzYVhSb0lHMTFiSFJwY0d4bElHUnBjM0JoZEdOb1pYTWdLR0oxWW1Kc1pXUXBJSFJ2SUd0bFpYQWdkSEpoWTJzZ2IyWWdkR2hsWEc0Z0tpQnlaWFIxY200Z2RtRnNkV1Z6SUdGMElHVmhZMmdnWkdsemNHRjBZMmdnWlhobFkzVjBhVzl1TENCaWRYUWdhWFFnWkc5bGN5QjBaVzVrSUhSdklHMWhhMlVnYzJWdWMyVWdkMmhsYmx4dUlDb2daR1ZoYkdsdVp5QjNhWFJvSUZ3aVpHbHlaV04wWENJZ1pHbHpjR0YwWTJobGN5NWNiaUFxWEc0Z0tpQkFjbVYwZFhKdUlIc3FmU0JVYUdVZ2NtVjBkWEp1SUhaaGJIVmxJRzltSUdWNFpXTjFkR2x1WnlCMGFHVWdjMmx1WjJ4bElHUnBjM0JoZEdOb0xseHVJQ292WEc1bWRXNWpkR2x2YmlCbGVHVmpkWFJsUkdseVpXTjBSR2x6Y0dGMFkyZ29aWFpsYm5RcElIdGNiaUFnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQjJZV3hwWkdGMFpVVjJaVzUwUkdsemNHRjBZMmhsY3lobGRtVnVkQ2s3WEc0Z0lIMWNiaUFnZG1GeUlHUnBjM0JoZEdOb1RHbHpkR1Z1WlhJZ1BTQmxkbVZ1ZEM1ZlpHbHpjR0YwWTJoTWFYTjBaVzVsY25NN1hHNGdJSFpoY2lCa2FYTndZWFJqYUVsRUlEMGdaWFpsYm5RdVgyUnBjM0JoZEdOb1NVUnpPMXh1SUNBaElVRnljbUY1TG1selFYSnlZWGtvWkdsemNHRjBZMmhNYVhOMFpXNWxjaWtnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5aWGhsWTNWMFpVUnBjbVZqZEVScGMzQmhkR05vS0M0dUxpazZJRWx1ZG1Gc2FXUWdZR1YyWlc1MFlDNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJSFpoY2lCeVpYTWdQU0JrYVhOd1lYUmphRXhwYzNSbGJtVnlJRDhnWkdsemNHRjBZMmhNYVhOMFpXNWxjaWhsZG1WdWRDd2daR2x6Y0dGMFkyaEpSQ2tnT2lCdWRXeHNPMXh1SUNCbGRtVnVkQzVmWkdsemNHRjBZMmhNYVhOMFpXNWxjbk1nUFNCdWRXeHNPMXh1SUNCbGRtVnVkQzVmWkdsemNHRjBZMmhKUkhNZ1BTQnVkV3hzTzF4dUlDQnlaWFIxY200Z2NtVnpPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFQndZWEpoYlNCN1UzbHVkR2hsZEdsalJYWmxiblI5SUdWMlpXNTBYRzRnS2lCQWNtVjBkWEp1SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtWmlCdWRXMWlaWElnYjJZZ1pHbHpjR0YwWTJobGN5QmhZMk4xYlhWc1lYUmxaQ0JwY3lCbmNtVmhkR1Z5SUhSb1lXNGdNQzVjYmlBcUwxeHVablZ1WTNScGIyNGdhR0Z6UkdsemNHRjBZMmhsY3lobGRtVnVkQ2tnZTF4dUlDQnlaWFIxY200Z0lTRmxkbVZ1ZEM1ZlpHbHpjR0YwWTJoTWFYTjBaVzVsY25NN1hHNTlYRzVjYmk4cUtseHVJQ29nUjJWdVpYSmhiQ0IxZEdsc2FYUnBaWE1nZEdoaGRDQmhjbVVnZFhObFpuVnNJR2x1SUdOeVpXRjBhVzVuSUdOMWMzUnZiU0JGZG1WdWRDQlFiSFZuYVc1ekxseHVJQ292WEc1MllYSWdSWFpsYm5SUWJIVm5hVzVWZEdsc2N5QTlJSHRjYmlBZ2FYTkZibVJwYzJnNklHbHpSVzVrYVhOb0xGeHVJQ0JwYzAxdmRtVnBjMmc2SUdselRXOTJaV2x6YUN4Y2JpQWdhWE5UZEdGeWRHbHphRG9nYVhOVGRHRnlkR2x6YUN4Y2JseHVJQ0JsZUdWamRYUmxSR2x5WldOMFJHbHpjR0YwWTJnNklHVjRaV04xZEdWRWFYSmxZM1JFYVhOd1lYUmphQ3hjYmlBZ1pYaGxZM1YwWlVScGMzQmhkR05vWlhOSmJrOXlaR1Z5T2lCbGVHVmpkWFJsUkdsemNHRjBZMmhsYzBsdVQzSmtaWElzWEc0Z0lHVjRaV04xZEdWRWFYTndZWFJqYUdWelNXNVBjbVJsY2xOMGIzQkJkRlJ5ZFdVNklHVjRaV04xZEdWRWFYTndZWFJqYUdWelNXNVBjbVJsY2xOMGIzQkJkRlJ5ZFdVc1hHNGdJR2hoYzBScGMzQmhkR05vWlhNNklHaGhjMFJwYzNCaGRHTm9aWE1zWEc1Y2JpQWdaMlYwVG05a1pUb2dablZ1WTNScGIyNGdLR2xrS1NCN1hHNGdJQ0FnY21WMGRYSnVJR2x1YW1WamRHbHZiaTVOYjNWdWRDNW5aWFJPYjJSbEtHbGtLVHRjYmlBZ2ZTeGNiaUFnWjJWMFNVUTZJR1oxYm1OMGFXOXVJQ2h1YjJSbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdsdWFtVmpkR2x2Ymk1TmIzVnVkQzVuWlhSSlJDaHViMlJsS1R0Y2JpQWdmU3hjYmx4dUlDQnBibXBsWTNScGIyNDZJR2x1YW1WamRHbHZibHh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkZkbVZ1ZEZCc2RXZHBibFYwYVd4ek95SmRmUT09IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFByb3BhZ2F0b3JzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKCcuL2FjY3VtdWxhdGVJbnRvJyk7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZSgnLi9mb3JFYWNoQWNjdW11bGF0ZWQnKTtcblxudmFyIFByb3BhZ2F0aW9uUGhhc2VzID0gRXZlbnRDb25zdGFudHMuUHJvcGFnYXRpb25QaGFzZXM7XG52YXIgZ2V0TGlzdGVuZXIgPSBFdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcjtcblxuLyoqXG4gKiBTb21lIGV2ZW50IHR5cGVzIGhhdmUgYSBub3Rpb24gb2YgZGlmZmVyZW50IHJlZ2lzdHJhdGlvbiBuYW1lcyBmb3IgZGlmZmVyZW50XG4gKiBcInBoYXNlc1wiIG9mIHByb3BhZ2F0aW9uLiBUaGlzIGZpbmRzIGxpc3RlbmVycyBieSBhIGdpdmVuIHBoYXNlLlxuICovXG5mdW5jdGlvbiBsaXN0ZW5lckF0UGhhc2UoaWQsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07XG4gIHJldHVybiBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG59XG5cbi8qKlxuICogVGFncyBhIGBTeW50aGV0aWNFdmVudGAgd2l0aCBkaXNwYXRjaGVkIGxpc3RlbmVycy4gQ3JlYXRpbmcgdGhpcyBmdW5jdGlvblxuICogaGVyZSwgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGJpbmQgb3IgY3JlYXRlIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudC5cbiAqIE11dGF0aW5nIHRoZSBldmVudCdzIG1lbWJlcnMgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGNyZWF0ZSBhIHdyYXBwaW5nXG4gKiBcImRpc3BhdGNoXCIgb2JqZWN0IHRoYXQgcGFpcnMgdGhlIGV2ZW50IHdpdGggdGhlIGxpc3RlbmVyLlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzKGRvbUlELCB1cHdhcmRzLCBldmVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRvbUlELCAnRGlzcGF0Y2hpbmcgaWQgbXVzdCBub3QgYmUgbnVsbCcpIDogdW5kZWZpbmVkO1xuICB9XG4gIHZhciBwaGFzZSA9IHVwd2FyZHMgPyBQcm9wYWdhdGlvblBoYXNlcy5idWJibGVkIDogUHJvcGFnYXRpb25QaGFzZXMuY2FwdHVyZWQ7XG4gIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXRQaGFzZShkb21JRCwgZXZlbnQsIHBoYXNlKTtcbiAgaWYgKGxpc3RlbmVyKSB7XG4gICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgZXZlbnQuX2Rpc3BhdGNoSURzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSURzLCBkb21JRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRpc3BhdGNoZXMgKG11c3QgYmUgZW50aXJlbHkgY29sbGVjdGVkIGJlZm9yZSBkaXNwYXRjaGluZyAtIHNlZSB1bml0XG4gKiB0ZXN0cykuIExhemlseSBhbGxvY2F0ZSB0aGUgYXJyYXkgdG8gY29uc2VydmUgbWVtb3J5LiAgV2UgbXVzdCBsb29wIHRocm91Z2hcbiAqIGVhY2ggZXZlbnQgYW5kIHBlcmZvcm0gdGhlIHRyYXZlcnNhbCBmb3IgZWFjaCBvbmUuIFdlIGNhbm5vdCBwZXJmb3JtIGFcbiAqIHNpbmdsZSB0cmF2ZXJzYWwgZm9yIHRoZSBlbnRpcmUgY29sbGVjdGlvbiBvZiBldmVudHMgYmVjYXVzZSBlYWNoIGV2ZW50IG1heVxuICogaGF2ZSBhIGRpZmZlcmVudCB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VUd29QaGFzZShldmVudC5kaXNwYXRjaE1hcmtlciwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICB9XG59XG5cbi8qKlxuICogU2FtZSBhcyBgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZWAsIGJ1dCBza2lwcyBvdmVyIHRoZSB0YXJnZXRJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VUd29QaGFzZVNraXBUYXJnZXQoZXZlbnQuZGlzcGF0Y2hNYXJrZXIsIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsIGV2ZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIHdpdGhvdXQgcmVnYXJkIHRvIGRpcmVjdGlvbiwgZG9lcyBub3QgbG9vayBmb3IgcGhhc2VkXG4gKiByZWdpc3RyYXRpb24gbmFtZXMuIFNhbWUgYXMgYGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlYCBidXQgd2l0aG91dFxuICogcmVxdWlyaW5nIHRoYXQgdGhlIGBkaXNwYXRjaE1hcmtlcmAgYmUgdGhlIHNhbWUgYXMgdGhlIGRpc3BhdGNoZWQgSUQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGlkLCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZTtcbiAgICB2YXIgbGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaElEcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaElEcywgaWQpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIGRpc3BhdGNoZXMgb24gYW4gYFN5bnRoZXRpY0V2ZW50YCwgYnV0IG9ubHkgZm9yIHRoZVxuICogYGRpc3BhdGNoTWFya2VyYC5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgYWNjdW11bGF0ZURpc3BhdGNoZXMoZXZlbnQuZGlzcGF0Y2hNYXJrZXIsIG51bGwsIGV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGVTa2lwVGFyZ2V0KTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKSB7XG4gIEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tSUQsIHRvSUQsIGFjY3VtdWxhdGVEaXNwYXRjaGVzLCBsZWF2ZSwgZW50ZXIpO1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG4vKipcbiAqIEEgc21hbGwgc2V0IG9mIHByb3BhZ2F0aW9uIHBhdHRlcm5zLCBlYWNoIG9mIHdoaWNoIHdpbGwgYWNjZXB0IGEgc21hbGwgYW1vdW50XG4gKiBvZiBpbmZvcm1hdGlvbiwgYW5kIGdlbmVyYXRlIGEgc2V0IG9mIFwiZGlzcGF0Y2ggcmVhZHkgZXZlbnQgb2JqZWN0c1wiIC0gd2hpY2hcbiAqIGFyZSBzZXRzIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGFubm90YXRlZCB3aXRoIGEgc2V0IG9mIGRpc3BhdGNoZWRcbiAqIGxpc3RlbmVyIGZ1bmN0aW9ucy9pZHMuIFRoZSBBUEkgaXMgZGVzaWduZWQgdGhpcyB3YXkgdG8gZGlzY291cmFnZSB0aGVzZVxuICogcHJvcGFnYXRpb24gc3RyYXRlZ2llcyBmcm9tIGFjdHVhbGx5IGV4ZWN1dGluZyB0aGUgZGlzcGF0Y2hlcywgc2luY2Ugd2VcbiAqIGFsd2F5cyB3YW50IHRvIGNvbGxlY3QgdGhlIGVudGlyZSBzZXQgb2YgZGlzcGF0Y2hlcyBiZWZvcmUgZXhlY3V0aW5nIGV2ZW50IGFcbiAqIHNpbmdsZSBvbmUuXG4gKlxuICogQGNvbnN0cnVjdG9yIEV2ZW50UHJvcGFnYXRvcnNcbiAqL1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSB7XG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMsXG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCxcbiAgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6IGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzLFxuICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFByb3BhZ2F0b3JzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJYWmxiblJRY205d1lXZGhkRzl5Y3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1JYWmxiblJRY205d1lXZGhkRzl5YzF4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlFVjJaVzUwUTI5dWMzUmhiblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOUZkbVZ1ZEVOdmJuTjBZVzUwY3ljcE8xeHVkbUZ5SUVWMlpXNTBVR3gxWjJsdVNIVmlJRDBnY21WeGRXbHlaU2duTGk5RmRtVnVkRkJzZFdkcGJraDFZaWNwTzF4dVhHNTJZWElnZDJGeWJtbHVaeUE5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDNkaGNtNXBibWNuS1R0Y2JseHVkbUZ5SUdGalkzVnRkV3hoZEdWSmJuUnZJRDBnY21WeGRXbHlaU2duTGk5aFkyTjFiWFZzWVhSbFNXNTBieWNwTzF4dWRtRnlJR1p2Y2tWaFkyaEJZMk4xYlhWc1lYUmxaQ0E5SUhKbGNYVnBjbVVvSnk0dlptOXlSV0ZqYUVGalkzVnRkV3hoZEdWa0p5azdYRzVjYm5aaGNpQlFjbTl3WVdkaGRHbHZibEJvWVhObGN5QTlJRVYyWlc1MFEyOXVjM1JoYm5SekxsQnliM0JoWjJGMGFXOXVVR2hoYzJWek8xeHVkbUZ5SUdkbGRFeHBjM1JsYm1WeUlEMGdSWFpsYm5SUWJIVm5hVzVJZFdJdVoyVjBUR2x6ZEdWdVpYSTdYRzVjYmk4cUtseHVJQ29nVTI5dFpTQmxkbVZ1ZENCMGVYQmxjeUJvWVhabElHRWdibTkwYVc5dUlHOW1JR1JwWm1abGNtVnVkQ0J5WldkcGMzUnlZWFJwYjI0Z2JtRnRaWE1nWm05eUlHUnBabVpsY21WdWRGeHVJQ29nWENKd2FHRnpaWE5jSWlCdlppQndjbTl3WVdkaGRHbHZiaTRnVkdocGN5Qm1hVzVrY3lCc2FYTjBaVzVsY25NZ1lua2dZU0JuYVhabGJpQndhR0Z6WlM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYkdsemRHVnVaWEpCZEZCb1lYTmxLR2xrTENCbGRtVnVkQ3dnY0hKdmNHRm5ZWFJwYjI1UWFHRnpaU2tnZTF4dUlDQjJZWElnY21WbmFYTjBjbUYwYVc5dVRtRnRaU0E5SUdWMlpXNTBMbVJwYzNCaGRHTm9RMjl1Wm1sbkxuQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6VzNCeWIzQmhaMkYwYVc5dVVHaGhjMlZkTzF4dUlDQnlaWFIxY200Z1oyVjBUR2x6ZEdWdVpYSW9hV1FzSUhKbFoybHpkSEpoZEdsdmJrNWhiV1VwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRlJoWjNNZ1lTQmdVM2x1ZEdobGRHbGpSWFpsYm5SZ0lIZHBkR2dnWkdsemNHRjBZMmhsWkNCc2FYTjBaVzVsY25NdUlFTnlaV0YwYVc1bklIUm9hWE1nWm5WdVkzUnBiMjVjYmlBcUlHaGxjbVVzSUdGc2JHOTNjeUIxY3lCMGJ5QnViM1FnYUdGMlpTQjBieUJpYVc1a0lHOXlJR055WldGMFpTQm1kVzVqZEdsdmJuTWdabTl5SUdWaFkyZ2daWFpsYm5RdVhHNGdLaUJOZFhSaGRHbHVaeUIwYUdVZ1pYWmxiblFuY3lCdFpXMWlaWEp6SUdGc2JHOTNjeUIxY3lCMGJ5QnViM1FnYUdGMlpTQjBieUJqY21WaGRHVWdZU0IzY21Gd2NHbHVaMXh1SUNvZ1hDSmthWE53WVhSamFGd2lJRzlpYW1WamRDQjBhR0YwSUhCaGFYSnpJSFJvWlNCbGRtVnVkQ0IzYVhSb0lIUm9aU0JzYVhOMFpXNWxjaTVjYmlBcUwxeHVablZ1WTNScGIyNGdZV05qZFcxMWJHRjBaVVJwY21WamRHbHZibUZzUkdsemNHRjBZMmhsY3loa2IyMUpSQ3dnZFhCM1lYSmtjeXdnWlhabGJuUXBJSHRjYmlBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1Wnloa2IyMUpSQ3dnSjBScGMzQmhkR05vYVc1bklHbGtJRzExYzNRZ2JtOTBJR0psSUc1MWJHd25LU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdmVnh1SUNCMllYSWdjR2hoYzJVZ1BTQjFjSGRoY21SeklEOGdVSEp2Y0dGbllYUnBiMjVRYUdGelpYTXVZblZpWW14bFpDQTZJRkJ5YjNCaFoyRjBhVzl1VUdoaGMyVnpMbU5oY0hSMWNtVmtPMXh1SUNCMllYSWdiR2x6ZEdWdVpYSWdQU0JzYVhOMFpXNWxja0YwVUdoaGMyVW9aRzl0U1VRc0lHVjJaVzUwTENCd2FHRnpaU2s3WEc0Z0lHbG1JQ2hzYVhOMFpXNWxjaWtnZTF4dUlDQWdJR1YyWlc1MExsOWthWE53WVhSamFFeHBjM1JsYm1WeWN5QTlJR0ZqWTNWdGRXeGhkR1ZKYm5SdktHVjJaVzUwTGw5a2FYTndZWFJqYUV4cGMzUmxibVZ5Y3l3Z2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUdWMlpXNTBMbDlrYVhOd1lYUmphRWxFY3lBOUlHRmpZM1Z0ZFd4aGRHVkpiblJ2S0dWMlpXNTBMbDlrYVhOd1lYUmphRWxFY3l3Z1pHOXRTVVFwTzF4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyOXNiR1ZqZENCa2FYTndZWFJqYUdWeklDaHRkWE4wSUdKbElHVnVkR2x5Wld4NUlHTnZiR3hsWTNSbFpDQmlaV1p2Y21VZ1pHbHpjR0YwWTJocGJtY2dMU0J6WldVZ2RXNXBkRnh1SUNvZ2RHVnpkSE1wTGlCTVlYcHBiSGtnWVd4c2IyTmhkR1VnZEdobElHRnljbUY1SUhSdklHTnZibk5sY25abElHMWxiVzl5ZVM0Z0lGZGxJRzExYzNRZ2JHOXZjQ0IwYUhKdmRXZG9YRzRnS2lCbFlXTm9JR1YyWlc1MElHRnVaQ0J3WlhKbWIzSnRJSFJvWlNCMGNtRjJaWEp6WVd3Z1ptOXlJR1ZoWTJnZ2IyNWxMaUJYWlNCallXNXViM1FnY0dWeVptOXliU0JoWEc0Z0tpQnphVzVuYkdVZ2RISmhkbVZ5YzJGc0lHWnZjaUIwYUdVZ1pXNTBhWEpsSUdOdmJHeGxZM1JwYjI0Z2IyWWdaWFpsYm5SeklHSmxZMkYxYzJVZ1pXRmphQ0JsZG1WdWRDQnRZWGxjYmlBcUlHaGhkbVVnWVNCa2FXWm1aWEpsYm5RZ2RHRnlaMlYwTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJoWTJOMWJYVnNZWFJsVkhkdlVHaGhjMlZFYVhOd1lYUmphR1Z6VTJsdVoyeGxLR1YyWlc1MEtTQjdYRzRnSUdsbUlDaGxkbVZ1ZENBbUppQmxkbVZ1ZEM1a2FYTndZWFJqYUVOdmJtWnBaeTV3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN5a2dlMXh1SUNBZ0lFVjJaVzUwVUd4MVoybHVTSFZpTG1sdWFtVmpkR2x2Ymk1blpYUkpibk4wWVc1alpVaGhibVJzWlNncExuUnlZWFpsY25ObFZIZHZVR2hoYzJVb1pYWmxiblF1WkdsemNHRjBZMmhOWVhKclpYSXNJR0ZqWTNWdGRXeGhkR1ZFYVhKbFkzUnBiMjVoYkVScGMzQmhkR05vWlhNc0lHVjJaVzUwS1R0Y2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGTmhiV1VnWVhNZ1lHRmpZM1Z0ZFd4aGRHVlVkMjlRYUdGelpVUnBjM0JoZEdOb1pYTlRhVzVuYkdWZ0xDQmlkWFFnYzJ0cGNITWdiM1psY2lCMGFHVWdkR0Z5WjJWMFNVUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHRmpZM1Z0ZFd4aGRHVlVkMjlRYUdGelpVUnBjM0JoZEdOb1pYTlRhVzVuYkdWVGEybHdWR0Z5WjJWMEtHVjJaVzUwS1NCN1hHNGdJR2xtSUNobGRtVnVkQ0FtSmlCbGRtVnVkQzVrYVhOd1lYUmphRU52Ym1acFp5NXdhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3lrZ2UxeHVJQ0FnSUVWMlpXNTBVR3gxWjJsdVNIVmlMbWx1YW1WamRHbHZiaTVuWlhSSmJuTjBZVzVqWlVoaGJtUnNaU2dwTG5SeVlYWmxjbk5sVkhkdlVHaGhjMlZUYTJsd1ZHRnlaMlYwS0dWMlpXNTBMbVJwYzNCaGRHTm9UV0Z5YTJWeUxDQmhZMk4xYlhWc1lYUmxSR2x5WldOMGFXOXVZV3hFYVhOd1lYUmphR1Z6TENCbGRtVnVkQ2s3WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQlkyTjFiWFZzWVhSbGN5QjNhWFJvYjNWMElISmxaMkZ5WkNCMGJ5QmthWEpsWTNScGIyNHNJR1J2WlhNZ2JtOTBJR3h2YjJzZ1ptOXlJSEJvWVhObFpGeHVJQ29nY21WbmFYTjBjbUYwYVc5dUlHNWhiV1Z6TGlCVFlXMWxJR0Z6SUdCaFkyTjFiWFZzWVhSbFJHbHlaV04wUkdsemNHRjBZMmhsYzFOcGJtZHNaV0FnWW5WMElIZHBkR2h2ZFhSY2JpQXFJSEpsY1hWcGNtbHVaeUIwYUdGMElIUm9aU0JnWkdsemNHRjBZMmhOWVhKclpYSmdJR0psSUhSb1pTQnpZVzFsSUdGeklIUm9aU0JrYVhOd1lYUmphR1ZrSUVsRUxseHVJQ292WEc1bWRXNWpkR2x2YmlCaFkyTjFiWFZzWVhSbFJHbHpjR0YwWTJobGN5aHBaQ3dnYVdkdWIzSmxaRVJwY21WamRHbHZiaXdnWlhabGJuUXBJSHRjYmlBZ2FXWWdLR1YyWlc1MElDWW1JR1YyWlc1MExtUnBjM0JoZEdOb1EyOXVabWxuTG5KbFoybHpkSEpoZEdsdmJrNWhiV1VwSUh0Y2JpQWdJQ0IyWVhJZ2NtVm5hWE4wY21GMGFXOXVUbUZ0WlNBOUlHVjJaVzUwTG1ScGMzQmhkR05vUTI5dVptbG5MbkpsWjJsemRISmhkR2x2Yms1aGJXVTdYRzRnSUNBZ2RtRnlJR3hwYzNSbGJtVnlJRDBnWjJWMFRHbHpkR1Z1WlhJb2FXUXNJSEpsWjJsemRISmhkR2x2Yms1aGJXVXBPMXh1SUNBZ0lHbG1JQ2hzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnWlhabGJuUXVYMlJwYzNCaGRHTm9UR2x6ZEdWdVpYSnpJRDBnWVdOamRXMTFiR0YwWlVsdWRHOG9aWFpsYm5RdVgyUnBjM0JoZEdOb1RHbHpkR1Z1WlhKekxDQnNhWE4wWlc1bGNpazdYRzRnSUNBZ0lDQmxkbVZ1ZEM1ZlpHbHpjR0YwWTJoSlJITWdQU0JoWTJOMWJYVnNZWFJsU1c1MGJ5aGxkbVZ1ZEM1ZlpHbHpjR0YwWTJoSlJITXNJR2xrS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQlkyTjFiWFZzWVhSbGN5QmthWE53WVhSamFHVnpJRzl1SUdGdUlHQlRlVzUwYUdWMGFXTkZkbVZ1ZEdBc0lHSjFkQ0J2Ym14NUlHWnZjaUIwYUdWY2JpQXFJR0JrYVhOd1lYUmphRTFoY210bGNtQXVYRzRnS2lCQWNHRnlZVzBnZTFONWJuUm9aWFJwWTBWMlpXNTBmU0JsZG1WdWRGeHVJQ292WEc1bWRXNWpkR2x2YmlCaFkyTjFiWFZzWVhSbFJHbHlaV04wUkdsemNHRjBZMmhsYzFOcGJtZHNaU2hsZG1WdWRDa2dlMXh1SUNCcFppQW9aWFpsYm5RZ0ppWWdaWFpsYm5RdVpHbHpjR0YwWTJoRGIyNW1hV2N1Y21WbmFYTjBjbUYwYVc5dVRtRnRaU2tnZTF4dUlDQWdJR0ZqWTNWdGRXeGhkR1ZFYVhOd1lYUmphR1Z6S0dWMlpXNTBMbVJwYzNCaGRHTm9UV0Z5YTJWeUxDQnVkV3hzTENCbGRtVnVkQ2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1lXTmpkVzExYkdGMFpWUjNiMUJvWVhObFJHbHpjR0YwWTJobGN5aGxkbVZ1ZEhNcElIdGNiaUFnWm05eVJXRmphRUZqWTNWdGRXeGhkR1ZrS0dWMlpXNTBjeXdnWVdOamRXMTFiR0YwWlZSM2IxQm9ZWE5sUkdsemNHRjBZMmhsYzFOcGJtZHNaU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR0ZqWTNWdGRXeGhkR1ZVZDI5UWFHRnpaVVJwYzNCaGRHTm9aWE5UYTJsd1ZHRnlaMlYwS0dWMlpXNTBjeWtnZTF4dUlDQm1iM0pGWVdOb1FXTmpkVzExYkdGMFpXUW9aWFpsYm5SekxDQmhZMk4xYlhWc1lYUmxWSGR2VUdoaGMyVkVhWE53WVhSamFHVnpVMmx1WjJ4bFUydHBjRlJoY21kbGRDazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRmpZM1Z0ZFd4aGRHVkZiblJsY2t4bFlYWmxSR2x6Y0dGMFkyaGxjeWhzWldGMlpTd2daVzUwWlhJc0lHWnliMjFKUkN3Z2RHOUpSQ2tnZTF4dUlDQkZkbVZ1ZEZCc2RXZHBia2gxWWk1cGJtcGxZM1JwYjI0dVoyVjBTVzV6ZEdGdVkyVklZVzVrYkdVb0tTNTBjbUYyWlhKelpVVnVkR1Z5VEdWaGRtVW9abkp2YlVsRUxDQjBiMGxFTENCaFkyTjFiWFZzWVhSbFJHbHpjR0YwWTJobGN5d2diR1ZoZG1Vc0lHVnVkR1Z5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWVdOamRXMTFiR0YwWlVScGNtVmpkRVJwYzNCaGRHTm9aWE1vWlhabGJuUnpLU0I3WEc0Z0lHWnZja1ZoWTJoQlkyTjFiWFZzWVhSbFpDaGxkbVZ1ZEhNc0lHRmpZM1Z0ZFd4aGRHVkVhWEpsWTNSRWFYTndZWFJqYUdWelUybHVaMnhsS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJCSUhOdFlXeHNJSE5sZENCdlppQndjbTl3WVdkaGRHbHZiaUJ3WVhSMFpYSnVjeXdnWldGamFDQnZaaUIzYUdsamFDQjNhV3hzSUdGalkyVndkQ0JoSUhOdFlXeHNJR0Z0YjNWdWRGeHVJQ29nYjJZZ2FXNW1iM0p0WVhScGIyNHNJR0Z1WkNCblpXNWxjbUYwWlNCaElITmxkQ0J2WmlCY0ltUnBjM0JoZEdOb0lISmxZV1I1SUdWMlpXNTBJRzlpYW1WamRITmNJaUF0SUhkb2FXTm9YRzRnS2lCaGNtVWdjMlYwY3lCdlppQmxkbVZ1ZEhNZ2RHaGhkQ0JvWVhabElHRnNjbVZoWkhrZ1ltVmxiaUJoYm01dmRHRjBaV1FnZDJsMGFDQmhJSE5sZENCdlppQmthWE53WVhSamFHVmtYRzRnS2lCc2FYTjBaVzVsY2lCbWRXNWpkR2x2Ym5NdmFXUnpMaUJVYUdVZ1FWQkpJR2x6SUdSbGMybG5ibVZrSUhSb2FYTWdkMkY1SUhSdklHUnBjMk52ZFhKaFoyVWdkR2hsYzJWY2JpQXFJSEJ5YjNCaFoyRjBhVzl1SUhOMGNtRjBaV2RwWlhNZ1puSnZiU0JoWTNSMVlXeHNlU0JsZUdWamRYUnBibWNnZEdobElHUnBjM0JoZEdOb1pYTXNJSE5wYm1ObElIZGxYRzRnS2lCaGJIZGhlWE1nZDJGdWRDQjBieUJqYjJ4c1pXTjBJSFJvWlNCbGJuUnBjbVVnYzJWMElHOW1JR1JwYzNCaGRHTm9aWE1nWW1WbWIzSmxJR1Y0WldOMWRHbHVaeUJsZG1WdWRDQmhYRzRnS2lCemFXNW5iR1VnYjI1bExseHVJQ3BjYmlBcUlFQmpiMjV6ZEhKMVkzUnZjaUJGZG1WdWRGQnliM0JoWjJGMGIzSnpYRzRnS2k5Y2JuWmhjaUJGZG1WdWRGQnliM0JoWjJGMGIzSnpJRDBnZTF4dUlDQmhZMk4xYlhWc1lYUmxWSGR2VUdoaGMyVkVhWE53WVhSamFHVnpPaUJoWTJOMWJYVnNZWFJsVkhkdlVHaGhjMlZFYVhOd1lYUmphR1Z6TEZ4dUlDQmhZMk4xYlhWc1lYUmxWSGR2VUdoaGMyVkVhWE53WVhSamFHVnpVMnRwY0ZSaGNtZGxkRG9nWVdOamRXMTFiR0YwWlZSM2IxQm9ZWE5sUkdsemNHRjBZMmhsYzFOcmFYQlVZWEpuWlhRc1hHNGdJR0ZqWTNWdGRXeGhkR1ZFYVhKbFkzUkVhWE53WVhSamFHVnpPaUJoWTJOMWJYVnNZWFJsUkdseVpXTjBSR2x6Y0dGMFkyaGxjeXhjYmlBZ1lXTmpkVzExYkdGMFpVVnVkR1Z5VEdWaGRtVkVhWE53WVhSamFHVnpPaUJoWTJOMWJYVnNZWFJsUlc1MFpYSk1aV0YyWlVScGMzQmhkR05vWlhOY2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUlhabGJuUlFjbTl3WVdkaGRHOXljenNpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZSgnLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yJyk7XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgY2xhc3Mgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRleHQgY29udGVudCBvZiBhIHRhcmdldCBub2RlLFxuICogYWxsb3dpbmcgY29tcGFyaXNvbiBvZiBjb250ZW50IGJlZm9yZSBhbmQgYWZ0ZXIgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBJZGVudGlmeSB0aGUgbm9kZSB3aGVyZSBzZWxlY3Rpb24gY3VycmVudGx5IGJlZ2lucywgdGhlbiBvYnNlcnZlXG4gKiBib3RoIGl0cyB0ZXh0IGNvbnRlbnQgYW5kIGl0cyBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBET00uIFNpbmNlIHRoZVxuICogYnJvd3NlciBtYXkgbmF0aXZlbHkgcmVwbGFjZSB0aGUgdGFyZ2V0IG5vZGUgZHVyaW5nIGNvbXBvc2l0aW9uLCB3ZSBjYW5cbiAqIHVzZSBpdHMgcG9zaXRpb24gdG8gZmluZCBpdHMgcmVwbGFjZW1lbnQuXG4gKlxuICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gcm9vdFxuICovXG5mdW5jdGlvbiBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUocm9vdCkge1xuICB0aGlzLl9yb290ID0gcm9vdDtcbiAgdGhpcy5fc3RhcnRUZXh0ID0gdGhpcy5nZXRUZXh0KCk7XG4gIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG59XG5cbmFzc2lnbihGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucHJvdG90eXBlLCB7XG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICB0aGlzLl9zdGFydFRleHQgPSBudWxsO1xuICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IHRleHQgb2YgaW5wdXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldFRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ3ZhbHVlJyBpbiB0aGlzLl9yb290KSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdC52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3RbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXTtcbiAgfSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBkaWZmZXJpbmcgc3Vic3RyaW5nIGJldHdlZW4gdGhlIGluaXRpYWxseSBzdG9yZWRcbiAgICogdGV4dCBjb250ZW50IGFuZCB0aGUgY3VycmVudCBjb250ZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXREYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2ZhbGxiYWNrVGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZhbGxiYWNrVGV4dDtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnQ7XG4gICAgdmFyIHN0YXJ0VmFsdWUgPSB0aGlzLl9zdGFydFRleHQ7XG4gICAgdmFyIHN0YXJ0TGVuZ3RoID0gc3RhcnRWYWx1ZS5sZW5ndGg7XG4gICAgdmFyIGVuZDtcbiAgICB2YXIgZW5kVmFsdWUgPSB0aGlzLmdldFRleHQoKTtcbiAgICB2YXIgZW5kTGVuZ3RoID0gZW5kVmFsdWUubGVuZ3RoO1xuXG4gICAgZm9yIChzdGFydCA9IDA7IHN0YXJ0IDwgc3RhcnRMZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0XSAhPT0gZW5kVmFsdWVbc3RhcnRdKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtaW5FbmQgPSBzdGFydExlbmd0aCAtIHN0YXJ0O1xuICAgIGZvciAoZW5kID0gMTsgZW5kIDw9IG1pbkVuZDsgZW5kKyspIHtcbiAgICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0TGVuZ3RoIC0gZW5kXSAhPT0gZW5kVmFsdWVbZW5kTGVuZ3RoIC0gZW5kXSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2xpY2VUYWlsID0gZW5kID4gMSA/IDEgLSBlbmQgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gZW5kVmFsdWUuc2xpY2Uoc3RhcnQsIHNsaWNlVGFpbCk7XG4gICAgcmV0dXJuIHRoaXMuX2ZhbGxiYWNrVGV4dDtcbiAgfVxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgSFRNTERPTVByb3BlcnR5Q29uZmlnXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgTVVTVF9VU0VfQVRUUklCVVRFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURTtcbnZhciBNVVNUX1VTRV9QUk9QRVJUWSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWTtcbnZhciBIQVNfQk9PTEVBTl9WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfQk9PTEVBTl9WQUxVRTtcbnZhciBIQVNfU0lERV9FRkZFQ1RTID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19TSURFX0VGRkVDVFM7XG52YXIgSEFTX05VTUVSSUNfVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFO1xuXG52YXIgaGFzU1ZHO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB2YXIgaW1wbGVtZW50YXRpb24gPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbjtcbiAgaGFzU1ZHID0gaW1wbGVtZW50YXRpb24gJiYgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJiBpbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0Jhc2ljU3RydWN0dXJlJywgJzEuMScpO1xufVxuXG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0ge1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogUmVnRXhwLnByb3RvdHlwZS50ZXN0LmJpbmQoL14oZGF0YXxhcmlhKS1bYS16X11bYS16XFxkXy5cXC1dKiQvKSxcbiAgUHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIFN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhY2NlcHQ6IG51bGwsXG4gICAgYWNjZXB0Q2hhcnNldDogbnVsbCxcbiAgICBhY2Nlc3NLZXk6IG51bGwsXG4gICAgYWN0aW9uOiBudWxsLFxuICAgIGFsbG93RnVsbFNjcmVlbjogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBhbHQ6IG51bGwsXG4gICAgYXN5bmM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGF1dG9Db21wbGV0ZTogbnVsbCxcbiAgICAvLyBhdXRvRm9jdXMgaXMgcG9seWZpbGxlZC9ub3JtYWxpemVkIGJ5IEF1dG9Gb2N1c1V0aWxzXG4gICAgLy8gYXV0b0ZvY3VzOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvUGxheTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2FwdHVyZTogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2VsbFBhZGRpbmc6IG51bGwsXG4gICAgY2VsbFNwYWNpbmc6IG51bGwsXG4gICAgY2hhclNldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGNoYWxsZW5nZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGNoZWNrZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2xhc3NJRDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIFRvIHNldCBjbGFzc05hbWUgb24gU1ZHIGVsZW1lbnRzLCBpdCdzIG5lY2Vzc2FyeSB0byB1c2UgLnNldEF0dHJpYnV0ZTtcbiAgICAvLyB0aGlzIHdvcmtzIG9uIEhUTUwgZWxlbWVudHMgdG9vIGluIGFsbCBicm93c2VycyBleGNlcHQgSUU4LiBDb252ZW5pZW50bHksXG4gICAgLy8gSUU4IGRvZXNuJ3Qgc3VwcG9ydCBTVkcgYW5kIHNvIHdlIGNhbiBzaW1wbHkgdXNlIHRoZSBhdHRyaWJ1dGUgaW5cbiAgICAvLyBicm93c2VycyB0aGF0IHN1cHBvcnQgU1ZHIGFuZCB0aGUgcHJvcGVydHkgaW4gYnJvd3NlcnMgdGhhdCBkb24ndCxcbiAgICAvLyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgSFRNTCBvciBTVkcuXG4gICAgY2xhc3NOYW1lOiBoYXNTVkcgPyBNVVNUX1VTRV9BVFRSSUJVVEUgOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBjb2xzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBjb2xTcGFuOiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgY29udGVudEVkaXRhYmxlOiBudWxsLFxuICAgIGNvbnRleHRNZW51OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY29udHJvbHM6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY29vcmRzOiBudWxsLFxuICAgIGNyb3NzT3JpZ2luOiBudWxsLFxuICAgIGRhdGE6IG51bGwsIC8vIEZvciBgPG9iamVjdCAvPmAgYWN0cyBhcyBgc3JjYC5cbiAgICBkYXRlVGltZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgICdkZWZhdWx0JzogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZGVmZXI6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRpcjogbnVsbCxcbiAgICBkaXNhYmxlZDogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZG93bmxvYWQ6IEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsXG4gICAgZHJhZ2dhYmxlOiBudWxsLFxuICAgIGVuY1R5cGU6IG51bGwsXG4gICAgZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1BY3Rpb246IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtRW5jVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1NZXRob2Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtTm9WYWxpZGF0ZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZm9ybVRhcmdldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZyYW1lQm9yZGVyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaGVhZGVyczogbnVsbCxcbiAgICBoZWlnaHQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBoaWRkZW46IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGhpZ2g6IG51bGwsXG4gICAgaHJlZjogbnVsbCxcbiAgICBocmVmTGFuZzogbnVsbCxcbiAgICBodG1sRm9yOiBudWxsLFxuICAgIGh0dHBFcXVpdjogbnVsbCxcbiAgICBpY29uOiBudWxsLFxuICAgIGlkOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBpbnB1dE1vZGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBpbnRlZ3JpdHk6IG51bGwsXG4gICAgaXM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBrZXlQYXJhbXM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBrZXlUeXBlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAga2luZDogbnVsbCxcbiAgICBsYWJlbDogbnVsbCxcbiAgICBsYW5nOiBudWxsLFxuICAgIGxpc3Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBsb29wOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGxvdzogbnVsbCxcbiAgICBtYW5pZmVzdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmdpbkhlaWdodDogbnVsbCxcbiAgICBtYXJnaW5XaWR0aDogbnVsbCxcbiAgICBtYXg6IG51bGwsXG4gICAgbWF4TGVuZ3RoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWVkaWE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtZWRpYUdyb3VwOiBudWxsLFxuICAgIG1ldGhvZDogbnVsbCxcbiAgICBtaW46IG51bGwsXG4gICAgbWluTGVuZ3RoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbXVsdGlwbGU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbXV0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbmFtZTogbnVsbCxcbiAgICBub25jZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wZW46IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wdGltdW06IG51bGwsXG4gICAgcGF0dGVybjogbnVsbCxcbiAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICBwb3N0ZXI6IG51bGwsXG4gICAgcHJlbG9hZDogbnVsbCxcbiAgICByYWRpb0dyb3VwOiBudWxsLFxuICAgIHJlYWRPbmx5OiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJlbDogbnVsbCxcbiAgICByZXF1aXJlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcmV2ZXJzZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJvbGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByb3dzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICByb3dTcGFuOiBudWxsLFxuICAgIHNhbmRib3g6IG51bGwsXG4gICAgc2NvcGU6IG51bGwsXG4gICAgc2NvcGVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzY3JvbGxpbmc6IG51bGwsXG4gICAgc2VhbWxlc3M6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNlbGVjdGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNoYXBlOiBudWxsLFxuICAgIHNpemU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNpemVzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3BhbjogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc3BlbGxDaGVjazogbnVsbCxcbiAgICBzcmM6IG51bGwsXG4gICAgc3JjRG9jOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBzcmNMYW5nOiBudWxsLFxuICAgIHNyY1NldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0YXJ0OiBIQVNfTlVNRVJJQ19WQUxVRSxcbiAgICBzdGVwOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIHN1bW1hcnk6IG51bGwsXG4gICAgdGFiSW5kZXg6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHR5cGU6IG51bGwsXG4gICAgdXNlTWFwOiBudWxsLFxuICAgIHZhbHVlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19TSURFX0VGRkVDVFMsXG4gICAgd2lkdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB3bW9kZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHdyYXA6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBSREZhIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhYm91dDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGRhdGF0eXBlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaW5saXN0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcHJlZml4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gcHJvcGVydHkgaXMgYWxzbyBzdXBwb3J0ZWQgZm9yIE9wZW5HcmFwaCBpbiBtZXRhIHRhZ3MuXG4gICAgcHJvcGVydHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByZXNvdXJjZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgICd0eXBlb2YnOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdm9jYWI6IE1VU1RfVVNFX0FUVFJJQlVURSxcblxuICAgIC8qKlxuICAgICAqIE5vbi1zdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgLy8gYXV0b0NhcGl0YWxpemUgYW5kIGF1dG9Db3JyZWN0IGFyZSBzdXBwb3J0ZWQgaW4gTW9iaWxlIFNhZmFyaSBmb3JcbiAgICAvLyBrZXlib2FyZCBoaW50cy5cbiAgICBhdXRvQ2FwaXRhbGl6ZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGF1dG9Db3JyZWN0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gYXV0b1NhdmUgYWxsb3dzIFdlYktpdC9CbGluayB0byBwZXJzaXN0IHZhbHVlcyBvZiBpbnB1dCBmaWVsZHMgb24gcGFnZSByZWxvYWRzXG4gICAgYXV0b1NhdmU6IG51bGwsXG4gICAgLy8gY29sb3IgaXMgZm9yIFNhZmFyaSBtYXNrLWljb24gbGlua1xuICAgIGNvbG9yOiBudWxsLFxuICAgIC8vIGl0ZW1Qcm9wLCBpdGVtU2NvcGUsIGl0ZW1UeXBlIGFyZSBmb3JcbiAgICAvLyBNaWNyb2RhdGEgc3VwcG9ydC4gU2VlIGh0dHA6Ly9zY2hlbWEub3JnL2RvY3MvZ3MuaHRtbFxuICAgIGl0ZW1Qcm9wOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaXRlbVNjb3BlOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBpdGVtVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIGl0ZW1JRCBhbmQgaXRlbVJlZiBhcmUgZm9yIE1pY3JvZGF0YSBzdXBwb3J0IGFzIHdlbGwgYnV0XG4gICAgLy8gb25seSBzcGVjaWZpZWQgaW4gdGhlIHRoZSBXSEFUV0cgc3BlYyBkb2N1bWVudC4gU2VlXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbWljcm9kYXRhLmh0bWwjbWljcm9kYXRhLWRvbS1hcGlcbiAgICBpdGVtSUQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBpdGVtUmVmOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gcmVzdWx0cyBzaG93IGxvb2tpbmcgZ2xhc3MgaWNvbiBhbmQgcmVjZW50IHNlYXJjaGVzIG9uIGlucHV0XG4gICAgLy8gc2VhcmNoIGZpZWxkcyBpbiBXZWJLaXQvQmxpbmtcbiAgICByZXN1bHRzOiBudWxsLFxuICAgIC8vIElFLW9ubHkgYXR0cmlidXRlIHRoYXQgc3BlY2lmaWVzIHNlY3VyaXR5IHJlc3RyaWN0aW9ucyBvbiBhbiBpZnJhbWVcbiAgICAvLyBhcyBhbiBhbHRlcm5hdGl2ZSB0byB0aGUgc2FuZGJveCBhdHRyaWJ1dGUgb24gSUU8MTBcbiAgICBzZWN1cml0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIElFLW9ubHkgYXR0cmlidXRlIHRoYXQgY29udHJvbHMgZm9jdXMgYmVoYXZpb3JcbiAgICB1bnNlbGVjdGFibGU6IE1VU1RfVVNFX0FUVFJJQlVURVxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge1xuICAgIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgIGh0bWxGb3I6ICdmb3InLFxuICAgIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXG4gIH0sXG4gIERPTVByb3BlcnR5TmFtZXM6IHtcbiAgICBhdXRvQ29tcGxldGU6ICdhdXRvY29tcGxldGUnLFxuICAgIGF1dG9Gb2N1czogJ2F1dG9mb2N1cycsXG4gICAgYXV0b1BsYXk6ICdhdXRvcGxheScsXG4gICAgYXV0b1NhdmU6ICdhdXRvc2F2ZScsXG4gICAgLy8gYGVuY29kaW5nYCBpcyBlcXVpdmFsZW50IHRvIGBlbmN0eXBlYCwgSUU4IGxhY2tzIGFuIGBlbmN0eXBlYCBzZXR0ZXIuXG4gICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCNkb20tZnMtZW5jb2RpbmdcbiAgICBlbmNUeXBlOiAnZW5jb2RpbmcnLFxuICAgIGhyZWZMYW5nOiAnaHJlZmxhbmcnLFxuICAgIHJhZGlvR3JvdXA6ICdyYWRpb2dyb3VwJyxcbiAgICBzcGVsbENoZWNrOiAnc3BlbGxjaGVjaycsXG4gICAgc3JjRG9jOiAnc3JjZG9jJyxcbiAgICBzcmNTZXQ6ICdzcmNzZXQnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSFRNTERPTVByb3BlcnR5Q29uZmlnOyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTGlua2VkVmFsdWVVdGlsc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZXMnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgJ2J1dHRvbic6IHRydWUsXG4gICdjaGVja2JveCc6IHRydWUsXG4gICdpbWFnZSc6IHRydWUsXG4gICdoaWRkZW4nOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlLFxuICAncmVzZXQnOiB0cnVlLFxuICAnc3VibWl0JzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcykge1xuICAhKGlucHV0UHJvcHMuY2hlY2tlZExpbmsgPT0gbnVsbCB8fCBpbnB1dFByb3BzLnZhbHVlTGluayA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIHZhbHVlTGluay4gSWYgeW91IHdhbnQgdG8gdXNlICcgKyAnY2hlY2tlZExpbmssIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluayBhbmQgdmljZSB2ZXJzYS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0UHJvcHMpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcyk7XG4gICEoaW5wdXRQcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0UHJvcHMub25DaGFuZ2UgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHByb3ZpZGUgYSB2YWx1ZUxpbmsgYW5kIGEgdmFsdWUgb3Igb25DaGFuZ2UgZXZlbnQuIElmIHlvdSB3YW50ICcgKyAndG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcykge1xuICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKTtcbiAgIShpbnB1dFByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dFByb3BzLm9uQ2hhbmdlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgY2hlY2tlZCBwcm9wZXJ0eSBvciBvbkNoYW5nZSBldmVudC4gJyArICdJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZCBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byAnICsgJ3VzZSBjaGVja2VkTGluaycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgfSxcbiAgY2hlY2tlZDogZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gIH0sXG4gIG9uQ2hhbmdlOiBSZWFjdFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG4gKi9cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0ge1xuICBjaGVja1Byb3BUeXBlczogZnVuY3Rpb24gKHRhZ05hbWUsIHByb3BzLCBvd25lcikge1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIHRhZ05hbWUsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBmb3JtIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0UHJvcHMgUHJvcHMgZm9yIGZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIHZhbHVlIHByb3Agb3IgbGluay5cbiAgICovXG4gIGdldFZhbHVlOiBmdW5jdGlvbiAoaW5wdXRQcm9wcykge1xuICAgIGlmIChpbnB1dFByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0UHJvcHMudmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFByb3BzIFByb3BzIGZvciBmb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHsqfSBjdXJyZW50IGNoZWNrZWQgc3RhdHVzIG9mIHRoZSBpbnB1dCBlaXRoZXIgZnJvbSBjaGVja2VkIHByb3BcbiAgICogICAgICAgICAgICAgb3IgbGluay5cbiAgICovXG4gIGdldENoZWNrZWQ6IGZ1bmN0aW9uIChpbnB1dFByb3BzKSB7XG4gICAgaWYgKGlucHV0UHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWRMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRQcm9wcy5jaGVja2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRQcm9wcyBQcm9wcyBmb3IgZm9ybSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgY2hhbmdlIGV2ZW50IHRvIGhhbmRsZVxuICAgKi9cbiAgZXhlY3V0ZU9uQ2hhbmdlOiBmdW5jdGlvbiAoaW5wdXRQcm9wcywgZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRQcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXRQcm9wcyk7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy52YWx1ZUxpbmsucmVxdWVzdENoYW5nZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRQcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgcmV0dXJuIGlucHV0UHJvcHMuY2hlY2tlZExpbmsucmVxdWVzdENoYW5nZShldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgfSBlbHNlIGlmIChpbnB1dFByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy5vbkNoYW5nZS5jYWxsKHVuZGVmaW5lZCwgZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rZWRWYWx1ZVV0aWxzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlRHbHVhMlZrVm1Gc2RXVlZkR2xzY3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRXhwYm10bFpGWmhiSFZsVlhScGJITmNiaUFxSUVCMGVYQmxZMmhsWTJ0eklITjBZWFJwWXkxdmJteDVYRzRnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnVW1WaFkzUlFjbTl3Vkhsd1pYTWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBVSEp2Y0ZSNWNHVnpKeWs3WEc1MllYSWdVbVZoWTNSUWNtOXdWSGx3WlV4dlkyRjBhVzl1Y3lBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSUWNtOXdWSGx3WlV4dlkyRjBhVzl1Y3ljcE8xeHVYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTZ25abUpxY3k5c2FXSXZhVzUyWVhKcFlXNTBKeWs3WEc1MllYSWdkMkZ5Ym1sdVp5QTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMM2RoY201cGJtY25LVHRjYmx4dWRtRnlJR2hoYzFKbFlXUlBibXg1Vm1Gc2RXVWdQU0I3WEc0Z0lDZGlkWFIwYjI0bk9pQjBjblZsTEZ4dUlDQW5ZMmhsWTJ0aWIzZ25PaUIwY25WbExGeHVJQ0FuYVcxaFoyVW5PaUIwY25WbExGeHVJQ0FuYUdsa1pHVnVKem9nZEhKMVpTeGNiaUFnSjNKaFpHbHZKem9nZEhKMVpTeGNiaUFnSjNKbGMyVjBKem9nZEhKMVpTeGNiaUFnSjNOMVltMXBkQ2M2SUhSeWRXVmNibjA3WEc1Y2JtWjFibU4wYVc5dUlGOWhjM05sY25SVGFXNW5iR1ZNYVc1cktHbHVjSFYwVUhKdmNITXBJSHRjYmlBZ0lTaHBibkIxZEZCeWIzQnpMbU5vWldOclpXUk1hVzVySUQwOUlHNTFiR3dnZkh3Z2FXNXdkWFJRY205d2N5NTJZV3gxWlV4cGJtc2dQVDBnYm5Wc2JDa2dQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBblEyRnVibTkwSUhCeWIzWnBaR1VnWVNCamFHVmphMlZrVEdsdWF5QmhibVFnWVNCMllXeDFaVXhwYm1zdUlFbG1JSGx2ZFNCM1lXNTBJSFJ2SUhWelpTQW5JQ3NnSjJOb1pXTnJaV1JNYVc1ckxDQjViM1VnY0hKdlltRmliSGtnWkc5dVhGd25kQ0IzWVc1MElIUnZJSFZ6WlNCMllXeDFaVXhwYm1zZ1lXNWtJSFpwWTJVZ2RtVnljMkV1SnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1gyRnpjMlZ5ZEZaaGJIVmxUR2x1YXlocGJuQjFkRkJ5YjNCektTQjdYRzRnSUY5aGMzTmxjblJUYVc1bmJHVk1hVzVyS0dsdWNIVjBVSEp2Y0hNcE8xeHVJQ0FoS0dsdWNIVjBVSEp2Y0hNdWRtRnNkV1VnUFQwZ2JuVnNiQ0FtSmlCcGJuQjFkRkJ5YjNCekxtOXVRMmhoYm1kbElEMDlJRzUxYkd3cElEOGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUdsdWRtRnlhV0Z1ZENobVlXeHpaU3dnSjBOaGJtNXZkQ0J3Y205MmFXUmxJR0VnZG1Gc2RXVk1hVzVySUdGdVpDQmhJSFpoYkhWbElHOXlJRzl1UTJoaGJtZGxJR1YyWlc1MExpQkpaaUI1YjNVZ2QyRnVkQ0FuSUNzZ0ozUnZJSFZ6WlNCMllXeDFaU0J2Y2lCdmJrTm9ZVzVuWlN3Z2VXOTFJSEJ5YjJKaFlteDVJR1J2Ymx4Y0ozUWdkMkZ1ZENCMGJ5QjFjMlVnZG1Gc2RXVk1hVzVyTGljcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYm4xY2JseHVablZ1WTNScGIyNGdYMkZ6YzJWeWRFTm9aV05yWldSTWFXNXJLR2x1Y0hWMFVISnZjSE1wSUh0Y2JpQWdYMkZ6YzJWeWRGTnBibWRzWlV4cGJtc29hVzV3ZFhSUWNtOXdjeWs3WEc0Z0lDRW9hVzV3ZFhSUWNtOXdjeTVqYUdWamEyVmtJRDA5SUc1MWJHd2dKaVlnYVc1d2RYUlFjbTl3Y3k1dmJrTm9ZVzVuWlNBOVBTQnVkV3hzS1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2REWVc1dWIzUWdjSEp2ZG1sa1pTQmhJR05vWldOclpXUk1hVzVySUdGdVpDQmhJR05vWldOclpXUWdjSEp2Y0dWeWRIa2diM0lnYjI1RGFHRnVaMlVnWlhabGJuUXVJQ2NnS3lBblNXWWdlVzkxSUhkaGJuUWdkRzhnZFhObElHTm9aV05yWldRZ2IzSWdiMjVEYUdGdVoyVXNJSGx2ZFNCd2NtOWlZV0pzZVNCa2IyNWNYQ2QwSUhkaGJuUWdkRzhnSnlBcklDZDFjMlVnWTJobFkydGxaRXhwYm1zbktTQTZJR2x1ZG1GeWFXRnVkQ2htWVd4elpTa2dPaUIxYm1SbFptbHVaV1E3WEc1OVhHNWNiblpoY2lCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUFvY0hKdmNITXNJSEJ5YjNCT1lXMWxMQ0JqYjIxd2IyNWxiblJPWVcxbEtTQjdYRzRnSUNBZ2FXWWdLQ0Z3Y205d2MxdHdjbTl3VG1GdFpWMGdmSHdnYUdGelVtVmhaRTl1YkhsV1lXeDFaVnR3Y205d2N5NTBlWEJsWFNCOGZDQndjbTl3Y3k1dmJrTm9ZVzVuWlNCOGZDQndjbTl3Y3k1eVpXRmtUMjVzZVNCOGZDQndjbTl3Y3k1a2FYTmhZbXhsWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JYSnliM0lvSjFsdmRTQndjbTkyYVdSbFpDQmhJR0IyWVd4MVpXQWdjSEp2Y0NCMGJ5QmhJR1p2Y20wZ1ptbGxiR1FnZDJsMGFHOTFkQ0JoYmlBbklDc2dKMkJ2YmtOb1lXNW5aV0FnYUdGdVpHeGxjaTRnVkdocGN5QjNhV3hzSUhKbGJtUmxjaUJoSUhKbFlXUXRiMjVzZVNCbWFXVnNaQzRnU1dZZ0p5QXJJQ2QwYUdVZ1ptbGxiR1FnYzJodmRXeGtJR0psSUcxMWRHRmliR1VnZFhObElHQmtaV1poZFd4MFZtRnNkV1ZnTGlCUGRHaGxjbmRwYzJVc0lDY2dLeUFuYzJWMElHVnBkR2hsY2lCZ2IyNURhR0Z1WjJWZ0lHOXlJR0J5WldGa1QyNXNlV0F1SnlrN1hHNGdJSDBzWEc0Z0lHTm9aV05yWldRNklHWjFibU4wYVc5dUlDaHdjbTl3Y3l3Z2NISnZjRTVoYldVc0lHTnZiWEJ2Ym1WdWRFNWhiV1VwSUh0Y2JpQWdJQ0JwWmlBb0lYQnliM0J6VzNCeWIzQk9ZVzFsWFNCOGZDQndjbTl3Y3k1dmJrTm9ZVzVuWlNCOGZDQndjbTl3Y3k1eVpXRmtUMjVzZVNCOGZDQndjbTl3Y3k1a2FYTmhZbXhsWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JYSnliM0lvSjFsdmRTQndjbTkyYVdSbFpDQmhJR0JqYUdWamEyVmtZQ0J3Y205d0lIUnZJR0VnWm05eWJTQm1hV1ZzWkNCM2FYUm9iM1YwSUdGdUlDY2dLeUFuWUc5dVEyaGhibWRsWUNCb1lXNWtiR1Z5TGlCVWFHbHpJSGRwYkd3Z2NtVnVaR1Z5SUdFZ2NtVmhaQzF2Ym14NUlHWnBaV3hrTGlCSlppQW5JQ3NnSjNSb1pTQm1hV1ZzWkNCemFHOTFiR1FnWW1VZ2JYVjBZV0pzWlNCMWMyVWdZR1JsWm1GMWJIUkRhR1ZqYTJWa1lDNGdUM1JvWlhKM2FYTmxMQ0FuSUNzZ0ozTmxkQ0JsYVhSb1pYSWdZRzl1UTJoaGJtZGxZQ0J2Y2lCZ2NtVmhaRTl1YkhsZ0xpY3BPMXh1SUNCOUxGeHVJQ0J2YmtOb1lXNW5aVG9nVW1WaFkzUlFjbTl3Vkhsd1pYTXVablZ1WTF4dWZUdGNibHh1ZG1GeUlHeHZaMmRsWkZSNWNHVkdZV2xzZFhKbGN5QTlJSHQ5TzF4dVpuVnVZM1JwYjI0Z1oyVjBSR1ZqYkdGeVlYUnBiMjVGY25KdmNrRmtaR1Z1WkhWdEtHOTNibVZ5S1NCN1hHNGdJR2xtSUNodmQyNWxjaWtnZTF4dUlDQWdJSFpoY2lCdVlXMWxJRDBnYjNkdVpYSXVaMlYwVG1GdFpTZ3BPMXh1SUNBZ0lHbG1JQ2h1WVcxbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p5QkRhR1ZqYXlCMGFHVWdjbVZ1WkdWeUlHMWxkR2h2WkNCdlppQmdKeUFySUc1aGJXVWdLeUFuWUM0bk8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnSnljN1hHNTlYRzVjYmk4cUtseHVJQ29nVUhKdmRtbGtaU0JoSUd4cGJtdGxaQ0JnZG1Gc2RXVmdJR0YwZEhKcFluVjBaU0JtYjNJZ1kyOXVkSEp2Ykd4bFpDQm1iM0p0Y3k0Z1dXOTFJSE5vYjNWc1pDQnViM1FnZFhObFhHNGdLaUIwYUdseklHOTFkSE5wWkdVZ2IyWWdkR2hsSUZKbFlXTjBSRTlOSUdOdmJuUnliMnhzWldRZ1ptOXliU0JqYjIxd2IyNWxiblJ6TGx4dUlDb3ZYRzUyWVhJZ1RHbHVhMlZrVm1Gc2RXVlZkR2xzY3lBOUlIdGNiaUFnWTJobFkydFFjbTl3Vkhsd1pYTTZJR1oxYm1OMGFXOXVJQ2gwWVdkT1lXMWxMQ0J3Y205d2N5d2diM2R1WlhJcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCd2NtOXdUbUZ0WlNCcGJpQndjbTl3Vkhsd1pYTXBJSHRjYmlBZ0lDQWdJR2xtSUNod2NtOXdWSGx3WlhNdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0hKdmNFNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsY25KdmNpQTlJSEJ5YjNCVWVYQmxjMXR3Y205d1RtRnRaVjBvY0hKdmNITXNJSEJ5YjNCT1lXMWxMQ0IwWVdkT1lXMWxMQ0JTWldGamRGQnliM0JVZVhCbFRHOWpZWFJwYjI1ekxuQnliM0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tHVnljbTl5SUdsdWMzUmhibU5sYjJZZ1JYSnliM0lnSmlZZ0lTaGxjbkp2Y2k1dFpYTnpZV2RsSUdsdUlHeHZaMmRsWkZSNWNHVkdZV2xzZFhKbGN5a3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1QyNXNlU0J0YjI1cGRHOXlJSFJvYVhNZ1ptRnBiSFZ5WlNCdmJtTmxJR0psWTJGMWMyVWdkR2hsY21VZ2RHVnVaSE1nZEc4Z1ltVWdZU0JzYjNRZ2IyWWdkR2hsWEc0Z0lDQWdJQ0FnSUM4dklITmhiV1VnWlhKeWIzSXVYRzRnSUNBZ0lDQWdJR3h2WjJkbFpGUjVjR1ZHWVdsc2RYSmxjMXRsY25KdmNpNXRaWE56WVdkbFhTQTlJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdGa1pHVnVaSFZ0SUQwZ1oyVjBSR1ZqYkdGeVlYUnBiMjVGY25KdmNrRmtaR1Z1WkhWdEtHOTNibVZ5S1R0Y2JpQWdJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29abUZzYzJVc0lDZEdZV2xzWldRZ1ptOXliU0J3Y205d1ZIbHdaVG9nSlhNbGN5Y3NJR1Z5Y205eUxtMWxjM05oWjJVc0lHRmtaR1Z1WkhWdEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JwYm5CMWRGQnliM0J6SUZCeWIzQnpJR1p2Y2lCbWIzSnRJR052YlhCdmJtVnVkRnh1SUNBZ0tpQkFjbVYwZFhKdUlIc3FmU0JqZFhKeVpXNTBJSFpoYkhWbElHOW1JSFJvWlNCcGJuQjFkQ0JsYVhSb1pYSWdabkp2YlNCMllXeDFaU0J3Y205d0lHOXlJR3hwYm1zdVhHNGdJQ0FxTDF4dUlDQm5aWFJXWVd4MVpUb2dablZ1WTNScGIyNGdLR2x1Y0hWMFVISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb2FXNXdkWFJRY205d2N5NTJZV3gxWlV4cGJtc3BJSHRjYmlBZ0lDQWdJRjloYzNObGNuUldZV3gxWlV4cGJtc29hVzV3ZFhSUWNtOXdjeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhVzV3ZFhSUWNtOXdjeTUyWVd4MVpVeHBibXN1ZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJwYm5CMWRGQnliM0J6TG5aaGJIVmxPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYVc1d2RYUlFjbTl3Y3lCUWNtOXdjeUJtYjNJZ1ptOXliU0JqYjIxd2IyNWxiblJjYmlBZ0lDb2dRSEpsZEhWeWJpQjdLbjBnWTNWeWNtVnVkQ0JqYUdWamEyVmtJSE4wWVhSMWN5QnZaaUIwYUdVZ2FXNXdkWFFnWldsMGFHVnlJR1p5YjIwZ1kyaGxZMnRsWkNCd2NtOXdYRzRnSUNBcUlDQWdJQ0FnSUNBZ0lDQWdJRzl5SUd4cGJtc3VYRzRnSUNBcUwxeHVJQ0JuWlhSRGFHVmphMlZrT2lCbWRXNWpkR2x2YmlBb2FXNXdkWFJRY205d2N5a2dlMXh1SUNBZ0lHbG1JQ2hwYm5CMWRGQnliM0J6TG1Ob1pXTnJaV1JNYVc1cktTQjdYRzRnSUNBZ0lDQmZZWE56WlhKMFEyaGxZMnRsWkV4cGJtc29hVzV3ZFhSUWNtOXdjeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhVzV3ZFhSUWNtOXdjeTVqYUdWamEyVmtUR2x1YXk1MllXeDFaVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdsdWNIVjBVSEp2Y0hNdVkyaGxZMnRsWkR0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHbHVjSFYwVUhKdmNITWdVSEp2Y0hNZ1ptOXlJR1p2Y20wZ1kyOXRjRzl1Wlc1MFhHNGdJQ0FxSUVCd1lYSmhiU0I3VTNsdWRHaGxkR2xqUlhabGJuUjlJR1YyWlc1MElHTm9ZVzVuWlNCbGRtVnVkQ0IwYnlCb1lXNWtiR1ZjYmlBZ0lDb3ZYRzRnSUdWNFpXTjFkR1ZQYmtOb1lXNW5aVG9nWm5WdVkzUnBiMjRnS0dsdWNIVjBVSEp2Y0hNc0lHVjJaVzUwS1NCN1hHNGdJQ0FnYVdZZ0tHbHVjSFYwVUhKdmNITXVkbUZzZFdWTWFXNXJLU0I3WEc0Z0lDQWdJQ0JmWVhOelpYSjBWbUZzZFdWTWFXNXJLR2x1Y0hWMFVISnZjSE1wTzF4dUlDQWdJQ0FnY21WMGRYSnVJR2x1Y0hWMFVISnZjSE11ZG1Gc2RXVk1hVzVyTG5KbGNYVmxjM1JEYUdGdVoyVW9aWFpsYm5RdWRHRnlaMlYwTG5aaGJIVmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x1Y0hWMFVISnZjSE11WTJobFkydGxaRXhwYm1zcElIdGNiaUFnSUNBZ0lGOWhjM05sY25SRGFHVmphMlZrVEdsdWF5aHBibkIxZEZCeWIzQnpLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnBibkIxZEZCeWIzQnpMbU5vWldOclpXUk1hVzVyTG5KbGNYVmxjM1JEYUdGdVoyVW9aWFpsYm5RdWRHRnlaMlYwTG1Ob1pXTnJaV1FwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYVc1d2RYUlFjbTl3Y3k1dmJrTm9ZVzVuWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdsdWNIVjBVSEp2Y0hNdWIyNURhR0Z1WjJVdVkyRnNiQ2gxYm1SbFptbHVaV1FzSUdWMlpXNTBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVEdsdWEyVmtWbUZzZFdWVmRHbHNjenNpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBPYmplY3QuYXNzaWduXG4gKi9cblxuLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLW9iamVjdC5hc3NpZ25cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2VzKSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gdGFyZ2V0IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgdmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgbmV4dEluZGV4ID0gMTsgbmV4dEluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgbmV4dEluZGV4KyspIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tuZXh0SW5kZXhdO1xuICAgIGlmIChuZXh0U291cmNlID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBmcm9tID0gT2JqZWN0KG5leHRTb3VyY2UpO1xuXG4gICAgLy8gV2UgZG9uJ3QgY3VycmVudGx5IHN1cHBvcnQgYWNjZXNzb3JzIG5vciBwcm94aWVzLiBUaGVyZWZvcmUgdGhpc1xuICAgIC8vIGNvcHkgY2Fubm90IHRocm93LiBJZiB3ZSBldmVyIHN1cHBvcnRlZCB0aGlzIHRoZW4gd2UgbXVzdCBoYW5kbGVcbiAgICAvLyBleGNlcHRpb25zIGFuZCBzaWRlLWVmZmVjdHMuIFdlIGRvbid0IHN1cHBvcnQgc3ltYm9scyBzbyB0aGV5IHdvbid0XG4gICAgLy8gYmUgdHJhbnNmZXJyZWQuXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuICAgICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ247IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBQb29sZWRDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFN0YXRpYyBwb29sZXJzLiBTZXZlcmFsIGN1c3RvbSB2ZXJzaW9ucyBmb3IgZWFjaCBwb3RlbnRpYWwgbnVtYmVyIG9mXG4gKiBhcmd1bWVudHMuIEEgY29tcGxldGVseSBnZW5lcmljIHBvb2xlciBpcyBlYXN5IHRvIGltcGxlbWVudCwgYnV0IHdvdWxkXG4gKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG4gKiB0aGUgQ2xhc3MgaXRzZWxmLCBub3QgYW4gaW5zdGFuY2UuIElmIGFueSBvdGhlcnMgYXJlIG5lZWRlZCwgc2ltcGx5IGFkZCB0aGVtXG4gKiBoZXJlLCBvciBpbiB0aGVpciBvd24gZmlsZXMuXG4gKi9cbnZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChjb3B5RmllbGRzRnJvbSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMykge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgfVxufTtcblxudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICB9XG59O1xuXG52YXIgZml2ZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gIH1cbn07XG5cbnZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIGluc3RhbmNlLmRlc3RydWN0b3IoKTtcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGggPCBLbGFzcy5wb29sU2l6ZSkge1xuICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgfVxufTtcblxudmFyIERFRkFVTFRfUE9PTF9TSVpFID0gMTA7XG52YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBBdWdtZW50cyBgQ29weUNvbnN0cnVjdG9yYCB0byBiZSBhIHBvb2xhYmxlIGNsYXNzLCBhdWdtZW50aW5nIG9ubHkgdGhlIGNsYXNzXG4gKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3JcbiAqIHlvdSBnaXZlIHRoaXMgbWF5IGhhdmUgYSBgcG9vbFNpemVgIHByb3BlcnR5LCBhbmQgd2lsbCBsb29rIGZvciBhXG4gKiBwcm90b3R5cGljYWwgYGRlc3RydWN0b3JgIG9uIGluc3RhbmNlcyAob3B0aW9uYWwpLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cbnZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbiAoQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgTmV3S2xhc3MucG9vbFNpemUgPSBERUZBVUxUX1BPT0xfU0laRTtcbiAgfVxuICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgcmV0dXJuIE5ld0tsYXNzO1xufTtcblxudmFyIFBvb2xlZENsYXNzID0ge1xuICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuICB0d29Bcmd1bWVudFBvb2xlcjogdHdvQXJndW1lbnRQb29sZXIsXG4gIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gIGZvdXJBcmd1bWVudFBvb2xlcjogZm91ckFyZ3VtZW50UG9vbGVyLFxuICBmaXZlQXJndW1lbnRQb29sZXI6IGZpdmVBcmd1bWVudFBvb2xlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVRzl2YkdWa1EyeGhjM011YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCUWIyOXNaV1JEYkdGemMxeHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDJsdWRtRnlhV0Z1ZENjcE8xeHVYRzR2S2lwY2JpQXFJRk4wWVhScFl5QndiMjlzWlhKekxpQlRaWFpsY21Gc0lHTjFjM1J2YlNCMlpYSnphVzl1Y3lCbWIzSWdaV0ZqYUNCd2IzUmxiblJwWVd3Z2JuVnRZbVZ5SUc5bVhHNGdLaUJoY21kMWJXVnVkSE11SUVFZ1kyOXRjR3hsZEdWc2VTQm5aVzVsY21saklIQnZiMnhsY2lCcGN5QmxZWE41SUhSdklHbHRjR3hsYldWdWRDd2dZblYwSUhkdmRXeGtYRzRnS2lCeVpYRjFhWEpsSUdGalkyVnpjMmx1WnlCMGFHVWdZR0Z5WjNWdFpXNTBjMkFnYjJKcVpXTjBMaUJKYmlCbFlXTm9JRzltSUhSb1pYTmxMQ0JnZEdocGMyQWdjbVZtWlhKeklIUnZYRzRnS2lCMGFHVWdRMnhoYzNNZ2FYUnpaV3htTENCdWIzUWdZVzRnYVc1emRHRnVZMlV1SUVsbUlHRnVlU0J2ZEdobGNuTWdZWEpsSUc1bFpXUmxaQ3dnYzJsdGNHeDVJR0ZrWkNCMGFHVnRYRzRnS2lCb1pYSmxMQ0J2Y2lCcGJpQjBhR1ZwY2lCdmQyNGdabWxzWlhNdVhHNGdLaTljYm5aaGNpQnZibVZCY21kMWJXVnVkRkJ2YjJ4bGNpQTlJR1oxYm1OMGFXOXVJQ2hqYjNCNVJtbGxiR1J6Um5KdmJTa2dlMXh1SUNCMllYSWdTMnhoYzNNZ1BTQjBhR2x6TzF4dUlDQnBaaUFvUzJ4aGMzTXVhVzV6ZEdGdVkyVlFiMjlzTG14bGJtZDBhQ2tnZTF4dUlDQWdJSFpoY2lCcGJuTjBZVzVqWlNBOUlFdHNZWE56TG1sdWMzUmhibU5sVUc5dmJDNXdiM0FvS1R0Y2JpQWdJQ0JMYkdGemN5NWpZV3hzS0dsdWMzUmhibU5sTENCamIzQjVSbWxsYkdSelJuSnZiU2s3WEc0Z0lDQWdjbVYwZFhKdUlHbHVjM1JoYm1ObE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dTMnhoYzNNb1kyOXdlVVpwWld4a2MwWnliMjBwTzF4dUlDQjlYRzU5TzF4dVhHNTJZWElnZEhkdlFYSm5kVzFsYm5SUWIyOXNaWElnUFNCbWRXNWpkR2x2YmlBb1lURXNJR0V5S1NCN1hHNGdJSFpoY2lCTGJHRnpjeUE5SUhSb2FYTTdYRzRnSUdsbUlDaExiR0Z6Y3k1cGJuTjBZVzVqWlZCdmIyd3ViR1Z1WjNSb0tTQjdYRzRnSUNBZ2RtRnlJR2x1YzNSaGJtTmxJRDBnUzJ4aGMzTXVhVzV6ZEdGdVkyVlFiMjlzTG5CdmNDZ3BPMXh1SUNBZ0lFdHNZWE56TG1OaGJHd29hVzV6ZEdGdVkyVXNJR0V4TENCaE1pazdYRzRnSUNBZ2NtVjBkWEp1SUdsdWMzUmhibU5sTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1MyeGhjM01vWVRFc0lHRXlLVHRjYmlBZ2ZWeHVmVHRjYmx4dWRtRnlJSFJvY21WbFFYSm5kVzFsYm5SUWIyOXNaWElnUFNCbWRXNWpkR2x2YmlBb1lURXNJR0V5TENCaE15a2dlMXh1SUNCMllYSWdTMnhoYzNNZ1BTQjBhR2x6TzF4dUlDQnBaaUFvUzJ4aGMzTXVhVzV6ZEdGdVkyVlFiMjlzTG14bGJtZDBhQ2tnZTF4dUlDQWdJSFpoY2lCcGJuTjBZVzVqWlNBOUlFdHNZWE56TG1sdWMzUmhibU5sVUc5dmJDNXdiM0FvS1R0Y2JpQWdJQ0JMYkdGemN5NWpZV3hzS0dsdWMzUmhibU5sTENCaE1Td2dZVElzSUdFektUdGNiaUFnSUNCeVpYUjFjbTRnYVc1emRHRnVZMlU3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCTGJHRnpjeWhoTVN3Z1lUSXNJR0V6S1R0Y2JpQWdmVnh1ZlR0Y2JseHVkbUZ5SUdadmRYSkJjbWQxYldWdWRGQnZiMnhsY2lBOUlHWjFibU4wYVc5dUlDaGhNU3dnWVRJc0lHRXpMQ0JoTkNrZ2UxeHVJQ0IyWVhJZ1MyeGhjM01nUFNCMGFHbHpPMXh1SUNCcFppQW9TMnhoYzNNdWFXNXpkR0Z1WTJWUWIyOXNMbXhsYm1kMGFDa2dlMXh1SUNBZ0lIWmhjaUJwYm5OMFlXNWpaU0E5SUV0c1lYTnpMbWx1YzNSaGJtTmxVRzl2YkM1d2IzQW9LVHRjYmlBZ0lDQkxiR0Z6Y3k1allXeHNLR2x1YzNSaGJtTmxMQ0JoTVN3Z1lUSXNJR0V6TENCaE5DazdYRzRnSUNBZ2NtVjBkWEp1SUdsdWMzUmhibU5sTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1MyeGhjM01vWVRFc0lHRXlMQ0JoTXl3Z1lUUXBPMXh1SUNCOVhHNTlPMXh1WEc1MllYSWdabWwyWlVGeVozVnRaVzUwVUc5dmJHVnlJRDBnWm5WdVkzUnBiMjRnS0dFeExDQmhNaXdnWVRNc0lHRTBMQ0JoTlNrZ2UxeHVJQ0IyWVhJZ1MyeGhjM01nUFNCMGFHbHpPMXh1SUNCcFppQW9TMnhoYzNNdWFXNXpkR0Z1WTJWUWIyOXNMbXhsYm1kMGFDa2dlMXh1SUNBZ0lIWmhjaUJwYm5OMFlXNWpaU0E5SUV0c1lYTnpMbWx1YzNSaGJtTmxVRzl2YkM1d2IzQW9LVHRjYmlBZ0lDQkxiR0Z6Y3k1allXeHNLR2x1YzNSaGJtTmxMQ0JoTVN3Z1lUSXNJR0V6TENCaE5Dd2dZVFVwTzF4dUlDQWdJSEpsZEhWeWJpQnBibk4wWVc1alpUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRXRzWVhOektHRXhMQ0JoTWl3Z1lUTXNJR0UwTENCaE5TazdYRzRnSUgxY2JuMDdYRzVjYm5aaGNpQnpkR0Z1WkdGeVpGSmxiR1ZoYzJWeUlEMGdablZ1WTNScGIyNGdLR2x1YzNSaGJtTmxLU0I3WEc0Z0lIWmhjaUJMYkdGemN5QTlJSFJvYVhNN1hHNGdJQ0VvYVc1emRHRnVZMlVnYVc1emRHRnVZMlZ2WmlCTGJHRnpjeWtnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5WSEo1YVc1bklIUnZJSEpsYkdWaGMyVWdZVzRnYVc1emRHRnVZMlVnYVc1MGJ5QmhJSEJ2YjJ3Z2IyWWdZU0JrYVdabVpYSmxiblFnZEhsd1pTNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJR2x1YzNSaGJtTmxMbVJsYzNSeWRXTjBiM0lvS1R0Y2JpQWdhV1lnS0V0c1lYTnpMbWx1YzNSaGJtTmxVRzl2YkM1c1pXNW5kR2dnUENCTGJHRnpjeTV3YjI5c1UybDZaU2tnZTF4dUlDQWdJRXRzWVhOekxtbHVjM1JoYm1ObFVHOXZiQzV3ZFhOb0tHbHVjM1JoYm1ObEtUdGNiaUFnZlZ4dWZUdGNibHh1ZG1GeUlFUkZSa0ZWVEZSZlVFOVBURjlUU1ZwRklEMGdNVEE3WEc1MllYSWdSRVZHUVZWTVZGOVFUMDlNUlZJZ1BTQnZibVZCY21kMWJXVnVkRkJ2YjJ4bGNqdGNibHh1THlvcVhHNGdLaUJCZFdkdFpXNTBjeUJnUTI5d2VVTnZibk4wY25WamRHOXlZQ0IwYnlCaVpTQmhJSEJ2YjJ4aFlteGxJR05zWVhOekxDQmhkV2R0Wlc1MGFXNW5JRzl1YkhrZ2RHaGxJR05zWVhOelhHNGdLaUJwZEhObGJHWWdLSE4wWVhScFkyRnNiSGtwSUc1dmRDQmhaR1JwYm1jZ1lXNTVJSEJ5YjNSdmRIbHdhV05oYkNCbWFXVnNaSE11SUVGdWVTQkRiM0I1UTI5dWMzUnlkV04wYjNKY2JpQXFJSGx2ZFNCbmFYWmxJSFJvYVhNZ2JXRjVJR2hoZG1VZ1lTQmdjRzl2YkZOcGVtVmdJSEJ5YjNCbGNuUjVMQ0JoYm1RZ2QybHNiQ0JzYjI5cklHWnZjaUJoWEc0Z0tpQndjbTkwYjNSNWNHbGpZV3dnWUdSbGMzUnlkV04wYjNKZ0lHOXVJR2x1YzNSaGJtTmxjeUFvYjNCMGFXOXVZV3dwTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUVOdmNIbERiMjV6ZEhKMVkzUnZjaUJEYjI1emRISjFZM1J2Y2lCMGFHRjBJR05oYmlCaVpTQjFjMlZrSUhSdklISmxjMlYwTGx4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdjRzl2YkdWeUlFTjFjM1J2YldsNllXSnNaU0J3YjI5c1pYSXVYRzRnS2k5Y2JuWmhjaUJoWkdSUWIyOXNhVzVuVkc4Z1BTQm1kVzVqZEdsdmJpQW9RMjl3ZVVOdmJuTjBjblZqZEc5eUxDQndiMjlzWlhJcElIdGNiaUFnZG1GeUlFNWxkMHRzWVhOeklEMGdRMjl3ZVVOdmJuTjBjblZqZEc5eU8xeHVJQ0JPWlhkTGJHRnpjeTVwYm5OMFlXNWpaVkJ2YjJ3Z1BTQmJYVHRjYmlBZ1RtVjNTMnhoYzNNdVoyVjBVRzl2YkdWa0lEMGdjRzl2YkdWeUlIeDhJRVJGUmtGVlRGUmZVRTlQVEVWU08xeHVJQ0JwWmlBb0lVNWxkMHRzWVhOekxuQnZiMnhUYVhwbEtTQjdYRzRnSUNBZ1RtVjNTMnhoYzNNdWNHOXZiRk5wZW1VZ1BTQkVSVVpCVlV4VVgxQlBUMHhmVTBsYVJUdGNiaUFnZlZ4dUlDQk9aWGRMYkdGemN5NXlaV3hsWVhObElEMGdjM1JoYm1SaGNtUlNaV3hsWVhObGNqdGNiaUFnY21WMGRYSnVJRTVsZDB0c1lYTnpPMXh1ZlR0Y2JseHVkbUZ5SUZCdmIyeGxaRU5zWVhOeklEMGdlMXh1SUNCaFpHUlFiMjlzYVc1blZHODZJR0ZrWkZCdmIyeHBibWRVYnl4Y2JpQWdiMjVsUVhKbmRXMWxiblJRYjI5c1pYSTZJRzl1WlVGeVozVnRaVzUwVUc5dmJHVnlMRnh1SUNCMGQyOUJjbWQxYldWdWRGQnZiMnhsY2pvZ2RIZHZRWEpuZFcxbGJuUlFiMjlzWlhJc1hHNGdJSFJvY21WbFFYSm5kVzFsYm5SUWIyOXNaWEk2SUhSb2NtVmxRWEpuZFcxbGJuUlFiMjlzWlhJc1hHNGdJR1p2ZFhKQmNtZDFiV1Z1ZEZCdmIyeGxjam9nWm05MWNrRnlaM1Z0Wlc1MFVHOXZiR1Z5TEZ4dUlDQm1hWFpsUVhKbmRXMWxiblJRYjI5c1pYSTZJR1pwZG1WQmNtZDFiV1Z1ZEZCdmIyeGxjbHh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlFiMjlzWldSRGJHRnpjenNpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgnLi9SZWFjdERPTScpO1xudmFyIFJlYWN0RE9NU2VydmVyID0gcmVxdWlyZSgnLi9SZWFjdERPTVNlcnZlcicpO1xudmFyIFJlYWN0SXNvbW9ycGhpYyA9IHJlcXVpcmUoJy4vUmVhY3RJc29tb3JwaGljJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBkZXByZWNhdGVkID0gcmVxdWlyZSgnLi9kZXByZWNhdGVkJyk7XG5cbi8vIGB2ZXJzaW9uYCB3aWxsIGJlIGFkZGVkIGhlcmUgYnkgUmVhY3RJc29tb3JwaGljLlxudmFyIFJlYWN0ID0ge307XG5cbmFzc2lnbihSZWFjdCwgUmVhY3RJc29tb3JwaGljKTtcblxuYXNzaWduKFJlYWN0LCB7XG4gIC8vIFJlYWN0RE9NXG4gIGZpbmRET01Ob2RlOiBkZXByZWNhdGVkKCdmaW5kRE9NTm9kZScsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00uZmluZERPTU5vZGUpLFxuICByZW5kZXI6IGRlcHJlY2F0ZWQoJ3JlbmRlcicsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00ucmVuZGVyKSxcbiAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogZGVwcmVjYXRlZCgndW5tb3VudENvbXBvbmVudEF0Tm9kZScsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSksXG5cbiAgLy8gUmVhY3RET01TZXJ2ZXJcbiAgcmVuZGVyVG9TdHJpbmc6IGRlcHJlY2F0ZWQoJ3JlbmRlclRvU3RyaW5nJywgJ1JlYWN0RE9NU2VydmVyJywgJ3JlYWN0LWRvbS9zZXJ2ZXInLCBSZWFjdERPTVNlcnZlciwgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcpLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogZGVwcmVjYXRlZCgncmVuZGVyVG9TdGF0aWNNYXJrdXAnLCAnUmVhY3RET01TZXJ2ZXInLCAncmVhY3QtZG9tL3NlcnZlcicsIFJlYWN0RE9NU2VydmVyLCBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0YXRpY01hcmt1cClcbn0pO1xuXG5SZWFjdC5fX1NFQ1JFVF9ET01fRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCA9IFJlYWN0RE9NO1xuUmVhY3QuX19TRUNSRVRfRE9NX1NFUlZFUl9ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEID0gUmVhY3RET01TZXJ2ZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcblxudmFyIGZpbmRET01Ob2RlID0gcmVxdWlyZSgnLi9maW5kRE9NTm9kZScpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkaWRXYXJuS2V5ID0gJ19nZXRET01Ob2RlRGlkV2Fybic7XG5cbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIERPTSBub2RlIHJlbmRlcmVkIGJ5IHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSBUaGUgcm9vdCBub2RlIG9mIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZmluYWxcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZ2V0RE9NTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHRoaXMuY29uc3RydWN0b3JbZGlkV2FybktleV0sICclcy5nZXRET01Ob2RlKC4uLikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSAnICsgJ1JlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKSBpbnN0ZWFkLicsIFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHRoaXMpLmdldE5hbWUoKSB8fCB0aGlzLnRhZ05hbWUgfHwgJ1Vua25vd24nKSA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbnN0cnVjdG9yW2RpZFdhcm5LZXldID0gdHJ1ZTtcbiAgICByZXR1cm4gZmluZERPTU5vZGUodGhpcyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW47XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkNjbTkzYzJWeVEyOXRjRzl1Wlc1MFRXbDRhVzR1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZKbFlXTjBRbkp2ZDNObGNrTnZiWEJ2Ym1WdWRFMXBlR2x1WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1VtVmhZM1JKYm5OMFlXNWpaVTFoY0NBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSSmJuTjBZVzVqWlUxaGNDY3BPMXh1WEc1MllYSWdabWx1WkVSUFRVNXZaR1VnUFNCeVpYRjFhWEpsS0NjdUwyWnBibVJFVDAxT2IyUmxKeWs3WEc1MllYSWdkMkZ5Ym1sdVp5QTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMM2RoY201cGJtY25LVHRjYmx4dWRtRnlJR1JwWkZkaGNtNUxaWGtnUFNBblgyZGxkRVJQVFU1dlpHVkVhV1JYWVhKdUp6dGNibHh1ZG1GeUlGSmxZV04wUW5KdmQzTmxja052YlhCdmJtVnVkRTFwZUdsdUlEMGdlMXh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdSRTlOSUc1dlpHVWdjbVZ1WkdWeVpXUWdZbmtnZEdocGN5QmpiMjF3YjI1bGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBSUFRVVnNaVzFsYm5SOUlGUm9aU0J5YjI5MElHNXZaR1VnYjJZZ2RHaHBjeUJqYjIxd2IyNWxiblF1WEc0Z0lDQXFJRUJtYVc1aGJGeHVJQ0FnS2lCQWNISnZkR1ZqZEdWa1hHNGdJQ0FxTDF4dUlDQm5aWFJFVDAxT2IyUmxPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb2RHaHBjeTVqYjI1emRISjFZM1J2Y2x0a2FXUlhZWEp1UzJWNVhTd2dKeVZ6TG1kbGRFUlBUVTV2WkdVb0xpNHVLU0JwY3lCa1pYQnlaV05oZEdWa0xpQlFiR1ZoYzJVZ2RYTmxJQ2NnS3lBblVtVmhZM1JFVDAwdVptbHVaRVJQVFU1dlpHVW9hVzV6ZEdGdVkyVXBJR2x1YzNSbFlXUXVKeXdnVW1WaFkzUkpibk4wWVc1alpVMWhjQzVuWlhRb2RHaHBjeWt1WjJWMFRtRnRaU2dwSUh4OElIUm9hWE11ZEdGblRtRnRaU0I4ZkNBblZXNXJibTkzYmljcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lIUm9hWE11WTI5dWMzUnlkV04wYjNKYlpHbGtWMkZ5Ymt0bGVWMGdQU0IwY25WbE8xeHVJQ0FnSUhKbGRIVnliaUJtYVc1a1JFOU5UbTlrWlNoMGFHbHpLVHRjYmlBZ2ZWeHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRUp5YjNkelpYSkRiMjF3YjI1bGJuUk5hWGhwYmpzaVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0gcmVxdWlyZSgnLi9SZWFjdEV2ZW50RW1pdHRlck1peGluJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKCcuL1ZpZXdwb3J0TWV0cmljcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xuXG4vKipcbiAqIFN1bW1hcnkgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgZXZlbnQgaGFuZGxpbmc6XG4gKlxuICogIC0gVG9wLWxldmVsIGRlbGVnYXRpb24gaXMgdXNlZCB0byB0cmFwIG1vc3QgbmF0aXZlIGJyb3dzZXIgZXZlbnRzLiBUaGlzXG4gKiAgICBtYXkgb25seSBvY2N1ciBpbiB0aGUgbWFpbiB0aHJlYWQgYW5kIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZlxuICogICAgUmVhY3RFdmVudExpc3RlbmVyLCB3aGljaCBpcyBpbmplY3RlZCBhbmQgY2FuIHRoZXJlZm9yZSBzdXBwb3J0IHBsdWdnYWJsZVxuICogICAgZXZlbnQgc291cmNlcy4gVGhpcyBpcyB0aGUgb25seSB3b3JrIHRoYXQgb2NjdXJzIGluIHRoZSBtYWluIHRocmVhZC5cbiAqXG4gKiAgLSBXZSBub3JtYWxpemUgYW5kIGRlLWR1cGxpY2F0ZSBldmVudHMgdG8gYWNjb3VudCBmb3IgYnJvd3NlciBxdWlya3MuIFRoaXNcbiAqICAgIG1heSBiZSBkb25lIGluIHRoZSB3b3JrZXIgdGhyZWFkLlxuICpcbiAqICAtIEZvcndhcmQgdGhlc2UgbmF0aXZlIGV2ZW50cyAod2l0aCB0aGUgYXNzb2NpYXRlZCB0b3AtbGV2ZWwgdHlwZSB1c2VkIHRvXG4gKiAgICB0cmFwIGl0KSB0byBgRXZlbnRQbHVnaW5IdWJgLCB3aGljaCBpbiB0dXJuIHdpbGwgYXNrIHBsdWdpbnMgaWYgdGhleSB3YW50XG4gKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHdpbGwgdGhlbiBwcm9jZXNzIGVhY2ggZXZlbnQgYnkgYW5ub3RhdGluZyB0aGVtIHdpdGhcbiAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHRoZW4gZGlzcGF0Y2hlcyB0aGUgZXZlbnRzLlxuICpcbiAqIE92ZXJ2aWV3IG9mIFJlYWN0IGFuZCB0aGUgZXZlbnQgc3lzdGVtOlxuICpcbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgICAgRE9NICAgICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqICAgICAgIHwgICAgICAgICAgIC5cbiAqICAgICAgIHYgICAgICAgICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgUmVhY3RFdmVudCB8ICAgIC5cbiAqIHwgIExpc3RlbmVyICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgfCAgICAgICAgIHxQbHVnaW4gICAgIHxcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICB2ICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58RXZlbnRQbHVnaW5IdWJ8ICAgICAgICAgICAgICAgICAgICB8ICAgIEV2ZW50ICAgfFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8IFByb3BhZ2F0b3JzfFxuICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuICogfCAgRW1pdHRlciAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8PC0tLSt8UGx1Z2luICAgICB8ICB8b3RoZXIgcGx1Z2lufFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8ICB1dGlsaXRpZXMgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rXG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgIF4gICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuICogICAgICAgKyAgICAgICAgICAgLiAgICAgICAgICAgICAgICArLS0tLS0tLSt8UGx1Z2luICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSsgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgYXBwbGljYXRpb24gfCAgIC5cbiAqIHwtLS0tLS0tLS0tLS0tfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqICstLS0tLS0tLS0tLS0tKyAgIC5cbiAqICAgICAgICAgICAgICAgICAgIC5cbiAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG4gKi9cblxudmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xudmFyIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gZmFsc2U7XG52YXIgcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyID0gMDtcblxuLy8gRm9yIGV2ZW50cyBsaWtlICdzdWJtaXQnIHdoaWNoIGRvbid0IGNvbnNpc3RlbnRseSBidWJibGUgKHdoaWNoIHdlIHRyYXAgYXQgYVxuLy8gbG93ZXIgbm9kZSB0aGFuIGBkb2N1bWVudGApLCBiaW5kaW5nIGF0IGBkb2N1bWVudGAgd291bGQgY2F1c2UgZHVwbGljYXRlXG4vLyBldmVudHMgc28gd2UgZG9uJ3QgaW5jbHVkZSB0aGVtIGhlcmVcbnZhciB0b3BFdmVudE1hcHBpbmcgPSB7XG4gIHRvcEFib3J0OiAnYWJvcnQnLFxuICB0b3BCbHVyOiAnYmx1cicsXG4gIHRvcENhblBsYXk6ICdjYW5wbGF5JyxcbiAgdG9wQ2FuUGxheVRocm91Z2g6ICdjYW5wbGF5dGhyb3VnaCcsXG4gIHRvcENoYW5nZTogJ2NoYW5nZScsXG4gIHRvcENsaWNrOiAnY2xpY2snLFxuICB0b3BDb21wb3NpdGlvbkVuZDogJ2NvbXBvc2l0aW9uZW5kJyxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogJ2NvbXBvc2l0aW9uc3RhcnQnLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogJ2NvbXBvc2l0aW9udXBkYXRlJyxcbiAgdG9wQ29udGV4dE1lbnU6ICdjb250ZXh0bWVudScsXG4gIHRvcENvcHk6ICdjb3B5JyxcbiAgdG9wQ3V0OiAnY3V0JyxcbiAgdG9wRG91YmxlQ2xpY2s6ICdkYmxjbGljaycsXG4gIHRvcERyYWc6ICdkcmFnJyxcbiAgdG9wRHJhZ0VuZDogJ2RyYWdlbmQnLFxuICB0b3BEcmFnRW50ZXI6ICdkcmFnZW50ZXInLFxuICB0b3BEcmFnRXhpdDogJ2RyYWdleGl0JyxcbiAgdG9wRHJhZ0xlYXZlOiAnZHJhZ2xlYXZlJyxcbiAgdG9wRHJhZ092ZXI6ICdkcmFnb3ZlcicsXG4gIHRvcERyYWdTdGFydDogJ2RyYWdzdGFydCcsXG4gIHRvcERyb3A6ICdkcm9wJyxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6ICdkdXJhdGlvbmNoYW5nZScsXG4gIHRvcEVtcHRpZWQ6ICdlbXB0aWVkJyxcbiAgdG9wRW5jcnlwdGVkOiAnZW5jcnlwdGVkJyxcbiAgdG9wRW5kZWQ6ICdlbmRlZCcsXG4gIHRvcEVycm9yOiAnZXJyb3InLFxuICB0b3BGb2N1czogJ2ZvY3VzJyxcbiAgdG9wSW5wdXQ6ICdpbnB1dCcsXG4gIHRvcEtleURvd246ICdrZXlkb3duJyxcbiAgdG9wS2V5UHJlc3M6ICdrZXlwcmVzcycsXG4gIHRvcEtleVVwOiAna2V5dXAnLFxuICB0b3BMb2FkZWREYXRhOiAnbG9hZGVkZGF0YScsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiAnbG9hZGVkbWV0YWRhdGEnLFxuICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICB0b3BNb3VzZURvd246ICdtb3VzZWRvd24nLFxuICB0b3BNb3VzZU1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3BNb3VzZU91dDogJ21vdXNlb3V0JyxcbiAgdG9wTW91c2VPdmVyOiAnbW91c2VvdmVyJyxcbiAgdG9wTW91c2VVcDogJ21vdXNldXAnLFxuICB0b3BQYXN0ZTogJ3Bhc3RlJyxcbiAgdG9wUGF1c2U6ICdwYXVzZScsXG4gIHRvcFBsYXk6ICdwbGF5JyxcbiAgdG9wUGxheWluZzogJ3BsYXlpbmcnLFxuICB0b3BQcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICB0b3BTY3JvbGw6ICdzY3JvbGwnLFxuICB0b3BTZWVrZWQ6ICdzZWVrZWQnLFxuICB0b3BTZWVraW5nOiAnc2Vla2luZycsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogJ3NlbGVjdGlvbmNoYW5nZScsXG4gIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgdG9wU3VzcGVuZDogJ3N1c3BlbmQnLFxuICB0b3BUZXh0SW5wdXQ6ICd0ZXh0SW5wdXQnLFxuICB0b3BUaW1lVXBkYXRlOiAndGltZXVwZGF0ZScsXG4gIHRvcFRvdWNoQ2FuY2VsOiAndG91Y2hjYW5jZWwnLFxuICB0b3BUb3VjaEVuZDogJ3RvdWNoZW5kJyxcbiAgdG9wVG91Y2hNb3ZlOiAndG91Y2htb3ZlJyxcbiAgdG9wVG91Y2hTdGFydDogJ3RvdWNoc3RhcnQnLFxuICB0b3BWb2x1bWVDaGFuZ2U6ICd2b2x1bWVjaGFuZ2UnLFxuICB0b3BXYWl0aW5nOiAnd2FpdGluZycsXG4gIHRvcFdoZWVsOiAnd2hlZWwnXG59O1xuXG4vKipcbiAqIFRvIGVuc3VyZSBubyBjb25mbGljdHMgd2l0aCBvdGhlciBwb3RlbnRpYWwgUmVhY3QgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gKi9cbnZhciB0b3BMaXN0ZW5lcnNJREtleSA9ICdfcmVhY3RMaXN0ZW5lcnNJRCcgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgLy8gSW4gSUU4LCBgbW91bnRBdGAgaXMgYSBob3N0IG9iamVjdCBhbmQgZG9lc24ndCBoYXZlIGBoYXNPd25Qcm9wZXJ0eWBcbiAgLy8gZGlyZWN0bHkuXG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vdW50QXQsIHRvcExpc3RlbmVyc0lES2V5KSkge1xuICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG4gICAgYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXSA9IHt9O1xuICB9XG4gIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xufVxuXG4vKipcbiAqIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGlzIHVzZWQgdG8gYXR0YWNoIHRvcC1sZXZlbCBldmVudCBsaXN0ZW5lcnMuIEZvclxuICogZXhhbXBsZTpcbiAqXG4gKiAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcignbXlJRCcsICdvbkNsaWNrJywgbXlGdW5jdGlvbik7XG4gKlxuICogVGhpcyB3b3VsZCBhbGxvY2F0ZSBhIFwicmVnaXN0cmF0aW9uXCIgb2YgYCgnb25DbGljaycsIG15RnVuY3Rpb24pYCBvbiAnbXlJRCcuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSBhc3NpZ24oe30sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHtcblxuICAvKipcbiAgICogSW5qZWN0YWJsZSBldmVudCBiYWNrZW5kXG4gICAqL1xuICBSZWFjdEV2ZW50TGlzdGVuZXI6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFJlYWN0RXZlbnRMaXN0ZW5lclxuICAgICAqL1xuICAgIGluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKFJlYWN0RXZlbnRMaXN0ZW5lcikge1xuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLnNldEhhbmRsZVRvcExldmVsKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbCk7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyID0gUmVhY3RFdmVudExpc3RlbmVyO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIG9yIG5vdCBhbnkgY3JlYXRlZCBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBUcnVlIGlmIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICovXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuc2V0RW5hYmxlZChlbmFibGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgY2FsbGJhY2tzIGFyZSBlbmFibGVkLlxuICAgKi9cbiAgaXNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgJiYgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5pc0VuYWJsZWQoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICpcbiAgICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuICAgKiBlbGVtZW50LiBUaGUgc3ltcHRvbXMgd2VyZSB0aGF0IGlmIHlvdXIgbW91c2UgaXMgbm90IG1vdmluZyBvdmVyIHNvbWV0aGluZ1xuICAgKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuICAgKiByZWdpc3RlciB0aGUgYG1vdXNlbW92ZWAgb24gdGhlIGRvY3VtZW50IG9iamVjdCwgdGhlbiBpdCB3aWxsIG9mIGNvdXJzZVxuICAgKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2VcbiAgICogbW92ZW1lbnQgdHlwZXMgb2YgZXZlbnRzIGFuZCBwb3NzaWJseSBhbGwgZXZlbnRzLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gICAqXG4gICAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcbiAgICovXG4gIGxpc3RlblRvOiBmdW5jdGlvbiAocmVnaXN0cmF0aW9uTmFtZSwgY29udGVudERvY3VtZW50SGFuZGxlKSB7XG4gICAgdmFyIG1vdW50QXQgPSBjb250ZW50RG9jdW1lbnRIYW5kbGU7XG4gICAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXTtcblxuICAgIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmNpZXNbaV07XG4gICAgICBpZiAoIShpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSkpIHtcbiAgICAgICAgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wV2hlZWwpIHtcbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wV2hlZWwsICd3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnbW91c2V3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BXaGVlbCwgJ21vdXNld2hlZWwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmlyZWZveCBuZWVkcyB0byBjYXB0dXJlIGEgZGlmZmVyZW50IG1vdXNlIHNjcm9sbCBldmVudC5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9kb20vZXZlbnRzL3Rlc3RzL3Njcm9sbC5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BXaGVlbCwgJ0RPTU1vdXNlU2Nyb2xsJywgbW91bnRBdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wU2Nyb2xsKSB7XG5cbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsICdzY3JvbGwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLCAnc2Nyb2xsJywgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5XSU5ET1dfSEFORExFKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyB8fCBkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcblxuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1cycsIHRydWUpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wRm9jdXMsICdmb2N1cycsIG1vdW50QXQpO1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcEJsdXIsICdibHVyJywgbW91bnRBdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1c2luJykpIHtcbiAgICAgICAgICAgIC8vIElFIGhhcyBgZm9jdXNpbmAgYW5kIGBmb2N1c291dGAgZXZlbnRzIHdoaWNoIGJ1YmJsZS5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMDgvMDQvZGVsZWdhdGluZ190aGUuaHRtbFxuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wRm9jdXMsICdmb2N1c2luJywgbW91bnRBdCk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BCbHVyLCAnZm9jdXNvdXQnLCBtb3VudEF0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgYmx1ciBhbmQgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IGF0dGFjaGVkIG9uY2VcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEJsdXJdID0gdHJ1ZTtcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEZvY3VzXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9wRXZlbnRNYXBwaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KGRlcGVuZGVuY3ksIHRvcEV2ZW50TWFwcGluZ1tkZXBlbmRlbmN5XSwgbW91bnRBdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKTtcbiAgfSxcblxuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKTtcbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVucyB0byB3aW5kb3cgc2Nyb2xsIGFuZCByZXNpemUgZXZlbnRzLiBXZSBjYWNoZSBzY3JvbGwgdmFsdWVzIHNvIHRoYXRcbiAgICogYXBwbGljYXRpb24gY29kZSBjYW4gYWNjZXNzIHRoZW0gd2l0aG91dCB0cmlnZ2VyaW5nIHJlZmxvd3MuXG4gICAqXG4gICAqIE5PVEU6IFNjcm9sbCBldmVudHMgZG8gbm90IGJ1YmJsZS5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvc2Nyb2xsLmh0bWxcbiAgICovXG4gIGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzogZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUpIHtcbiAgICAgIHZhciByZWZyZXNoID0gVmlld3BvcnRNZXRyaWNzLnJlZnJlc2hTY3JvbGxWYWx1ZXM7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLm1vbml0b3JTY3JvbGxWYWx1ZShyZWZyZXNoKTtcbiAgICAgIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiBFdmVudFBsdWdpbkh1Yi5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MsXG5cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luSHViLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXG4gIHB1dExpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcixcblxuICBnZXRMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXIsXG5cbiAgZGVsZXRlTGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUxpc3RlbmVyLFxuXG4gIGRlbGV0ZUFsbExpc3RlbmVyczogRXZlbnRQbHVnaW5IdWIuZGVsZXRlQWxsTGlzdGVuZXJzXG5cbn0pO1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLCAnUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJywge1xuICBwdXRMaXN0ZW5lcjogJ3B1dExpc3RlbmVyJyxcbiAgZGVsZXRlTGlzdGVuZXI6ICdkZWxldGVMaXN0ZW5lcidcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCcuL1JlYWN0Jyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcblxudmFyIFJlYWN0VHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZSgnLi9SZWFjdFRyYW5zaXRpb25Hcm91cCcpO1xudmFyIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgPSByZXF1aXJlKCcuL1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQnKTtcblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvblRpbWVvdXRQcm9wVmFsaWRhdG9yKHRyYW5zaXRpb25UeXBlKSB7XG4gIHZhciB0aW1lb3V0UHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZSArICdUaW1lb3V0JztcbiAgdmFyIGVuYWJsZWRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAvLyBJZiB0aGUgdHJhbnNpdGlvbiBpcyBlbmFibGVkXG4gICAgaWYgKHByb3BzW2VuYWJsZWRQcm9wTmFtZV0pIHtcbiAgICAgIC8vIElmIG5vIHRpbWVvdXQgZHVyYXRpb24gaXMgcHJvdmlkZWRcbiAgICAgIGlmIChwcm9wc1t0aW1lb3V0UHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIHdhc25cXCd0IHN1cHBsaWVkIHRvIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwOiAnICsgJ3RoaXMgY2FuIGNhdXNlIHVucmVsaWFibGUgYW5pbWF0aW9ucyBhbmQgd29uXFwndCBiZSBzdXBwb3J0ZWQgaW4gJyArICdhIGZ1dHVyZSB2ZXJzaW9uIG9mIFJlYWN0LiBTZWUgJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWFuaW1hdGlvbi10cmFuc2l0aW9uLWdyb3VwLXRpbWVvdXQgZm9yIG1vcmUgJyArICdpbmZvcm1hdGlvbi4nKTtcblxuICAgICAgICAvLyBJZiB0aGUgZHVyYXRpb24gaXNuJ3QgYSBudW1iZXJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzW3RpbWVvdXRQcm9wTmFtZV0gIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIG11c3QgYmUgYSBudW1iZXIgKGluIG1pbGxpc2Vjb25kcyknKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwJyxcblxuICBwcm9wVHlwZXM6IHtcbiAgICB0cmFuc2l0aW9uTmFtZTogUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5wcm9wVHlwZXMubmFtZSxcblxuICAgIHRyYW5zaXRpb25BcHBlYXI6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHRyYW5zaXRpb25FbnRlcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgdHJhbnNpdGlvbkxlYXZlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB0cmFuc2l0aW9uQXBwZWFyVGltZW91dDogY3JlYXRlVHJhbnNpdGlvblRpbWVvdXRQcm9wVmFsaWRhdG9yKCdBcHBlYXInKSxcbiAgICB0cmFuc2l0aW9uRW50ZXJUaW1lb3V0OiBjcmVhdGVUcmFuc2l0aW9uVGltZW91dFByb3BWYWxpZGF0b3IoJ0VudGVyJyksXG4gICAgdHJhbnNpdGlvbkxlYXZlVGltZW91dDogY3JlYXRlVHJhbnNpdGlvblRpbWVvdXRQcm9wVmFsaWRhdG9yKCdMZWF2ZScpXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25BcHBlYXI6IGZhbHNlLFxuICAgICAgdHJhbnNpdGlvbkVudGVyOiB0cnVlLFxuICAgICAgdHJhbnNpdGlvbkxlYXZlOiB0cnVlXG4gICAgfTtcbiAgfSxcblxuICBfd3JhcENoaWxkOiBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBXZSBuZWVkIHRvIHByb3ZpZGUgdGhpcyBjaGlsZEZhY3Rvcnkgc28gdGhhdFxuICAgIC8vIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgY2FuIHJlY2VpdmUgdXBkYXRlcyB0byBuYW1lLCBlbnRlciwgYW5kXG4gICAgLy8gbGVhdmUgd2hpbGUgaXQgaXMgbGVhdmluZy5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkLCB7XG4gICAgICBuYW1lOiB0aGlzLnByb3BzLnRyYW5zaXRpb25OYW1lLFxuICAgICAgYXBwZWFyOiB0aGlzLnByb3BzLnRyYW5zaXRpb25BcHBlYXIsXG4gICAgICBlbnRlcjogdGhpcy5wcm9wcy50cmFuc2l0aW9uRW50ZXIsXG4gICAgICBsZWF2ZTogdGhpcy5wcm9wcy50cmFuc2l0aW9uTGVhdmUsXG4gICAgICBhcHBlYXJUaW1lb3V0OiB0aGlzLnByb3BzLnRyYW5zaXRpb25BcHBlYXJUaW1lb3V0LFxuICAgICAgZW50ZXJUaW1lb3V0OiB0aGlzLnByb3BzLnRyYW5zaXRpb25FbnRlclRpbWVvdXQsXG4gICAgICBsZWF2ZVRpbWVvdXQ6IHRoaXMucHJvcHMudHJhbnNpdGlvbkxlYXZlVGltZW91dFxuICAgIH0sIGNoaWxkKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdFRyYW5zaXRpb25Hcm91cCwgYXNzaWduKHt9LCB0aGlzLnByb3BzLCB7IGNoaWxkRmFjdG9yeTogdGhpcy5fd3JhcENoaWxkIH0pKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXA7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCcuL1JlYWN0Jyk7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKCcuL1JlYWN0RE9NJyk7XG5cbnZhciBDU1NDb3JlID0gcmVxdWlyZSgnZmJqcy9saWIvQ1NTQ29yZScpO1xudmFyIFJlYWN0VHJhbnNpdGlvbkV2ZW50cyA9IHJlcXVpcmUoJy4vUmVhY3RUcmFuc2l0aW9uRXZlbnRzJyk7XG5cbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKCcuL29ubHlDaGlsZCcpO1xuXG4vLyBXZSBkb24ndCByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NIHVudGlsIHdlIHJlY2VpdmUgYW4gYW5pbWF0aW9uZW5kIG9yXG4vLyB0cmFuc2l0aW9uZW5kIGV2ZW50LiBJZiB0aGUgdXNlciBzY3Jld3MgdXAgYW5kIGZvcmdldHMgdG8gYWRkIGFuIGFuaW1hdGlvblxuLy8gdGhlaXIgbm9kZSB3aWxsIGJlIHN0dWNrIGluIHRoZSBET00gZm9yZXZlciwgc28gd2UgZGV0ZWN0IGlmIGFuIGFuaW1hdGlvblxuLy8gZG9lcyBub3Qgc3RhcnQgYW5kIGlmIGl0IGRvZXNuJ3QsIHdlIGp1c3QgY2FsbCB0aGUgZW5kIGxpc3RlbmVyIGltbWVkaWF0ZWx5LlxudmFyIFRJQ0sgPSAxNztcblxudmFyIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCcsXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgbmFtZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZShbUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGVudGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgbGVhdmU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBhY3RpdmU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcbiAgICB9KSwgUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGVudGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgZW50ZXJBY3RpdmU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBsZWF2ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGxlYXZlQWN0aXZlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgYXBwZWFyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgYXBwZWFyQWN0aXZlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gICAgfSldKS5pc1JlcXVpcmVkLFxuXG4gICAgLy8gT25jZSB3ZSByZXF1aXJlIHRpbWVvdXRzIHRvIGJlIHNwZWNpZmllZCwgd2UgY2FuIHJlbW92ZSB0aGVcbiAgICAvLyBib29sZWFuIGZsYWdzIChhcHBlYXIgZXRjLikgYW5kIGp1c3QgYWNjZXB0IGEgbnVtYmVyXG4gICAgLy8gb3IgYSBib29sIGZvciB0aGUgdGltZW91dCBmbGFncyAoYXBwZWFyVGltZW91dCBldGMuKVxuICAgIGFwcGVhcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZW50ZXI6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGxlYXZlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBhcHBlYXJUaW1lb3V0OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyVGltZW91dDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBsZWF2ZVRpbWVvdXQ6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICB0cmFuc2l0aW9uOiBmdW5jdGlvbiAoYW5pbWF0aW9uVHlwZSwgZmluaXNoQ2FsbGJhY2ssIHVzZXJTcGVjaWZpZWREZWxheSkge1xuICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIGlmIChmaW5pc2hDYWxsYmFjaykge1xuICAgICAgICBmaW5pc2hDYWxsYmFjaygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLnByb3BzLm5hbWVbYW5pbWF0aW9uVHlwZV0gfHwgdGhpcy5wcm9wcy5uYW1lICsgJy0nICsgYW5pbWF0aW9uVHlwZTtcbiAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gdGhpcy5wcm9wcy5uYW1lW2FuaW1hdGlvblR5cGUgKyAnQWN0aXZlJ10gfHwgY2xhc3NOYW1lICsgJy1hY3RpdmUnO1xuICAgIHZhciB0aW1lb3V0ID0gbnVsbDtcblxuICAgIHZhciBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gbm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgICAgQ1NTQ29yZS5yZW1vdmVDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xuICAgICAgQ1NTQ29yZS5yZW1vdmVDbGFzcyhub2RlLCBhY3RpdmVDbGFzc05hbWUpO1xuXG4gICAgICBSZWFjdFRyYW5zaXRpb25FdmVudHMucmVtb3ZlRW5kRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRMaXN0ZW5lcik7XG5cbiAgICAgIC8vIFVzdWFsbHkgdGhpcyBvcHRpb25hbCBjYWxsYmFjayBpcyB1c2VkIGZvciBpbmZvcm1pbmcgYW4gb3duZXIgb2ZcbiAgICAgIC8vIGEgbGVhdmUgYW5pbWF0aW9uIGFuZCB0ZWxsaW5nIGl0IHRvIHJlbW92ZSB0aGUgY2hpbGQuXG4gICAgICBpZiAoZmluaXNoQ2FsbGJhY2spIHtcbiAgICAgICAgZmluaXNoQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ1NTQ29yZS5hZGRDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xuXG4gICAgLy8gTmVlZCB0byBkbyB0aGlzIHRvIGFjdHVhbGx5IHRyaWdnZXIgYSB0cmFuc2l0aW9uLlxuICAgIHRoaXMucXVldWVDbGFzcyhhY3RpdmVDbGFzc05hbWUpO1xuXG4gICAgLy8gSWYgdGhlIHVzZXIgc3BlY2lmaWVkIGEgdGltZW91dCBkZWxheS5cbiAgICBpZiAodXNlclNwZWNpZmllZERlbGF5KSB7XG4gICAgICAvLyBDbGVhbi11cCB0aGUgYW5pbWF0aW9uIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXlcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGVuZExpc3RlbmVyLCB1c2VyU3BlY2lmaWVkRGVsYXkpO1xuICAgICAgdGhpcy50cmFuc2l0aW9uVGltZW91dHMucHVzaCh0aW1lb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gREVQUkVDQVRFRDogdGhpcyBsaXN0ZW5lciB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiByZWFjdFxuICAgICAgUmVhY3RUcmFuc2l0aW9uRXZlbnRzLmFkZEVuZEV2ZW50TGlzdGVuZXIobm9kZSwgZW5kTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcblxuICBxdWV1ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgdGhpcy5jbGFzc05hbWVRdWV1ZS5wdXNoKGNsYXNzTmFtZSk7XG5cbiAgICBpZiAoIXRoaXMudGltZW91dCkge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmZsdXNoQ2xhc3NOYW1lUXVldWUsIFRJQ0spO1xuICAgIH1cbiAgfSxcblxuICBmbHVzaENsYXNzTmFtZVF1ZXVlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICAgIHRoaXMuY2xhc3NOYW1lUXVldWUuZm9yRWFjaChDU1NDb3JlLmFkZENsYXNzLmJpbmQoQ1NTQ29yZSwgUmVhY3RET00uZmluZERPTU5vZGUodGhpcykpKTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc05hbWVRdWV1ZS5sZW5ndGggPSAwO1xuICAgIHRoaXMudGltZW91dCA9IG51bGw7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jbGFzc05hbWVRdWV1ZSA9IFtdO1xuICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXRzID0gW107XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gICAgdGhpcy50cmFuc2l0aW9uVGltZW91dHMuZm9yRWFjaChmdW5jdGlvbiAodGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIH0pO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxBcHBlYXI6IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYXBwZWFyKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb24oJ2FwcGVhcicsIGRvbmUsIHRoaXMucHJvcHMuYXBwZWFyVGltZW91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbmUoKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbEVudGVyOiBmdW5jdGlvbiAoZG9uZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmVudGVyKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb24oJ2VudGVyJywgZG9uZSwgdGhpcy5wcm9wcy5lbnRlclRpbWVvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxMZWF2ZTogZnVuY3Rpb24gKGRvbmUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5sZWF2ZSkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uKCdsZWF2ZScsIGRvbmUsIHRoaXMucHJvcHMubGVhdmVUaW1lb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkOyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZFJlY29uY2lsZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcblxudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gaW5zdGFudGlhdGVDaGlsZChjaGlsZEluc3RhbmNlcywgY2hpbGQsIG5hbWUpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciBrZXlVbmlxdWUgPSBjaGlsZEluc3RhbmNlc1tuYW1lXSA9PT0gdW5kZWZpbmVkO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGtleVVuaXF1ZSwgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgKyAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsIG5hbWUpIDogdW5kZWZpbmVkO1xuICB9XG4gIGlmIChjaGlsZCAhPSBudWxsICYmIGtleVVuaXF1ZSkge1xuICAgIGNoaWxkSW5zdGFuY2VzW25hbWVdID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChjaGlsZCwgbnVsbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWFjdENoaWxkUmVjb25jaWxlciBwcm92aWRlcyBoZWxwZXJzIGZvciBpbml0aWFsaXppbmcgb3IgdXBkYXRpbmcgYSBzZXQgb2ZcbiAqIGNoaWxkcmVuLiBJdHMgb3V0cHV0IGlzIHN1aXRhYmxlIGZvciBwYXNzaW5nIGl0IG9udG8gUmVhY3RNdWx0aUNoaWxkIHdoaWNoXG4gKiBkb2VzIGRpZmZlZCByZW9yZGVyaW5nIGFuZCBpbnNlcnRpb24uXG4gKi9cbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFwibW91bnQgaW1hZ2VcIiBmb3IgZWFjaCBvZiB0aGUgc3VwcGxpZWQgY2hpbGRyZW4uIEluIHRoZSBjYXNlXG4gICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5lc3RlZENoaWxkTm9kZXMgTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IEEgc2V0IG9mIGNoaWxkIGluc3RhbmNlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBpbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmVzdGVkQ2hpbGROb2RlcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICBpZiAobmVzdGVkQ2hpbGROb2RlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGNoaWxkSW5zdGFuY2VzID0ge307XG4gICAgdHJhdmVyc2VBbGxDaGlsZHJlbihuZXN0ZWRDaGlsZE5vZGVzLCBpbnN0YW50aWF0ZUNoaWxkLCBjaGlsZEluc3RhbmNlcyk7XG4gICAgcmV0dXJuIGNoaWxkSW5zdGFuY2VzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSByZW5kZXJlZCBjaGlsZHJlbiBhbmQgcmV0dXJucyBhIG5ldyBzZXQgb2YgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNoaWxkcmVuIFByZXZpb3VzbHkgaW5pdGlhbGl6ZWQgc2V0IG9mIGNoaWxkcmVuLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDaGlsZHJlbiBGbGF0IGNoaWxkIGVsZW1lbnQgbWFwcy5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBBIG5ldyBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAocHJldkNoaWxkcmVuLCBuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgLy8gV2UgY3VycmVudGx5IGRvbid0IGhhdmUgYSB3YXkgdG8gdHJhY2sgbW92ZXMgaGVyZSBidXQgaWYgd2UgdXNlIGl0ZXJhdG9yc1xuICAgIC8vIGluc3RlYWQgb2YgZm9yLi5pbiB3ZSBjYW4gemlwIHRoZSBpdGVyYXRvcnMgYW5kIGNoZWNrIGlmIGFuIGl0ZW0gaGFzXG4gICAgLy8gbW92ZWQuXG4gICAgLy8gVE9ETzogSWYgbm90aGluZyBoYXMgY2hhbmdlZCwgcmV0dXJuIHRoZSBwcmV2Q2hpbGRyZW4gb2JqZWN0IHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gcXVpY2tseSBiYWlsb3V0IGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQuXG4gICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBuYW1lO1xuICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2Q2hpbGQgJiYgcHJldkNoaWxkLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHZhciBuZXh0RWxlbWVudCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgIGlmIChwcmV2Q2hpbGQgIT0gbnVsbCAmJiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHByZXZDaGlsZCwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgbmV4dENoaWxkcmVuW25hbWVdID0gcHJldkNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDaGlsZCwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dEVsZW1lbnQsIG51bGwpO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBuZXh0Q2hpbGRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVW5tb3VudCBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkcmVuW25hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRDaGlsZHJlbjtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYWxsIHJlbmRlcmVkIGNoaWxkcmVuLiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIGNsZWFuIHVwIGNoaWxkcmVuXG4gICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHJlbmRlcmVkQ2hpbGRyZW4gUHJldmlvdXNseSBpbml0aWFsaXplZCBzZXQgb2YgY2hpbGRyZW4uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbiAocmVuZGVyZWRDaGlsZHJlbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gcmVuZGVyZWRDaGlsZHJlbikge1xuICAgICAgaWYgKHJlbmRlcmVkQ2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSByZW5kZXJlZENoaWxkcmVuW25hbWVdO1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChyZW5kZXJlZENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkUmVjb25jaWxlcjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRGFHbHNaRkpsWTI5dVkybHNaWEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVFF0TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRFTm9hV3hrVW1WamIyNWphV3hsY2x4dUlDb2dRSFI1Y0dWamFHVmphM01nYzNSaGRHbGpMVzl1YkhsY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQlNaV0ZqZEZKbFkyOXVZMmxzWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFVtVmpiMjVqYVd4bGNpY3BPMXh1WEc1MllYSWdhVzV6ZEdGdWRHbGhkR1ZTWldGamRFTnZiWEJ2Ym1WdWRDQTlJSEpsY1hWcGNtVW9KeTR2YVc1emRHRnVkR2xoZEdWU1pXRmpkRU52YlhCdmJtVnVkQ2NwTzF4dWRtRnlJSE5vYjNWc1pGVndaR0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBJRDBnY21WeGRXbHlaU2duTGk5emFHOTFiR1JWY0dSaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZENjcE8xeHVkbUZ5SUhSeVlYWmxjbk5sUVd4c1EyaHBiR1J5Wlc0Z1BTQnlaWEYxYVhKbEtDY3VMM1J5WVhabGNuTmxRV3hzUTJocGJHUnlaVzRuS1R0Y2JuWmhjaUIzWVhKdWFXNW5JRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2ZDJGeWJtbHVaeWNwTzF4dVhHNW1kVzVqZEdsdmJpQnBibk4wWVc1MGFXRjBaVU5vYVd4a0tHTm9hV3hrU1c1emRHRnVZMlZ6TENCamFHbHNaQ3dnYm1GdFpTa2dlMXh1SUNBdkx5QlhaU0JtYjNWdVpDQmhJR052YlhCdmJtVnVkQ0JwYm5OMFlXNWpaUzVjYmlBZ2RtRnlJR3RsZVZWdWFYRjFaU0E5SUdOb2FXeGtTVzV6ZEdGdVkyVnpXMjVoYldWZElEMDlQU0IxYm1SbFptbHVaV1E3WEc0Z0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb2EyVjVWVzVwY1hWbExDQW5abXhoZEhSbGJrTm9hV3hrY21WdUtDNHVMaWs2SUVWdVkyOTFiblJsY21Wa0lIUjNieUJqYUdsc1pISmxiaUIzYVhSb0lIUm9aU0J6WVcxbElHdGxlU3dnSnlBcklDZGdKWE5nTGlCRGFHbHNaQ0JyWlhseklHMTFjM1FnWW1VZ2RXNXBjWFZsT3lCM2FHVnVJSFIzYnlCamFHbHNaSEpsYmlCemFHRnlaU0JoSUd0bGVTd2diMjVzZVNBbklDc2dKM1JvWlNCbWFYSnpkQ0JqYUdsc1pDQjNhV3hzSUdKbElIVnpaV1F1Snl3Z2JtRnRaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJSDFjYmlBZ2FXWWdLR05vYVd4a0lDRTlJRzUxYkd3Z0ppWWdhMlY1Vlc1cGNYVmxLU0I3WEc0Z0lDQWdZMmhwYkdSSmJuTjBZVzVqWlhOYmJtRnRaVjBnUFNCcGJuTjBZVzUwYVdGMFpWSmxZV04wUTI5dGNHOXVaVzUwS0dOb2FXeGtMQ0J1ZFd4c0tUdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRkpsWVdOMFEyaHBiR1JTWldOdmJtTnBiR1Z5SUhCeWIzWnBaR1Z6SUdobGJIQmxjbk1nWm05eUlHbHVhWFJwWVd4cGVtbHVaeUJ2Y2lCMWNHUmhkR2x1WnlCaElITmxkQ0J2Wmx4dUlDb2dZMmhwYkdSeVpXNHVJRWwwY3lCdmRYUndkWFFnYVhNZ2MzVnBkR0ZpYkdVZ1ptOXlJSEJoYzNOcGJtY2dhWFFnYjI1MGJ5QlNaV0ZqZEUxMWJIUnBRMmhwYkdRZ2QyaHBZMmhjYmlBcUlHUnZaWE1nWkdsbVptVmtJSEpsYjNKa1pYSnBibWNnWVc1a0lHbHVjMlZ5ZEdsdmJpNWNiaUFxTDF4dWRtRnlJRkpsWVdOMFEyaHBiR1JTWldOdmJtTnBiR1Z5SUQwZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nUjJWdVpYSmhkR1Z6SUdFZ1hDSnRiM1Z1ZENCcGJXRm5aVndpSUdadmNpQmxZV05vSUc5bUlIUm9aU0J6ZFhCd2JHbGxaQ0JqYUdsc1pISmxiaTRnU1c0Z2RHaGxJR05oYzJWY2JpQWdJQ29nYjJZZ1lGSmxZV04wUkU5TlEyOXRjRzl1Wlc1MFlDd2dZU0J0YjNWdWRDQnBiV0ZuWlNCcGN5QmhJSE4wY21sdVp5QnZaaUJ0WVhKcmRYQXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3UDI5aWFtVmpkSDBnYm1WemRHVmtRMmhwYkdST2IyUmxjeUJPWlhOMFpXUWdZMmhwYkdRZ2JXRndjeTVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdQMjlpYW1WamRIMGdRU0J6WlhRZ2IyWWdZMmhwYkdRZ2FXNXpkR0Z1WTJWekxseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lHbHVjM1JoYm5ScFlYUmxRMmhwYkdSeVpXNDZJR1oxYm1OMGFXOXVJQ2h1WlhOMFpXUkRhR2xzWkU1dlpHVnpMQ0IwY21GdWMyRmpkR2x2Yml3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUdsbUlDaHVaWE4wWldSRGFHbHNaRTV2WkdWeklEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdZMmhwYkdSSmJuTjBZVzVqWlhNZ1BTQjdmVHRjYmlBZ0lDQjBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVLRzVsYzNSbFpFTm9hV3hrVG05a1pYTXNJR2x1YzNSaGJuUnBZWFJsUTJocGJHUXNJR05vYVd4a1NXNXpkR0Z1WTJWektUdGNiaUFnSUNCeVpYUjFjbTRnWTJocGJHUkpibk4wWVc1alpYTTdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWd1pHRjBaWE1nZEdobElISmxibVJsY21Wa0lHTm9hV3hrY21WdUlHRnVaQ0J5WlhSMWNtNXpJR0VnYm1WM0lITmxkQ0J2WmlCamFHbHNaSEpsYmk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIcy9iMkpxWldOMGZTQndjbVYyUTJocGJHUnlaVzRnVUhKbGRtbHZkWE5zZVNCcGJtbDBhV0ZzYVhwbFpDQnpaWFFnYjJZZ1kyaHBiR1J5Wlc0dVhHNGdJQ0FxSUVCd1lYSmhiU0I3UDI5aWFtVmpkSDBnYm1WNGRFTm9hV3hrY21WdUlFWnNZWFFnWTJocGJHUWdaV3hsYldWdWRDQnRZWEJ6TGx4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNTlJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmpiMjUwWlhoMFhHNGdJQ0FxSUVCeVpYUjFjbTRnZXo5dlltcGxZM1I5SUVFZ2JtVjNJSE5sZENCdlppQmphR2xzWkNCcGJuTjBZVzVqWlhNdVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ2RYQmtZWFJsUTJocGJHUnlaVzQ2SUdaMWJtTjBhVzl1SUNod2NtVjJRMmhwYkdSeVpXNHNJRzVsZUhSRGFHbHNaSEpsYml3Z2RISmhibk5oWTNScGIyNHNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQXZMeUJYWlNCamRYSnlaVzUwYkhrZ1pHOXVKM1FnYUdGMlpTQmhJSGRoZVNCMGJ5QjBjbUZqYXlCdGIzWmxjeUJvWlhKbElHSjFkQ0JwWmlCM1pTQjFjMlVnYVhSbGNtRjBiM0p6WEc0Z0lDQWdMeThnYVc1emRHVmhaQ0J2WmlCbWIzSXVMbWx1SUhkbElHTmhiaUI2YVhBZ2RHaGxJR2wwWlhKaGRHOXljeUJoYm1RZ1kyaGxZMnNnYVdZZ1lXNGdhWFJsYlNCb1lYTmNiaUFnSUNBdkx5QnRiM1psWkM1Y2JpQWdJQ0F2THlCVVQwUlBPaUJKWmlCdWIzUm9hVzVuSUdoaGN5QmphR0Z1WjJWa0xDQnlaWFIxY200Z2RHaGxJSEJ5WlhaRGFHbHNaSEpsYmlCdlltcGxZM1FnYzI4Z2RHaGhkQ0IzWlZ4dUlDQWdJQzh2SUdOaGJpQnhkV2xqYTJ4NUlHSmhhV3h2ZFhRZ2FXWWdibTkwYUdsdVp5Qm9ZWE1nWTJoaGJtZGxaQzVjYmlBZ0lDQnBaaUFvSVc1bGVIUkRhR2xzWkhKbGJpQW1KaUFoY0hKbGRrTm9hV3hrY21WdUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJRzVoYldVN1hHNGdJQ0FnWm05eUlDaHVZVzFsSUdsdUlHNWxlSFJEYUdsc1pISmxiaWtnZTF4dUlDQWdJQ0FnYVdZZ0tDRnVaWGgwUTJocGJHUnlaVzR1YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjJZWElnY0hKbGRrTm9hV3hrSUQwZ2NISmxka05vYVd4a2NtVnVJQ1ltSUhCeVpYWkRhR2xzWkhKbGJsdHVZVzFsWFR0Y2JpQWdJQ0FnSUhaaGNpQndjbVYyUld4bGJXVnVkQ0E5SUhCeVpYWkRhR2xzWkNBbUppQndjbVYyUTJocGJHUXVYMk4xY25KbGJuUkZiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ2RtRnlJRzVsZUhSRmJHVnRaVzUwSUQwZ2JtVjRkRU5vYVd4a2NtVnVXMjVoYldWZE8xeHVJQ0FnSUNBZ2FXWWdLSEJ5WlhaRGFHbHNaQ0FoUFNCdWRXeHNJQ1ltSUhOb2IzVnNaRlZ3WkdGMFpWSmxZV04wUTI5dGNHOXVaVzUwS0hCeVpYWkZiR1Z0Wlc1MExDQnVaWGgwUld4bGJXVnVkQ2twSUh0Y2JpQWdJQ0FnSUNBZ1VtVmhZM1JTWldOdmJtTnBiR1Z5TG5KbFkyVnBkbVZEYjIxd2IyNWxiblFvY0hKbGRrTm9hV3hrTENCdVpYaDBSV3hsYldWdWRDd2dkSEpoYm5OaFkzUnBiMjRzSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnSUNCdVpYaDBRMmhwYkdSeVpXNWJibUZ0WlYwZ1BTQndjbVYyUTJocGJHUTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY0hKbGRrTm9hV3hrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdVbVZoWTNSU1pXTnZibU5wYkdWeUxuVnViVzkxYm5SRGIyMXdiMjVsYm5Rb2NISmxka05vYVd4a0xDQnVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ1kyaHBiR1FnYlhWemRDQmlaU0JwYm5OMFlXNTBhV0YwWldRZ1ltVm1iM0psSUdsMEozTWdiVzkxYm5SbFpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUc1bGVIUkRhR2xzWkVsdWMzUmhibU5sSUQwZ2FXNXpkR0Z1ZEdsaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZENodVpYaDBSV3hsYldWdWRDd2diblZzYkNrN1hHNGdJQ0FnSUNBZ0lHNWxlSFJEYUdsc1pISmxibHR1WVcxbFhTQTlJRzVsZUhSRGFHbHNaRWx1YzNSaGJtTmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdkx5QlZibTF2ZFc1MElHTm9hV3hrY21WdUlIUm9ZWFFnWVhKbElHNXZJR3h2Ym1kbGNpQndjbVZ6Wlc1MExseHVJQ0FnSUdadmNpQW9ibUZ0WlNCcGJpQndjbVYyUTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0FnSUdsbUlDaHdjbVYyUTJocGJHUnlaVzR1YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrZ0ppWWdJU2h1WlhoMFEyaHBiR1J5Wlc0Z0ppWWdibVY0ZEVOb2FXeGtjbVZ1TG1oaGMwOTNibEJ5YjNCbGNuUjVLRzVoYldVcEtTa2dlMXh1SUNBZ0lDQWdJQ0JTWldGamRGSmxZMjl1WTJsc1pYSXVkVzV0YjNWdWRFTnZiWEJ2Ym1WdWRDaHdjbVYyUTJocGJHUnlaVzViYm1GdFpWMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm1WNGRFTm9hV3hrY21WdU8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJWYm0xdmRXNTBjeUJoYkd3Z2NtVnVaR1Z5WldRZ1kyaHBiR1J5Wlc0dUlGUm9hWE1nYzJodmRXeGtJR0psSUhWelpXUWdkRzhnWTJ4bFlXNGdkWEFnWTJocGJHUnlaVzVjYmlBZ0lDb2dkMmhsYmlCMGFHbHpJR052YlhCdmJtVnVkQ0JwY3lCMWJtMXZkVzUwWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdQMjlpYW1WamRIMGdjbVZ1WkdWeVpXUkRhR2xzWkhKbGJpQlFjbVYyYVc5MWMyeDVJR2x1YVhScFlXeHBlbVZrSUhObGRDQnZaaUJqYUdsc1pISmxiaTVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0IxYm0xdmRXNTBRMmhwYkdSeVpXNDZJR1oxYm1OMGFXOXVJQ2h5Wlc1a1pYSmxaRU5vYVd4a2NtVnVLU0I3WEc0Z0lDQWdabTl5SUNoMllYSWdibUZ0WlNCcGJpQnlaVzVrWlhKbFpFTm9hV3hrY21WdUtTQjdYRzRnSUNBZ0lDQnBaaUFvY21WdVpHVnlaV1JEYUdsc1pISmxiaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WdVpHVnlaV1JEYUdsc1pDQTlJSEpsYm1SbGNtVmtRMmhwYkdSeVpXNWJibUZ0WlYwN1hHNGdJQ0FnSUNBZ0lGSmxZV04wVW1WamIyNWphV3hsY2k1MWJtMXZkVzUwUTI5dGNHOXVaVzUwS0hKbGJtUmxjbVZrUTJocGJHUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBRMmhwYkdSU1pXTnZibU5wYkdWeU95SmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q2hpbGRyZW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyO1xudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcjtcblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLyg/IVxcLykvZztcbmZ1bmN0aW9uIGVzY2FwZVVzZXJQcm92aWRlZEtleSh0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LCAnLy8nKTtcbn1cblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIHRyYXZlcnNhbC4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBGb3JFYWNoQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBmb3JFYWNoRnVuY3Rpb24gRnVuY3Rpb24gdG8gcGVyZm9ybSB0cmF2ZXJzYWwgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgdG8gcGVyZm9ybSBjb250ZXh0IHdpdGguXG4gKi9cbmZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gIHRoaXMuZnVuYyA9IGZvckVhY2hGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gZm9yRWFjaENvbnRleHQ7XG4gIHRoaXMuY291bnQgPSAwO1xufVxuRm9yRWFjaEJvb2tLZWVwaW5nLnByb3RvdHlwZS5kZXN0cnVjdG9yID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmZ1bmMgPSBudWxsO1xuICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLmNvdW50ID0gMDtcbn07XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRm9yRWFjaEJvb2tLZWVwaW5nLCB0d29Bcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZChib29rS2VlcGluZywgY2hpbGQsIG5hbWUpIHtcbiAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jO1xuICB2YXIgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG5cbiAgZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZm9yRWFjaEZ1bmNcbiAqIEBwYXJhbSB7Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCBmb3IgZm9yRWFjaENvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBGb3JFYWNoQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIG1hcHBpbmcuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgTWFwQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7ISp9IG1hcFJlc3VsdCBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBtYXBGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IG1hcENvbnRleHQgQ29udGV4dCB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqL1xuZnVuY3Rpb24gTWFwQm9va0tlZXBpbmcobWFwUmVzdWx0LCBrZXlQcmVmaXgsIG1hcEZ1bmN0aW9uLCBtYXBDb250ZXh0KSB7XG4gIHRoaXMucmVzdWx0ID0gbWFwUmVzdWx0O1xuICB0aGlzLmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgdGhpcy5mdW5jID0gbWFwRnVuY3Rpb247XG4gIHRoaXMuY29udGV4dCA9IG1hcENvbnRleHQ7XG4gIHRoaXMuY291bnQgPSAwO1xufVxuTWFwQm9va0tlZXBpbmcucHJvdG90eXBlLmRlc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVzdWx0ID0gbnVsbDtcbiAgdGhpcy5rZXlQcmVmaXggPSBudWxsO1xuICB0aGlzLmZ1bmMgPSBudWxsO1xuICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLmNvdW50ID0gMDtcbn07XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oTWFwQm9va0tlZXBpbmcsIGZvdXJBcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQoYm9va0tlZXBpbmcsIGNoaWxkLCBjaGlsZEtleSkge1xuICB2YXIgcmVzdWx0ID0gYm9va0tlZXBpbmcucmVzdWx0O1xuICB2YXIga2V5UHJlZml4ID0gYm9va0tlZXBpbmcua2V5UHJlZml4O1xuICB2YXIgZnVuYyA9IGJvb2tLZWVwaW5nLmZ1bmM7XG4gIHZhciBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcblxuICB2YXIgbWFwcGVkQ2hpbGQgPSBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXBwZWRDaGlsZCkpIHtcbiAgICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKG1hcHBlZENoaWxkLCByZXN1bHQsIGNoaWxkS2V5LCBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQpO1xuICB9IGVsc2UgaWYgKG1hcHBlZENoaWxkICE9IG51bGwpIHtcbiAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG1hcHBlZENoaWxkKSkge1xuICAgICAgbWFwcGVkQ2hpbGQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlS2V5KG1hcHBlZENoaWxkLFxuICAgICAgLy8gS2VlcCBib3RoIHRoZSAobWFwcGVkKSBhbmQgb2xkIGtleXMgaWYgdGhleSBkaWZmZXIsIGp1c3QgYXNcbiAgICAgIC8vIHRyYXZlcnNlQWxsQ2hpbGRyZW4gdXNlZCB0byBkbyBmb3Igb2JqZWN0cyBhcyBjaGlsZHJlblxuICAgICAga2V5UHJlZml4ICsgKG1hcHBlZENoaWxkICE9PSBjaGlsZCA/IGVzY2FwZVVzZXJQcm92aWRlZEtleShtYXBwZWRDaGlsZC5rZXkgfHwgJycpICsgJy8nIDogJycpICsgY2hpbGRLZXkpO1xuICAgIH1cbiAgICByZXN1bHQucHVzaChtYXBwZWRDaGlsZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgYXJyYXksIHByZWZpeCwgZnVuYywgY29udGV4dCkge1xuICB2YXIgZXNjYXBlZFByZWZpeCA9ICcnO1xuICBpZiAocHJlZml4ICE9IG51bGwpIHtcbiAgICBlc2NhcGVkUHJlZml4ID0gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHByZWZpeCkgKyAnLyc7XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IE1hcEJvb2tLZWVwaW5nLmdldFBvb2xlZChhcnJheSwgZXNjYXBlZFByZWZpeCwgZnVuYywgY29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIE1hcEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBNYXBzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgbWFwRnVuY3Rpb24oY2hpbGQsIGtleSwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmdW5jIFRoZSBtYXAgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBmb3IgbWFwRnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZnVuYywgY29udGV4dCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZER1bW15KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzXG4gKiBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250ZXh0KSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG59XG5cbi8qKlxuICogRmxhdHRlbiBhIGNoaWxkcmVuIG9iamVjdCAodHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gKSBhbmRcbiAqIHJldHVybiBhbiBhcnJheSB3aXRoIGFwcHJvcHJpYXRlbHkgcmUta2V5ZWQgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCByZXN1bHQsIG51bGwsIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBSZWFjdENoaWxkcmVuID0ge1xuICBmb3JFYWNoOiBmb3JFYWNoQ2hpbGRyZW4sXG4gIG1hcDogbWFwQ2hpbGRyZW4sXG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWw6IG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwsXG4gIGNvdW50OiBjb3VudENoaWxkcmVuLFxuICB0b0FycmF5OiB0b0FycmF5XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRyZW47IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENsYXNzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50Jyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIga2V5TWlycm9yID0gcmVxdWlyZSgnZmJqcy9saWIva2V5TWlycm9yJyk7XG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBNSVhJTlNfS0VZID0ga2V5T2YoeyBtaXhpbnM6IG51bGwgfSk7XG5cbi8qKlxuICogUG9saWNpZXMgdGhhdCBkZXNjcmliZSBtZXRob2RzIGluIGBSZWFjdENsYXNzSW50ZXJmYWNlYC5cbiAqL1xudmFyIFNwZWNQb2xpY3kgPSBrZXlNaXJyb3Ioe1xuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgZGVmaW5lZCBvbmx5IG9uY2UgYnkgdGhlIGNsYXNzIHNwZWNpZmljYXRpb24gb3IgbWl4aW4uXG4gICAqL1xuICBERUZJTkVfT05DRTogbnVsbCxcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgbWF5IGJlIGRlZmluZWQgYnkgYm90aCB0aGUgY2xhc3Mgc3BlY2lmaWNhdGlvbiBhbmQgbWl4aW5zLlxuICAgKiBTdWJzZXF1ZW50IGRlZmluaXRpb25zIHdpbGwgYmUgY2hhaW5lZC4gVGhlc2UgbWV0aG9kcyBtdXN0IHJldHVybiB2b2lkLlxuICAgKi9cbiAgREVGSU5FX01BTlk6IG51bGwsXG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIGFyZSBvdmVycmlkaW5nIHRoZSBiYXNlIGNsYXNzLlxuICAgKi9cbiAgT1ZFUlJJREVfQkFTRTogbnVsbCxcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgYXJlIHNpbWlsYXIgdG8gREVGSU5FX01BTlksIGV4Y2VwdCB3ZSBhc3N1bWUgdGhleSByZXR1cm5cbiAgICogb2JqZWN0cy4gV2UgdHJ5IHRvIG1lcmdlIHRoZSBrZXlzIG9mIHRoZSByZXR1cm4gdmFsdWVzIG9mIGFsbCB0aGUgbWl4ZWQgaW5cbiAgICogZnVuY3Rpb25zLiBJZiB0aGVyZSBpcyBhIGtleSBjb25mbGljdCB3ZSB0aHJvdy5cbiAgICovXG4gIERFRklORV9NQU5ZX01FUkdFRDogbnVsbFxufSk7XG5cbnZhciBpbmplY3RlZE1peGlucyA9IFtdO1xuXG52YXIgd2FybmVkU2V0UHJvcHMgPSBmYWxzZTtcbmZ1bmN0aW9uIHdhcm5TZXRQcm9wcygpIHtcbiAgaWYgKCF3YXJuZWRTZXRQcm9wcykge1xuICAgIHdhcm5lZFNldFByb3BzID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ3NldFByb3BzKC4uLikgYW5kIHJlcGxhY2VQcm9wcyguLi4pIGFyZSBkZXByZWNhdGVkLiAnICsgJ0luc3RlYWQsIGNhbGwgcmVuZGVyIGFnYWluIGF0IHRoZSB0b3AgbGV2ZWwuJykgOiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBDb21wb3NpdGUgY29tcG9uZW50cyBhcmUgaGlnaGVyLWxldmVsIGNvbXBvbmVudHMgdGhhdCBjb21wb3NlIG90aGVyIGNvbXBvc2l0ZVxuICogb3IgbmF0aXZlIGNvbXBvbmVudHMuXG4gKlxuICogVG8gY3JlYXRlIGEgbmV3IHR5cGUgb2YgYFJlYWN0Q2xhc3NgLCBwYXNzIGEgc3BlY2lmaWNhdGlvbiBvZlxuICogeW91ciBuZXcgY2xhc3MgdG8gYFJlYWN0LmNyZWF0ZUNsYXNzYC4gVGhlIG9ubHkgcmVxdWlyZW1lbnQgb2YgeW91ciBjbGFzc1xuICogc3BlY2lmaWNhdGlvbiBpcyB0aGF0IHlvdSBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXG4gKlxuICogICB2YXIgTXlDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiA8ZGl2PkhlbGxvIFdvcmxkPC9kaXY+O1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIGNsYXNzIHNwZWNpZmljYXRpb24gc3VwcG9ydHMgYSBzcGVjaWZpYyBwcm90b2NvbCBvZiBtZXRob2RzIHRoYXQgaGF2ZVxuICogc3BlY2lhbCBtZWFuaW5nIChlLmcuIGByZW5kZXJgKS4gU2VlIGBSZWFjdENsYXNzSW50ZXJmYWNlYCBmb3JcbiAqIG1vcmUgdGhlIGNvbXByZWhlbnNpdmUgcHJvdG9jb2wuIEFueSBvdGhlciBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGluIHRoZVxuICogY2xhc3Mgc3BlY2lmaWNhdGlvbiB3aWxsIGJlIGF2YWlsYWJsZSBvbiB0aGUgcHJvdG90eXBlLlxuICpcbiAqIEBpbnRlcmZhY2UgUmVhY3RDbGFzc0ludGVyZmFjZVxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdENsYXNzSW50ZXJmYWNlID0ge1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBNaXhpbiBvYmplY3RzIHRvIGluY2x1ZGUgd2hlbiBkZWZpbmluZyB5b3VyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge2FycmF5fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIG1peGluczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0aGF0IHNob3VsZCBiZSBkZWZpbmVkIG9uXG4gICAqIHRoZSBjb21wb25lbnQncyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIGl0cyBwcm90b3R5cGUgKHN0YXRpYyBtZXRob2RzKS5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBzdGF0aWNzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIHByb3AgdHlwZXMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHByb3BUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyB0aGlzIGNvbXBvbmVudCBzZXRzIGZvciBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY2hpbGRDb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLy8gPT09PSBEZWZpbml0aW9uIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBWYWx1ZXMgaW4gdGhlIG1hcHBpbmcgd2lsbCBiZSBzZXQgb25cbiAgICogYHRoaXMucHJvcHNgIGlmIHRoYXQgcHJvcCBpcyBub3Qgc3BlY2lmaWVkIChpLmUuIHVzaW5nIGFuIGBpbmAgY2hlY2spLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGJlZm9yZSBgZ2V0SW5pdGlhbFN0YXRlYCBhbmQgdGhlcmVmb3JlIGNhbm5vdCByZWx5XG4gICAqIG9uIGB0aGlzLnN0YXRlYCBvciB1c2UgYHRoaXMuc2V0U3RhdGVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblxuICAvKipcbiAgICogSW52b2tlZCBvbmNlIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkXG4gICAqIGFzIHRoZSBpbml0aWFsIHZhbHVlIG9mIGB0aGlzLnN0YXRlYC5cbiAgICpcbiAgICogICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgcmV0dXJuIHtcbiAgICogICAgICAgaXNPbjogZmFsc2UsXG4gICAqICAgICAgIGZvb0JhejogbmV3IEJhekZvbygpXG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgZ2V0SW5pdGlhbFN0YXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldENoaWxkQ29udGV4dDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIFVzZXMgcHJvcHMgZnJvbSBgdGhpcy5wcm9wc2AgYW5kIHN0YXRlIGZyb20gYHRoaXMuc3RhdGVgIHRvIHJlbmRlciB0aGVcbiAgICogc3RydWN0dXJlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIE5vIGd1YXJhbnRlZXMgYXJlIG1hZGUgYWJvdXQgd2hlbiBvciBob3cgb2Z0ZW4gdGhpcyBtZXRob2QgaXMgaW52b2tlZCwgc29cbiAgICogaXQgbXVzdCBub3QgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAqXG4gICAqICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5uYW1lO1xuICAgKiAgICAgcmV0dXJuIDxkaXY+SGVsbG8sIHtuYW1lfSE8L2Rpdj47XG4gICAqICAgfVxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAgICogQG5vc2lkZWVmZmVjdHNcbiAgICogQHJlcXVpcmVkXG4gICAqL1xuICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG5cbiAgLy8gPT09PSBEZWxlZ2F0ZSBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IGNyZWF0ZWQgYW5kIGFib3V0IHRvIGJlIG1vdW50ZWQuXG4gICAqIFRoaXMgbWF5IGhhdmUgc2lkZSBlZmZlY3RzLCBidXQgYW55IGV4dGVybmFsIHN1YnNjcmlwdGlvbnMgb3IgZGF0YSBjcmVhdGVkXG4gICAqIGJ5IHRoaXMgbWV0aG9kIG11c3QgYmUgY2xlYW5lZCB1cCBpbiBgY29tcG9uZW50V2lsbFVubW91bnRgLlxuICAgKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZCBhbmQgaGFzIGEgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgKiBIb3dldmVyLCB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgRE9NIG5vZGUgaXMgaW4gdGhlIGRvY3VtZW50LlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgKiBiZWVuIG1vdW50ZWQgKGluaXRpYWxpemVkIGFuZCByZW5kZXJlZCkgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSB0aGUgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wcy5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gcmVhY3QgdG8gYSBwcm9wIHRyYW5zaXRpb24gYnkgdXBkYXRpbmcgdGhlXG4gICAqIHN0YXRlIHVzaW5nIGB0aGlzLnNldFN0YXRlYC4gQ3VycmVudCBwcm9wcyBhcmUgYWNjZXNzZWQgdmlhIGB0aGlzLnByb3BzYC5cbiAgICpcbiAgICogICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAqICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICogICAgICAgbGlrZXNJbmNyZWFzaW5nOiBuZXh0UHJvcHMubGlrZUNvdW50ID4gdGhpcy5wcm9wcy5saWtlQ291bnRcbiAgICogICAgIH0pO1xuICAgKiAgIH1cbiAgICpcbiAgICogTk9URTogVGhlcmUgaXMgbm8gZXF1aXZhbGVudCBgY29tcG9uZW50V2lsbFJlY2VpdmVTdGF0ZWAuIEFuIGluY29taW5nIHByb3BcbiAgICogdHJhbnNpdGlvbiBtYXkgY2F1c2UgYSBzdGF0ZSBjaGFuZ2UsIGJ1dCB0aGUgb3Bwb3NpdGUgaXMgbm90IHRydWUuIElmIHlvdVxuICAgKiBuZWVkIGl0LCB5b3UgYXJlIHByb2JhYmx5IGxvb2tpbmcgZm9yIGBjb21wb25lbnRXaWxsVXBkYXRlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hpbGUgZGVjaWRpbmcgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgYmUgdXBkYXRlZCBhcyBhIHJlc3VsdCBvZlxuICAgKiByZWNlaXZpbmcgbmV3IHByb3BzLCBzdGF0ZSBhbmQvb3IgY29udGV4dC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gYHJldHVybiBmYWxzZWAgd2hlbiB5b3UncmUgY2VydGFpbiB0aGF0IHRoZVxuICAgKiB0cmFuc2l0aW9uIHRvIHRoZSBuZXcgcHJvcHMvc3RhdGUvY29udGV4dCB3aWxsIG5vdCByZXF1aXJlIGEgY29tcG9uZW50XG4gICAqIHVwZGF0ZS5cbiAgICpcbiAgICogICBzaG91bGRDb21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgKiAgICAgcmV0dXJuICFlcXVhbChuZXh0UHJvcHMsIHRoaXMucHJvcHMpIHx8XG4gICAqICAgICAgICFlcXVhbChuZXh0U3RhdGUsIHRoaXMuc3RhdGUpIHx8XG4gICAqICAgICAgICFlcXVhbChuZXh0Q29udGV4dCwgdGhpcy5jb250ZXh0KTtcbiAgICogICB9XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIHVwZGF0ZS5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBzaG91bGRDb21wb25lbnRVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIHVwZGF0ZSBkdWUgdG8gYSB0cmFuc2l0aW9uIGZyb21cbiAgICogYHRoaXMucHJvcHNgLCBgdGhpcy5zdGF0ZWAgYW5kIGB0aGlzLmNvbnRleHRgIHRvIGBuZXh0UHJvcHNgLCBgbmV4dFN0YXRlYFxuICAgKiBhbmQgYG5leHRDb250ZXh0YC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gcGVyZm9ybSBwcmVwYXJhdGlvbiBiZWZvcmUgYW4gdXBkYXRlIG9jY3Vycy5cbiAgICpcbiAgICogTk9URTogWW91ICoqY2Fubm90KiogdXNlIGB0aGlzLnNldFN0YXRlKClgIGluIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50J3MgRE9NIHJlcHJlc2VudGF0aW9uIGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIG9wZXJhdGUgb24gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaGFzXG4gICAqIGJlZW4gdXBkYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHByZXZQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZDb250ZXh0XG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdE5vZGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBjb21wb25lbnQuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byBiZSByZW1vdmVkIGZyb20gaXRzIHBhcmVudCBhbmQgaGF2ZVxuICAgKiBpdHMgRE9NIHJlcHJlc2VudGF0aW9uIGRlc3Ryb3llZC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gZGVhbGxvY2F0ZSBhbnkgZXh0ZXJuYWwgcmVzb3VyY2VzLlxuICAgKlxuICAgKiBOT1RFOiBUaGVyZSBpcyBubyBgY29tcG9uZW50RGlkVW5tb3VudGAgc2luY2UgeW91ciBjb21wb25lbnQgd2lsbCBoYXZlIGJlZW5cbiAgICogZGVzdHJveWVkIGJ5IHRoYXQgcG9pbnQuXG4gICAqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLy8gPT09PSBBZHZhbmNlZCBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIGltcGxlbWVudHMgUmVhY3QncyByZW5kZXJpbmcgYW5kIHJlY29uY2lsaWF0aW9uIGFsZ29yaXRobS5cbiAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0VcblxufTtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gY2xhc3Mgc3BlY2lmaWNhdGlvbiBrZXlzIHRvIHNwZWNpYWwgcHJvY2Vzc2luZyBmdW5jdGlvbnMuXG4gKlxuICogQWx0aG91Z2ggdGhlc2UgYXJlIGRlY2xhcmVkIGxpa2UgaW5zdGFuY2UgcHJvcGVydGllcyBpbiB0aGUgc3BlY2lmaWNhdGlvblxuICogd2hlbiBkZWZpbmluZyBjbGFzc2VzIHVzaW5nIGBSZWFjdC5jcmVhdGVDbGFzc2AsIHRoZXkgYXJlIGFjdHVhbGx5IHN0YXRpY1xuICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcbiAqIGJlaW5nIHN0YXRpYywgdGhleSBtdXN0IGJlIGRlZmluZWQgb3V0c2lkZSBvZiB0aGUgXCJzdGF0aWNzXCIga2V5IHVuZGVyXG4gKiB3aGljaCBhbGwgb3RoZXIgc3RhdGljIG1ldGhvZHMgYXJlIGRlZmluZWQuXG4gKi9cbnZhciBSRVNFUlZFRF9TUEVDX0tFWVMgPSB7XG4gIGRpc3BsYXlOYW1lOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGRpc3BsYXlOYW1lKSB7XG4gICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgfSxcbiAgbWl4aW5zOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIG1peGlucykge1xuICAgIGlmIChtaXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBtaXhpbnNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY2hpbGRDb250ZXh0VHlwZXM6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjaGlsZENvbnRleHRUeXBlcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHQpO1xuICAgIH1cbiAgICBDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9IGFzc2lnbih7fSwgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dFR5cGVzKTtcbiAgfSxcbiAgY29udGV4dFR5cGVzOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jb250ZXh0KTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzID0gYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMsIGNvbnRleHRUeXBlcyk7XG4gIH0sXG4gIC8qKlxuICAgKiBTcGVjaWFsIGNhc2UgZ2V0RGVmYXVsdFByb3BzIHdoaWNoIHNob3VsZCBtb3ZlIGludG8gc3RhdGljcyBidXQgcmVxdWlyZXNcbiAgICogYXV0b21hdGljIG1lcmdpbmcuXG4gICAqL1xuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLCBnZXREZWZhdWx0UHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMgPSBnZXREZWZhdWx0UHJvcHM7XG4gICAgfVxuICB9LFxuICBwcm9wVHlwZXM6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICAgIH1cbiAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMgPSBhc3NpZ24oe30sIENvbnN0cnVjdG9yLnByb3BUeXBlcywgcHJvcFR5cGVzKTtcbiAgfSxcbiAgc3RhdGljczogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHN0YXRpY3MpO1xuICB9LFxuICBhdXRvYmluZDogZnVuY3Rpb24gKCkge30gfTtcblxuLy8gbm9vcFxuZnVuY3Rpb24gdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCB0eXBlRGVmLCBsb2NhdGlvbikge1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG4gICAgaWYgKHR5cGVEZWYuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAvLyB1c2UgYSB3YXJuaW5nIGluc3RlYWQgb2YgYW4gaW52YXJpYW50IHNvIGNvbXBvbmVudHNcbiAgICAgIC8vIGRvbid0IHNob3cgdXAgaW4gcHJvZCBidXQgbm90IGluIF9fREVWX19cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiB0eXBlRGVmW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJywgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArICdSZWFjdC5Qcm9wVHlwZXMuJywgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHByb3BOYW1lKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShwcm90bywgbmFtZSkge1xuICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSkgPyBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdIDogbnVsbDtcblxuICAvLyBEaXNhbGxvdyBvdmVycmlkaW5nIG9mIGJhc2UgY2xhc3MgbWV0aG9kcyB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICBpZiAoUmVhY3RDbGFzc01peGluLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgIShzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBvdmVycmlkZSAnICsgJ2Alc2AgZnJvbSB5b3VyIGNsYXNzIHNwZWNpZmljYXRpb24uIEVuc3VyZSB0aGF0IHlvdXIgbWV0aG9kIG5hbWVzICcgKyAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIERpc2FsbG93IGRlZmluaW5nIG1ldGhvZHMgbW9yZSB0aGFuIG9uY2UgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgIShzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZIHx8IHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgKyAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgKyAndG8gYSBtaXhpbi4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBNaXhpbiBoZWxwZXIgd2hpY2ggaGFuZGxlcyBwb2xpY3kgdmFsaWRhdGlvbiBhbmQgcmVzZXJ2ZWRcbiAqIHNwZWNpZmljYXRpb24ga2V5cyB3aGVuIGJ1aWxkaW5nIFJlYWN0IGNsYXNzc2VzLlxuICovXG5mdW5jdGlvbiBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYykge1xuICBpZiAoIXNwZWMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAhKHR5cGVvZiBzcGVjICE9PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzOiBZb3VcXCdyZSBhdHRlbXB0aW5nIHRvICcgKyAndXNlIGEgY29tcG9uZW50IGNsYXNzIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAhIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChzcGVjKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzOiBZb3VcXCdyZSBhdHRlbXB0aW5nIHRvICcgKyAndXNlIGEgY29tcG9uZW50IGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gIHZhciBwcm90byA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAvLyBCeSBoYW5kbGluZyBtaXhpbnMgYmVmb3JlIGFueSBvdGhlciBwcm9wZXJ0aWVzLCB3ZSBlbnN1cmUgdGhlIHNhbWVcbiAgLy8gY2hhaW5pbmcgb3JkZXIgaXMgYXBwbGllZCB0byBtZXRob2RzIHdpdGggREVGSU5FX01BTlkgcG9saWN5LCB3aGV0aGVyXG4gIC8vIG1peGlucyBhcmUgbGlzdGVkIGJlZm9yZSBvciBhZnRlciB0aGVzZSBtZXRob2RzIGluIHRoZSBzcGVjLlxuICBpZiAoc3BlYy5oYXNPd25Qcm9wZXJ0eShNSVhJTlNfS0VZKSkge1xuICAgIFJFU0VSVkVEX1NQRUNfS0VZUy5taXhpbnMoQ29uc3RydWN0b3IsIHNwZWMubWl4aW5zKTtcbiAgfVxuXG4gIGZvciAodmFyIG5hbWUgaW4gc3BlYykge1xuICAgIGlmICghc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09IE1JWElOU19LRVkpIHtcbiAgICAgIC8vIFdlIGhhdmUgYWxyZWFkeSBoYW5kbGVkIG1peGlucyBpbiBhIHNwZWNpYWwgY2FzZSBhYm92ZS5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBwcm9wZXJ0eSA9IHNwZWNbbmFtZV07XG4gICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShwcm90bywgbmFtZSk7XG5cbiAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBSRVNFUlZFRF9TUEVDX0tFWVNbbmFtZV0oQ29uc3RydWN0b3IsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAvLyBUaGUgZm9sbG93aW5nIG1lbWJlciBtZXRob2RzIHNob3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBib3VuZDpcbiAgICAgIC8vIDEuIEV4cGVjdGVkIFJlYWN0Q2xhc3MgbWV0aG9kcyAoaW4gdGhlIFwiaW50ZXJmYWNlXCIpLlxuICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgdmFyIGlzUmVhY3RDbGFzc01ldGhvZCA9IFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YXIgaXNBbHJlYWR5RGVmaW5lZCA9IHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICB2YXIgc2hvdWxkQXV0b0JpbmQgPSBpc0Z1bmN0aW9uICYmICFpc1JlYWN0Q2xhc3NNZXRob2QgJiYgIWlzQWxyZWFkeURlZmluZWQgJiYgc3BlYy5hdXRvYmluZCAhPT0gZmFsc2U7XG5cbiAgICAgIGlmIChzaG91bGRBdXRvQmluZCkge1xuICAgICAgICBpZiAoIXByb3RvLl9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgICAgICAgIHByb3RvLl9fcmVhY3RBdXRvQmluZE1hcCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHByb3RvLl9fcmVhY3RBdXRvQmluZE1hcFtuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzQWxyZWFkeURlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV07XG5cbiAgICAgICAgICAvLyBUaGVzZSBjYXNlcyBzaG91bGQgYWxyZWFkeSBiZSBjYXVnaHQgYnkgdmFsaWRhdGVNZXRob2RPdmVycmlkZS5cbiAgICAgICAgICAhKGlzUmVhY3RDbGFzc01ldGhvZCAmJiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQgfHwgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFVuZXhwZWN0ZWQgc3BlYyBwb2xpY3kgJXMgZm9yIGtleSAlcyAnICsgJ3doZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLCBzcGVjUG9saWN5LCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAvLyBGb3IgbWV0aG9kcyB3aGljaCBhcmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZSwgY2FsbCB0aGUgZXhpc3RpbmdcbiAgICAgICAgICAvLyBtZXRob2RzIGJlZm9yZSBjYWxsaW5nIHRoZSBuZXcgcHJvcGVydHksIG1lcmdpbmcgaWYgYXBwcm9wcmlhdGUuXG4gICAgICAgICAgaWYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEKSB7XG4gICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZKSB7XG4gICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBBZGQgdmVyYm9zZSBkaXNwbGF5TmFtZSB0byB0aGUgZnVuY3Rpb24sIHdoaWNoIGhlbHBzIHdoZW4gbG9va2luZ1xuICAgICAgICAgICAgLy8gYXQgcHJvZmlsaW5nIHRvb2xzLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiBzcGVjLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgICAgIHByb3RvW25hbWVdLmRpc3BsYXlOYW1lID0gc3BlYy5kaXNwbGF5TmFtZSArICdfJyArIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gIGlmICghc3RhdGljcykge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBuYW1lIGluIHN0YXRpY3MpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBzdGF0aWNzW25hbWVdO1xuICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGlzUmVzZXJ2ZWQgPSAobmFtZSBpbiBSRVNFUlZFRF9TUEVDX0tFWVMpO1xuICAgICEhaXNSZXNlcnZlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGEgcmVzZXJ2ZWQgJyArICdwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgJyArICdhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBpbnN0ZWFkOyBpdCB3aWxsIHN0aWxsIGJlIGFjY2Vzc2libGUgb24gdGhlICcgKyAnY29uc3RydWN0b3IuJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGlzSW5oZXJpdGVkID0gKG5hbWUgaW4gQ29uc3RydWN0b3IpO1xuICAgICEhaXNJbmhlcml0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICsgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlICcgKyAnZHVlIHRvIGEgbWl4aW4uJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIENvbnN0cnVjdG9yW25hbWVdID0gcHJvcGVydHk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb2JqZWN0cywgYnV0IHRocm93IGlmIGJvdGggY29udGFpbiB0aGUgc2FtZSBrZXkuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9uZSBUaGUgZmlyc3Qgb2JqZWN0LCB3aGljaCBpcyBtdXRhdGVkLlxuICogQHBhcmFtIHtvYmplY3R9IHR3byBUaGUgc2Vjb25kIG9iamVjdFxuICogQHJldHVybiB7b2JqZWN0fSBvbmUgYWZ0ZXIgaXQgaGFzIGJlZW4gbXV0YXRlZCB0byBjb250YWluIGV2ZXJ5dGhpbmcgaW4gdHdvLlxuICovXG5mdW5jdGlvbiBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKG9uZSwgdHdvKSB7XG4gICEob25lICYmIHR3byAmJiB0eXBlb2Ygb25lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdHdvID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiBDYW5ub3QgbWVyZ2Ugbm9uLW9iamVjdHMuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gIGZvciAodmFyIGtleSBpbiB0d28pIHtcbiAgICBpZiAodHdvLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICEob25lW2tleV0gPT09IHVuZGVmaW5lZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiAnICsgJ1RyaWVkIHRvIG1lcmdlIHR3byBvYmplY3RzIHdpdGggdGhlIHNhbWUga2V5OiBgJXNgLiBUaGlzIGNvbmZsaWN0ICcgKyAnbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvICcgKyAnZ2V0SW5pdGlhbFN0YXRlKCkgb3IgZ2V0RGVmYXVsdFByb3BzKCkgbWV0aG9kcyByZXR1cm5pbmcgb2JqZWN0cyAnICsgJ3dpdGggY2xhc2hpbmcga2V5cy4nLCBrZXkpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIG9uZVtrZXldID0gdHdvW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvbmU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBtZXJnZXMgdGhlaXIgcmV0dXJuIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSB0d28gYXJndW1lbnQgZnVuY3Rpb25zLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24ob25lLCB0d28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcbiAgICB2YXIgYSA9IG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHZhciBiID0gdHdvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfSBlbHNlIGlmIChiID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICB2YXIgYyA9IHt9O1xuICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYSk7XG4gICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBiKTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIGlnbm9yZXMgdGhlaXIgcmV0dXJuIHZhbGVzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uZSBGdW5jdGlvbiB0byBpbnZva2UgZmlyc3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBCaW5kcyBhIG1ldGhvZCB0byB0aGUgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZCBNZXRob2QgdG8gYmUgYm91bmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGJvdW5kIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKSB7XG4gIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcbiAgICB2YXIgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGJsb2NrLXNjb3BlZC12YXIsIG5vLXVuZGVmICovXG4gICAgYm91bmRNZXRob2QuYmluZCA9IGZ1bmN0aW9uIChuZXdUaGlzKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIC8vIFVzZXIgaXMgdHJ5aW5nIHRvIGJpbmQoKSBhbiBhdXRvYm91bmQgbWV0aG9kOyB3ZSBlZmZlY3RpdmVseSB3aWxsXG4gICAgICAvLyBpZ25vcmUgdGhlIHZhbHVlIG9mIFwidGhpc1wiIHRoYXQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIHVzZSwgc29cbiAgICAgIC8vIGxldCdzIHdhcm4uXG4gICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSAnICsgJ2NvbXBvbmVudCBpbnN0YW5jZS4gU2VlICVzJywgY29tcG9uZW50TmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICsgJ1JlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlICcgKyAnd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJXMnLCBjb21wb25lbnROYW1lKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICAgICAgfVxuICAgICAgdmFyIHJlYm91bmRNZXRob2QgPSBfYmluZC5hcHBseShib3VuZE1ldGhvZCwgYXJndW1lbnRzKTtcbiAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBhcmdzO1xuICAgICAgcmV0dXJuIHJlYm91bmRNZXRob2Q7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYm91bmRNZXRob2Q7XG59XG5cbi8qKlxuICogQmluZHMgYWxsIGF1dG8tYm91bmQgbWV0aG9kcyBpbiBhIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50IENvbXBvbmVudCB3aG9zZSBtZXRob2QgaXMgZ29pbmcgdG8gYmUgYm91bmQuXG4gKi9cbmZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZHMoY29tcG9uZW50KSB7XG4gIGZvciAodmFyIGF1dG9CaW5kS2V5IGluIGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICBpZiAoY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcC5oYXNPd25Qcm9wZXJ0eShhdXRvQmluZEtleSkpIHtcbiAgICAgIHZhciBtZXRob2QgPSBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwW2F1dG9CaW5kS2V5XTtcbiAgICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFkZCBtb3JlIHRvIHRoZSBSZWFjdENsYXNzIGJhc2UgY2xhc3MuIFRoZXNlIGFyZSBhbGwgbGVnYWN5IGZlYXR1cmVzIGFuZFxuICogdGhlcmVmb3JlIG5vdCBhbHJlYWR5IHBhcnQgb2YgdGhlIG1vZGVybiBSZWFjdENvbXBvbmVudC5cbiAqL1xudmFyIFJlYWN0Q2xhc3NNaXhpbiA9IHtcblxuICAvKipcbiAgICogVE9ETzogVGhpcyB3aWxsIGJlIGRlcHJlY2F0ZWQgYmVjYXVzZSBzdGF0ZSBzaG91bGQgYWx3YXlzIGtlZXAgYSBjb25zaXN0ZW50XG4gICAqIHR5cGUgc2lnbmF0dXJlIGFuZCB0aGUgb25seSB1c2UgY2FzZSBmb3IgdGhpcywgaXMgdG8gYXZvaWQgdGhhdC5cbiAgICovXG4gIHJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKG5ld1N0YXRlLCBjYWxsYmFjaykge1xuICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKHRoaXMsIG5ld1N0YXRlKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9zaXRlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZXIuaXNNb3VudGVkKHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgcHJvcHMgYXJlIHVwZGF0ZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAcHVibGljXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBzZXRQcm9wczogZnVuY3Rpb24gKHBhcnRpYWxQcm9wcywgY2FsbGJhY2spIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FyblNldFByb3BzKCk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0UHJvcHModGhpcywgcGFydGlhbFByb3BzKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZSBhbGwgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHMgU3Vic2V0IG9mIHRoZSBuZXh0IHByb3BzLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgKiBAZmluYWxcbiAgICogQHB1YmxpY1xuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgcmVwbGFjZVByb3BzOiBmdW5jdGlvbiAobmV3UHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm5TZXRQcm9wcygpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VQcm9wcyh0aGlzLCBuZXdQcm9wcyk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBSZWFjdENsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge307XG5hc3NpZ24oUmVhY3RDbGFzc0NvbXBvbmVudC5wcm90b3R5cGUsIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RDbGFzc01peGluKTtcblxuLyoqXG4gKiBNb2R1bGUgZm9yIGNyZWF0aW5nIGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICpcbiAqIEBjbGFzcyBSZWFjdENsYXNzXG4gKi9cbnZhciBSZWFjdENsYXNzID0ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIGNvbXBvbmVudCBjbGFzcyBnaXZlbiBhIGNsYXNzIHNwZWNpZmljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzcGVjIENsYXNzIHNwZWNpZmljYXRpb24gKHdoaWNoIG11c3QgZGVmaW5lIGByZW5kZXJgKS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IENvbXBvbmVudCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY3JlYXRlQ2xhc3M6IGZ1bmN0aW9uIChzcGVjKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gICAgICAvLyBUaGlzIGNvbnN0cnVjdG9yIGlzIG92ZXJyaWRkZW4gYnkgbW9ja3MuIFRoZSBhcmd1bWVudCBpcyB1c2VkXG4gICAgICAvLyBieSBtb2NrcyB0byBhc3NlcnQgb24gd2hhdCBnZXRzIG1vdW50ZWQuXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHRoaXMgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvciwgJ1NvbWV0aGluZyBpcyBjYWxsaW5nIGEgUmVhY3QgY29tcG9uZW50IGRpcmVjdGx5LiBVc2UgYSBmYWN0b3J5IG9yICcgKyAnSlNYIGluc3RlYWQuIFNlZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1sZWdhY3lmYWN0b3J5JykgOiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFdpcmUgdXAgYXV0by1iaW5kaW5nXG4gICAgICBpZiAodGhpcy5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgICAgYmluZEF1dG9CaW5kTWV0aG9kcyh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgICAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG5cbiAgICAgIC8vIFJlYWN0Q2xhc3NlcyBkb2Vzbid0IGhhdmUgY29uc3RydWN0b3JzLiBJbnN0ZWFkLCB0aGV5IHVzZSB0aGVcbiAgICAgIC8vIGdldEluaXRpYWxTdGF0ZSBhbmQgY29tcG9uZW50V2lsbE1vdW50IG1ldGhvZHMgZm9yIGluaXRpYWxpemF0aW9uLlxuXG4gICAgICB2YXIgaW5pdGlhbFN0YXRlID0gdGhpcy5nZXRJbml0aWFsU3RhdGUgPyB0aGlzLmdldEluaXRpYWxTdGF0ZSgpIDogbnVsbDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5nZXRJbml0aWFsU3RhdGUuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBiYWQgcHJhY3RpY2UuIENvbnNpZGVyIHdhcm5pbmcgaGVyZSBhbmRcbiAgICAgICAgICAvLyBkZXByZWNhdGluZyB0aGlzIGNvbnZlbmllbmNlLlxuICAgICAgICAgIGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICEodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJywgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIH07XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IFJlYWN0Q2xhc3NDb21wb25lbnQoKTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcblxuICAgIGluamVjdGVkTWl4aW5zLmZvckVhY2gobWl4U3BlY0ludG9Db21wb25lbnQuYmluZChudWxsLCBDb25zdHJ1Y3RvcikpO1xuXG4gICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgZGVmYXVsdFByb3BzIHByb3BlcnR5IGFmdGVyIGFsbCBtaXhpbnMgaGF2ZSBiZWVuIG1lcmdlZC5cbiAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHMgPSBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMoKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gVGhpcyBpcyBhIHRhZyB0byBpbmRpY2F0ZSB0aGF0IHRoZSB1c2Ugb2YgdGhlc2UgbWV0aG9kIG5hbWVzIGlzIG9rLFxuICAgICAgLy8gc2luY2UgaXQncyB1c2VkIHdpdGggY3JlYXRlQ2xhc3MuIElmIGl0J3Mgbm90LCB0aGVuIGl0J3MgbGlrZWx5IGFcbiAgICAgIC8vIG1pc3Rha2Ugc28gd2UnbGwgd2FybiB5b3UgdG8gdXNlIHRoZSBzdGF0aWMgcHJvcGVydHksIHByb3BlcnR5XG4gICAgICAvLyBpbml0aWFsaXplciBvciBjb25zdHJ1Y3RvciByZXNwZWN0aXZlbHkuXG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUpIHtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgICFDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2NyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgKyAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgKyAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJywgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/Jywgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBSZWR1Y2UgdGltZSBzcGVudCBkb2luZyBsb29rdXBzIGJ5IHNldHRpbmcgdGhlc2Ugb24gdGhlIHByb3RvdHlwZS5cbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9LFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdE1peGluOiBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICAgIGluamVjdGVkTWl4aW5zLnB1c2gobWl4aW4pO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2xhc3M7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkRiR0Z6Y3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ERXpMVEl3TVRVc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1SUNwY2JpQXFJRlJvYVhNZ2MyOTFjbU5sSUdOdlpHVWdhWE1nYkdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDMXpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR2x1SUhSb1pWeHVJQ29nVEVsRFJVNVRSU0JtYVd4bElHbHVJSFJvWlNCeWIyOTBJR1JwY21WamRHOXllU0J2WmlCMGFHbHpJSE52ZFhKalpTQjBjbVZsTGlCQmJpQmhaR1JwZEdsdmJtRnNJR2R5WVc1MFhHNGdLaUJ2WmlCd1lYUmxiblFnY21sbmFIUnpJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQjBhR1VnVUVGVVJVNVVVeUJtYVd4bElHbHVJSFJvWlNCellXMWxJR1JwY21WamRHOXllUzVjYmlBcVhHNGdLaUJBY0hKdmRtbGtaWE5OYjJSMWJHVWdVbVZoWTNSRGJHRnpjMXh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUZKbFlXTjBRMjl0Y0c5dVpXNTBJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRU52YlhCdmJtVnVkQ2NwTzF4dWRtRnlJRkpsWVdOMFJXeGxiV1Z1ZENBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSRmJHVnRaVzUwSnlrN1hHNTJZWElnVW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dWN5QTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dWN5Y3BPMXh1ZG1GeUlGSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZiazVoYldWeklEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRGQnliM0JVZVhCbFRHOWpZWFJwYjI1T1lXMWxjeWNwTzF4dWRtRnlJRkpsWVdOMFRtOXZjRlZ3WkdGMFpWRjFaWFZsSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEU1dmIzQlZjR1JoZEdWUmRXVjFaU2NwTzF4dVhHNTJZWElnWVhOemFXZHVJRDBnY21WeGRXbHlaU2duTGk5UFltcGxZM1F1WVhOemFXZHVKeWs3WEc1MllYSWdaVzF3ZEhsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NkbVltcHpMMnhwWWk5bGJYQjBlVTlpYW1WamRDY3BPMXh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMmx1ZG1GeWFXRnVkQ2NwTzF4dWRtRnlJR3RsZVUxcGNuSnZjaUE5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDJ0bGVVMXBjbkp2Y2ljcE8xeHVkbUZ5SUd0bGVVOW1JRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2YTJWNVQyWW5LVHRjYm5aaGNpQjNZWEp1YVc1bklEMGdjbVZ4ZFdseVpTZ25abUpxY3k5c2FXSXZkMkZ5Ym1sdVp5Y3BPMXh1WEc1MllYSWdUVWxZU1U1VFgwdEZXU0E5SUd0bGVVOW1LSHNnYldsNGFXNXpPaUJ1ZFd4c0lIMHBPMXh1WEc0dktpcGNiaUFxSUZCdmJHbGphV1Z6SUhSb1lYUWdaR1Z6WTNKcFltVWdiV1YwYUc5a2N5QnBiaUJnVW1WaFkzUkRiR0Z6YzBsdWRHVnlabUZqWldBdVhHNGdLaTljYm5aaGNpQlRjR1ZqVUc5c2FXTjVJRDBnYTJWNVRXbHljbTl5S0h0Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlhObElHMWxkR2h2WkhNZ2JXRjVJR0psSUdSbFptbHVaV1FnYjI1c2VTQnZibU5sSUdKNUlIUm9aU0JqYkdGemN5QnpjR1ZqYVdacFkyRjBhVzl1SUc5eUlHMXBlR2x1TGx4dUlDQWdLaTljYmlBZ1JFVkdTVTVGWDA5T1EwVTZJRzUxYkd3c1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdWelpTQnRaWFJvYjJSeklHMWhlU0JpWlNCa1pXWnBibVZrSUdKNUlHSnZkR2dnZEdobElHTnNZWE56SUhOd1pXTnBabWxqWVhScGIyNGdZVzVrSUcxcGVHbHVjeTVjYmlBZ0lDb2dVM1ZpYzJWeGRXVnVkQ0JrWldacGJtbDBhVzl1Y3lCM2FXeHNJR0psSUdOb1lXbHVaV1F1SUZSb1pYTmxJRzFsZEdodlpITWdiWFZ6ZENCeVpYUjFjbTRnZG05cFpDNWNiaUFnSUNvdlhHNGdJRVJGUmtsT1JWOU5RVTVaT2lCdWRXeHNMRnh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxjMlVnYldWMGFHOWtjeUJoY21VZ2IzWmxjbkpwWkdsdVp5QjBhR1VnWW1GelpTQmpiR0Z6Y3k1Y2JpQWdJQ292WEc0Z0lFOVdSVkpTU1VSRlgwSkJVMFU2SUc1MWJHd3NYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVnpaU0J0WlhSb2IyUnpJR0Z5WlNCemFXMXBiR0Z5SUhSdklFUkZSa2xPUlY5TlFVNVpMQ0JsZUdObGNIUWdkMlVnWVhOemRXMWxJSFJvWlhrZ2NtVjBkWEp1WEc0Z0lDQXFJRzlpYW1WamRITXVJRmRsSUhSeWVTQjBieUJ0WlhKblpTQjBhR1VnYTJWNWN5QnZaaUIwYUdVZ2NtVjBkWEp1SUhaaGJIVmxjeUJ2WmlCaGJHd2dkR2hsSUcxcGVHVmtJR2x1WEc0Z0lDQXFJR1oxYm1OMGFXOXVjeTRnU1dZZ2RHaGxjbVVnYVhNZ1lTQnJaWGtnWTI5dVpteHBZM1FnZDJVZ2RHaHliM2N1WEc0Z0lDQXFMMXh1SUNCRVJVWkpUa1ZmVFVGT1dWOU5SVkpIUlVRNklHNTFiR3hjYm4wcE8xeHVYRzUyWVhJZ2FXNXFaV04wWldSTmFYaHBibk1nUFNCYlhUdGNibHh1ZG1GeUlIZGhjbTVsWkZObGRGQnliM0J6SUQwZ1ptRnNjMlU3WEc1bWRXNWpkR2x2YmlCM1lYSnVVMlYwVUhKdmNITW9LU0I3WEc0Z0lHbG1JQ2doZDJGeWJtVmtVMlYwVUhKdmNITXBJSHRjYmlBZ0lDQjNZWEp1WldSVFpYUlFjbTl3Y3lBOUlIUnlkV1U3WEc0Z0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUhkaGNtNXBibWNvWm1Gc2MyVXNJQ2R6WlhSUWNtOXdjeWd1TGk0cElHRnVaQ0J5WlhCc1lXTmxVSEp2Y0hNb0xpNHVLU0JoY21VZ1pHVndjbVZqWVhSbFpDNGdKeUFySUNkSmJuTjBaV0ZrTENCallXeHNJSEpsYm1SbGNpQmhaMkZwYmlCaGRDQjBhR1VnZEc5d0lHeGxkbVZzTGljcElEb2dkVzVrWldacGJtVmtPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUTI5dGNHOXphWFJsSUdOdmJYQnZibVZ1ZEhNZ1lYSmxJR2hwWjJobGNpMXNaWFpsYkNCamIyMXdiMjVsYm5SeklIUm9ZWFFnWTI5dGNHOXpaU0J2ZEdobGNpQmpiMjF3YjNOcGRHVmNiaUFxSUc5eUlHNWhkR2wyWlNCamIyMXdiMjVsYm5SekxseHVJQ3BjYmlBcUlGUnZJR055WldGMFpTQmhJRzVsZHlCMGVYQmxJRzltSUdCU1pXRmpkRU5zWVhOellDd2djR0Z6Y3lCaElITndaV05wWm1sallYUnBiMjRnYjJaY2JpQXFJSGx2ZFhJZ2JtVjNJR05zWVhOeklIUnZJR0JTWldGamRDNWpjbVZoZEdWRGJHRnpjMkF1SUZSb1pTQnZibXg1SUhKbGNYVnBjbVZ0Wlc1MElHOW1JSGx2ZFhJZ1kyeGhjM05jYmlBcUlITndaV05wWm1sallYUnBiMjRnYVhNZ2RHaGhkQ0I1YjNVZ2FXMXdiR1Z0Wlc1MElHRWdZSEpsYm1SbGNtQWdiV1YwYUc5a0xseHVJQ3BjYmlBcUlDQWdkbUZ5SUUxNVEyOXRjRzl1Wlc1MElEMGdVbVZoWTNRdVkzSmxZWFJsUTJ4aGMzTW9lMXh1SUNvZ0lDQWdJSEpsYm1SbGNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0tpQWdJQ0FnSUNCeVpYUjFjbTRnUEdScGRqNUlaV3hzYnlCWGIzSnNaRHd2WkdsMlBqdGNiaUFxSUNBZ0lDQjlYRzRnS2lBZ0lIMHBPMXh1SUNwY2JpQXFJRlJvWlNCamJHRnpjeUJ6Y0dWamFXWnBZMkYwYVc5dUlITjFjSEJ2Y25SeklHRWdjM0JsWTJsbWFXTWdjSEp2ZEc5amIyd2diMllnYldWMGFHOWtjeUIwYUdGMElHaGhkbVZjYmlBcUlITndaV05wWVd3Z2JXVmhibWx1WnlBb1pTNW5MaUJnY21WdVpHVnlZQ2t1SUZObFpTQmdVbVZoWTNSRGJHRnpjMGx1ZEdWeVptRmpaV0FnWm05eVhHNGdLaUJ0YjNKbElIUm9aU0JqYjIxd2NtVm9aVzV6YVhabElIQnliM1J2WTI5c0xpQkJibmtnYjNSb1pYSWdjSEp2Y0dWeWRHbGxjeUJoYm1RZ2JXVjBhRzlrY3lCcGJpQjBhR1ZjYmlBcUlHTnNZWE56SUhOd1pXTnBabWxqWVhScGIyNGdkMmxzYkNCaVpTQmhkbUZwYkdGaWJHVWdiMjRnZEdobElIQnliM1J2ZEhsd1pTNWNiaUFxWEc0Z0tpQkFhVzUwWlhKbVlXTmxJRkpsWVdOMFEyeGhjM05KYm5SbGNtWmhZMlZjYmlBcUlFQnBiblJsY201aGJGeHVJQ292WEc1MllYSWdVbVZoWTNSRGJHRnpjMGx1ZEdWeVptRmpaU0E5SUh0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVc0Z1lYSnlZWGtnYjJZZ1RXbDRhVzRnYjJKcVpXTjBjeUIwYnlCcGJtTnNkV1JsSUhkb1pXNGdaR1ZtYVc1cGJtY2dlVzkxY2lCamIyMXdiMjVsYm5RdVhHNGdJQ0FxWEc0Z0lDQXFJRUIwZVhCbElIdGhjbkpoZVgxY2JpQWdJQ29nUUc5d2RHbHZibUZzWEc0Z0lDQXFMMXh1SUNCdGFYaHBibk02SUZOd1pXTlFiMnhwWTNrdVJFVkdTVTVGWDAxQlRsa3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRnVJRzlpYW1WamRDQmpiMjUwWVdsdWFXNW5JSEJ5YjNCbGNuUnBaWE1nWVc1a0lHMWxkR2h2WkhNZ2RHaGhkQ0J6YUc5MWJHUWdZbVVnWkdWbWFXNWxaQ0J2Ymx4dUlDQWdLaUIwYUdVZ1kyOXRjRzl1Wlc1MEozTWdZMjl1YzNSeWRXTjBiM0lnYVc1emRHVmhaQ0J2WmlCcGRITWdjSEp2ZEc5MGVYQmxJQ2h6ZEdGMGFXTWdiV1YwYUc5a2N5a3VYRzRnSUNBcVhHNGdJQ0FxSUVCMGVYQmxJSHR2WW1wbFkzUjlYRzRnSUNBcUlFQnZjSFJwYjI1aGJGeHVJQ0FnS2k5Y2JpQWdjM1JoZEdsamN6b2dVM0JsWTFCdmJHbGplUzVFUlVaSlRrVmZUVUZPV1N4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUkdWbWFXNXBkR2x2YmlCdlppQndjbTl3SUhSNWNHVnpJR1p2Y2lCMGFHbHpJR052YlhCdmJtVnVkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTI5aWFtVmpkSDFjYmlBZ0lDb2dRRzl3ZEdsdmJtRnNYRzRnSUNBcUwxeHVJQ0J3Y205d1ZIbHdaWE02SUZOd1pXTlFiMnhwWTNrdVJFVkdTVTVGWDAxQlRsa3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxabWx1YVhScGIyNGdiMllnWTI5dWRHVjRkQ0IwZVhCbGN5Qm1iM0lnZEdocGN5QmpiMjF3YjI1bGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUVCMGVYQmxJSHR2WW1wbFkzUjlYRzRnSUNBcUlFQnZjSFJwYjI1aGJGeHVJQ0FnS2k5Y2JpQWdZMjl1ZEdWNGRGUjVjR1Z6T2lCVGNHVmpVRzlzYVdONUxrUkZSa2xPUlY5TlFVNVpMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaV1pwYm1sMGFXOXVJRzltSUdOdmJuUmxlSFFnZEhsd1pYTWdkR2hwY3lCamIyMXdiMjVsYm5RZ2MyVjBjeUJtYjNJZ2FYUnpJR05vYVd4a2NtVnVMbHh1SUNBZ0tseHVJQ0FnS2lCQWRIbHdaU0I3YjJKcVpXTjBmVnh1SUNBZ0tpQkFiM0IwYVc5dVlXeGNiaUFnSUNvdlhHNGdJR05vYVd4a1EyOXVkR1Y0ZEZSNWNHVnpPaUJUY0dWalVHOXNhV041TGtSRlJrbE9SVjlOUVU1WkxGeHVYRzRnSUM4dklEMDlQVDBnUkdWbWFXNXBkR2x2YmlCdFpYUm9iMlJ6SUQwOVBUMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNTJiMnRsWkNCM2FHVnVJSFJvWlNCamIyMXdiMjVsYm5RZ2FYTWdiVzkxYm5SbFpDNGdWbUZzZFdWeklHbHVJSFJvWlNCdFlYQndhVzVuSUhkcGJHd2dZbVVnYzJWMElHOXVYRzRnSUNBcUlHQjBhR2x6TG5CeWIzQnpZQ0JwWmlCMGFHRjBJSEJ5YjNBZ2FYTWdibTkwSUhOd1pXTnBabWxsWkNBb2FTNWxMaUIxYzJsdVp5QmhiaUJnYVc1Z0lHTm9aV05yS1M1Y2JpQWdJQ3BjYmlBZ0lDb2dWR2hwY3lCdFpYUm9iMlFnYVhNZ2FXNTJiMnRsWkNCaVpXWnZjbVVnWUdkbGRFbHVhWFJwWVd4VGRHRjBaV0FnWVc1a0lIUm9aWEpsWm05eVpTQmpZVzV1YjNRZ2NtVnNlVnh1SUNBZ0tpQnZiaUJnZEdocGN5NXpkR0YwWldBZ2IzSWdkWE5sSUdCMGFHbHpMbk5sZEZOMFlYUmxZQzVjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5YmlCN2IySnFaV04wZlZ4dUlDQWdLaUJBYjNCMGFXOXVZV3hjYmlBZ0lDb3ZYRzRnSUdkbGRFUmxabUYxYkhSUWNtOXdjem9nVTNCbFkxQnZiR2xqZVM1RVJVWkpUa1ZmVFVGT1dWOU5SVkpIUlVRc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWRtOXJaV1FnYjI1alpTQmlaV1p2Y21VZ2RHaGxJR052YlhCdmJtVnVkQ0JwY3lCdGIzVnVkR1ZrTGlCVWFHVWdjbVYwZFhKdUlIWmhiSFZsSUhkcGJHd2dZbVVnZFhObFpGeHVJQ0FnS2lCaGN5QjBhR1VnYVc1cGRHbGhiQ0IyWVd4MVpTQnZaaUJnZEdocGN5NXpkR0YwWldBdVhHNGdJQ0FxWEc0Z0lDQXFJQ0FnWjJWMFNXNXBkR2xoYkZOMFlYUmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ29nSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FxSUNBZ0lDQWdJR2x6VDI0NklHWmhiSE5sTEZ4dUlDQWdLaUFnSUNBZ0lDQm1iMjlDWVhvNklHNWxkeUJDWVhwR2IyOG9LVnh1SUNBZ0tpQWdJQ0FnZlZ4dUlDQWdLaUFnSUgxY2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdiMkpxWldOMGZWeHVJQ0FnS2lCQWIzQjBhVzl1WVd4Y2JpQWdJQ292WEc0Z0lHZGxkRWx1YVhScFlXeFRkR0YwWlRvZ1UzQmxZMUJ2YkdsamVTNUVSVVpKVGtWZlRVRk9XVjlOUlZKSFJVUXNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQnlaWFIxY200Z2UyOWlhbVZqZEgxY2JpQWdJQ29nUUc5d2RHbHZibUZzWEc0Z0lDQXFMMXh1SUNCblpYUkRhR2xzWkVOdmJuUmxlSFE2SUZOd1pXTlFiMnhwWTNrdVJFVkdTVTVGWDAxQlRsbGZUVVZTUjBWRUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmMyVnpJSEJ5YjNCeklHWnliMjBnWUhSb2FYTXVjSEp2Y0hOZ0lHRnVaQ0J6ZEdGMFpTQm1jbTl0SUdCMGFHbHpMbk4wWVhSbFlDQjBieUJ5Wlc1a1pYSWdkR2hsWEc0Z0lDQXFJSE4wY25WamRIVnlaU0J2WmlCMGFHVWdZMjl0Y0c5dVpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCT2J5Qm5kV0Z5WVc1MFpXVnpJR0Z5WlNCdFlXUmxJR0ZpYjNWMElIZG9aVzRnYjNJZ2FHOTNJRzltZEdWdUlIUm9hWE1nYldWMGFHOWtJR2x6SUdsdWRtOXJaV1FzSUhOdlhHNGdJQ0FxSUdsMElHMTFjM1FnYm05MElHaGhkbVVnYzJsa1pTQmxabVpsWTNSekxseHVJQ0FnS2x4dUlDQWdLaUFnSUhKbGJtUmxjam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FxSUNBZ0lDQjJZWElnYm1GdFpTQTlJSFJvYVhNdWNISnZjSE11Ym1GdFpUdGNiaUFnSUNvZ0lDQWdJSEpsZEhWeWJpQThaR2wyUGtobGJHeHZMQ0I3Ym1GdFpYMGhQQzlrYVhZK08xeHVJQ0FnS2lBZ0lIMWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3VW1WaFkzUkRiMjF3YjI1bGJuUjlYRzRnSUNBcUlFQnViM05wWkdWbFptWmxZM1J6WEc0Z0lDQXFJRUJ5WlhGMWFYSmxaRnh1SUNBZ0tpOWNiaUFnY21WdVpHVnlPaUJUY0dWalVHOXNhV041TGtSRlJrbE9SVjlQVGtORkxGeHVYRzRnSUM4dklEMDlQVDBnUkdWc1pXZGhkR1VnYldWMGFHOWtjeUE5UFQwOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWRtOXJaV1FnZDJobGJpQjBhR1VnWTI5dGNHOXVaVzUwSUdseklHbHVhWFJwWVd4c2VTQmpjbVZoZEdWa0lHRnVaQ0JoWW05MWRDQjBieUJpWlNCdGIzVnVkR1ZrTGx4dUlDQWdLaUJVYUdseklHMWhlU0JvWVhabElITnBaR1VnWldabVpXTjBjeXdnWW5WMElHRnVlU0JsZUhSbGNtNWhiQ0J6ZFdKelkzSnBjSFJwYjI1eklHOXlJR1JoZEdFZ1kzSmxZWFJsWkZ4dUlDQWdLaUJpZVNCMGFHbHpJRzFsZEdodlpDQnRkWE4wSUdKbElHTnNaV0Z1WldRZ2RYQWdhVzRnWUdOdmJYQnZibVZ1ZEZkcGJHeFZibTF2ZFc1MFlDNWNiaUFnSUNwY2JpQWdJQ29nUUc5d2RHbHZibUZzWEc0Z0lDQXFMMXh1SUNCamIyMXdiMjVsYm5SWGFXeHNUVzkxYm5RNklGTndaV05RYjJ4cFkza3VSRVZHU1U1RlgwMUJUbGtzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1ZG05clpXUWdkMmhsYmlCMGFHVWdZMjl0Y0c5dVpXNTBJR2hoY3lCaVpXVnVJRzF2ZFc1MFpXUWdZVzVrSUdoaGN5QmhJRVJQVFNCeVpYQnlaWE5sYm5SaGRHbHZiaTVjYmlBZ0lDb2dTRzkzWlhabGNpd2dkR2hsY21VZ2FYTWdibThnWjNWaGNtRnVkR1ZsSUhSb1lYUWdkR2hsSUVSUFRTQnViMlJsSUdseklHbHVJSFJvWlNCa2IyTjFiV1Z1ZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dWWE5sSUhSb2FYTWdZWE1nWVc0Z2IzQndiM0owZFc1cGRIa2dkRzhnYjNCbGNtRjBaU0J2YmlCMGFHVWdSRTlOSUhkb1pXNGdkR2hsSUdOdmJYQnZibVZ1ZENCb1lYTmNiaUFnSUNvZ1ltVmxiaUJ0YjNWdWRHVmtJQ2hwYm1sMGFXRnNhWHBsWkNCaGJtUWdjbVZ1WkdWeVpXUXBJR1p2Y2lCMGFHVWdabWx5YzNRZ2RHbHRaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0RVQwMUZiR1Z0Wlc1MGZTQnliMjkwVG05a1pTQkVUMDBnWld4bGJXVnVkQ0J5WlhCeVpYTmxiblJwYm1jZ2RHaGxJR052YlhCdmJtVnVkQzVjYmlBZ0lDb2dRRzl3ZEdsdmJtRnNYRzRnSUNBcUwxeHVJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkRG9nVTNCbFkxQnZiR2xqZVM1RVJVWkpUa1ZmVFVGT1dTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNTJiMnRsWkNCaVpXWnZjbVVnZEdobElHTnZiWEJ2Ym1WdWRDQnlaV05sYVhabGN5QnVaWGNnY0hKdmNITXVYRzRnSUNBcVhHNGdJQ0FxSUZWelpTQjBhR2x6SUdGeklHRnVJRzl3Y0c5eWRIVnVhWFI1SUhSdklISmxZV04wSUhSdklHRWdjSEp2Y0NCMGNtRnVjMmwwYVc5dUlHSjVJSFZ3WkdGMGFXNW5JSFJvWlZ4dUlDQWdLaUJ6ZEdGMFpTQjFjMmx1WnlCZ2RHaHBjeTV6WlhSVGRHRjBaV0F1SUVOMWNuSmxiblFnY0hKdmNITWdZWEpsSUdGalkyVnpjMlZrSUhacFlTQmdkR2hwY3k1d2NtOXdjMkF1WEc0Z0lDQXFYRzRnSUNBcUlDQWdZMjl0Y0c5dVpXNTBWMmxzYkZKbFkyVnBkbVZRY205d2N6b2dablZ1WTNScGIyNG9ibVY0ZEZCeWIzQnpMQ0J1WlhoMFEyOXVkR1Y0ZENrZ2UxeHVJQ0FnS2lBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN1hHNGdJQ0FxSUNBZ0lDQWdJR3hwYTJWelNXNWpjbVZoYzJsdVp6b2dibVY0ZEZCeWIzQnpMbXhwYTJWRGIzVnVkQ0ErSUhSb2FYTXVjSEp2Y0hNdWJHbHJaVU52ZFc1MFhHNGdJQ0FxSUNBZ0lDQjlLVHRjYmlBZ0lDb2dJQ0I5WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUZSb1pYSmxJR2x6SUc1dklHVnhkV2wyWVd4bGJuUWdZR052YlhCdmJtVnVkRmRwYkd4U1pXTmxhWFpsVTNSaGRHVmdMaUJCYmlCcGJtTnZiV2x1WnlCd2NtOXdYRzRnSUNBcUlIUnlZVzV6YVhScGIyNGdiV0Y1SUdOaGRYTmxJR0VnYzNSaGRHVWdZMmhoYm1kbExDQmlkWFFnZEdobElHOXdjRzl6YVhSbElHbHpJRzV2ZENCMGNuVmxMaUJKWmlCNWIzVmNiaUFnSUNvZ2JtVmxaQ0JwZEN3Z2VXOTFJR0Z5WlNCd2NtOWlZV0pzZVNCc2IyOXJhVzVuSUdadmNpQmdZMjl0Y0c5dVpXNTBWMmxzYkZWd1pHRjBaV0F1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCdVpYaDBVSEp2Y0hOY2JpQWdJQ29nUUc5d2RHbHZibUZzWEc0Z0lDQXFMMXh1SUNCamIyMXdiMjVsYm5SWGFXeHNVbVZqWldsMlpWQnliM0J6T2lCVGNHVmpVRzlzYVdONUxrUkZSa2xPUlY5TlFVNVpMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpiblp2YTJWa0lIZG9hV3hsSUdSbFkybGthVzVuSUdsbUlIUm9aU0JqYjIxd2IyNWxiblFnYzJodmRXeGtJR0psSUhWd1pHRjBaV1FnWVhNZ1lTQnlaWE4xYkhRZ2IyWmNiaUFnSUNvZ2NtVmpaV2wyYVc1bklHNWxkeUJ3Y205d2N5d2djM1JoZEdVZ1lXNWtMMjl5SUdOdmJuUmxlSFF1WEc0Z0lDQXFYRzRnSUNBcUlGVnpaU0IwYUdseklHRnpJR0Z1SUc5d2NHOXlkSFZ1YVhSNUlIUnZJR0J5WlhSMWNtNGdabUZzYzJWZ0lIZG9aVzRnZVc5MUozSmxJR05sY25SaGFXNGdkR2hoZENCMGFHVmNiaUFnSUNvZ2RISmhibk5wZEdsdmJpQjBieUIwYUdVZ2JtVjNJSEJ5YjNCekwzTjBZWFJsTDJOdmJuUmxlSFFnZDJsc2JDQnViM1FnY21WeGRXbHlaU0JoSUdOdmJYQnZibVZ1ZEZ4dUlDQWdLaUIxY0dSaGRHVXVYRzRnSUNBcVhHNGdJQ0FxSUNBZ2MyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxPaUJtZFc1amRHbHZiaWh1WlhoMFVISnZjSE1zSUc1bGVIUlRkR0YwWlN3Z2JtVjRkRU52Ym5SbGVIUXBJSHRjYmlBZ0lDb2dJQ0FnSUhKbGRIVnliaUFoWlhGMVlXd29ibVY0ZEZCeWIzQnpMQ0IwYUdsekxuQnliM0J6S1NCOGZGeHVJQ0FnS2lBZ0lDQWdJQ0FoWlhGMVlXd29ibVY0ZEZOMFlYUmxMQ0IwYUdsekxuTjBZWFJsS1NCOGZGeHVJQ0FnS2lBZ0lDQWdJQ0FoWlhGMVlXd29ibVY0ZEVOdmJuUmxlSFFzSUhSb2FYTXVZMjl1ZEdWNGRDazdYRzRnSUNBcUlDQWdmVnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYm1WNGRGQnliM0J6WEc0Z0lDQXFJRUJ3WVhKaGJTQjdQMjlpYW1WamRIMGdibVY0ZEZOMFlYUmxYRzRnSUNBcUlFQndZWEpoYlNCN1AyOWlhbVZqZEgwZ2JtVjRkRU52Ym5SbGVIUmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1ltOXZiR1ZoYm4wZ1ZISjFaU0JwWmlCMGFHVWdZMjl0Y0c5dVpXNTBJSE5vYjNWc1pDQjFjR1JoZEdVdVhHNGdJQ0FxSUVCdmNIUnBiMjVoYkZ4dUlDQWdLaTljYmlBZ2MyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxPaUJUY0dWalVHOXNhV041TGtSRlJrbE9SVjlQVGtORkxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJuWnZhMlZrSUhkb1pXNGdkR2hsSUdOdmJYQnZibVZ1ZENCcGN5QmhZbTkxZENCMGJ5QjFjR1JoZEdVZ1pIVmxJSFJ2SUdFZ2RISmhibk5wZEdsdmJpQm1jbTl0WEc0Z0lDQXFJR0IwYUdsekxuQnliM0J6WUN3Z1lIUm9hWE11YzNSaGRHVmdJR0Z1WkNCZ2RHaHBjeTVqYjI1MFpYaDBZQ0IwYnlCZ2JtVjRkRkJ5YjNCellDd2dZRzVsZUhSVGRHRjBaV0JjYmlBZ0lDb2dZVzVrSUdCdVpYaDBRMjl1ZEdWNGRHQXVYRzRnSUNBcVhHNGdJQ0FxSUZWelpTQjBhR2x6SUdGeklHRnVJRzl3Y0c5eWRIVnVhWFI1SUhSdklIQmxjbVp2Y20wZ2NISmxjR0Z5WVhScGIyNGdZbVZtYjNKbElHRnVJSFZ3WkdGMFpTQnZZMk4xY25NdVhHNGdJQ0FxWEc0Z0lDQXFJRTVQVkVVNklGbHZkU0FxS21OaGJtNXZkQ29xSUhWelpTQmdkR2hwY3k1elpYUlRkR0YwWlNncFlDQnBiaUIwYUdseklHMWxkR2h2WkM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHNWxlSFJRY205d2MxeHVJQ0FnS2lCQWNHRnlZVzBnZXo5dlltcGxZM1I5SUc1bGVIUlRkR0YwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlejl2WW1wbFkzUjlJRzVsZUhSRGIyNTBaWGgwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSU1pXTnZibU5wYkdWVWNtRnVjMkZqZEdsdmJuMGdkSEpoYm5OaFkzUnBiMjVjYmlBZ0lDb2dRRzl3ZEdsdmJtRnNYRzRnSUNBcUwxeHVJQ0JqYjIxd2IyNWxiblJYYVd4c1ZYQmtZWFJsT2lCVGNHVmpVRzlzYVdONUxrUkZSa2xPUlY5TlFVNVpMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpiblp2YTJWa0lIZG9aVzRnZEdobElHTnZiWEJ2Ym1WdWRDZHpJRVJQVFNCeVpYQnlaWE5sYm5SaGRHbHZiaUJvWVhNZ1ltVmxiaUIxY0dSaGRHVmtMbHh1SUNBZ0tseHVJQ0FnS2lCVmMyVWdkR2hwY3lCaGN5QmhiaUJ2Y0hCdmNuUjFibWwwZVNCMGJ5QnZjR1Z5WVhSbElHOXVJSFJvWlNCRVQwMGdkMmhsYmlCMGFHVWdZMjl0Y0c5dVpXNTBJR2hoYzF4dUlDQWdLaUJpWldWdUlIVndaR0YwWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQndjbVYyVUhKdmNITmNiaUFnSUNvZ1FIQmhjbUZ0SUhzL2IySnFaV04wZlNCd2NtVjJVM1JoZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHMvYjJKcVpXTjBmU0J3Y21WMlEyOXVkR1Y0ZEZ4dUlDQWdLaUJBY0dGeVlXMGdlMFJQVFVWc1pXMWxiblI5SUhKdmIzUk9iMlJsSUVSUFRTQmxiR1Z0Wlc1MElISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2lCQWIzQjBhVzl1WVd4Y2JpQWdJQ292WEc0Z0lHTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpUb2dVM0JsWTFCdmJHbGplUzVFUlVaSlRrVmZUVUZPV1N4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1MmIydGxaQ0IzYUdWdUlIUm9aU0JqYjIxd2IyNWxiblFnYVhNZ1lXSnZkWFFnZEc4Z1ltVWdjbVZ0YjNabFpDQm1jbTl0SUdsMGN5QndZWEpsYm5RZ1lXNWtJR2hoZG1WY2JpQWdJQ29nYVhSeklFUlBUU0J5WlhCeVpYTmxiblJoZEdsdmJpQmtaWE4wY205NVpXUXVYRzRnSUNBcVhHNGdJQ0FxSUZWelpTQjBhR2x6SUdGeklHRnVJRzl3Y0c5eWRIVnVhWFI1SUhSdklHUmxZV3hzYjJOaGRHVWdZVzU1SUdWNGRHVnlibUZzSUhKbGMyOTFjbU5sY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dUazlVUlRvZ1ZHaGxjbVVnYVhNZ2JtOGdZR052YlhCdmJtVnVkRVJwWkZWdWJXOTFiblJnSUhOcGJtTmxJSGx2ZFhJZ1kyOXRjRzl1Wlc1MElIZHBiR3dnYUdGMlpTQmlaV1Z1WEc0Z0lDQXFJR1JsYzNSeWIzbGxaQ0JpZVNCMGFHRjBJSEJ2YVc1MExseHVJQ0FnS2x4dUlDQWdLaUJBYjNCMGFXOXVZV3hjYmlBZ0lDb3ZYRzRnSUdOdmJYQnZibVZ1ZEZkcGJHeFZibTF2ZFc1ME9pQlRjR1ZqVUc5c2FXTjVMa1JGUmtsT1JWOU5RVTVaTEZ4dVhHNGdJQzh2SUQwOVBUMGdRV1IyWVc1alpXUWdiV1YwYUc5a2N5QTlQVDA5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlZ3WkdGMFpYTWdkR2hsSUdOdmJYQnZibVZ1ZENkeklHTjFjbkpsYm5Sc2VTQnRiM1Z1ZEdWa0lFUlBUU0J5WlhCeVpYTmxiblJoZEdsdmJpNWNiaUFnSUNwY2JpQWdJQ29nUW5rZ1pHVm1ZWFZzZEN3Z2RHaHBjeUJwYlhCc1pXMWxiblJ6SUZKbFlXTjBKM01nY21WdVpHVnlhVzVuSUdGdVpDQnlaV052Ym1OcGJHbGhkR2x2YmlCaGJHZHZjbWwwYUcwdVhHNGdJQ0FxSUZOdmNHaHBjM1JwWTJGMFpXUWdZMnhwWlc1MGN5QnRZWGtnZDJsemFDQjBieUJ2ZG1WeWNtbGtaU0IwYUdsekxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNTlJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpQkFiM1psY25KcFpHRmliR1ZjYmlBZ0lDb3ZYRzRnSUhWd1pHRjBaVU52YlhCdmJtVnVkRG9nVTNCbFkxQnZiR2xqZVM1UFZrVlNVa2xFUlY5Q1FWTkZYRzVjYm4wN1hHNWNiaThxS2x4dUlDb2dUV0Z3Y0dsdVp5Qm1jbTl0SUdOc1lYTnpJSE53WldOcFptbGpZWFJwYjI0Z2EyVjVjeUIwYnlCemNHVmphV0ZzSUhCeWIyTmxjM05wYm1jZ1puVnVZM1JwYjI1ekxseHVJQ3BjYmlBcUlFRnNkR2h2ZFdkb0lIUm9aWE5sSUdGeVpTQmtaV05zWVhKbFpDQnNhV3RsSUdsdWMzUmhibU5sSUhCeWIzQmxjblJwWlhNZ2FXNGdkR2hsSUhOd1pXTnBabWxqWVhScGIyNWNiaUFxSUhkb1pXNGdaR1ZtYVc1cGJtY2dZMnhoYzNObGN5QjFjMmx1WnlCZ1VtVmhZM1F1WTNKbFlYUmxRMnhoYzNOZ0xDQjBhR1Y1SUdGeVpTQmhZM1IxWVd4c2VTQnpkR0YwYVdOY2JpQXFJR0Z1WkNCaGNtVWdZV05qWlhOemFXSnNaU0J2YmlCMGFHVWdZMjl1YzNSeWRXTjBiM0lnYVc1emRHVmhaQ0J2WmlCMGFHVWdjSEp2ZEc5MGVYQmxMaUJFWlhOd2FYUmxYRzRnS2lCaVpXbHVaeUJ6ZEdGMGFXTXNJSFJvWlhrZ2JYVnpkQ0JpWlNCa1pXWnBibVZrSUc5MWRITnBaR1VnYjJZZ2RHaGxJRndpYzNSaGRHbGpjMXdpSUd0bGVTQjFibVJsY2x4dUlDb2dkMmhwWTJnZ1lXeHNJRzkwYUdWeUlITjBZWFJwWXlCdFpYUm9iMlJ6SUdGeVpTQmtaV1pwYm1Wa0xseHVJQ292WEc1MllYSWdVa1ZUUlZKV1JVUmZVMUJGUTE5TFJWbFRJRDBnZTF4dUlDQmthWE53YkdGNVRtRnRaVG9nWm5WdVkzUnBiMjRnS0VOdmJuTjBjblZqZEc5eUxDQmthWE53YkdGNVRtRnRaU2tnZTF4dUlDQWdJRU52Ym5OMGNuVmpkRzl5TG1ScGMzQnNZWGxPWVcxbElEMGdaR2x6Y0d4aGVVNWhiV1U3WEc0Z0lIMHNYRzRnSUcxcGVHbHVjem9nWm5WdVkzUnBiMjRnS0VOdmJuTjBjblZqZEc5eUxDQnRhWGhwYm5NcElIdGNiaUFnSUNCcFppQW9iV2w0YVc1ektTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRzFwZUdsdWN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCdGFYaFRjR1ZqU1c1MGIwTnZiWEJ2Ym1WdWRDaERiMjV6ZEhKMVkzUnZjaXdnYldsNGFXNXpXMmxkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUdOb2FXeGtRMjl1ZEdWNGRGUjVjR1Z6T2lCbWRXNWpkR2x2YmlBb1EyOXVjM1J5ZFdOMGIzSXNJR05vYVd4a1EyOXVkR1Y0ZEZSNWNHVnpLU0I3WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lIWmhiR2xrWVhSbFZIbHdaVVJsWmloRGIyNXpkSEoxWTNSdmNpd2dZMmhwYkdSRGIyNTBaWGgwVkhsd1pYTXNJRkpsWVdOMFVISnZjRlI1Y0dWTWIyTmhkR2x2Ym5NdVkyaHBiR1JEYjI1MFpYaDBLVHRjYmlBZ0lDQjlYRzRnSUNBZ1EyOXVjM1J5ZFdOMGIzSXVZMmhwYkdSRGIyNTBaWGgwVkhsd1pYTWdQU0JoYzNOcFoyNG9lMzBzSUVOdmJuTjBjblZqZEc5eUxtTm9hV3hrUTI5dWRHVjRkRlI1Y0dWekxDQmphR2xzWkVOdmJuUmxlSFJVZVhCbGN5azdYRzRnSUgwc1hHNGdJR052Ym5SbGVIUlVlWEJsY3pvZ1puVnVZM1JwYjI0Z0tFTnZibk4wY25WamRHOXlMQ0JqYjI1MFpYaDBWSGx3WlhNcElIdGNiaUFnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJQ0FnZG1Gc2FXUmhkR1ZVZVhCbFJHVm1LRU52Ym5OMGNuVmpkRzl5TENCamIyNTBaWGgwVkhsd1pYTXNJRkpsWVdOMFVISnZjRlI1Y0dWTWIyTmhkR2x2Ym5NdVkyOXVkR1Y0ZENrN1hHNGdJQ0FnZlZ4dUlDQWdJRU52Ym5OMGNuVmpkRzl5TG1OdmJuUmxlSFJVZVhCbGN5QTlJR0Z6YzJsbmJpaDdmU3dnUTI5dWMzUnlkV04wYjNJdVkyOXVkR1Y0ZEZSNWNHVnpMQ0JqYjI1MFpYaDBWSGx3WlhNcE8xeHVJQ0I5TEZ4dUlDQXZLaXBjYmlBZ0lDb2dVM0JsWTJsaGJDQmpZWE5sSUdkbGRFUmxabUYxYkhSUWNtOXdjeUIzYUdsamFDQnphRzkxYkdRZ2JXOTJaU0JwYm5SdklITjBZWFJwWTNNZ1luVjBJSEpsY1hWcGNtVnpYRzRnSUNBcUlHRjFkRzl0WVhScFl5QnRaWEpuYVc1bkxseHVJQ0FnS2k5Y2JpQWdaMlYwUkdWbVlYVnNkRkJ5YjNCek9pQm1kVzVqZEdsdmJpQW9RMjl1YzNSeWRXTjBiM0lzSUdkbGRFUmxabUYxYkhSUWNtOXdjeWtnZTF4dUlDQWdJR2xtSUNoRGIyNXpkSEoxWTNSdmNpNW5aWFJFWldaaGRXeDBVSEp2Y0hNcElIdGNiaUFnSUNBZ0lFTnZibk4wY25WamRHOXlMbWRsZEVSbFptRjFiSFJRY205d2N5QTlJR055WldGMFpVMWxjbWRsWkZKbGMzVnNkRVoxYm1OMGFXOXVLRU52Ym5OMGNuVmpkRzl5TG1kbGRFUmxabUYxYkhSUWNtOXdjeXdnWjJWMFJHVm1ZWFZzZEZCeWIzQnpLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1EyOXVjM1J5ZFdOMGIzSXVaMlYwUkdWbVlYVnNkRkJ5YjNCeklEMGdaMlYwUkdWbVlYVnNkRkJ5YjNCek8xeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ2NISnZjRlI1Y0dWek9pQm1kVzVqZEdsdmJpQW9RMjl1YzNSeWRXTjBiM0lzSUhCeWIzQlVlWEJsY3lrZ2UxeHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0IyWVd4cFpHRjBaVlI1Y0dWRVpXWW9RMjl1YzNSeWRXTjBiM0lzSUhCeWIzQlVlWEJsY3l3Z1VtVmhZM1JRY205d1ZIbHdaVXh2WTJGMGFXOXVjeTV3Y205d0tUdGNiaUFnSUNCOVhHNGdJQ0FnUTI5dWMzUnlkV04wYjNJdWNISnZjRlI1Y0dWeklEMGdZWE56YVdkdUtIdDlMQ0JEYjI1emRISjFZM1J2Y2k1d2NtOXdWSGx3WlhNc0lIQnliM0JVZVhCbGN5azdYRzRnSUgwc1hHNGdJSE4wWVhScFkzTTZJR1oxYm1OMGFXOXVJQ2hEYjI1emRISjFZM1J2Y2l3Z2MzUmhkR2xqY3lrZ2UxeHVJQ0FnSUcxcGVGTjBZWFJwWTFOd1pXTkpiblJ2UTI5dGNHOXVaVzUwS0VOdmJuTjBjblZqZEc5eUxDQnpkR0YwYVdOektUdGNiaUFnZlN4Y2JpQWdZWFYwYjJKcGJtUTZJR1oxYm1OMGFXOXVJQ2dwSUh0OUlIMDdYRzVjYmk4dklHNXZiM0JjYm1aMWJtTjBhVzl1SUhaaGJHbGtZWFJsVkhsd1pVUmxaaWhEYjI1emRISjFZM1J2Y2l3Z2RIbHdaVVJsWml3Z2JHOWpZWFJwYjI0cElIdGNiaUFnWm05eUlDaDJZWElnY0hKdmNFNWhiV1VnYVc0Z2RIbHdaVVJsWmlrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsUkdWbUxtaGhjMDkzYmxCeWIzQmxjblI1S0hCeWIzQk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0x5OGdkWE5sSUdFZ2QyRnlibWx1WnlCcGJuTjBaV0ZrSUc5bUlHRnVJR2x1ZG1GeWFXRnVkQ0J6YnlCamIyMXdiMjVsYm5SelhHNGdJQ0FnSUNBdkx5QmtiMjRuZENCemFHOTNJSFZ3SUdsdUlIQnliMlFnWW5WMElHNXZkQ0JwYmlCZlgwUkZWbDlmWEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1WnloMGVYQmxiMllnZEhsd1pVUmxabHR3Y205d1RtRnRaVjBnUFQwOUlDZG1kVzVqZEdsdmJpY3NJQ2NsY3pvZ0pYTWdkSGx3WlNCZ0pYTmdJR2x6SUdsdWRtRnNhV1E3SUdsMElHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJpd2dkWE4xWVd4c2VTQm1jbTl0SUNjZ0t5QW5VbVZoWTNRdVVISnZjRlI1Y0dWekxpY3NJRU52Ym5OMGNuVmpkRzl5TG1ScGMzQnNZWGxPWVcxbElIeDhJQ2RTWldGamRFTnNZWE56Snl3Z1VtVmhZM1JRY205d1ZIbHdaVXh2WTJGMGFXOXVUbUZ0WlhOYmJHOWpZWFJwYjI1ZExDQndjbTl3VG1GdFpTa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhaaGJHbGtZWFJsVFdWMGFHOWtUM1psY25KcFpHVW9jSEp2ZEc4c0lHNWhiV1VwSUh0Y2JpQWdkbUZ5SUhOd1pXTlFiMnhwWTNrZ1BTQlNaV0ZqZEVOc1lYTnpTVzUwWlhKbVlXTmxMbWhoYzA5M2JsQnliM0JsY25SNUtHNWhiV1VwSUQ4Z1VtVmhZM1JEYkdGemMwbHVkR1Z5Wm1GalpWdHVZVzFsWFNBNklHNTFiR3c3WEc1Y2JpQWdMeThnUkdsellXeHNiM2NnYjNabGNuSnBaR2x1WnlCdlppQmlZWE5sSUdOc1lYTnpJRzFsZEdodlpITWdkVzVzWlhOeklHVjRjR3hwWTJsMGJIa2dZV3hzYjNkbFpDNWNiaUFnYVdZZ0tGSmxZV04wUTJ4aGMzTk5hWGhwYmk1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbEtTa2dlMXh1SUNBZ0lDRW9jM0JsWTFCdmJHbGplU0E5UFQwZ1UzQmxZMUJ2YkdsamVTNVBWa1ZTVWtsRVJWOUNRVk5GS1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RTWldGamRFTnNZWE56U1c1MFpYSm1ZV05sT2lCWmIzVWdZWEpsSUdGMGRHVnRjSFJwYm1jZ2RHOGdiM1psY25KcFpHVWdKeUFySUNkZ0pYTmdJR1p5YjIwZ2VXOTFjaUJqYkdGemN5QnpjR1ZqYVdacFkyRjBhVzl1TGlCRmJuTjFjbVVnZEdoaGRDQjViM1Z5SUcxbGRHaHZaQ0J1WVcxbGN5QW5JQ3NnSjJSdklHNXZkQ0J2ZG1WeWJHRndJSGRwZEdnZ1VtVmhZM1FnYldWMGFHOWtjeTRuTENCdVlXMWxLU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJSDFjYmx4dUlDQXZMeUJFYVhOaGJHeHZkeUJrWldacGJtbHVaeUJ0WlhSb2IyUnpJRzF2Y21VZ2RHaGhiaUJ2Ym1ObElIVnViR1Z6Y3lCbGVIQnNhV05wZEd4NUlHRnNiRzkzWldRdVhHNGdJR2xtSUNod2NtOTBieTVvWVhOUGQyNVFjbTl3WlhKMGVTaHVZVzFsS1NrZ2UxeHVJQ0FnSUNFb2MzQmxZMUJ2YkdsamVTQTlQVDBnVTNCbFkxQnZiR2xqZVM1RVJVWkpUa1ZmVFVGT1dTQjhmQ0J6Y0dWalVHOXNhV041SUQwOVBTQlRjR1ZqVUc5c2FXTjVMa1JGUmtsT1JWOU5RVTVaWDAxRlVrZEZSQ2tnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5VbVZoWTNSRGJHRnpjMGx1ZEdWeVptRmpaVG9nV1c5MUlHRnlaU0JoZEhSbGJYQjBhVzVuSUhSdklHUmxabWx1WlNBbklDc2dKMkFsYzJBZ2IyNGdlVzkxY2lCamIyMXdiMjVsYm5RZ2JXOXlaU0IwYUdGdUlHOXVZMlV1SUZSb2FYTWdZMjl1Wm14cFkzUWdiV0Y1SUdKbElHUjFaU0FuSUNzZ0ozUnZJR0VnYldsNGFXNHVKeXdnYm1GdFpTa2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1RXbDRhVzRnYUdWc2NHVnlJSGRvYVdOb0lHaGhibVJzWlhNZ2NHOXNhV041SUhaaGJHbGtZWFJwYjI0Z1lXNWtJSEpsYzJWeWRtVmtYRzRnS2lCemNHVmphV1pwWTJGMGFXOXVJR3RsZVhNZ2QyaGxiaUJpZFdsc1pHbHVaeUJTWldGamRDQmpiR0Z6YzNObGN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JXbDRVM0JsWTBsdWRHOURiMjF3YjI1bGJuUW9RMjl1YzNSeWRXTjBiM0lzSUhOd1pXTXBJSHRjYmlBZ2FXWWdLQ0Z6Y0dWaktTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzVjYmlBZ0lTaDBlWEJsYjJZZ2MzQmxZeUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBblVtVmhZM1JEYkdGemN6b2dXVzkxWEZ3bmNtVWdZWFIwWlcxd2RHbHVaeUIwYnlBbklDc2dKM1Z6WlNCaElHTnZiWEJ2Ym1WdWRDQmpiR0Z6Y3lCaGN5QmhJRzFwZUdsdUxpQkpibk4wWldGa0xDQnFkWE4wSUhWelpTQmhJSEpsWjNWc1lYSWdiMkpxWldOMExpY3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJU0ZTWldGamRFVnNaVzFsYm5RdWFYTldZV3hwWkVWc1pXMWxiblFvYzNCbFl5a2dQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBblVtVmhZM1JEYkdGemN6b2dXVzkxWEZ3bmNtVWdZWFIwWlcxd2RHbHVaeUIwYnlBbklDc2dKM1Z6WlNCaElHTnZiWEJ2Ym1WdWRDQmhjeUJoSUcxcGVHbHVMaUJKYm5OMFpXRmtMQ0JxZFhOMElIVnpaU0JoSUhKbFozVnNZWElnYjJKcVpXTjBMaWNwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNCMllYSWdjSEp2ZEc4Z1BTQkRiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1U3WEc1Y2JpQWdMeThnUW5rZ2FHRnVaR3hwYm1jZ2JXbDRhVzV6SUdKbFptOXlaU0JoYm5rZ2IzUm9aWElnY0hKdmNHVnlkR2xsY3l3Z2QyVWdaVzV6ZFhKbElIUm9aU0J6WVcxbFhHNGdJQzh2SUdOb1lXbHVhVzVuSUc5eVpHVnlJR2x6SUdGd2NHeHBaV1FnZEc4Z2JXVjBhRzlrY3lCM2FYUm9JRVJGUmtsT1JWOU5RVTVaSUhCdmJHbGplU3dnZDJobGRHaGxjbHh1SUNBdkx5QnRhWGhwYm5NZ1lYSmxJR3hwYzNSbFpDQmlaV1p2Y21VZ2IzSWdZV1owWlhJZ2RHaGxjMlVnYldWMGFHOWtjeUJwYmlCMGFHVWdjM0JsWXk1Y2JpQWdhV1lnS0hOd1pXTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1RVbFlTVTVUWDB0RldTa3BJSHRjYmlBZ0lDQlNSVk5GVWxaRlJGOVRVRVZEWDB0RldWTXViV2w0YVc1ektFTnZibk4wY25WamRHOXlMQ0J6Y0dWakxtMXBlR2x1Y3lrN1hHNGdJSDFjYmx4dUlDQm1iM0lnS0haaGNpQnVZVzFsSUdsdUlITndaV01wSUh0Y2JpQWdJQ0JwWmlBb0lYTndaV011YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrcElIdGNiaUFnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHVZVzFsSUQwOVBTQk5TVmhKVGxOZlMwVlpLU0I3WEc0Z0lDQWdJQ0F2THlCWFpTQm9ZWFpsSUdGc2NtVmhaSGtnYUdGdVpHeGxaQ0J0YVhocGJuTWdhVzRnWVNCemNHVmphV0ZzSUdOaGMyVWdZV0p2ZG1VdVhHNGdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2NISnZjR1Z5ZEhrZ1BTQnpjR1ZqVzI1aGJXVmRPMXh1SUNBZ0lIWmhiR2xrWVhSbFRXVjBhRzlrVDNabGNuSnBaR1VvY0hKdmRHOHNJRzVoYldVcE8xeHVYRzRnSUNBZ2FXWWdLRkpGVTBWU1ZrVkVYMU5RUlVOZlMwVlpVeTVvWVhOUGQyNVFjbTl3WlhKMGVTaHVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ1VrVlRSVkpXUlVSZlUxQkZRMTlMUlZsVFcyNWhiV1ZkS0VOdmJuTjBjblZqZEc5eUxDQndjbTl3WlhKMGVTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklGTmxkSFZ3SUcxbGRHaHZaSE1nYjI0Z2NISnZkRzkwZVhCbE9seHVJQ0FnSUNBZ0x5OGdWR2hsSUdadmJHeHZkMmx1WnlCdFpXMWlaWElnYldWMGFHOWtjeUJ6YUc5MWJHUWdibTkwSUdKbElHRjFkRzl0WVhScFkyRnNiSGtnWW05MWJtUTZYRzRnSUNBZ0lDQXZMeUF4TGlCRmVIQmxZM1JsWkNCU1pXRmpkRU5zWVhOeklHMWxkR2h2WkhNZ0tHbHVJSFJvWlNCY0ltbHVkR1Z5Wm1GalpWd2lLUzVjYmlBZ0lDQWdJQzh2SURJdUlFOTJaWEp5YVdSa1pXNGdiV1YwYUc5a2N5QW9kR2hoZENCM1pYSmxJRzFwZUdWa0lHbHVLUzVjYmlBZ0lDQWdJSFpoY2lCcGMxSmxZV04wUTJ4aGMzTk5aWFJvYjJRZ1BTQlNaV0ZqZEVOc1lYTnpTVzUwWlhKbVlXTmxMbWhoYzA5M2JsQnliM0JsY25SNUtHNWhiV1VwTzF4dUlDQWdJQ0FnZG1GeUlHbHpRV3h5WldGa2VVUmxabWx1WldRZ1BTQndjbTkwYnk1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbEtUdGNiaUFnSUNBZ0lIWmhjaUJwYzBaMWJtTjBhVzl1SUQwZ2RIbHdaVzltSUhCeWIzQmxjblI1SUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1SUNBZ0lDQWdkbUZ5SUhOb2IzVnNaRUYxZEc5Q2FXNWtJRDBnYVhOR2RXNWpkR2x2YmlBbUppQWhhWE5TWldGamRFTnNZWE56VFdWMGFHOWtJQ1ltSUNGcGMwRnNjbVZoWkhsRVpXWnBibVZrSUNZbUlITndaV011WVhWMGIySnBibVFnSVQwOUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNCcFppQW9jMmh2ZFd4a1FYVjBiMEpwYm1RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGd2NtOTBieTVmWDNKbFlXTjBRWFYwYjBKcGJtUk5ZWEFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQndjbTkwYnk1ZlgzSmxZV04wUVhWMGIwSnBibVJOWVhBZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCd2NtOTBieTVmWDNKbFlXTjBRWFYwYjBKcGJtUk5ZWEJiYm1GdFpWMGdQU0J3Y205d1pYSjBlVHRjYmlBZ0lDQWdJQ0FnY0hKdmRHOWJibUZ0WlYwZ1BTQndjbTl3WlhKMGVUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzBGc2NtVmhaSGxFWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSE53WldOUWIyeHBZM2tnUFNCU1pXRmpkRU5zWVhOelNXNTBaWEptWVdObFcyNWhiV1ZkTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnVkdobGMyVWdZMkZ6WlhNZ2MyaHZkV3hrSUdGc2NtVmhaSGtnWW1VZ1kyRjFaMmgwSUdKNUlIWmhiR2xrWVhSbFRXVjBhRzlrVDNabGNuSnBaR1V1WEc0Z0lDQWdJQ0FnSUNBZ0lTaHBjMUpsWVdOMFEyeGhjM05OWlhSb2IyUWdKaVlnS0hOd1pXTlFiMnhwWTNrZ1BUMDlJRk53WldOUWIyeHBZM2t1UkVWR1NVNUZYMDFCVGxsZlRVVlNSMFZFSUh4OElITndaV05RYjJ4cFkza2dQVDA5SUZOd1pXTlFiMnhwWTNrdVJFVkdTVTVGWDAxQlRsa3BLU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZFNaV0ZqZEVOc1lYTnpPaUJWYm1WNGNHVmpkR1ZrSUhOd1pXTWdjRzlzYVdONUlDVnpJR1p2Y2lCclpYa2dKWE1nSnlBcklDZDNhR1Z1SUcxcGVHbHVaeUJwYmlCamIyMXdiMjVsYm5RZ2MzQmxZM011Snl3Z2MzQmxZMUJ2YkdsamVTd2dibUZ0WlNrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdSbTl5SUcxbGRHaHZaSE1nZDJocFkyZ2dZWEpsSUdSbFptbHVaV1FnYlc5eVpTQjBhR0Z1SUc5dVkyVXNJR05oYkd3Z2RHaGxJR1Y0YVhOMGFXNW5YRzRnSUNBZ0lDQWdJQ0FnTHk4Z2JXVjBhRzlrY3lCaVpXWnZjbVVnWTJGc2JHbHVaeUIwYUdVZ2JtVjNJSEJ5YjNCbGNuUjVMQ0J0WlhKbmFXNW5JR2xtSUdGd2NISnZjSEpwWVhSbExseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemNHVmpVRzlzYVdONUlEMDlQU0JUY0dWalVHOXNhV041TGtSRlJrbE9SVjlOUVU1WlgwMUZVa2RGUkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmRHOWJibUZ0WlYwZ1BTQmpjbVZoZEdWTlpYSm5aV1JTWlhOMWJIUkdkVzVqZEdsdmJpaHdjbTkwYjF0dVlXMWxYU3dnY0hKdmNHVnlkSGtwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM0JsWTFCdmJHbGplU0E5UFQwZ1UzQmxZMUJ2YkdsamVTNUVSVVpKVGtWZlRVRk9XU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2ZEc5YmJtRnRaVjBnUFNCamNtVmhkR1ZEYUdGcGJtVmtSblZ1WTNScGIyNG9jSEp2ZEc5YmJtRnRaVjBzSUhCeWIzQmxjblI1S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY0hKdmRHOWJibUZ0WlYwZ1BTQndjbTl3WlhKMGVUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRV1JrSUhabGNtSnZjMlVnWkdsemNHeGhlVTVoYldVZ2RHOGdkR2hsSUdaMWJtTjBhVzl1TENCM2FHbGphQ0JvWld4d2N5QjNhR1Z1SUd4dmIydHBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0YwSUhCeWIyWnBiR2x1WnlCMGIyOXNjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjSEp2Y0dWeWRIa2dQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdjM0JsWXk1a2FYTndiR0Y1VG1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTkwYjF0dVlXMWxYUzVrYVhOd2JHRjVUbUZ0WlNBOUlITndaV011WkdsemNHeGhlVTVoYldVZ0t5QW5YeWNnS3lCdVlXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdGFYaFRkR0YwYVdOVGNHVmpTVzUwYjBOdmJYQnZibVZ1ZENoRGIyNXpkSEoxWTNSdmNpd2djM1JoZEdsamN5a2dlMXh1SUNCcFppQW9JWE4wWVhScFkzTXBJSHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmlBZ1ptOXlJQ2gyWVhJZ2JtRnRaU0JwYmlCemRHRjBhV056S1NCN1hHNGdJQ0FnZG1GeUlIQnliM0JsY25SNUlEMGdjM1JoZEdsamMxdHVZVzFsWFR0Y2JpQWdJQ0JwWmlBb0lYTjBZWFJwWTNNdWFHRnpUM2R1VUhKdmNHVnlkSGtvYm1GdFpTa3BJSHRjYmlBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJwYzFKbGMyVnlkbVZrSUQwZ0tHNWhiV1VnYVc0Z1VrVlRSVkpXUlVSZlUxQkZRMTlMUlZsVEtUdGNiaUFnSUNBaElXbHpVbVZ6WlhKMlpXUWdQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBblVtVmhZM1JEYkdGemN6b2dXVzkxSUdGeVpTQmhkSFJsYlhCMGFXNW5JSFJ2SUdSbFptbHVaU0JoSUhKbGMyVnlkbVZrSUNjZ0t5QW5jSEp2Y0dWeWRIa3NJR0FsYzJBc0lIUm9ZWFFnYzJodmRXeGtibHhjSjNRZ1ltVWdiMjRnZEdobElGd2ljM1JoZEdsamMxd2lJR3RsZVM0Z1JHVm1hVzVsSUdsMElDY2dLeUFuWVhNZ1lXNGdhVzV6ZEdGdVkyVWdjSEp2Y0dWeWRIa2dhVzV6ZEdWaFpEc2dhWFFnZDJsc2JDQnpkR2xzYkNCaVpTQmhZMk5sYzNOcFlteGxJRzl1SUhSb1pTQW5JQ3NnSjJOdmJuTjBjblZqZEc5eUxpY3NJRzVoYldVcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJSFpoY2lCcGMwbHVhR1Z5YVhSbFpDQTlJQ2h1WVcxbElHbHVJRU52Ym5OMGNuVmpkRzl5S1R0Y2JpQWdJQ0FoSVdselNXNW9aWEpwZEdWa0lEOGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUdsdWRtRnlhV0Z1ZENobVlXeHpaU3dnSjFKbFlXTjBRMnhoYzNNNklGbHZkU0JoY21VZ1lYUjBaVzF3ZEdsdVp5QjBieUJrWldacGJtVWdKeUFySUNkZ0pYTmdJRzl1SUhsdmRYSWdZMjl0Y0c5dVpXNTBJRzF2Y21VZ2RHaGhiaUJ2Ym1ObExpQlVhR2x6SUdOdmJtWnNhV04wSUcxaGVTQmlaU0FuSUNzZ0oyUjFaU0IwYnlCaElHMXBlR2x1TGljc0lHNWhiV1VwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCRGIyNXpkSEoxWTNSdmNsdHVZVzFsWFNBOUlIQnliM0JsY25SNU8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dUV1Z5WjJVZ2RIZHZJRzlpYW1WamRITXNJR0oxZENCMGFISnZkeUJwWmlCaWIzUm9JR052Ym5SaGFXNGdkR2hsSUhOaGJXVWdhMlY1TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J2Ym1VZ1ZHaGxJR1pwY25OMElHOWlhbVZqZEN3Z2QyaHBZMmdnYVhNZ2JYVjBZWFJsWkM1Y2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQjBkMjhnVkdobElITmxZMjl1WkNCdlltcGxZM1JjYmlBcUlFQnlaWFIxY200Z2UyOWlhbVZqZEgwZ2IyNWxJR0ZtZEdWeUlHbDBJR2hoY3lCaVpXVnVJRzExZEdGMFpXUWdkRzhnWTI5dWRHRnBiaUJsZG1WeWVYUm9hVzVuSUdsdUlIUjNieTVjYmlBcUwxeHVablZ1WTNScGIyNGdiV1Z5WjJWSmJuUnZWMmwwYUU1dlJIVndiR2xqWVhSbFMyVjVjeWh2Ym1Vc0lIUjNieWtnZTF4dUlDQWhLRzl1WlNBbUppQjBkMjhnSmlZZ2RIbHdaVzltSUc5dVpTQTlQVDBnSjI5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUhSM2J5QTlQVDBnSjI5aWFtVmpkQ2NwSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMjFsY21kbFNXNTBiMWRwZEdoT2IwUjFjR3hwWTJGMFpVdGxlWE1vS1RvZ1EyRnVibTkwSUcxbGNtZGxJRzV2YmkxdlltcGxZM1J6TGljcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2RIZHZLU0I3WEc0Z0lDQWdhV1lnS0hSM2J5NW9ZWE5QZDI1UWNtOXdaWEowZVNoclpYa3BLU0I3WEc0Z0lDQWdJQ0FoS0c5dVpWdHJaWGxkSUQwOVBTQjFibVJsWm1sdVpXUXBJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oyMWxjbWRsU1c1MGIxZHBkR2hPYjBSMWNHeHBZMkYwWlV0bGVYTW9LVG9nSnlBcklDZFVjbWxsWkNCMGJ5QnRaWEpuWlNCMGQyOGdiMkpxWldOMGN5QjNhWFJvSUhSb1pTQnpZVzFsSUd0bGVUb2dZQ1Z6WUM0Z1ZHaHBjeUJqYjI1bWJHbGpkQ0FuSUNzZ0oyMWhlU0JpWlNCa2RXVWdkRzhnWVNCdGFYaHBianNnYVc0Z2NHRnlkR2xqZFd4aGNpd2dkR2hwY3lCdFlYa2dZbVVnWTJGMWMyVmtJR0o1SUhSM2J5QW5JQ3NnSjJkbGRFbHVhWFJwWVd4VGRHRjBaU2dwSUc5eUlHZGxkRVJsWm1GMWJIUlFjbTl3Y3lncElHMWxkR2h2WkhNZ2NtVjBkWEp1YVc1bklHOWlhbVZqZEhNZ0p5QXJJQ2QzYVhSb0lHTnNZWE5vYVc1bklHdGxlWE11Snl3Z2EyVjVLU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNCdmJtVmJhMlY1WFNBOUlIUjNiMXRyWlhsZE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjI1bE8xeHVmVnh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCbWRXNWpkR2x2YmlCMGFHRjBJR2x1ZG05clpYTWdkSGR2SUdaMWJtTjBhVzl1Y3lCaGJtUWdiV1Z5WjJWeklIUm9aV2x5SUhKbGRIVnliaUIyWVd4MVpYTXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdiMjVsSUVaMWJtTjBhVzl1SUhSdklHbHVkbTlyWlNCbWFYSnpkQzVjYmlBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlIUjNieUJHZFc1amRHbHZiaUIwYnlCcGJuWnZhMlVnYzJWamIyNWtMbHh1SUNvZ1FISmxkSFZ5YmlCN1puVnVZM1JwYjI1OUlFWjFibU4wYVc5dUlIUm9ZWFFnYVc1MmIydGxjeUIwYUdVZ2RIZHZJR0Z5WjNWdFpXNTBJR1oxYm1OMGFXOXVjeTVjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdOeVpXRjBaVTFsY21kbFpGSmxjM1ZzZEVaMWJtTjBhVzl1S0c5dVpTd2dkSGR2S1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnRaWEpuWldSU1pYTjFiSFFvS1NCN1hHNGdJQ0FnZG1GeUlHRWdQU0J2Ym1VdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQjJZWElnWWlBOUlIUjNieTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUdsbUlDaGhJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmlPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9ZaUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJR01nUFNCN2ZUdGNiaUFnSUNCdFpYSm5aVWx1ZEc5WGFYUm9UbTlFZFhCc2FXTmhkR1ZMWlhsektHTXNJR0VwTzF4dUlDQWdJRzFsY21kbFNXNTBiMWRwZEdoT2IwUjFjR3hwWTJGMFpVdGxlWE1vWXl3Z1lpazdYRzRnSUNBZ2NtVjBkWEp1SUdNN1hHNGdJSDA3WEc1OVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2FXNTJiMnRsY3lCMGQyOGdablZ1WTNScGIyNXpJR0Z1WkNCcFoyNXZjbVZ6SUhSb1pXbHlJSEpsZEhWeWJpQjJZV3hsY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCdmJtVWdSblZ1WTNScGIyNGdkRzhnYVc1MmIydGxJR1pwY25OMExseHVJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnZEhkdklFWjFibU4wYVc5dUlIUnZJR2x1ZG05clpTQnpaV052Ym1RdVhHNGdLaUJBY21WMGRYSnVJSHRtZFc1amRHbHZibjBnUm5WdVkzUnBiMjRnZEdoaGRDQnBiblp2YTJWeklIUm9aU0IwZDI4Z1lYSm5kVzFsYm5RZ1puVnVZM1JwYjI1ekxseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUwxeHVablZ1WTNScGIyNGdZM0psWVhSbFEyaGhhVzVsWkVaMWJtTjBhVzl1S0c5dVpTd2dkSGR2S1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQmphR0ZwYm1Wa1JuVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2IyNWxMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZEhkdkxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lIMDdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FtbHVaSE1nWVNCdFpYUm9iMlFnZEc4Z2RHaGxJR052YlhCdmJtVnVkQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdZMjl0Y0c5dVpXNTBJRU52YlhCdmJtVnVkQ0IzYUc5elpTQnRaWFJvYjJRZ2FYTWdaMjlwYm1jZ2RHOGdZbVVnWW05MWJtUXVYRzRnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCdFpYUm9iMlFnVFdWMGFHOWtJSFJ2SUdKbElHSnZkVzVrTGx4dUlDb2dRSEpsZEhWeWJpQjdablZ1WTNScGIyNTlJRlJvWlNCaWIzVnVaQ0J0WlhSb2IyUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSnBibVJCZFhSdlFtbHVaRTFsZEdodlpDaGpiMjF3YjI1bGJuUXNJRzFsZEdodlpDa2dlMXh1SUNCMllYSWdZbTkxYm1STlpYUm9iMlFnUFNCdFpYUm9iMlF1WW1sdVpDaGpiMjF3YjI1bGJuUXBPMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR0p2ZFc1a1RXVjBhRzlrTGw5ZmNtVmhZM1JDYjNWdVpFTnZiblJsZUhRZ1BTQmpiMjF3YjI1bGJuUTdYRzRnSUNBZ1ltOTFibVJOWlhSb2IyUXVYMTl5WldGamRFSnZkVzVrVFdWMGFHOWtJRDBnYldWMGFHOWtPMXh1SUNBZ0lHSnZkVzVrVFdWMGFHOWtMbDlmY21WaFkzUkNiM1Z1WkVGeVozVnRaVzUwY3lBOUlHNTFiR3c3WEc0Z0lDQWdkbUZ5SUdOdmJYQnZibVZ1ZEU1aGJXVWdQU0JqYjIxd2IyNWxiblF1WTI5dWMzUnlkV04wYjNJdVpHbHpjR3hoZVU1aGJXVTdYRzRnSUNBZ2RtRnlJRjlpYVc1a0lEMGdZbTkxYm1STlpYUm9iMlF1WW1sdVpEdGNiaUFnSUNBdktpQmxjMnhwYm5RdFpHbHpZV0pzWlNCaWJHOWpheTF6WTI5d1pXUXRkbUZ5TENCdWJ5MTFibVJsWmlBcUwxeHVJQ0FnSUdKdmRXNWtUV1YwYUc5a0xtSnBibVFnUFNCbWRXNWpkR2x2YmlBb2JtVjNWR2hwY3lrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1gyeGxiaUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dzSUdGeVozTWdQU0JCY25KaGVTaGZiR1Z1SUQ0Z01TQS9JRjlzWlc0Z0xTQXhJRG9nTUNrc0lGOXJaWGtnUFNBeE95QmZhMlY1SUR3Z1gyeGxianNnWDJ0bGVTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdGeVozTmJYMnRsZVNBdElERmRJRDBnWVhKbmRXMWxiblJ6VzE5clpYbGRPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCVmMyVnlJR2x6SUhSeWVXbHVaeUIwYnlCaWFXNWtLQ2tnWVc0Z1lYVjBiMkp2ZFc1a0lHMWxkR2h2WkRzZ2QyVWdaV1ptWldOMGFYWmxiSGtnZDJsc2JGeHVJQ0FnSUNBZ0x5OGdhV2R1YjNKbElIUm9aU0IyWVd4MVpTQnZaaUJjSW5Sb2FYTmNJaUIwYUdGMElIUm9aU0IxYzJWeUlHbHpJSFJ5ZVdsdVp5QjBieUIxYzJVc0lITnZYRzRnSUNBZ0lDQXZMeUJzWlhRbmN5QjNZWEp1TGx4dUlDQWdJQ0FnYVdZZ0tHNWxkMVJvYVhNZ0lUMDlJR052YlhCdmJtVnVkQ0FtSmlCdVpYZFVhR2x6SUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LR1poYkhObExDQW5ZbWx1WkNncE9pQlNaV0ZqZENCamIyMXdiMjVsYm5RZ2JXVjBhRzlrY3lCdFlYa2diMjVzZVNCaVpTQmliM1Z1WkNCMGJ5QjBhR1VnSnlBcklDZGpiMjF3YjI1bGJuUWdhVzV6ZEdGdVkyVXVJRk5sWlNBbGN5Y3NJR052YlhCdmJtVnVkRTVoYldVcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doWVhKbmN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUhkaGNtNXBibWNvWm1Gc2MyVXNJQ2RpYVc1a0tDazZJRmx2ZFNCaGNtVWdZbWx1WkdsdVp5QmhJR052YlhCdmJtVnVkQ0J0WlhSb2IyUWdkRzhnZEdobElHTnZiWEJ2Ym1WdWRDNGdKeUFySUNkU1pXRmpkQ0JrYjJWeklIUm9hWE1nWm05eUlIbHZkU0JoZFhSdmJXRjBhV05oYkd4NUlHbHVJR0VnYUdsbmFDMXdaWEptYjNKdFlXNWpaU0FuSUNzZ0ozZGhlU3dnYzI4Z2VXOTFJR05oYmlCellXWmxiSGtnY21WdGIzWmxJSFJvYVhNZ1kyRnNiQzRnVTJWbElDVnpKeXdnWTI5dGNHOXVaVzUwVG1GdFpTa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJpYjNWdVpFMWxkR2h2WkR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhaaGNpQnlaV0p2ZFc1a1RXVjBhRzlrSUQwZ1gySnBibVF1WVhCd2JIa29ZbTkxYm1STlpYUm9iMlFzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNCeVpXSnZkVzVrVFdWMGFHOWtMbDlmY21WaFkzUkNiM1Z1WkVOdmJuUmxlSFFnUFNCamIyMXdiMjVsYm5RN1hHNGdJQ0FnSUNCeVpXSnZkVzVrVFdWMGFHOWtMbDlmY21WaFkzUkNiM1Z1WkUxbGRHaHZaQ0E5SUcxbGRHaHZaRHRjYmlBZ0lDQWdJSEpsWW05MWJtUk5aWFJvYjJRdVgxOXlaV0ZqZEVKdmRXNWtRWEpuZFcxbGJuUnpJRDBnWVhKbmN6dGNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpXSnZkVzVrVFdWMGFHOWtPMXh1SUNBZ0lDQWdMeW9nWlhOc2FXNTBMV1Z1WVdKc1pTQXFMMXh1SUNBZ0lIMDdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHSnZkVzVrVFdWMGFHOWtPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFSnBibVJ6SUdGc2JDQmhkWFJ2TFdKdmRXNWtJRzFsZEdodlpITWdhVzRnWVNCamIyMXdiMjVsYm5RdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUdOdmJYQnZibVZ1ZENCRGIyMXdiMjVsYm5RZ2QyaHZjMlVnYldWMGFHOWtJR2x6SUdkdmFXNW5JSFJ2SUdKbElHSnZkVzVrTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJpYVc1a1FYVjBiMEpwYm1STlpYUm9iMlJ6S0dOdmJYQnZibVZ1ZENrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJoZFhSdlFtbHVaRXRsZVNCcGJpQmpiMjF3YjI1bGJuUXVYMTl5WldGamRFRjFkRzlDYVc1a1RXRndLU0I3WEc0Z0lDQWdhV1lnS0dOdmJYQnZibVZ1ZEM1ZlgzSmxZV04wUVhWMGIwSnBibVJOWVhBdWFHRnpUM2R1VUhKdmNHVnlkSGtvWVhWMGIwSnBibVJMWlhrcEtTQjdYRzRnSUNBZ0lDQjJZWElnYldWMGFHOWtJRDBnWTI5dGNHOXVaVzUwTGw5ZmNtVmhZM1JCZFhSdlFtbHVaRTFoY0Z0aGRYUnZRbWx1WkV0bGVWMDdYRzRnSUNBZ0lDQmpiMjF3YjI1bGJuUmJZWFYwYjBKcGJtUkxaWGxkSUQwZ1ltbHVaRUYxZEc5Q2FXNWtUV1YwYUc5a0tHTnZiWEJ2Ym1WdWRDd2diV1YwYUc5a0tUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJaR1FnYlc5eVpTQjBieUIwYUdVZ1VtVmhZM1JEYkdGemN5QmlZWE5sSUdOc1lYTnpMaUJVYUdWelpTQmhjbVVnWVd4c0lHeGxaMkZqZVNCbVpXRjBkWEpsY3lCaGJtUmNiaUFxSUhSb1pYSmxabTl5WlNCdWIzUWdZV3h5WldGa2VTQndZWEowSUc5bUlIUm9aU0J0YjJSbGNtNGdVbVZoWTNSRGIyMXdiMjVsYm5RdVhHNGdLaTljYm5aaGNpQlNaV0ZqZEVOc1lYTnpUV2w0YVc0Z1BTQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUlBSRTg2SUZSb2FYTWdkMmxzYkNCaVpTQmtaWEJ5WldOaGRHVmtJR0psWTJGMWMyVWdjM1JoZEdVZ2MyaHZkV3hrSUdGc2QyRjVjeUJyWldWd0lHRWdZMjl1YzJsemRHVnVkRnh1SUNBZ0tpQjBlWEJsSUhOcFoyNWhkSFZ5WlNCaGJtUWdkR2hsSUc5dWJIa2dkWE5sSUdOaGMyVWdabTl5SUhSb2FYTXNJR2x6SUhSdklHRjJiMmxrSUhSb1lYUXVYRzRnSUNBcUwxeHVJQ0J5WlhCc1lXTmxVM1JoZEdVNklHWjFibU4wYVc5dUlDaHVaWGRUZEdGMFpTd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQjBhR2x6TG5Wd1pHRjBaWEl1Wlc1eGRXVjFaVkpsY0d4aFkyVlRkR0YwWlNoMGFHbHpMQ0J1WlhkVGRHRjBaU2s3WEc0Z0lDQWdhV1lnS0dOaGJHeGlZV05yS1NCN1hHNGdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpYSXVaVzV4ZFdWMVpVTmhiR3hpWVdOcktIUm9hWE1zSUdOaGJHeGlZV05yS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTm9aV05yY3lCM2FHVjBhR1Z5SUc5eUlHNXZkQ0IwYUdseklHTnZiWEJ2YzJsMFpTQmpiMjF3YjI1bGJuUWdhWE1nYlc5MWJuUmxaQzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQnRiM1Z1ZEdWa0xDQm1ZV3h6WlNCdmRHaGxjbmRwYzJVdVhHNGdJQ0FxSUVCd2NtOTBaV04wWldSY2JpQWdJQ29nUUdacGJtRnNYRzRnSUNBcUwxeHVJQ0JwYzAxdmRXNTBaV1E2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTFjR1JoZEdWeUxtbHpUVzkxYm5SbFpDaDBhR2x6S1R0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwY3lCaElITjFZbk5sZENCdlppQjBhR1VnY0hKdmNITXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J3WVhKMGFXRnNVSEp2Y0hNZ1UzVmljMlYwSUc5bUlIUm9aU0J1WlhoMElIQnliM0J6TGx4dUlDQWdLaUJBY0dGeVlXMGdlejltZFc1amRHbHZibjBnWTJGc2JHSmhZMnNnUTJGc2JHVmtJR0ZtZEdWeUlIQnliM0J6SUdGeVpTQjFjR1JoZEdWa0xseHVJQ0FnS2lCQVptbHVZV3hjYmlBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnS2lCQVpHVndjbVZqWVhSbFpGeHVJQ0FnS2k5Y2JpQWdjMlYwVUhKdmNITTZJR1oxYm1OMGFXOXVJQ2h3WVhKMGFXRnNVSEp2Y0hNc0lHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUhkaGNtNVRaWFJRY205d2N5Z3BPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMblZ3WkdGMFpYSXVaVzV4ZFdWMVpWTmxkRkJ5YjNCektIUm9hWE1zSUhCaGNuUnBZV3hRY205d2N5azdYRzRnSUNBZ2FXWWdLR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuVndaR0YwWlhJdVpXNXhkV1YxWlVOaGJHeGlZV05yS0hSb2FYTXNJR05oYkd4aVlXTnJLVHRjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGNHeGhZMlVnWVd4c0lIUm9aU0J3Y205d2N5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJRzVsZDFCeWIzQnpJRk4xWW5ObGRDQnZaaUIwYUdVZ2JtVjRkQ0J3Y205d2N5NWNiaUFnSUNvZ1FIQmhjbUZ0SUhzL1puVnVZM1JwYjI1OUlHTmhiR3hpWVdOcklFTmhiR3hsWkNCaFpuUmxjaUJ3Y205d2N5QmhjbVVnZFhCa1lYUmxaQzVjYmlBZ0lDb2dRR1pwYm1Gc1hHNGdJQ0FxSUVCd2RXSnNhV05jYmlBZ0lDb2dRR1JsY0hKbFkyRjBaV1JjYmlBZ0lDb3ZYRzRnSUhKbGNHeGhZMlZRY205d2N6b2dablZ1WTNScGIyNGdLRzVsZDFCeWIzQnpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQjNZWEp1VTJWMFVISnZjSE1vS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1MWNHUmhkR1Z5TG1WdWNYVmxkV1ZTWlhCc1lXTmxVSEp2Y0hNb2RHaHBjeXdnYm1WM1VISnZjSE1wTzF4dUlDQWdJR2xtSUNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVnlMbVZ1Y1hWbGRXVkRZV3hzWW1GamF5aDBhR2x6TENCallXeHNZbUZqYXlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dVhHNTJZWElnVW1WaFkzUkRiR0Z6YzBOdmJYQnZibVZ1ZENBOUlHWjFibU4wYVc5dUlDZ3BJSHQ5TzF4dVlYTnphV2R1S0ZKbFlXTjBRMnhoYzNORGIyMXdiMjVsYm5RdWNISnZkRzkwZVhCbExDQlNaV0ZqZEVOdmJYQnZibVZ1ZEM1d2NtOTBiM1I1Y0dVc0lGSmxZV04wUTJ4aGMzTk5hWGhwYmlrN1hHNWNiaThxS2x4dUlDb2dUVzlrZFd4bElHWnZjaUJqY21WaGRHbHVaeUJqYjIxd2IzTnBkR1VnWTI5dGNHOXVaVzUwY3k1Y2JpQXFYRzRnS2lCQVkyeGhjM01nVW1WaFkzUkRiR0Z6YzF4dUlDb3ZYRzUyWVhJZ1VtVmhZM1JEYkdGemN5QTlJSHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJR052YlhCdmMybDBaU0JqYjIxd2IyNWxiblFnWTJ4aGMzTWdaMmwyWlc0Z1lTQmpiR0Z6Y3lCemNHVmphV1pwWTJGMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYzNCbFl5QkRiR0Z6Y3lCemNHVmphV1pwWTJGMGFXOXVJQ2gzYUdsamFDQnRkWE4wSUdSbFptbHVaU0JnY21WdVpHVnlZQ2t1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMloxYm1OMGFXOXVmU0JEYjIxd2IyNWxiblFnWTI5dWMzUnlkV04wYjNJZ1puVnVZM1JwYjI0dVhHNGdJQ0FxSUVCd2RXSnNhV05jYmlBZ0lDb3ZYRzRnSUdOeVpXRjBaVU5zWVhOek9pQm1kVzVqZEdsdmJpQW9jM0JsWXlrZ2UxeHVJQ0FnSUhaaGNpQkRiMjV6ZEhKMVkzUnZjaUE5SUdaMWJtTjBhVzl1SUNod2NtOXdjeXdnWTI5dWRHVjRkQ3dnZFhCa1lYUmxjaWtnZTF4dUlDQWdJQ0FnTHk4Z1ZHaHBjeUJqYjI1emRISjFZM1J2Y2lCcGN5QnZkbVZ5Y21sa1pHVnVJR0o1SUcxdlkydHpMaUJVYUdVZ1lYSm5kVzFsYm5RZ2FYTWdkWE5sWkZ4dUlDQWdJQ0FnTHk4Z1lua2diVzlqYTNNZ2RHOGdZWE56WlhKMElHOXVJSGRvWVhRZ1oyVjBjeUJ0YjNWdWRHVmtMbHh1WEc0Z0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1WnloMGFHbHpJR2x1YzNSaGJtTmxiMllnUTI5dWMzUnlkV04wYjNJc0lDZFRiMjFsZEdocGJtY2dhWE1nWTJGc2JHbHVaeUJoSUZKbFlXTjBJR052YlhCdmJtVnVkQ0JrYVhKbFkzUnNlUzRnVlhObElHRWdabUZqZEc5eWVTQnZjaUFuSUNzZ0owcFRXQ0JwYm5OMFpXRmtMaUJUWldVNklHaDBkSEJ6T2k4dlptSXViV1V2Y21WaFkzUXRiR1ZuWVdONVptRmpkRzl5ZVNjcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCWGFYSmxJSFZ3SUdGMWRHOHRZbWx1WkdsdVoxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgxOXlaV0ZqZEVGMWRHOUNhVzVrVFdGd0tTQjdYRzRnSUNBZ0lDQWdJR0pwYm1SQmRYUnZRbWx1WkUxbGRHaHZaSE1vZEdocGN5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE1nUFNCd2NtOXdjenRjYmlBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZENBOUlHTnZiblJsZUhRN1hHNGdJQ0FnSUNCMGFHbHpMbkpsWm5NZ1BTQmxiWEIwZVU5aWFtVmpkRHRjYmlBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsY2lBOUlIVndaR0YwWlhJZ2ZId2dVbVZoWTNST2IyOXdWWEJrWVhSbFVYVmxkV1U3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVjM1JoZEdVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBdkx5QlNaV0ZqZEVOc1lYTnpaWE1nWkc5bGMyNG5kQ0JvWVhabElHTnZibk4wY25WamRHOXljeTRnU1c1emRHVmhaQ3dnZEdobGVTQjFjMlVnZEdobFhHNGdJQ0FnSUNBdkx5Qm5aWFJKYm1sMGFXRnNVM1JoZEdVZ1lXNWtJR052YlhCdmJtVnVkRmRwYkd4TmIzVnVkQ0J0WlhSb2IyUnpJR1p2Y2lCcGJtbDBhV0ZzYVhwaGRHbHZiaTVjYmx4dUlDQWdJQ0FnZG1GeUlHbHVhWFJwWVd4VGRHRjBaU0E5SUhSb2FYTXVaMlYwU1c1cGRHbGhiRk4wWVhSbElEOGdkR2hwY3k1blpYUkpibWwwYVdGc1UzUmhkR1VvS1NBNklHNTFiR3c3WEc0Z0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCWFpTQmhiR3h2ZHlCaGRYUnZMVzF2WTJ0eklIUnZJSEJ5YjJObFpXUWdZWE1nYVdZZ2RHaGxlU2R5WlNCeVpYUjFjbTVwYm1jZ2JuVnNiQzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCcGJtbDBhV0ZzVTNSaGRHVWdQVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFJvYVhNdVoyVjBTVzVwZEdsaGJGTjBZWFJsTGw5cGMwMXZZMnRHZFc1amRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ2FYTWdjSEp2WW1GaWJIa2dZbUZrSUhCeVlXTjBhV05sTGlCRGIyNXphV1JsY2lCM1lYSnVhVzVuSUdobGNtVWdZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdaR1Z3Y21WallYUnBibWNnZEdocGN5QmpiMjUyWlc1cFpXNWpaUzVjYmlBZ0lDQWdJQ0FnSUNCcGJtbDBhV0ZzVTNSaGRHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQWhLSFI1Y0dWdlppQnBibWwwYVdGc1UzUmhkR1VnUFQwOUlDZHZZbXBsWTNRbklDWW1JQ0ZCY25KaGVTNXBjMEZ5Y21GNUtHbHVhWFJwWVd4VGRHRjBaU2twSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKeVZ6TG1kbGRFbHVhWFJwWVd4VGRHRjBaU2dwT2lCdGRYTjBJSEpsZEhWeWJpQmhiaUJ2WW1wbFkzUWdiM0lnYm5Wc2JDY3NJRU52Ym5OMGNuVmpkRzl5TG1ScGMzQnNZWGxPWVcxbElIeDhJQ2RTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRDY3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpTQTlJR2x1YVhScFlXeFRkR0YwWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlNBOUlHNWxkeUJTWldGamRFTnNZWE56UTI5dGNHOXVaVzUwS0NrN1hHNGdJQ0FnUTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbExtTnZibk4wY25WamRHOXlJRDBnUTI5dWMzUnlkV04wYjNJN1hHNWNiaUFnSUNCcGJtcGxZM1JsWkUxcGVHbHVjeTVtYjNKRllXTm9LRzFwZUZOd1pXTkpiblJ2UTI5dGNHOXVaVzUwTG1KcGJtUW9iblZzYkN3Z1EyOXVjM1J5ZFdOMGIzSXBLVHRjYmx4dUlDQWdJRzFwZUZOd1pXTkpiblJ2UTI5dGNHOXVaVzUwS0VOdmJuTjBjblZqZEc5eUxDQnpjR1ZqS1R0Y2JseHVJQ0FnSUM4dklFbHVhWFJwWVd4cGVtVWdkR2hsSUdSbFptRjFiSFJRY205d2N5QndjbTl3WlhKMGVTQmhablJsY2lCaGJHd2diV2w0YVc1eklHaGhkbVVnWW1WbGJpQnRaWEpuWldRdVhHNGdJQ0FnYVdZZ0tFTnZibk4wY25WamRHOXlMbWRsZEVSbFptRjFiSFJRY205d2N5a2dlMXh1SUNBZ0lDQWdRMjl1YzNSeWRXTjBiM0l1WkdWbVlYVnNkRkJ5YjNCeklEMGdRMjl1YzNSeWRXTjBiM0l1WjJWMFJHVm1ZWFZzZEZCeWIzQnpLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lDOHZJRlJvYVhNZ2FYTWdZU0IwWVdjZ2RHOGdhVzVrYVdOaGRHVWdkR2hoZENCMGFHVWdkWE5sSUc5bUlIUm9aWE5sSUcxbGRHaHZaQ0J1WVcxbGN5QnBjeUJ2YXl4Y2JpQWdJQ0FnSUM4dklITnBibU5sSUdsMEozTWdkWE5sWkNCM2FYUm9JR055WldGMFpVTnNZWE56TGlCSlppQnBkQ2R6SUc1dmRDd2dkR2hsYmlCcGRDZHpJR3hwYTJWc2VTQmhYRzRnSUNBZ0lDQXZMeUJ0YVhOMFlXdGxJSE52SUhkbEoyeHNJSGRoY200Z2VXOTFJSFJ2SUhWelpTQjBhR1VnYzNSaGRHbGpJSEJ5YjNCbGNuUjVMQ0J3Y205d1pYSjBlVnh1SUNBZ0lDQWdMeThnYVc1cGRHbGhiR2w2WlhJZ2IzSWdZMjl1YzNSeWRXTjBiM0lnY21WemNHVmpkR2wyWld4NUxseHVJQ0FnSUNBZ2FXWWdLRU52Ym5OMGNuVmpkRzl5TG1kbGRFUmxabUYxYkhSUWNtOXdjeWtnZTF4dUlDQWdJQ0FnSUNCRGIyNXpkSEoxWTNSdmNpNW5aWFJFWldaaGRXeDBVSEp2Y0hNdWFYTlNaV0ZqZEVOc1lYTnpRWEJ3Y205MlpXUWdQU0I3ZlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaERiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1V1WjJWMFNXNXBkR2xoYkZOMFlYUmxLU0I3WEc0Z0lDQWdJQ0FnSUVOdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pTNW5aWFJKYm1sMGFXRnNVM1JoZEdVdWFYTlNaV0ZqZEVOc1lYTnpRWEJ3Y205MlpXUWdQU0I3ZlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0FoUTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbExuSmxibVJsY2lBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RqY21WaGRHVkRiR0Z6Y3lndUxpNHBPaUJEYkdGemN5QnpjR1ZqYVdacFkyRjBhVzl1SUcxMWMzUWdhVzF3YkdWdFpXNTBJR0VnWUhKbGJtUmxjbUFnYldWMGFHOWtMaWNwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5Z2hRMjl1YzNSeWRXTjBiM0l1Y0hKdmRHOTBlWEJsTG1OdmJYQnZibVZ1ZEZOb2IzVnNaRlZ3WkdGMFpTd2dKeVZ6SUdoaGN5QmhJRzFsZEdodlpDQmpZV3hzWldRZ0p5QXJJQ2RqYjIxd2IyNWxiblJUYUc5MWJHUlZjR1JoZEdVb0tTNGdSR2xrSUhsdmRTQnRaV0Z1SUhOb2IzVnNaRU52YlhCdmJtVnVkRlZ3WkdGMFpTZ3BQeUFuSUNzZ0oxUm9aU0J1WVcxbElHbHpJSEJvY21GelpXUWdZWE1nWVNCeGRXVnpkR2x2YmlCaVpXTmhkWE5sSUhSb1pTQm1kVzVqZEdsdmJpQnBjeUFuSUNzZ0oyVjRjR1ZqZEdWa0lIUnZJSEpsZEhWeWJpQmhJSFpoYkhWbExpY3NJSE53WldNdVpHbHpjR3hoZVU1aGJXVWdmSHdnSjBFZ1kyOXRjRzl1Wlc1MEp5a2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1WnlnaFEyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxMbU52YlhCdmJtVnVkRmRwYkd4U1pXTnBaWFpsVUhKdmNITXNJQ2NsY3lCb1lYTWdZU0J0WlhSb2IyUWdZMkZzYkdWa0lDY2dLeUFuWTI5dGNHOXVaVzUwVjJsc2JGSmxZMmxsZG1WUWNtOXdjeWdwTGlCRWFXUWdlVzkxSUcxbFlXNGdZMjl0Y0c5dVpXNTBWMmxzYkZKbFkyVnBkbVZRY205d2N5Z3BQeWNzSUhOd1pXTXVaR2x6Y0d4aGVVNWhiV1VnZkh3Z0owRWdZMjl0Y0c5dVpXNTBKeWtnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1VtVmtkV05sSUhScGJXVWdjM0JsYm5RZ1pHOXBibWNnYkc5dmEzVndjeUJpZVNCelpYUjBhVzVuSUhSb1pYTmxJRzl1SUhSb1pTQndjbTkwYjNSNWNHVXVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2JXVjBhRzlrVG1GdFpTQnBiaUJTWldGamRFTnNZWE56U1c1MFpYSm1ZV05sS1NCN1hHNGdJQ0FnSUNCcFppQW9JVU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlZ0dFpYUm9iMlJPWVcxbFhTa2dlMXh1SUNBZ0lDQWdJQ0JEYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dWYmJXVjBhRzlrVG1GdFpWMGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJEYjI1emRISjFZM1J2Y2p0Y2JpQWdmU3hjYmx4dUlDQnBibXBsWTNScGIyNDZJSHRjYmlBZ0lDQnBibXBsWTNSTmFYaHBiam9nWm5WdVkzUnBiMjRnS0cxcGVHbHVLU0I3WEc0Z0lDQWdJQ0JwYm1wbFkzUmxaRTFwZUdsdWN5NXdkWE5vS0cxcGVHbHVLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRU5zWVhOek95SmRmUT09IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgISh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgKyAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwYXJ0aWFsU3RhdGUgIT0gbnVsbCwgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICsgJ2luc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLicpIDogdW5kZWZpbmVkO1xuICB9XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gKlxuICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gKlxuICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAqXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cbiAqIEBmaW5hbFxuICogQHByb3RlY3RlZFxuICovXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRGVwcmVjYXRlZCBBUElzLiBUaGVzZSBBUElzIHVzZWQgdG8gZXhpc3Qgb24gY2xhc3NpYyBSZWFjdCBjbGFzc2VzIGJ1dCBzaW5jZVxuICogd2Ugd291bGQgbGlrZSB0byBkZXByZWNhdGUgdGhlbSwgd2UncmUgbm90IGdvaW5nIHRvIG1vdmUgdGhlbSBvdmVyIHRvIHRoaXNcbiAqIG1vZGVybiBiYXNlIGNsYXNzLiBJbnN0ZWFkLCB3ZSBkZWZpbmUgYSBnZXR0ZXIgdGhhdCB3YXJucyBpZiBpdCdzIGFjY2Vzc2VkLlxuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgZGVwcmVjYXRlZEFQSXMgPSB7XG4gICAgZ2V0RE9NTm9kZTogWydnZXRET01Ob2RlJywgJ1VzZSBSZWFjdERPTS5maW5kRE9NTm9kZShjb21wb25lbnQpIGluc3RlYWQuJ10sXG4gICAgaXNNb3VudGVkOiBbJ2lzTW91bnRlZCcsICdJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiAnICsgJ2NvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLiddLFxuICAgIHJlcGxhY2VQcm9wczogWydyZXBsYWNlUHJvcHMnLCAnSW5zdGVhZCwgY2FsbCByZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXSxcbiAgICBzZXRQcm9wczogWydzZXRQcm9wcycsICdJbnN0ZWFkLCBjYWxsIHJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLiddXG4gIH07XG4gIHZhciBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgaW5mbykge1xuICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzJywgaW5mb1swXSwgaW5mb1sxXSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBmb3IgKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpIHtcbiAgICBpZiAoZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSkge1xuICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkRiMjF3YjI1bGJuUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQlNaV0ZqZEVOdmJYQnZibVZ1ZEZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlGSmxZV04wVG05dmNGVndaR0YwWlZGMVpYVmxJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRTV2YjNCVmNHUmhkR1ZSZFdWMVpTY3BPMXh1WEc1MllYSWdZMkZ1UkdWbWFXNWxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDJOaGJrUmxabWx1WlZCeWIzQmxjblI1SnlrN1hHNTJZWElnWlcxd2RIbFBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOWxiWEIwZVU5aWFtVmpkQ2NwTzF4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDJsdWRtRnlhV0Z1ZENjcE8xeHVkbUZ5SUhkaGNtNXBibWNnUFNCeVpYRjFhWEpsS0NkbVltcHpMMnhwWWk5M1lYSnVhVzVuSnlrN1hHNWNiaThxS2x4dUlDb2dRbUZ6WlNCamJHRnpjeUJvWld4d1pYSnpJR1p2Y2lCMGFHVWdkWEJrWVhScGJtY2djM1JoZEdVZ2IyWWdZU0JqYjIxd2IyNWxiblF1WEc0Z0tpOWNibVoxYm1OMGFXOXVJRkpsWVdOMFEyOXRjRzl1Wlc1MEtIQnliM0J6TENCamIyNTBaWGgwTENCMWNHUmhkR1Z5S1NCN1hHNGdJSFJvYVhNdWNISnZjSE1nUFNCd2NtOXdjenRjYmlBZ2RHaHBjeTVqYjI1MFpYaDBJRDBnWTI5dWRHVjRkRHRjYmlBZ2RHaHBjeTV5WldaeklEMGdaVzF3ZEhsUFltcGxZM1E3WEc0Z0lDOHZJRmRsSUdsdWFYUnBZV3hwZW1VZ2RHaGxJR1JsWm1GMWJIUWdkWEJrWVhSbGNpQmlkWFFnZEdobElISmxZV3dnYjI1bElHZGxkSE1nYVc1cVpXTjBaV1FnWW5rZ2RHaGxYRzRnSUM4dklISmxibVJsY21WeUxseHVJQ0IwYUdsekxuVndaR0YwWlhJZ1BTQjFjR1JoZEdWeUlIeDhJRkpsWVdOMFRtOXZjRlZ3WkdGMFpWRjFaWFZsTzF4dWZWeHVYRzVTWldGamRFTnZiWEJ2Ym1WdWRDNXdjbTkwYjNSNWNHVXVhWE5TWldGamRFTnZiWEJ2Ym1WdWRDQTlJSHQ5TzF4dVhHNHZLaXBjYmlBcUlGTmxkSE1nWVNCemRXSnpaWFFnYjJZZ2RHaGxJSE4wWVhSbExpQkJiSGRoZVhNZ2RYTmxJSFJvYVhNZ2RHOGdiWFYwWVhSbFhHNGdLaUJ6ZEdGMFpTNGdXVzkxSUhOb2IzVnNaQ0IwY21WaGRDQmdkR2hwY3k1emRHRjBaV0FnWVhNZ2FXMXRkWFJoWW14bExseHVJQ3BjYmlBcUlGUm9aWEpsSUdseklHNXZJR2QxWVhKaGJuUmxaU0IwYUdGMElHQjBhR2x6TG5OMFlYUmxZQ0IzYVd4c0lHSmxJR2x0YldWa2FXRjBaV3g1SUhWd1pHRjBaV1FzSUhOdlhHNGdLaUJoWTJObGMzTnBibWNnWUhSb2FYTXVjM1JoZEdWZ0lHRm1kR1Z5SUdOaGJHeHBibWNnZEdocGN5QnRaWFJvYjJRZ2JXRjVJSEpsZEhWeWJpQjBhR1VnYjJ4a0lIWmhiSFZsTGx4dUlDcGNiaUFxSUZSb1pYSmxJR2x6SUc1dklHZDFZWEpoYm5SbFpTQjBhR0YwSUdOaGJHeHpJSFJ2SUdCelpYUlRkR0YwWldBZ2QybHNiQ0J5ZFc0Z2MzbHVZMmh5YjI1dmRYTnNlU3hjYmlBcUlHRnpJSFJvWlhrZ2JXRjVJR1YyWlc1MGRXRnNiSGtnWW1VZ1ltRjBZMmhsWkNCMGIyZGxkR2hsY2k0Z0lGbHZkU0JqWVc0Z2NISnZkbWxrWlNCaGJpQnZjSFJwYjI1aGJGeHVJQ29nWTJGc2JHSmhZMnNnZEdoaGRDQjNhV3hzSUdKbElHVjRaV04xZEdWa0lIZG9aVzRnZEdobElHTmhiR3dnZEc4Z2MyVjBVM1JoZEdVZ2FYTWdZV04wZFdGc2JIbGNiaUFxSUdOdmJYQnNaWFJsWkM1Y2JpQXFYRzRnS2lCWGFHVnVJR0VnWm5WdVkzUnBiMjRnYVhNZ2NISnZkbWxrWldRZ2RHOGdjMlYwVTNSaGRHVXNJR2wwSUhkcGJHd2dZbVVnWTJGc2JHVmtJR0YwSUhOdmJXVWdjRzlwYm5RZ2FXNWNiaUFxSUhSb1pTQm1kWFIxY21VZ0tHNXZkQ0J6ZVc1amFISnZibTkxYzJ4NUtTNGdTWFFnZDJsc2JDQmlaU0JqWVd4c1pXUWdkMmwwYUNCMGFHVWdkWEFnZEc4Z1pHRjBaVnh1SUNvZ1kyOXRjRzl1Wlc1MElHRnlaM1Z0Wlc1MGN5QW9jM1JoZEdVc0lIQnliM0J6TENCamIyNTBaWGgwS1M0Z1ZHaGxjMlVnZG1Gc2RXVnpJR05oYmlCaVpTQmthV1ptWlhKbGJuUmNiaUFxSUdaeWIyMGdkR2hwY3k0cUlHSmxZMkYxYzJVZ2VXOTFjaUJtZFc1amRHbHZiaUJ0WVhrZ1ltVWdZMkZzYkdWa0lHRm1kR1Z5SUhKbFkyVnBkbVZRY205d2N5QmlkWFFnWW1WbWIzSmxYRzRnS2lCemFHOTFiR1JEYjIxd2IyNWxiblJWY0dSaGRHVXNJR0Z1WkNCMGFHbHpJRzVsZHlCemRHRjBaU3dnY0hKdmNITXNJR0Z1WkNCamIyNTBaWGgwSUhkcGJHd2dibTkwSUhsbGRDQmlaVnh1SUNvZ1lYTnphV2R1WldRZ2RHOGdkR2hwY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSHhtZFc1amRHbHZibjBnY0dGeWRHbGhiRk4wWVhSbElFNWxlSFFnY0dGeWRHbGhiQ0J6ZEdGMFpTQnZjaUJtZFc1amRHbHZiaUIwYjF4dUlDb2dJQ0FnSUNBZ0lIQnliMlIxWTJVZ2JtVjRkQ0J3WVhKMGFXRnNJSE4wWVhSbElIUnZJR0psSUcxbGNtZGxaQ0IzYVhSb0lHTjFjbkpsYm5RZ2MzUmhkR1V1WEc0Z0tpQkFjR0Z5WVcwZ2V6OW1kVzVqZEdsdmJuMGdZMkZzYkdKaFkyc2dRMkZzYkdWa0lHRm1kR1Z5SUhOMFlYUmxJR2x6SUhWd1pHRjBaV1F1WEc0Z0tpQkFabWx1WVd4Y2JpQXFJRUJ3Y205MFpXTjBaV1JjYmlBcUwxeHVVbVZoWTNSRGIyMXdiMjVsYm5RdWNISnZkRzkwZVhCbExuTmxkRk4wWVhSbElEMGdablZ1WTNScGIyNGdLSEJoY25ScFlXeFRkR0YwWlN3Z1kyRnNiR0poWTJzcElIdGNiaUFnSVNoMGVYQmxiMllnY0dGeWRHbGhiRk4wWVhSbElEMDlQU0FuYjJKcVpXTjBKeUI4ZkNCMGVYQmxiMllnY0dGeWRHbGhiRk4wWVhSbElEMDlQU0FuWm5WdVkzUnBiMjRuSUh4OElIQmhjblJwWVd4VGRHRjBaU0E5UFNCdWRXeHNLU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZHpaWFJUZEdGMFpTZ3VMaTRwT2lCMFlXdGxjeUJoYmlCdlltcGxZM1FnYjJZZ2MzUmhkR1VnZG1GeWFXRmliR1Z6SUhSdklIVndaR0YwWlNCdmNpQmhJQ2NnS3lBblpuVnVZM1JwYjI0Z2QyaHBZMmdnY21WMGRYSnVjeUJoYmlCdlltcGxZM1FnYjJZZ2MzUmhkR1VnZG1GeWFXRmliR1Z6TGljcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1Wnlod1lYSjBhV0ZzVTNSaGRHVWdJVDBnYm5Wc2JDd2dKM05sZEZOMFlYUmxLQzR1TGlrNklGbHZkU0J3WVhOelpXUWdZVzRnZFc1a1pXWnBibVZrSUc5eUlHNTFiR3dnYzNSaGRHVWdiMkpxWldOME95QW5JQ3NnSjJsdWMzUmxZV1FzSUhWelpTQm1iM0pqWlZWd1pHRjBaU2dwTGljcElEb2dkVzVrWldacGJtVmtPMXh1SUNCOVhHNGdJSFJvYVhNdWRYQmtZWFJsY2k1bGJuRjFaWFZsVTJWMFUzUmhkR1VvZEdocGN5d2djR0Z5ZEdsaGJGTjBZWFJsS1R0Y2JpQWdhV1lnS0dOaGJHeGlZV05yS1NCN1hHNGdJQ0FnZEdocGN5NTFjR1JoZEdWeUxtVnVjWFZsZFdWRFlXeHNZbUZqYXloMGFHbHpMQ0JqWVd4c1ltRmpheWs3WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1JtOXlZMlZ6SUdGdUlIVndaR0YwWlM0Z1ZHaHBjeUJ6YUc5MWJHUWdiMjVzZVNCaVpTQnBiblp2YTJWa0lIZG9aVzRnYVhRZ2FYTWdhMjV2ZDI0Z2QybDBhRnh1SUNvZ1kyVnlkR0ZwYm5SNUlIUm9ZWFFnZDJVZ1lYSmxJQ29xYm05MEtpb2dhVzRnWVNCRVQwMGdkSEpoYm5OaFkzUnBiMjR1WEc0Z0tseHVJQ29nV1c5MUlHMWhlU0IzWVc1MElIUnZJR05oYkd3Z2RHaHBjeUIzYUdWdUlIbHZkU0JyYm05M0lIUm9ZWFFnYzI5dFpTQmtaV1Z3WlhJZ1lYTndaV04wSUc5bUlIUm9aVnh1SUNvZ1kyOXRjRzl1Wlc1MEozTWdjM1JoZEdVZ2FHRnpJR05vWVc1blpXUWdZblYwSUdCelpYUlRkR0YwWldBZ2QyRnpJRzV2ZENCallXeHNaV1F1WEc0Z0tseHVJQ29nVkdocGN5QjNhV3hzSUc1dmRDQnBiblp2YTJVZ1lITm9iM1ZzWkVOdmJYQnZibVZ1ZEZWd1pHRjBaV0FzSUdKMWRDQnBkQ0IzYVd4c0lHbHVkbTlyWlZ4dUlDb2dZR052YlhCdmJtVnVkRmRwYkd4VmNHUmhkR1ZnSUdGdVpDQmdZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxZQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlejltZFc1amRHbHZibjBnWTJGc2JHSmhZMnNnUTJGc2JHVmtJR0ZtZEdWeUlIVndaR0YwWlNCcGN5QmpiMjF3YkdWMFpTNWNiaUFxSUVCbWFXNWhiRnh1SUNvZ1FIQnliM1JsWTNSbFpGeHVJQ292WEc1U1pXRmpkRU52YlhCdmJtVnVkQzV3Y205MGIzUjVjR1V1Wm05eVkyVlZjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9ZMkZzYkdKaFkyc3BJSHRjYmlBZ2RHaHBjeTUxY0dSaGRHVnlMbVZ1Y1hWbGRXVkdiM0pqWlZWd1pHRjBaU2gwYUdsektUdGNiaUFnYVdZZ0tHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ2RHaHBjeTUxY0dSaGRHVnlMbVZ1Y1hWbGRXVkRZV3hzWW1GamF5aDBhR2x6TENCallXeHNZbUZqYXlrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dSR1Z3Y21WallYUmxaQ0JCVUVsekxpQlVhR1Z6WlNCQlVFbHpJSFZ6WldRZ2RHOGdaWGhwYzNRZ2IyNGdZMnhoYzNOcFl5QlNaV0ZqZENCamJHRnpjMlZ6SUdKMWRDQnphVzVqWlZ4dUlDb2dkMlVnZDI5MWJHUWdiR2xyWlNCMGJ5QmtaWEJ5WldOaGRHVWdkR2hsYlN3Z2QyVW5jbVVnYm05MElHZHZhVzVuSUhSdklHMXZkbVVnZEdobGJTQnZkbVZ5SUhSdklIUm9hWE5jYmlBcUlHMXZaR1Z5YmlCaVlYTmxJR05zWVhOekxpQkpibk4wWldGa0xDQjNaU0JrWldacGJtVWdZU0JuWlhSMFpYSWdkR2hoZENCM1lYSnVjeUJwWmlCcGRDZHpJR0ZqWTJWemMyVmtMbHh1SUNvdlhHNXBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0IyWVhJZ1pHVndjbVZqWVhSbFpFRlFTWE1nUFNCN1hHNGdJQ0FnWjJWMFJFOU5UbTlrWlRvZ1d5ZG5aWFJFVDAxT2IyUmxKeXdnSjFWelpTQlNaV0ZqZEVSUFRTNW1hVzVrUkU5TlRtOWtaU2hqYjIxd2IyNWxiblFwSUdsdWMzUmxZV1F1SjEwc1hHNGdJQ0FnYVhOTmIzVnVkR1ZrT2lCYkoybHpUVzkxYm5SbFpDY3NJQ2RKYm5OMFpXRmtMQ0J0WVd0bElITjFjbVVnZEc4Z1kyeGxZVzRnZFhBZ2MzVmljMk55YVhCMGFXOXVjeUJoYm1RZ2NHVnVaR2x1WnlCeVpYRjFaWE4wY3lCcGJpQW5JQ3NnSjJOdmJYQnZibVZ1ZEZkcGJHeFZibTF2ZFc1MElIUnZJSEJ5WlhabGJuUWdiV1Z0YjNKNUlHeGxZV3R6TGlkZExGeHVJQ0FnSUhKbGNHeGhZMlZRY205d2N6b2dXeWR5WlhCc1lXTmxVSEp2Y0hNbkxDQW5TVzV6ZEdWaFpDd2dZMkZzYkNCeVpXNWtaWElnWVdkaGFXNGdZWFFnZEdobElIUnZjQ0JzWlhabGJDNG5YU3hjYmlBZ0lDQnlaWEJzWVdObFUzUmhkR1U2SUZzbmNtVndiR0ZqWlZOMFlYUmxKeXdnSjFKbFptRmpkRzl5SUhsdmRYSWdZMjlrWlNCMGJ5QjFjMlVnYzJWMFUzUmhkR1VnYVc1emRHVmhaQ0FvYzJWbElDY2dLeUFuYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJaaFkyVmliMjlyTDNKbFlXTjBMMmx6YzNWbGN5OHpNak0yS1M0blhTeGNiaUFnSUNCelpYUlFjbTl3Y3pvZ1d5ZHpaWFJRY205d2N5Y3NJQ2RKYm5OMFpXRmtMQ0JqWVd4c0lISmxibVJsY2lCaFoyRnBiaUJoZENCMGFHVWdkRzl3SUd4bGRtVnNMaWRkWEc0Z0lIMDdYRzRnSUhaaGNpQmtaV1pwYm1WRVpYQnlaV05oZEdsdmJsZGhjbTVwYm1jZ1BTQm1kVzVqZEdsdmJpQW9iV1YwYUc5a1RtRnRaU3dnYVc1bWJ5a2dlMXh1SUNBZ0lHbG1JQ2hqWVc1RVpXWnBibVZRY205d1pYSjBlU2tnZTF4dUlDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtGSmxZV04wUTI5dGNHOXVaVzUwTG5CeWIzUnZkSGx3WlN3Z2JXVjBhRzlrVG1GdFpTd2dlMXh1SUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5aG1ZV3h6WlN3Z0p5VnpLQzR1TGlrZ2FYTWdaR1Z3Y21WallYUmxaQ0JwYmlCd2JHRnBiaUJLWVhaaFUyTnlhWEIwSUZKbFlXTjBJR05zWVhOelpYTXVJQ1Z6Snl3Z2FXNW1iMXN3WFN3Z2FXNW1iMXN4WFNrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1SUNCbWIzSWdLSFpoY2lCbWJrNWhiV1VnYVc0Z1pHVndjbVZqWVhSbFpFRlFTWE1wSUh0Y2JpQWdJQ0JwWmlBb1pHVndjbVZqWVhSbFpFRlFTWE11YUdGelQzZHVVSEp2Y0dWeWRIa29abTVPWVcxbEtTa2dlMXh1SUNBZ0lDQWdaR1ZtYVc1bFJHVndjbVZqWVhScGIyNVhZWEp1YVc1bktHWnVUbUZ0WlN3Z1pHVndjbVZqWVhSbFpFRlFTWE5iWm01T1lXMWxYU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFkzUkRiMjF3YjI1bGJuUTdJbDE5IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0RE9NSURPcGVyYXRpb25zJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG4vKipcbiAqIEFic3RyYWN0cyBhd2F5IGFsbCBmdW5jdGlvbmFsaXR5IG9mIHRoZSByZWNvbmNpbGVyIHRoYXQgcmVxdWlyZXMga25vd2xlZGdlIG9mXG4gKiB0aGUgYnJvd3NlciBjb250ZXh0LiBUT0RPOiBUaGVzZSBjYWxsZXJzIHNob3VsZCBiZSByZWZhY3RvcmVkIHRvIGF2b2lkIHRoZVxuICogbmVlZCBmb3IgdGhpcyBpbmplY3Rpb24uXG4gKi9cbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHtcblxuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBSZWFjdERPTUlET3BlcmF0aW9ucy5kYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMsXG5cbiAgcmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogUmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlELFxuXG4gIC8qKlxuICAgKiBJZiBhIHBhcnRpY3VsYXIgZW52aXJvbm1lbnQgcmVxdWlyZXMgdGhhdCBzb21lIHJlc291cmNlcyBiZSBjbGVhbmVkIHVwLFxuICAgKiBzcGVjaWZ5IHRoaXMgaW4gdGhlIGluamVjdGVkIE1peGluLiBJbiB0aGUgRE9NLCB3ZSB3b3VsZCBsaWtlbHkgd2FudCB0b1xuICAgKiBwdXJnZSBhbnkgY2FjaGVkIG5vZGUgSUQgbG9va3Vwcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogZnVuY3Rpb24gKHJvb3ROb2RlSUQpIHtcbiAgICBSZWFjdE1vdW50LnB1cmdlSUQocm9vdE5vZGVJRCk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudDsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIGluamVjdGVkID0gZmFsc2U7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0ge1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IGluamVjdGFibGUgZW52aXJvbm1lbnQgZGVwZW5kZW50IGNsZWFudXAgaG9vay4gKHNlcnZlciB2cy5cbiAgICogYnJvd3NlciBldGMpLiBFeGFtcGxlOiBBIGJyb3dzZXIgc3lzdGVtIGNhY2hlcyBET00gbm9kZXMgYmFzZWQgb24gY29tcG9uZW50XG4gICAqIElEIGFuZCBtdXN0IHJlbW92ZSB0aGF0IGNhY2hlIGVudHJ5IHdoZW4gdGhpcyBpbnN0YW5jZSBpcyB1bm1vdW50ZWQuXG4gICAqL1xuICB1bm1vdW50SURGcm9tRW52aXJvbm1lbnQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBzd2FwcGluZyBvdXQgbW91bnQgaW1hZ2VzIGluIHRoZSBtaWRkbGUgb2ZcbiAgICogdGhlIHRyZWUuXG4gICAqL1xuICByZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBudWxsLFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IGluamVjdGFibGUgaG9vayBmb3IgcHJvY2Vzc2luZyBhIHF1ZXVlIG9mIGNoaWxkIHVwZGF0ZXMuIFdpbGxcbiAgICogbGF0ZXIgbW92ZSBpbnRvIE11bHRpQ2hpbGRDb21wb25lbnRzLlxuICAgKi9cbiAgcHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogbnVsbCxcblxuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RFbnZpcm9ubWVudDogZnVuY3Rpb24gKGVudmlyb25tZW50KSB7XG4gICAgICAhIWluamVjdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50OiBpbmplY3RFbnZpcm9ubWVudCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50ID0gZW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50O1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEID0gZW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyA9IGVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXM7XG4gICAgICBpbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRGIyMXdiMjVsYm5SRmJuWnBjbTl1YldWdWRDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREUwTFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnVW1WaFkzUkRiMjF3YjI1bGJuUkZiblpwY205dWJXVnVkRnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwybHVkbUZ5YVdGdWRDY3BPMXh1WEc1MllYSWdhVzVxWldOMFpXUWdQU0JtWVd4elpUdGNibHh1ZG1GeUlGSmxZV04wUTI5dGNHOXVaVzUwUlc1MmFYSnZibTFsYm5RZ1BTQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFOXdkR2x2Ym1Gc2JIa2dhVzVxWldOMFlXSnNaU0JsYm5acGNtOXViV1Z1ZENCa1pYQmxibVJsYm5RZ1kyeGxZVzUxY0NCb2IyOXJMaUFvYzJWeWRtVnlJSFp6TGx4dUlDQWdLaUJpY205M2MyVnlJR1YwWXlrdUlFVjRZVzF3YkdVNklFRWdZbkp2ZDNObGNpQnplWE4wWlcwZ1kyRmphR1Z6SUVSUFRTQnViMlJsY3lCaVlYTmxaQ0J2YmlCamIyMXdiMjVsYm5SY2JpQWdJQ29nU1VRZ1lXNWtJRzExYzNRZ2NtVnRiM1psSUhSb1lYUWdZMkZqYUdVZ1pXNTBjbmtnZDJobGJpQjBhR2x6SUdsdWMzUmhibU5sSUdseklIVnViVzkxYm5SbFpDNWNiaUFnSUNvdlhHNGdJSFZ1Ylc5MWJuUkpSRVp5YjIxRmJuWnBjbTl1YldWdWREb2diblZzYkN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVDNCMGFXOXVZV3hzZVNCcGJtcGxZM1JoWW14bElHaHZiMnNnWm05eUlITjNZWEJ3YVc1bklHOTFkQ0J0YjNWdWRDQnBiV0ZuWlhNZ2FXNGdkR2hsSUcxcFpHUnNaU0J2Wmx4dUlDQWdLaUIwYUdVZ2RISmxaUzVjYmlBZ0lDb3ZYRzRnSUhKbGNHeGhZMlZPYjJSbFYybDBhRTFoY210MWNFSjVTVVE2SUc1MWJHd3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFOXdkR2x2Ym1Gc2JIa2dhVzVxWldOMFlXSnNaU0JvYjI5cklHWnZjaUJ3Y205alpYTnphVzVuSUdFZ2NYVmxkV1VnYjJZZ1kyaHBiR1FnZFhCa1lYUmxjeTRnVjJsc2JGeHVJQ0FnS2lCc1lYUmxjaUJ0YjNabElHbHVkRzhnVFhWc2RHbERhR2xzWkVOdmJYQnZibVZ1ZEhNdVhHNGdJQ0FxTDF4dUlDQndjbTlqWlhOelEyaHBiR1J5Wlc1VmNHUmhkR1Z6T2lCdWRXeHNMRnh1WEc0Z0lHbHVhbVZqZEdsdmJqb2dlMXh1SUNBZ0lHbHVhbVZqZEVWdWRtbHliMjV0Wlc1ME9pQm1kVzVqZEdsdmJpQW9aVzUyYVhKdmJtMWxiblFwSUh0Y2JpQWdJQ0FnSUNFaGFXNXFaV04wWldRZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuVW1WaFkzUkRiMjF3YjNOcGRHVkRiMjF3YjI1bGJuUTZJR2x1YW1WamRFVnVkbWx5YjI1dFpXNTBLQ2tnWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUc5dVkyVXVKeWtnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ1VtVmhZM1JEYjIxd2IyNWxiblJGYm5acGNtOXViV1Z1ZEM1MWJtMXZkVzUwU1VSR2NtOXRSVzUyYVhKdmJtMWxiblFnUFNCbGJuWnBjbTl1YldWdWRDNTFibTF2ZFc1MFNVUkdjbTl0Ulc1MmFYSnZibTFsYm5RN1hHNGdJQ0FnSUNCU1pXRmpkRU52YlhCdmJtVnVkRVZ1ZG1seWIyNXRaVzUwTG5KbGNHeGhZMlZPYjJSbFYybDBhRTFoY210MWNFSjVTVVFnUFNCbGJuWnBjbTl1YldWdWRDNXlaWEJzWVdObFRtOWtaVmRwZEdoTllYSnJkWEJDZVVsRU8xeHVJQ0FnSUNBZ1VtVmhZM1JEYjIxd2IyNWxiblJGYm5acGNtOXViV1Z1ZEM1d2NtOWpaWE56UTJocGJHUnlaVzVWY0dSaGRHVnpJRDBnWlc1MmFYSnZibTFsYm5RdWNISnZZMlZ6YzBOb2FXeGtjbVZ1VlhCa1lYUmxjenRjYmlBZ0lDQWdJR2x1YW1WamRHVmtJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGamRFTnZiWEJ2Ym1WdWRFVnVkbWx5YjI1dFpXNTBPeUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb3NpdGVDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZVF1ZXVlJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkge1xuICB2YXIgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lciB8fCBudWxsO1xuICBpZiAob3duZXIpIHtcbiAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBTdGF0ZWxlc3NDb21wb25lbnQoQ29tcG9uZW50KSB7fVxuU3RhdGVsZXNzQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBDb21wb25lbnQgPSBSZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKS5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgcmV0dXJuIENvbXBvbmVudCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMudXBkYXRlcik7XG59O1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLSBUaGUgTGlmZS1DeWNsZSBvZiBhIENvbXBvc2l0ZSBDb21wb25lbnQgLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogLSBjb25zdHJ1Y3RvcjogSW5pdGlhbGl6YXRpb24gb2Ygc3RhdGUuIFRoZSBpbnN0YW5jZSBpcyBub3cgcmV0YWluZWQuXG4gKiAgIC0gY29tcG9uZW50V2lsbE1vdW50XG4gKiAgIC0gcmVuZGVyXG4gKiAgIC0gW2NoaWxkcmVuJ3MgY29uc3RydWN0b3JzXVxuICogICAgIC0gW2NoaWxkcmVuJ3MgY29tcG9uZW50V2lsbE1vdW50IGFuZCByZW5kZXJdXG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnREaWRNb3VudF1cbiAqICAgICAtIGNvbXBvbmVudERpZE1vdW50XG4gKlxuICogICAgICAgVXBkYXRlIFBoYXNlczpcbiAqICAgICAgIC0gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAob25seSBjYWxsZWQgaWYgcGFyZW50IHVwZGF0ZWQpXG4gKiAgICAgICAtIHNob3VsZENvbXBvbmVudFVwZGF0ZVxuICogICAgICAgICAtIGNvbXBvbmVudFdpbGxVcGRhdGVcbiAqICAgICAgICAgICAtIHJlbmRlclxuICogICAgICAgICAgIC0gW2NoaWxkcmVuJ3MgY29uc3RydWN0b3JzIG9yIHJlY2VpdmUgcHJvcHMgcGhhc2VzXVxuICogICAgICAgICAtIGNvbXBvbmVudERpZFVwZGF0ZVxuICpcbiAqICAgICAtIGNvbXBvbmVudFdpbGxVbm1vdW50XG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnRXaWxsVW5tb3VudF1cbiAqICAgLSBbY2hpbGRyZW4gZGVzdHJveWVkXVxuICogLSAoZGVzdHJveWVkKTogVGhlIGluc3RhbmNlIGlzIG5vdyBibGFuaywgcmVsZWFzZWQgYnkgUmVhY3QgYW5kIHJlYWR5IGZvciBHQy5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbi8qKlxuICogQW4gaW5jcmVtZW50aW5nIElEIGFzc2lnbmVkIHRvIGVhY2ggY29tcG9uZW50IHdoZW4gaXQgaXMgbW91bnRlZC4gVGhpcyBpc1xuICogdXNlZCB0byBlbmZvcmNlIHRoZSBvcmRlciBpbiB3aGljaCBgUmVhY3RVcGRhdGVzYCB1cGRhdGVzIGRpcnR5IGNvbXBvbmVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xudmFyIG5leHRNb3VudElEID0gMTtcblxuLyoqXG4gKiBAbGVuZHMge1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LnByb3RvdHlwZX1cbiAqL1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIEJhc2UgY29uc3RydWN0b3IgZm9yIGFsbCBjb21wb3NpdGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSBudWxsO1xuICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcblxuICAgIC8vIFNlZSBSZWFjdFVwZGF0ZVF1ZXVlXG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG5cbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9tb3VudE9yZGVyID0gMDtcbiAgICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuXG4gICAgLy8gU2VlIFJlYWN0VXBkYXRlcyBhbmQgUmVhY3RVcGRhdGVRdWV1ZS5cbiAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgcmVuZGVycyBtYXJrdXAsIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fbW91bnRPcmRlciA9IG5leHRNb3VudElEKys7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IHJvb3RJRDtcblxuICAgIHZhciBwdWJsaWNQcm9wcyA9IHRoaXMuX3Byb2Nlc3NQcm9wcyh0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcyk7XG4gICAgdmFyIHB1YmxpY0NvbnRleHQgPSB0aGlzLl9wcm9jZXNzQ29udGV4dChjb250ZXh0KTtcblxuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgcHVibGljIGNsYXNzXG4gICAgdmFyIGluc3Q7XG4gICAgdmFyIHJlbmRlcmVkRWxlbWVudDtcblxuICAgIC8vIFRoaXMgaXMgYSB3YXkgdG8gZGV0ZWN0IGlmIENvbXBvbmVudCBpcyBhIHN0YXRlbGVzcyBhcnJvdyBmdW5jdGlvblxuICAgIC8vIGNvbXBvbmVudCwgd2hpY2ggaXMgbm90IG5ld2FibGUuIEl0IG1pZ2h0IG5vdCBiZSAxMDAlIHJlbGlhYmxlIGJ1dCBpc1xuICAgIC8vIHNvbWV0aGluZyB3ZSBjYW4gZG8gdW50aWwgd2Ugc3RhcnQgZGV0ZWN0aW5nIHRoYXQgQ29tcG9uZW50IGV4dGVuZHNcbiAgICAvLyBSZWFjdC5Db21wb25lbnQuIFdlIGFscmVhZHkgYXNzdW1lIHRoYXQgdHlwZW9mIENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJy5cbiAgICB2YXIgY2FuSW5zdGFudGlhdGUgPSAoJ3Byb3RvdHlwZScgaW4gQ29tcG9uZW50KTtcblxuICAgIGlmIChjYW5JbnN0YW50aWF0ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaW5zdCA9IG5ldyBDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIFJlYWN0VXBkYXRlUXVldWUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0ID0gbmV3IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgUmVhY3RVcGRhdGVRdWV1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjYW5JbnN0YW50aWF0ZSB8fCBpbnN0ID09PSBudWxsIHx8IGluc3QgPT09IGZhbHNlIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChpbnN0KSkge1xuICAgICAgcmVuZGVyZWRFbGVtZW50ID0gaW5zdDtcbiAgICAgIGluc3QgPSBuZXcgU3RhdGVsZXNzQ29tcG9uZW50KENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBsYXRlciBpbiBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50LCBidXQgYWRkIGFuIGVhcmx5XG4gICAgICAvLyB3YXJuaW5nIG5vdyB0byBoZWxwIGRlYnVnZ2luZ1xuICAgICAgaWYgKGluc3QucmVuZGVyID09IG51bGwpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyguLi4pOiBObyBgcmVuZGVyYCBtZXRob2QgZm91bmQgb24gdGhlIHJldHVybmVkIGNvbXBvbmVudCAnICsgJ2luc3RhbmNlOiB5b3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGRlZmluZSBgcmVuZGVyYCwgcmV0dXJuZWQgJyArICdudWxsL2ZhbHNlIGZyb20gYSBzdGF0ZWxlc3MgY29tcG9uZW50LCBvciB0cmllZCB0byByZW5kZXIgYW4gJyArICdlbGVtZW50IHdob3NlIHR5cGUgaXMgYSBmdW5jdGlvbiB0aGF0IGlzblxcJ3QgYSBSZWFjdCBjb21wb25lbnQuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIHN1cHBvcnQgRVM2IGluaGVyaXRpbmcgZnJvbSBSZWFjdC5Db21wb25lbnQsIHRoZSBtb2R1bGUgcGF0dGVybixcbiAgICAgICAgLy8gYW5kIHN0YXRlbGVzcyBjb21wb25lbnRzLCBidXQgbm90IEVTNiBjbGFzc2VzIHRoYXQgZG9uJ3QgZXh0ZW5kXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50IHx8ICFjYW5JbnN0YW50aWF0ZSB8fCAhKGluc3QgaW5zdGFuY2VvZiBDb21wb25lbnQpLCAnJXMoLi4uKTogUmVhY3QgY29tcG9uZW50IGNsYXNzZXMgbXVzdCBleHRlbmQgUmVhY3QuQ29tcG9uZW50LicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlc2Ugc2hvdWxkIGJlIHNldCB1cCBpbiB0aGUgY29uc3RydWN0b3IsIGJ1dCBhcyBhIGNvbnZlbmllbmNlIGZvclxuICAgIC8vIHNpbXBsZXIgY2xhc3MgYWJzdHJhY3Rpb25zLCB3ZSBzZXQgdGhlbSB1cCBhZnRlciB0aGUgZmFjdC5cbiAgICBpbnN0LnByb3BzID0gcHVibGljUHJvcHM7XG4gICAgaW5zdC5jb250ZXh0ID0gcHVibGljQ29udGV4dDtcbiAgICBpbnN0LnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICBpbnN0LnVwZGF0ZXIgPSBSZWFjdFVwZGF0ZVF1ZXVlO1xuXG4gICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0O1xuXG4gICAgLy8gU3RvcmUgYSByZWZlcmVuY2UgZnJvbSB0aGUgaW5zdGFuY2UgYmFjayB0byB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAgICBSZWFjdEluc3RhbmNlTWFwLnNldChpbnN0LCB0aGlzKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBTaW5jZSBwbGFpbiBKUyBjbGFzc2VzIGFyZSBkZWZpbmVkIHdpdGhvdXQgYW55IHNwZWNpYWwgaW5pdGlhbGl6YXRpb25cbiAgICAgIC8vIGxvZ2ljLCB3ZSBjYW4gbm90IGNhdGNoIGNvbW1vbiBlcnJvcnMgZWFybHkuIFRoZXJlZm9yZSwgd2UgaGF2ZSB0b1xuICAgICAgLy8gY2F0Y2ggdGhlbSBoZXJlLCBhdCBpbml0aWFsaXphdGlvbiB0aW1lLCBpbnN0ZWFkLlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuZ2V0SW5pdGlhbFN0YXRlIHx8IGluc3QuZ2V0SW5pdGlhbFN0YXRlLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0SW5pdGlhbFN0YXRlIHdhcyBkZWZpbmVkIG9uICVzLCBhIHBsYWluIEphdmFTY3JpcHQgY2xhc3MuICcgKyAnVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiAnICsgJ0RpZCB5b3UgbWVhbiB0byBkZWZpbmUgYSBzdGF0ZSBwcm9wZXJ0eSBpbnN0ZWFkPycsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuZ2V0RGVmYXVsdFByb3BzIHx8IGluc3QuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0RGVmYXVsdFByb3BzIHdhcyBkZWZpbmVkIG9uICVzLCBhIHBsYWluIEphdmFTY3JpcHQgY2xhc3MuICcgKyAnVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiAnICsgJ1VzZSBhIHN0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgZGVmYXVsdFByb3BzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5wcm9wVHlwZXMsICdwcm9wVHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICsgJ3Byb3BlcnR5IHRvIGRlZmluZSBwcm9wVHlwZXMgaW5zdGVhZC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpbnN0LmNvbnRleHRUeXBlcywgJ2NvbnRleHRUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgJyArICdzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGNvbnRleHRUeXBlcyBpbnN0ZWFkLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50U2hvdWxkVXBkYXRlICE9PSAnZnVuY3Rpb24nLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgKyAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgKyAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdC5jb21wb25lbnREaWRVbm1vdW50ICE9PSAnZnVuY3Rpb24nLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudERpZFVubW91bnQoKS4gQnV0IHRoZXJlIGlzIG5vIHN1Y2ggbGlmZWN5Y2xlIG1ldGhvZC4gJyArICdEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFVubW91bnQoKT8nLCB0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBpbnN0LmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgIT09ICdmdW5jdGlvbicsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsIHRoaXMuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsU3RhdGUgPSBpbnN0LnN0YXRlO1xuICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5zdC5zdGF0ZSA9IGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgICEodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgaW5zdC5jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICAgIC8vIFdoZW4gbW91bnRpbmcsIGNhbGxzIHRvIGBzZXRTdGF0ZWAgYnkgYGNvbXBvbmVudFdpbGxNb3VudGAgd2lsbCBzZXRcbiAgICAgIC8vIGB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZWAgd2l0aG91dCB0cmlnZ2VyaW5nIGEgcmUtcmVuZGVyLlxuICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlKSB7XG4gICAgICAgIGluc3Quc3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKGluc3QucHJvcHMsIGluc3QuY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgbm90IGEgc3RhdGVsZXNzIGNvbXBvbmVudCwgd2Ugbm93IHJlbmRlclxuICAgIGlmIChyZW5kZXJlZEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSB0aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KHJlbmRlcmVkRWxlbWVudCk7XG5cbiAgICB2YXIgbWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LCByb290SUQsIHRyYW5zYWN0aW9uLCB0aGlzLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGNvbnRleHQpKTtcbiAgICBpZiAoaW5zdC5jb21wb25lbnREaWRNb3VudCkge1xuICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnN0LmNvbXBvbmVudERpZE1vdW50LCBpbnN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KSB7XG4gICAgICBpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgfVxuXG4gICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQodGhpcy5fcmVuZGVyZWRDb21wb25lbnQpO1xuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcbiAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAvLyBSZXNldCBwZW5kaW5nIGZpZWxkc1xuICAgIC8vIEV2ZW4gaWYgdGhpcyBjb21wb25lbnQgaXMgc2NoZWR1bGVkIGZvciBhbm90aGVyIHVwZGF0ZSBpbiBSZWFjdFVwZGF0ZXMsXG4gICAgLy8gaXQgd291bGQgc3RpbGwgYmUgaWdub3JlZCBiZWNhdXNlIHRoZXNlIGZpZWxkcyBhcmUgcmVzZXQuXG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgICAvLyBUaGVzZSBmaWVsZHMgZG8gbm90IHJlYWxseSBuZWVkIHRvIGJlIHJlc2V0IHNpbmNlIHRoaXMgb2JqZWN0IGlzIG5vXG4gICAgLy8gbG9uZ2VyIGFjY2Vzc2libGUuXG4gICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5fdG9wTGV2ZWxXcmFwcGVyID0gbnVsbDtcblxuICAgIC8vIERlbGV0ZSB0aGUgcmVmZXJlbmNlIGZyb20gdGhlIGluc3RhbmNlIHRvIHRoaXMgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAgICAvLyB3aGljaCBhbGxvdyB0aGUgaW50ZXJuYWxzIHRvIGJlIHByb3Blcmx5IGNsZWFuZWQgdXAgZXZlbiBpZiB0aGUgdXNlclxuICAgIC8vIGxlYWtzIGEgcmVmZXJlbmNlIHRvIHRoZSBwdWJsaWMgaW5zdGFuY2UuXG4gICAgUmVhY3RJbnN0YW5jZU1hcC5yZW1vdmUoaW5zdCk7XG5cbiAgICAvLyBTb21lIGV4aXN0aW5nIGNvbXBvbmVudHMgcmVseSBvbiBpbnN0LnByb3BzIGV2ZW4gYWZ0ZXIgdGhleSd2ZSBiZWVuXG4gICAgLy8gZGVzdHJveWVkIChpbiBldmVudCBoYW5kbGVycykuXG4gICAgLy8gVE9ETzogaW5zdC5wcm9wcyA9IG51bGw7XG4gICAgLy8gVE9ETzogaW5zdC5zdGF0ZSA9IG51bGw7XG4gICAgLy8gVE9ETzogaW5zdC5jb250ZXh0ID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogRmlsdGVycyB0aGUgY29udGV4dCBvYmplY3QgdG8gb25seSBjb250YWluIGtleXMgc3BlY2lmaWVkIGluXG4gICAqIGBjb250ZXh0VHlwZXNgXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWFza0NvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIG1hc2tlZENvbnRleHQgPSBudWxsO1xuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBjb250ZXh0VHlwZXMgPSBDb21wb25lbnQuY29udGV4dFR5cGVzO1xuICAgIGlmICghY29udGV4dFR5cGVzKSB7XG4gICAgICByZXR1cm4gZW1wdHlPYmplY3Q7XG4gICAgfVxuICAgIG1hc2tlZENvbnRleHQgPSB7fTtcbiAgICBmb3IgKHZhciBjb250ZXh0TmFtZSBpbiBjb250ZXh0VHlwZXMpIHtcbiAgICAgIG1hc2tlZENvbnRleHRbY29udGV4dE5hbWVdID0gY29udGV4dFtjb250ZXh0TmFtZV07XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjb250ZXh0IG9iamVjdCB0byBvbmx5IGNvbnRhaW4ga2V5cyBzcGVjaWZpZWQgaW5cbiAgICogYGNvbnRleHRUeXBlc2AsIGFuZCBhc3NlcnRzIHRoYXQgdGhleSBhcmUgdmFsaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc0NvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIG1hc2tlZENvbnRleHQgPSB0aGlzLl9tYXNrQ29udGV4dChjb250ZXh0KTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICBpZiAoQ29tcG9uZW50LmNvbnRleHRUeXBlcykge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhDb21wb25lbnQuY29udGV4dFR5cGVzLCBtYXNrZWRDb250ZXh0LCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFza2VkQ29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGN1cnJlbnRDb250ZXh0XG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzQ2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoY3VycmVudENvbnRleHQpIHtcbiAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIHZhciBjaGlsZENvbnRleHQgPSBpbnN0LmdldENoaWxkQ29udGV4dCAmJiBpbnN0LmdldENoaWxkQ29udGV4dCgpO1xuICAgIGlmIChjaGlsZENvbnRleHQpIHtcbiAgICAgICEodHlwZW9mIENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcyA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gJyArICd1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzLCBjaGlsZENvbnRleHQsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY2hpbGRDb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRDb250ZXh0KSB7XG4gICAgICAgICEobmFtZSBpbiBDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLmdldENoaWxkQ29udGV4dCgpOiBrZXkgXCIlc1wiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhc3NpZ24oe30sIGN1cnJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBwcm9wcyBieSBzZXR0aW5nIGRlZmF1bHQgdmFsdWVzIGZvciB1bnNwZWNpZmllZCBwcm9wcyBhbmRcbiAgICogYXNzZXJ0aW5nIHRoYXQgdGhlIHByb3BzIGFyZSB2YWxpZC4gRG9lcyBub3QgbXV0YXRlIGl0cyBhcmd1bWVudDsgcmV0dXJuc1xuICAgKiBhIG5ldyBwcm9wcyBvYmplY3Qgd2l0aCBkZWZhdWx0cyBtZXJnZWQgaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wc1xuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc1Byb3BzOiBmdW5jdGlvbiAobmV3UHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICBpZiAoQ29tcG9uZW50LnByb3BUeXBlcykge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhDb21wb25lbnQucHJvcFR5cGVzLCBuZXdQcm9wcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1Byb3BzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBc3NlcnQgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wVHlwZXMgTWFwIG9mIHByb3AgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja1Byb3BUeXBlczogZnVuY3Rpb24gKHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG4gICAgLy8gVE9ETzogU3RvcCB2YWxpZGF0aW5nIHByb3AgdHlwZXMgaGVyZSBhbmQgb25seSB1c2UgdGhlIGVsZW1lbnRcbiAgICAvLyB2YWxpZGF0aW9uLlxuICAgIHZhciBjb21wb25lbnROYW1lID0gdGhpcy5nZXROYW1lKCk7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcFR5cGVzKSB7XG4gICAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAgICEodHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5ICcgKyAnZnJvbSBSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGVycm9yID0gZXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAvLyBXZSBtYXkgd2FudCB0byBleHRlbmQgdGhpcyBsb2dpYyBmb3Igc2ltaWxhciBlcnJvcnMgaW5cbiAgICAgICAgICAvLyB0b3AtbGV2ZWwgcmVuZGVyIGNhbGxzLCBzbyBJJ20gYWJzdHJhY3RpbmcgaXQgYXdheSBpbnRvXG4gICAgICAgICAgLy8gYSBmdW5jdGlvbiB0byBtaW5pbWl6ZSByZWZhY3RvcmluZyBpbiB0aGUgZnV0dXJlXG4gICAgICAgICAgdmFyIGFkZGVuZHVtID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKHRoaXMpO1xuXG4gICAgICAgICAgaWYgKGxvY2F0aW9uID09PSBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApIHtcbiAgICAgICAgICAgIC8vIFByZWZhY2UgZ2l2ZXMgdXMgc29tZXRoaW5nIHRvIGJsYWNrbGlzdCBpbiB3YXJuaW5nIG1vZHVsZVxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBDb250ZXh0IFR5cGVzOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBuZXh0Q29udGV4dCkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBwcmV2Q29udGV4dCA9IHRoaXMuX2NvbnRleHQ7XG5cbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBwcmV2Q29udGV4dCwgbmV4dENvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBhbnkgb2YgYF9wZW5kaW5nRWxlbWVudGAsIGBfcGVuZGluZ1N0YXRlUXVldWVgLCBvciBgX3BlbmRpbmdGb3JjZVVwZGF0ZWBcbiAgICogaXMgc2V0LCB1cGRhdGUgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKHRoaXMuX3BlbmRpbmdFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHRoaXMsIHRoaXMuX3BlbmRpbmdFbGVtZW50IHx8IHRoaXMuX2N1cnJlbnRFbGVtZW50LCB0cmFuc2FjdGlvbiwgdGhpcy5fY29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlICE9PSBudWxsIHx8IHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSkge1xuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24sIHRoaXMuX2N1cnJlbnRFbGVtZW50LCB0aGlzLl9jdXJyZW50RWxlbWVudCwgdGhpcy5fY29udGV4dCwgdGhpcy5fY29udGV4dCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGFuIHVwZGF0ZSB0byBhIG1vdW50ZWQgY29tcG9uZW50LiBUaGUgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBhbmRcbiAgICogc2hvdWxkQ29tcG9uZW50VXBkYXRlIG1ldGhvZHMgYXJlIGNhbGxlZCwgdGhlbiAoYXNzdW1pbmcgdGhlIHVwZGF0ZSBpc24ndFxuICAgKiBza2lwcGVkKSB0aGUgcmVtYWluaW5nIHVwZGF0ZSBsaWZlY3ljbGUgbWV0aG9kcyBhcmUgY2FsbGVkIGFuZCB0aGUgRE9NXG4gICAqIHJlcHJlc2VudGF0aW9uIGlzIHVwZGF0ZWQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gcHJldlBhcmVudEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRQYXJlbnRFbGVtZW50XG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcmV2UGFyZW50RWxlbWVudCwgbmV4dFBhcmVudEVsZW1lbnQsIHByZXZVbm1hc2tlZENvbnRleHQsIG5leHRVbm1hc2tlZENvbnRleHQpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgdmFyIG5leHRDb250ZXh0ID0gdGhpcy5fY29udGV4dCA9PT0gbmV4dFVubWFza2VkQ29udGV4dCA/IGluc3QuY29udGV4dCA6IHRoaXMuX3Byb2Nlc3NDb250ZXh0KG5leHRVbm1hc2tlZENvbnRleHQpO1xuICAgIHZhciBuZXh0UHJvcHM7XG5cbiAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGEgcHJvcHMgdXBkYXRlIHZlcnN1cyBhIHNpbXBsZSBzdGF0ZSB1cGRhdGVcbiAgICBpZiAocHJldlBhcmVudEVsZW1lbnQgPT09IG5leHRQYXJlbnRFbGVtZW50KSB7XG4gICAgICAvLyBTa2lwIGNoZWNraW5nIHByb3AgdHlwZXMgYWdhaW4gLS0gd2UgZG9uJ3QgcmVhZCBpbnN0LnByb3BzIHRvIGF2b2lkXG4gICAgICAvLyB3YXJuaW5nIGZvciBET00gY29tcG9uZW50IHByb3BzIGluIHRoaXMgdXBncmFkZVxuICAgICAgbmV4dFByb3BzID0gbmV4dFBhcmVudEVsZW1lbnQucHJvcHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRQcm9wcyA9IHRoaXMuX3Byb2Nlc3NQcm9wcyhuZXh0UGFyZW50RWxlbWVudC5wcm9wcyk7XG4gICAgICAvLyBBbiB1cGRhdGUgaGVyZSB3aWxsIHNjaGVkdWxlIGFuIHVwZGF0ZSBidXQgaW1tZWRpYXRlbHkgc2V0XG4gICAgICAvLyBfcGVuZGluZ1N0YXRlUXVldWUgd2hpY2ggd2lsbCBlbnN1cmUgdGhhdCBhbnkgc3RhdGUgdXBkYXRlcyBnZXRzXG4gICAgICAvLyBpbW1lZGlhdGVseSByZWNvbmNpbGVkIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgdGhlIG5leHQgYmF0Y2guXG5cbiAgICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpIHtcbiAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuXG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9IHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSB8fCAhaW5zdC5zaG91bGRDb21wb25lbnRVcGRhdGUgfHwgaW5zdC5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2Ygc2hvdWxkVXBkYXRlICE9PSAndW5kZWZpbmVkJywgJyVzLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpOiBSZXR1cm5lZCB1bmRlZmluZWQgaW5zdGVhZCBvZiBhICcgKyAnYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgLy8gV2lsbCBzZXQgYHRoaXMucHJvcHNgLCBgdGhpcy5zdGF0ZWAgYW5kIGB0aGlzLmNvbnRleHRgLlxuICAgICAgdGhpcy5fcGVyZm9ybUNvbXBvbmVudFVwZGF0ZShuZXh0UGFyZW50RWxlbWVudCwgbmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0LCB0cmFuc2FjdGlvbiwgbmV4dFVubWFza2VkQ29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIGl0J3MgZGV0ZXJtaW5lZCB0aGF0IGEgY29tcG9uZW50IHNob3VsZCBub3QgdXBkYXRlLCB3ZSBzdGlsbCB3YW50XG4gICAgICAvLyB0byBzZXQgcHJvcHMgYW5kIHN0YXRlIGJ1dCB3ZSBzaG9ydGN1dCB0aGUgcmVzdCBvZiB0aGUgdXBkYXRlLlxuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0UGFyZW50RWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbnRleHQgPSBuZXh0VW5tYXNrZWRDb250ZXh0O1xuICAgICAgaW5zdC5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgIGluc3Quc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICBpbnN0LmNvbnRleHQgPSBuZXh0Q29udGV4dDtcbiAgICB9XG4gIH0sXG5cbiAgX3Byb2Nlc3NQZW5kaW5nU3RhdGU6IGZ1bmN0aW9uIChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5fcGVuZGluZ1N0YXRlUXVldWU7XG4gICAgdmFyIHJlcGxhY2UgPSB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG5cbiAgICBpZiAoIXF1ZXVlKSB7XG4gICAgICByZXR1cm4gaW5zdC5zdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZSAmJiBxdWV1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBxdWV1ZVswXTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFN0YXRlID0gYXNzaWduKHt9LCByZXBsYWNlID8gcXVldWVbMF0gOiBpbnN0LnN0YXRlKTtcbiAgICBmb3IgKHZhciBpID0gcmVwbGFjZSA/IDEgOiAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0aWFsID0gcXVldWVbaV07XG4gICAgICBhc3NpZ24obmV4dFN0YXRlLCB0eXBlb2YgcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcnRpYWwuY2FsbChpbnN0LCBuZXh0U3RhdGUsIHByb3BzLCBjb250ZXh0KSA6IHBhcnRpYWwpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0U3RhdGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1lcmdlcyBuZXcgcHJvcHMgYW5kIHN0YXRlLCBub3RpZmllcyBkZWxlZ2F0ZSBtZXRob2RzIG9mIHVwZGF0ZSBhbmRcbiAgICogcGVyZm9ybXMgdXBkYXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgTmV4dCBlbGVtZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHMgTmV4dCBwdWJsaWMgb2JqZWN0IHRvIHNldCBhcyBwcm9wZXJ0aWVzLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZSBOZXh0IG9iamVjdCB0byBzZXQgYXMgc3RhdGUuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHQgTmV4dCBwdWJsaWMgb2JqZWN0IHRvIHNldCBhcyBjb250ZXh0LlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gdW5tYXNrZWRDb250ZXh0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGVyZm9ybUNvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24gKG5leHRFbGVtZW50LCBuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQsIHRyYW5zYWN0aW9uLCB1bm1hc2tlZENvbnRleHQpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgdmFyIGhhc0NvbXBvbmVudERpZFVwZGF0ZSA9IEJvb2xlYW4oaW5zdC5jb21wb25lbnREaWRVcGRhdGUpO1xuICAgIHZhciBwcmV2UHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZTtcbiAgICB2YXIgcHJldkNvbnRleHQ7XG4gICAgaWYgKGhhc0NvbXBvbmVudERpZFVwZGF0ZSkge1xuICAgICAgcHJldlByb3BzID0gaW5zdC5wcm9wcztcbiAgICAgIHByZXZTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgICBwcmV2Q29udGV4dCA9IGluc3QuY29udGV4dDtcbiAgICB9XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnRXaWxsVXBkYXRlKSB7XG4gICAgICBpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIHRoaXMuX2NvbnRleHQgPSB1bm1hc2tlZENvbnRleHQ7XG4gICAgaW5zdC5wcm9wcyA9IG5leHRQcm9wcztcbiAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIGluc3QuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gICAgdGhpcy5fdXBkYXRlUmVuZGVyZWRDb21wb25lbnQodHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCk7XG5cbiAgICBpZiAoaGFzQ29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGluc3QuY29tcG9uZW50RGlkVXBkYXRlLmJpbmQoaW5zdCwgcHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSwgaW5zdCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxsIHRoZSBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QgYW5kIHVwZGF0ZSB0aGUgRE9NIGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3VwZGF0ZVJlbmRlcmVkQ29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkNvbXBvbmVudEluc3RhbmNlID0gdGhpcy5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgdmFyIHByZXZSZW5kZXJlZEVsZW1lbnQgPSBwcmV2Q29tcG9uZW50SW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBuZXh0UmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCk7XG4gICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZSZW5kZXJlZEVsZW1lbnQsIG5leHRSZW5kZXJlZEVsZW1lbnQpKSB7XG4gICAgICBSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudChwcmV2Q29tcG9uZW50SW5zdGFuY2UsIG5leHRSZW5kZXJlZEVsZW1lbnQsIHRyYW5zYWN0aW9uLCB0aGlzLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGNvbnRleHQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlc2UgdHdvIElEcyBhcmUgYWN0dWFsbHkgdGhlIHNhbWUhIEJ1dCBub3RoaW5nIHNob3VsZCByZWx5IG9uIHRoYXQuXG4gICAgICB2YXIgdGhpc0lEID0gdGhpcy5fcm9vdE5vZGVJRDtcbiAgICAgIHZhciBwcmV2Q29tcG9uZW50SUQgPSBwcmV2Q29tcG9uZW50SW5zdGFuY2UuX3Jvb3ROb2RlSUQ7XG4gICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q29tcG9uZW50SW5zdGFuY2UpO1xuXG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IHRoaXMuX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dFJlbmRlcmVkRWxlbWVudCk7XG4gICAgICB2YXIgbmV4dE1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCwgdGhpc0lELCB0cmFuc2FjdGlvbiwgdGhpcy5fcHJvY2Vzc0NoaWxkQ29udGV4dChjb250ZXh0KSk7XG4gICAgICB0aGlzLl9yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEKHByZXZDb21wb25lbnRJRCwgbmV4dE1hcmt1cCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfcmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogZnVuY3Rpb24gKHByZXZDb21wb25lbnRJRCwgbmV4dE1hcmt1cCkge1xuICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRChwcmV2Q29tcG9uZW50SUQsIG5leHRNYXJrdXApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgcmVuZGVyZWRDb21wb25lbnQgPSBpbnN0LnJlbmRlcigpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgIGlmICh0eXBlb2YgcmVuZGVyZWRDb21wb25lbnQgPT09ICd1bmRlZmluZWQnICYmIGluc3QucmVuZGVyLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAvLyBUaGlzIGlzIHByb2JhYmx5IGJhZCBwcmFjdGljZS4gQ29uc2lkZXIgd2FybmluZyBoZXJlIGFuZFxuICAgICAgICAvLyBkZXByZWNhdGluZyB0aGlzIGNvbnZlbmllbmNlLlxuICAgICAgICByZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlcmVkQ29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIHZhciByZW5kZXJlZENvbXBvbmVudDtcbiAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICB0cnkge1xuICAgICAgcmVuZGVyZWRDb21wb25lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICAgICEoXG4gICAgLy8gVE9ETzogQW4gYGlzVmFsaWROb2RlYCBmdW5jdGlvbiB3b3VsZCBwcm9iYWJseSBiZSBtb3JlIGFwcHJvcHJpYXRlXG4gICAgcmVuZGVyZWRDb21wb25lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRDb21wb25lbnQgPT09IGZhbHNlIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChyZW5kZXJlZENvbXBvbmVudCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLnJlbmRlcigpOiBBIHZhbGlkIFJlYWN0Q29tcG9uZW50IG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICsgJ3JldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlbmRlcmVkQ29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBMYXppbHkgYWxsb2NhdGVzIHRoZSByZWZzIG9iamVjdCBhbmQgc3RvcmVzIGBjb21wb25lbnRgIGFzIGByZWZgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIFJlZmVyZW5jZSBuYW1lLlxuICAgKiBAcGFyYW0ge2NvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byBzdG9yZSBhcyBgcmVmYC5cbiAgICogQGZpbmFsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhdHRhY2hSZWY6IGZ1bmN0aW9uIChyZWYsIGNvbXBvbmVudCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICEoaW5zdCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdTdGF0ZWxlc3MgZnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgaGF2ZSByZWZzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgcHVibGljQ29tcG9uZW50SW5zdGFuY2UgPSBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQgJiYgY29tcG9uZW50LmdldE5hbWUgPyBjb21wb25lbnQuZ2V0TmFtZSgpIDogJ2EgY29tcG9uZW50JztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHB1YmxpY0NvbXBvbmVudEluc3RhbmNlICE9IG51bGwsICdTdGF0ZWxlc3MgZnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgYmUgZ2l2ZW4gcmVmcyAnICsgJyhTZWUgcmVmIFwiJXNcIiBpbiAlcyBjcmVhdGVkIGJ5ICVzKS4gJyArICdBdHRlbXB0cyB0byBhY2Nlc3MgdGhpcyByZWYgd2lsbCBmYWlsLicsIHJlZiwgY29tcG9uZW50TmFtZSwgdGhpcy5nZXROYW1lKCkpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgcmVmcyA9IGluc3QucmVmcyA9PT0gZW1wdHlPYmplY3QgPyBpbnN0LnJlZnMgPSB7fSA6IGluc3QucmVmcztcbiAgICByZWZzW3JlZl0gPSBwdWJsaWNDb21wb25lbnRJbnN0YW5jZTtcbiAgfSxcblxuICAvKipcbiAgICogRGV0YWNoZXMgYSByZWZlcmVuY2UgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBOYW1lIHRvIGRlcmVmZXJlbmNlLlxuICAgKiBAZmluYWxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRldGFjaFJlZjogZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciByZWZzID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnM7XG4gICAgZGVsZXRlIHJlZnNbcmVmXTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGEgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgY29tcG9uZW50IHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgaXRcbiAgICogaW4gZXJyb3IgbWVzc2FnZXMuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5hbWUgb3IgbnVsbC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXROYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHR5cGUgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IHRoaXMuX2luc3RhbmNlICYmIHRoaXMuX2luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBjb25zdHJ1Y3RvciAmJiBjb25zdHJ1Y3Rvci5uYW1lIHx8IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcHVibGljbHkgYWNjZXNzaWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbXBvbmVudCAtIGkuZS4gd2hhdFxuICAgKiBpcyBleHBvc2VkIGJ5IHJlZnMgYW5kIHJldHVybmVkIGJ5IHJlbmRlci4gQ2FuIGJlIG51bGwgZm9yIHN0YXRlbGVzc1xuICAgKiBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gdGhlIHB1YmxpYyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UHVibGljSW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIGlmIChpbnN0IGluc3RhbmNlb2YgU3RhdGVsZXNzQ29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGluc3Q7XG4gIH0sXG5cbiAgLy8gU3R1YlxuICBfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDogbnVsbFxuXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50Jywge1xuICBtb3VudENvbXBvbmVudDogJ21vdW50Q29tcG9uZW50JyxcbiAgdXBkYXRlQ29tcG9uZW50OiAndXBkYXRlQ29tcG9uZW50JyxcbiAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDogJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnXG59KTtcblxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0ge1xuXG4gIE1peGluOiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkRiMjF3YjNOcGRHVkRiMjF3YjI1bGJuUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1VtVmhZM1JEYjIxd2IzTnBkR1ZEYjIxd2IyNWxiblJjYmlBcUwxeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCU1pXRmpkRU52YlhCdmJtVnVkRVZ1ZG1seWIyNXRaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVOdmJYQnZibVZ1ZEVWdWRtbHliMjV0Wlc1MEp5azdYRzUyWVhJZ1VtVmhZM1JEZFhKeVpXNTBUM2R1WlhJZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlKeWs3WEc1MllYSWdVbVZoWTNSRmJHVnRaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVWc1pXMWxiblFuS1R0Y2JuWmhjaUJTWldGamRFbHVjM1JoYm1ObFRXRndJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRWx1YzNSaGJtTmxUV0Z3SnlrN1hHNTJZWElnVW1WaFkzUlFaWEptSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEZCbGNtWW5LVHRjYm5aaGNpQlNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjV6SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjV6SnlrN1hHNTJZWElnVW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dVRtRnRaWE1nUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZiazVoYldWekp5azdYRzUyWVhJZ1VtVmhZM1JTWldOdmJtTnBiR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEZKbFkyOXVZMmxzWlhJbktUdGNiblpoY2lCU1pXRmpkRlZ3WkdGMFpWRjFaWFZsSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEZWd1pHRjBaVkYxWlhWbEp5azdYRzVjYm5aaGNpQmhjM05wWjI0Z1BTQnlaWEYxYVhKbEtDY3VMMDlpYW1WamRDNWhjM05wWjI0bktUdGNiblpoY2lCbGJYQjBlVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMlZ0Y0hSNVQySnFaV04wSnlrN1hHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNnblptSnFjeTlzYVdJdmFXNTJZWEpwWVc1MEp5azdYRzUyWVhJZ2MyaHZkV3hrVlhCa1lYUmxVbVZoWTNSRGIyMXdiMjVsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMM05vYjNWc1pGVndaR0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBKeWs3WEc1MllYSWdkMkZ5Ym1sdVp5QTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMM2RoY201cGJtY25LVHRjYmx4dVpuVnVZM1JwYjI0Z1oyVjBSR1ZqYkdGeVlYUnBiMjVGY25KdmNrRmtaR1Z1WkhWdEtHTnZiWEJ2Ym1WdWRDa2dlMXh1SUNCMllYSWdiM2R1WlhJZ1BTQmpiMjF3YjI1bGJuUXVYMk4xY25KbGJuUkZiR1Z0Wlc1MExsOXZkMjVsY2lCOGZDQnVkV3hzTzF4dUlDQnBaaUFvYjNkdVpYSXBJSHRjYmlBZ0lDQjJZWElnYm1GdFpTQTlJRzkzYm1WeUxtZGxkRTVoYldVb0tUdGNiaUFnSUNCcFppQW9ibUZ0WlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNjZ1EyaGxZMnNnZEdobElISmxibVJsY2lCdFpYUm9iMlFnYjJZZ1lDY2dLeUJ1WVcxbElDc2dKMkF1Snp0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJQ2NuTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJUZEdGMFpXeGxjM05EYjIxd2IyNWxiblFvUTI5dGNHOXVaVzUwS1NCN2ZWeHVVM1JoZEdWc1pYTnpRMjl0Y0c5dVpXNTBMbkJ5YjNSdmRIbHdaUzV5Wlc1a1pYSWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCRGIyMXdiMjVsYm5RZ1BTQlNaV0ZqZEVsdWMzUmhibU5sVFdGd0xtZGxkQ2gwYUdsektTNWZZM1Z5Y21WdWRFVnNaVzFsYm5RdWRIbHdaVHRjYmlBZ2NtVjBkWEp1SUVOdmJYQnZibVZ1ZENoMGFHbHpMbkJ5YjNCekxDQjBhR2x6TG1OdmJuUmxlSFFzSUhSb2FYTXVkWEJrWVhSbGNpazdYRzU5TzF4dVhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTQlVhR1VnVEdsbVpTMURlV05zWlNCdlppQmhJRU52YlhCdmMybDBaU0JEYjIxd2IyNWxiblFnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tseHVJQ29nTFNCamIyNXpkSEoxWTNSdmNqb2dTVzVwZEdsaGJHbDZZWFJwYjI0Z2IyWWdjM1JoZEdVdUlGUm9aU0JwYm5OMFlXNWpaU0JwY3lCdWIzY2djbVYwWVdsdVpXUXVYRzRnS2lBZ0lDMGdZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBYRzRnS2lBZ0lDMGdjbVZ1WkdWeVhHNGdLaUFnSUMwZ1cyTm9hV3hrY21WdUozTWdZMjl1YzNSeWRXTjBiM0p6WFZ4dUlDb2dJQ0FnSUMwZ1cyTm9hV3hrY21WdUozTWdZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBJR0Z1WkNCeVpXNWtaWEpkWEc0Z0tpQWdJQ0FnTFNCYlkyaHBiR1J5Wlc0bmN5QmpiMjF3YjI1bGJuUkVhV1JOYjNWdWRGMWNiaUFxSUNBZ0lDQXRJR052YlhCdmJtVnVkRVJwWkUxdmRXNTBYRzRnS2x4dUlDb2dJQ0FnSUNBZ1ZYQmtZWFJsSUZCb1lYTmxjenBjYmlBcUlDQWdJQ0FnSUMwZ1kyOXRjRzl1Wlc1MFYybHNiRkpsWTJWcGRtVlFjbTl3Y3lBb2IyNXNlU0JqWVd4c1pXUWdhV1lnY0dGeVpXNTBJSFZ3WkdGMFpXUXBYRzRnS2lBZ0lDQWdJQ0F0SUhOb2IzVnNaRU52YlhCdmJtVnVkRlZ3WkdGMFpWeHVJQ29nSUNBZ0lDQWdJQ0F0SUdOdmJYQnZibVZ1ZEZkcGJHeFZjR1JoZEdWY2JpQXFJQ0FnSUNBZ0lDQWdJQ0F0SUhKbGJtUmxjbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDMGdXMk5vYVd4a2NtVnVKM01nWTI5dWMzUnlkV04wYjNKeklHOXlJSEpsWTJWcGRtVWdjSEp2Y0hNZ2NHaGhjMlZ6WFZ4dUlDb2dJQ0FnSUNBZ0lDQXRJR052YlhCdmJtVnVkRVJwWkZWd1pHRjBaVnh1SUNwY2JpQXFJQ0FnSUNBdElHTnZiWEJ2Ym1WdWRGZHBiR3hWYm0xdmRXNTBYRzRnS2lBZ0lDQWdMU0JiWTJocGJHUnlaVzRuY3lCamIyMXdiMjVsYm5SWGFXeHNWVzV0YjNWdWRGMWNiaUFxSUNBZ0xTQmJZMmhwYkdSeVpXNGdaR1Z6ZEhKdmVXVmtYVnh1SUNvZ0xTQW9aR1Z6ZEhKdmVXVmtLVG9nVkdobElHbHVjM1JoYm1ObElHbHpJRzV2ZHlCaWJHRnVheXdnY21Wc1pXRnpaV1FnWW5rZ1VtVmhZM1FnWVc1a0lISmxZV1I1SUdadmNpQkhReTVjYmlBcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1FXNGdhVzVqY21WdFpXNTBhVzVuSUVsRUlHRnpjMmxuYm1Wa0lIUnZJR1ZoWTJnZ1kyOXRjRzl1Wlc1MElIZG9aVzRnYVhRZ2FYTWdiVzkxYm5SbFpDNGdWR2hwY3lCcGMxeHVJQ29nZFhObFpDQjBieUJsYm1admNtTmxJSFJvWlNCdmNtUmxjaUJwYmlCM2FHbGphQ0JnVW1WaFkzUlZjR1JoZEdWellDQjFjR1JoZEdWeklHUnBjblI1SUdOdmJYQnZibVZ1ZEhNdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFMMXh1ZG1GeUlHNWxlSFJOYjNWdWRFbEVJRDBnTVR0Y2JseHVMeW9xWEc0Z0tpQkFiR1Z1WkhNZ2UxSmxZV04wUTI5dGNHOXphWFJsUTI5dGNHOXVaVzUwTG5CeWIzUnZkSGx3WlgxY2JpQXFMMXh1ZG1GeUlGSmxZV04wUTI5dGNHOXphWFJsUTI5dGNHOXVaVzUwVFdsNGFXNGdQU0I3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUpoYzJVZ1kyOXVjM1J5ZFdOMGIzSWdabTl5SUdGc2JDQmpiMjF3YjNOcGRHVWdZMjl0Y0c5dVpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBSV3hsYldWdWRIMGdaV3hsYldWdWRGeHVJQ0FnS2lCQVptbHVZV3hjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0JqYjI1emRISjFZM1E2SUdaMWJtTjBhVzl1SUNobGJHVnRaVzUwS1NCN1hHNGdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRFVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0FnSUhSb2FYTXVYM0p2YjNST2IyUmxTVVFnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDJsdWMzUmhibU5sSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQzh2SUZObFpTQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbFhHNGdJQ0FnZEdocGN5NWZjR1Z1WkdsdVowVnNaVzFsYm5RZ1BTQnVkV3hzTzF4dUlDQWdJSFJvYVhNdVgzQmxibVJwYm1kVGRHRjBaVkYxWlhWbElEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxsOXdaVzVrYVc1blVtVndiR0ZqWlZOMFlYUmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmY0dWdVpHbHVaMFp2Y21ObFZYQmtZWFJsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0IwYUdsekxsOXlaVzVrWlhKbFpFTnZiWEJ2Ym1WdWRDQTlJRzUxYkd3N1hHNWNiaUFnSUNCMGFHbHpMbDlqYjI1MFpYaDBJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDl0YjNWdWRFOXlaR1Z5SUQwZ01EdGNiaUFnSUNCMGFHbHpMbDkwYjNCTVpYWmxiRmR5WVhCd1pYSWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0x5OGdVMlZsSUZKbFlXTjBWWEJrWVhSbGN5QmhibVFnVW1WaFkzUlZjR1JoZEdWUmRXVjFaUzVjYmlBZ0lDQjBhR2x6TGw5d1pXNWthVzVuUTJGc2JHSmhZMnR6SUQwZ2JuVnNiRHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpYTWdkR2hsSUdOdmJYQnZibVZ1ZEN3Z2NtVnVaR1Z5Y3lCdFlYSnJkWEFzSUdGdVpDQnlaV2RwYzNSbGNuTWdaWFpsYm5RZ2JHbHpkR1Z1WlhKekxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbTl2ZEVsRUlFUlBUU0JKUkNCdlppQjBhR1VnY205dmRDQnViMlJsTGx4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNThVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2Ym4wZ2RISmhibk5oWTNScGIyNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1AzTjBjbWx1WjMwZ1VtVnVaR1Z5WldRZ2JXRnlhM1Z3SUhSdklHSmxJR2x1YzJWeWRHVmtJR2x1ZEc4Z2RHaGxJRVJQVFM1Y2JpQWdJQ29nUUdacGJtRnNYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdiVzkxYm5SRGIyMXdiMjVsYm5RNklHWjFibU4wYVc5dUlDaHliMjkwU1VRc0lIUnlZVzV6WVdOMGFXOXVMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkR2hwY3k1ZlkyOXVkR1Y0ZENBOUlHTnZiblJsZUhRN1hHNGdJQ0FnZEdocGN5NWZiVzkxYm5SUGNtUmxjaUE5SUc1bGVIUk5iM1Z1ZEVsRUt5czdYRzRnSUNBZ2RHaHBjeTVmY205dmRFNXZaR1ZKUkNBOUlISnZiM1JKUkR0Y2JseHVJQ0FnSUhaaGNpQndkV0pzYVdOUWNtOXdjeUE5SUhSb2FYTXVYM0J5YjJObGMzTlFjbTl3Y3loMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDNXdjbTl3Y3lrN1hHNGdJQ0FnZG1GeUlIQjFZbXhwWTBOdmJuUmxlSFFnUFNCMGFHbHpMbDl3Y205alpYTnpRMjl1ZEdWNGRDaGpiMjUwWlhoMEtUdGNibHh1SUNBZ0lIWmhjaUJEYjIxd2IyNWxiblFnUFNCMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDNTBlWEJsTzF4dVhHNGdJQ0FnTHk4Z1NXNXBkR2xoYkdsNlpTQjBhR1VnY0hWaWJHbGpJR05zWVhOelhHNGdJQ0FnZG1GeUlHbHVjM1E3WEc0Z0lDQWdkbUZ5SUhKbGJtUmxjbVZrUld4bGJXVnVkRHRjYmx4dUlDQWdJQzh2SUZSb2FYTWdhWE1nWVNCM1lYa2dkRzhnWkdWMFpXTjBJR2xtSUVOdmJYQnZibVZ1ZENCcGN5QmhJSE4wWVhSbGJHVnpjeUJoY25KdmR5Qm1kVzVqZEdsdmJseHVJQ0FnSUM4dklHTnZiWEJ2Ym1WdWRDd2dkMmhwWTJnZ2FYTWdibTkwSUc1bGQyRmliR1V1SUVsMElHMXBaMmgwSUc1dmRDQmlaU0F4TURBbElISmxiR2xoWW14bElHSjFkQ0JwYzF4dUlDQWdJQzh2SUhOdmJXVjBhR2x1WnlCM1pTQmpZVzRnWkc4Z2RXNTBhV3dnZDJVZ2MzUmhjblFnWkdWMFpXTjBhVzVuSUhSb1lYUWdRMjl0Y0c5dVpXNTBJR1Y0ZEdWdVpITmNiaUFnSUNBdkx5QlNaV0ZqZEM1RGIyMXdiMjVsYm5RdUlGZGxJR0ZzY21WaFpIa2dZWE56ZFcxbElIUm9ZWFFnZEhsd1pXOW1JRU52YlhCdmJtVnVkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5NWNiaUFnSUNCMllYSWdZMkZ1U1c1emRHRnVkR2xoZEdVZ1BTQW9KM0J5YjNSdmRIbHdaU2NnYVc0Z1EyOXRjRzl1Wlc1MEtUdGNibHh1SUNBZ0lHbG1JQ2hqWVc1SmJuTjBZVzUwYVdGMFpTa2dlMXh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXVZM1Z5Y21WdWRDQTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXNXpkQ0E5SUc1bGR5QkRiMjF3YjI1bGJuUW9jSFZpYkdsalVISnZjSE1zSUhCMVlteHBZME52Ym5SbGVIUXNJRkpsWVdOMFZYQmtZWFJsVVhWbGRXVXBPMXh1SUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnSUNBZ0lGSmxZV04wUTNWeWNtVnVkRTkzYm1WeUxtTjFjbkpsYm5RZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCcGJuTjBJRDBnYm1WM0lFTnZiWEJ2Ym1WdWRDaHdkV0pzYVdOUWNtOXdjeXdnY0hWaWJHbGpRMjl1ZEdWNGRDd2dVbVZoWTNSVmNHUmhkR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLQ0ZqWVc1SmJuTjBZVzUwYVdGMFpTQjhmQ0JwYm5OMElEMDlQU0J1ZFd4c0lIeDhJR2x1YzNRZ1BUMDlJR1poYkhObElIeDhJRkpsWVdOMFJXeGxiV1Z1ZEM1cGMxWmhiR2xrUld4bGJXVnVkQ2hwYm5OMEtTa2dlMXh1SUNBZ0lDQWdjbVZ1WkdWeVpXUkZiR1Z0Wlc1MElEMGdhVzV6ZER0Y2JpQWdJQ0FnSUdsdWMzUWdQU0J1WlhjZ1UzUmhkR1ZzWlhOelEyOXRjRzl1Wlc1MEtFTnZiWEJ2Ym1WdWRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUM4dklGUm9hWE1nZDJsc2JDQjBhSEp2ZHlCc1lYUmxjaUJwYmlCZmNtVnVaR1Z5Vm1Gc2FXUmhkR1ZrUTI5dGNHOXVaVzUwTENCaWRYUWdZV1JrSUdGdUlHVmhjbXg1WEc0Z0lDQWdJQ0F2THlCM1lYSnVhVzVuSUc1dmR5QjBieUJvWld4d0lHUmxZblZuWjJsdVoxeHVJQ0FnSUNBZ2FXWWdLR2x1YzNRdWNtVnVaR1Z5SUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29abUZzYzJVc0lDY2xjeWd1TGk0cE9pQk9ieUJnY21WdVpHVnlZQ0J0WlhSb2IyUWdabTkxYm1RZ2IyNGdkR2hsSUhKbGRIVnlibVZrSUdOdmJYQnZibVZ1ZENBbklDc2dKMmx1YzNSaGJtTmxPaUI1YjNVZ2JXRjVJR2hoZG1VZ1ptOXlaMjkwZEdWdUlIUnZJR1JsWm1sdVpTQmdjbVZ1WkdWeVlDd2djbVYwZFhKdVpXUWdKeUFySUNkdWRXeHNMMlpoYkhObElHWnliMjBnWVNCemRHRjBaV3hsYzNNZ1kyOXRjRzl1Wlc1MExDQnZjaUIwY21sbFpDQjBieUJ5Wlc1a1pYSWdZVzRnSnlBcklDZGxiR1Z0Wlc1MElIZG9iM05sSUhSNWNHVWdhWE1nWVNCbWRXNWpkR2x2YmlCMGFHRjBJR2x6Ymx4Y0ozUWdZU0JTWldGamRDQmpiMjF3YjI1bGJuUXVKeXdnUTI5dGNHOXVaVzUwTG1ScGMzQnNZWGxPWVcxbElIeDhJRU52YlhCdmJtVnVkQzV1WVcxbElIeDhJQ2REYjIxd2IyNWxiblFuS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDOHZJRmRsSUhOMWNIQnZjblFnUlZNMklHbHVhR1Z5YVhScGJtY2dabkp2YlNCU1pXRmpkQzVEYjIxd2IyNWxiblFzSUhSb1pTQnRiMlIxYkdVZ2NHRjBkR1Z5Yml4Y2JpQWdJQ0FnSUNBZ0x5OGdZVzVrSUhOMFlYUmxiR1Z6Y3lCamIyMXdiMjVsYm5SekxDQmlkWFFnYm05MElFVlROaUJqYkdGemMyVnpJSFJvWVhRZ1pHOXVKM1FnWlhoMFpXNWtYRzRnSUNBZ0lDQWdJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCM1lYSnVhVzVuS0VOdmJYQnZibVZ1ZEM1d2NtOTBiM1I1Y0dVZ0ppWWdRMjl0Y0c5dVpXNTBMbkJ5YjNSdmRIbHdaUzVwYzFKbFlXTjBRMjl0Y0c5dVpXNTBJSHg4SUNGallXNUpibk4wWVc1MGFXRjBaU0I4ZkNBaEtHbHVjM1FnYVc1emRHRnVZMlZ2WmlCRGIyMXdiMjVsYm5RcExDQW5KWE1vTGk0dUtUb2dVbVZoWTNRZ1kyOXRjRzl1Wlc1MElHTnNZWE56WlhNZ2JYVnpkQ0JsZUhSbGJtUWdVbVZoWTNRdVEyOXRjRzl1Wlc1MExpY3NJRU52YlhCdmJtVnVkQzVrYVhOd2JHRjVUbUZ0WlNCOGZDQkRiMjF3YjI1bGJuUXVibUZ0WlNCOGZDQW5RMjl0Y0c5dVpXNTBKeWtnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1ZHaGxjMlVnYzJodmRXeGtJR0psSUhObGRDQjFjQ0JwYmlCMGFHVWdZMjl1YzNSeWRXTjBiM0lzSUdKMWRDQmhjeUJoSUdOdmJuWmxibWxsYm1ObElHWnZjbHh1SUNBZ0lDOHZJSE5wYlhCc1pYSWdZMnhoYzNNZ1lXSnpkSEpoWTNScGIyNXpMQ0IzWlNCelpYUWdkR2hsYlNCMWNDQmhablJsY2lCMGFHVWdabUZqZEM1Y2JpQWdJQ0JwYm5OMExuQnliM0J6SUQwZ2NIVmliR2xqVUhKdmNITTdYRzRnSUNBZ2FXNXpkQzVqYjI1MFpYaDBJRDBnY0hWaWJHbGpRMjl1ZEdWNGREdGNiaUFnSUNCcGJuTjBMbkpsWm5NZ1BTQmxiWEIwZVU5aWFtVmpkRHRjYmlBZ0lDQnBibk4wTG5Wd1pHRjBaWElnUFNCU1pXRmpkRlZ3WkdGMFpWRjFaWFZsTzF4dVhHNGdJQ0FnZEdocGN5NWZhVzV6ZEdGdVkyVWdQU0JwYm5OME8xeHVYRzRnSUNBZ0x5OGdVM1J2Y21VZ1lTQnlaV1psY21WdVkyVWdabkp2YlNCMGFHVWdhVzV6ZEdGdVkyVWdZbUZqYXlCMGJ5QjBhR1VnYVc1MFpYSnVZV3dnY21Wd2NtVnpaVzUwWVhScGIyNWNiaUFnSUNCU1pXRmpkRWx1YzNSaGJtTmxUV0Z3TG5ObGRDaHBibk4wTENCMGFHbHpLVHRjYmx4dUlDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQXZMeUJUYVc1alpTQndiR0ZwYmlCS1V5QmpiR0Z6YzJWeklHRnlaU0JrWldacGJtVmtJSGRwZEdodmRYUWdZVzU1SUhOd1pXTnBZV3dnYVc1cGRHbGhiR2w2WVhScGIyNWNiaUFnSUNBZ0lDOHZJR3h2WjJsakxDQjNaU0JqWVc0Z2JtOTBJR05oZEdOb0lHTnZiVzF2YmlCbGNuSnZjbk1nWldGeWJIa3VJRlJvWlhKbFptOXlaU3dnZDJVZ2FHRjJaU0IwYjF4dUlDQWdJQ0FnTHk4Z1kyRjBZMmdnZEdobGJTQm9aWEpsTENCaGRDQnBibWwwYVdGc2FYcGhkR2x2YmlCMGFXMWxMQ0JwYm5OMFpXRmtMbHh1SUNBZ0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUhkaGNtNXBibWNvSVdsdWMzUXVaMlYwU1c1cGRHbGhiRk4wWVhSbElIeDhJR2x1YzNRdVoyVjBTVzVwZEdsaGJGTjBZWFJsTG1selVtVmhZM1JEYkdGemMwRndjSEp2ZG1Wa0xDQW5aMlYwU1c1cGRHbGhiRk4wWVhSbElIZGhjeUJrWldacGJtVmtJRzl1SUNWekxDQmhJSEJzWVdsdUlFcGhkbUZUWTNKcGNIUWdZMnhoYzNNdUlDY2dLeUFuVkdocGN5QnBjeUJ2Ym14NUlITjFjSEJ2Y25SbFpDQm1iM0lnWTJ4aGMzTmxjeUJqY21WaGRHVmtJSFZ6YVc1bklGSmxZV04wTG1OeVpXRjBaVU5zWVhOekxpQW5JQ3NnSjBScFpDQjViM1VnYldWaGJpQjBieUJrWldacGJtVWdZU0J6ZEdGMFpTQndjbTl3WlhKMGVTQnBibk4wWldGa1B5Y3NJSFJvYVhNdVoyVjBUbUZ0WlNncElIeDhJQ2RoSUdOdmJYQnZibVZ1ZENjcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUhkaGNtNXBibWNvSVdsdWMzUXVaMlYwUkdWbVlYVnNkRkJ5YjNCeklIeDhJR2x1YzNRdVoyVjBSR1ZtWVhWc2RGQnliM0J6TG1selVtVmhZM1JEYkdGemMwRndjSEp2ZG1Wa0xDQW5aMlYwUkdWbVlYVnNkRkJ5YjNCeklIZGhjeUJrWldacGJtVmtJRzl1SUNWekxDQmhJSEJzWVdsdUlFcGhkbUZUWTNKcGNIUWdZMnhoYzNNdUlDY2dLeUFuVkdocGN5QnBjeUJ2Ym14NUlITjFjSEJ2Y25SbFpDQm1iM0lnWTJ4aGMzTmxjeUJqY21WaGRHVmtJSFZ6YVc1bklGSmxZV04wTG1OeVpXRjBaVU5zWVhOekxpQW5JQ3NnSjFWelpTQmhJSE4wWVhScFl5QndjbTl3WlhKMGVTQjBieUJrWldacGJtVWdaR1ZtWVhWc2RGQnliM0J6SUdsdWMzUmxZV1F1Snl3Z2RHaHBjeTVuWlhST1lXMWxLQ2tnZkh3Z0oyRWdZMjl0Y0c5dVpXNTBKeWtnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5Z2hhVzV6ZEM1d2NtOXdWSGx3WlhNc0lDZHdjbTl3Vkhsd1pYTWdkMkZ6SUdSbFptbHVaV1FnWVhNZ1lXNGdhVzV6ZEdGdVkyVWdjSEp2Y0dWeWRIa2diMjRnSlhNdUlGVnpaU0JoSUhOMFlYUnBZeUFuSUNzZ0ozQnliM0JsY25SNUlIUnZJR1JsWm1sdVpTQndjbTl3Vkhsd1pYTWdhVzV6ZEdWaFpDNG5MQ0IwYUdsekxtZGxkRTVoYldVb0tTQjhmQ0FuWVNCamIyMXdiMjVsYm5RbktTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCM1lYSnVhVzVuS0NGcGJuTjBMbU52Ym5SbGVIUlVlWEJsY3l3Z0oyTnZiblJsZUhSVWVYQmxjeUIzWVhNZ1pHVm1hVzVsWkNCaGN5QmhiaUJwYm5OMFlXNWpaU0J3Y205d1pYSjBlU0J2YmlBbGN5NGdWWE5sSUdFZ0p5QXJJQ2R6ZEdGMGFXTWdjSEp2Y0dWeWRIa2dkRzhnWkdWbWFXNWxJR052Ym5SbGVIUlVlWEJsY3lCcGJuTjBaV0ZrTGljc0lIUm9hWE11WjJWMFRtRnRaU2dwSUh4OElDZGhJR052YlhCdmJtVnVkQ2NwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29kSGx3Wlc5bUlHbHVjM1F1WTI5dGNHOXVaVzUwVTJodmRXeGtWWEJrWVhSbElDRTlQU0FuWm5WdVkzUnBiMjRuTENBbkpYTWdhR0Z6SUdFZ2JXVjBhRzlrSUdOaGJHeGxaQ0FuSUNzZ0oyTnZiWEJ2Ym1WdWRGTm9iM1ZzWkZWd1pHRjBaU2dwTGlCRWFXUWdlVzkxSUcxbFlXNGdjMmh2ZFd4a1EyOXRjRzl1Wlc1MFZYQmtZWFJsS0NrL0lDY2dLeUFuVkdobElHNWhiV1VnYVhNZ2NHaHlZWE5sWkNCaGN5QmhJSEYxWlhOMGFXOXVJR0psWTJGMWMyVWdkR2hsSUdaMWJtTjBhVzl1SUdseklDY2dLeUFuWlhod1pXTjBaV1FnZEc4Z2NtVjBkWEp1SUdFZ2RtRnNkV1V1Snl3Z2RHaHBjeTVuWlhST1lXMWxLQ2tnZkh3Z0owRWdZMjl0Y0c5dVpXNTBKeWtnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5aDBlWEJsYjJZZ2FXNXpkQzVqYjIxd2IyNWxiblJFYVdSVmJtMXZkVzUwSUNFOVBTQW5ablZ1WTNScGIyNG5MQ0FuSlhNZ2FHRnpJR0VnYldWMGFHOWtJR05oYkd4bFpDQW5JQ3NnSjJOdmJYQnZibVZ1ZEVScFpGVnViVzkxYm5Rb0tTNGdRblYwSUhSb1pYSmxJR2x6SUc1dklITjFZMmdnYkdsbVpXTjVZMnhsSUcxbGRHaHZaQzRnSnlBcklDZEVhV1FnZVc5MUlHMWxZVzRnWTI5dGNHOXVaVzUwVjJsc2JGVnViVzkxYm5Rb0tUOG5MQ0IwYUdsekxtZGxkRTVoYldVb0tTQjhmQ0FuUVNCamIyMXdiMjVsYm5RbktTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCM1lYSnVhVzVuS0hSNWNHVnZaaUJwYm5OMExtTnZiWEJ2Ym1WdWRGZHBiR3hTWldOcFpYWmxVSEp2Y0hNZ0lUMDlJQ2RtZFc1amRHbHZiaWNzSUNjbGN5Qm9ZWE1nWVNCdFpYUm9iMlFnWTJGc2JHVmtJQ2NnS3lBblkyOXRjRzl1Wlc1MFYybHNiRkpsWTJsbGRtVlFjbTl3Y3lncExpQkVhV1FnZVc5MUlHMWxZVzRnWTI5dGNHOXVaVzUwVjJsc2JGSmxZMlZwZG1WUWNtOXdjeWdwUHljc0lIUm9hWE11WjJWMFRtRnRaU2dwSUh4OElDZEJJR052YlhCdmJtVnVkQ2NwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnBibWwwYVdGc1UzUmhkR1VnUFNCcGJuTjBMbk4wWVhSbE8xeHVJQ0FnSUdsbUlDaHBibWwwYVdGc1UzUmhkR1VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdhVzV6ZEM1emRHRjBaU0E5SUdsdWFYUnBZV3hUZEdGMFpTQTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJQ0VvZEhsd1pXOW1JR2x1YVhScFlXeFRkR0YwWlNBOVBUMGdKMjlpYW1WamRDY2dKaVlnSVVGeWNtRjVMbWx6UVhKeVlYa29hVzVwZEdsaGJGTjBZWFJsS1NrZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuSlhNdWMzUmhkR1U2SUcxMWMzUWdZbVVnYzJWMElIUnZJR0Z1SUc5aWFtVmpkQ0J2Y2lCdWRXeHNKeXdnZEdocGN5NW5aWFJPWVcxbEtDa2dmSHdnSjFKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBKeWtnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ2RHaHBjeTVmY0dWdVpHbHVaMU4wWVhSbFVYVmxkV1VnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDNCbGJtUnBibWRTWlhCc1lXTmxVM1JoZEdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxsOXdaVzVrYVc1blJtOXlZMlZWY0dSaGRHVWdQU0JtWVd4elpUdGNibHh1SUNBZ0lHbG1JQ2hwYm5OMExtTnZiWEJ2Ym1WdWRGZHBiR3hOYjNWdWRDa2dlMXh1SUNBZ0lDQWdhVzV6ZEM1amIyMXdiMjVsYm5SWGFXeHNUVzkxYm5Rb0tUdGNiaUFnSUNBZ0lDOHZJRmRvWlc0Z2JXOTFiblJwYm1jc0lHTmhiR3h6SUhSdklHQnpaWFJUZEdGMFpXQWdZbmtnWUdOdmJYQnZibVZ1ZEZkcGJHeE5iM1Z1ZEdBZ2QybHNiQ0J6WlhSY2JpQWdJQ0FnSUM4dklHQjBhR2x6TGw5d1pXNWthVzVuVTNSaGRHVlJkV1YxWldBZ2QybDBhRzkxZENCMGNtbG5aMlZ5YVc1bklHRWdjbVV0Y21WdVpHVnlMbHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVYM0JsYm1ScGJtZFRkR0YwWlZGMVpYVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsdWMzUXVjM1JoZEdVZ1BTQjBhR2x6TGw5d2NtOWpaWE56VUdWdVpHbHVaMU4wWVhSbEtHbHVjM1F1Y0hKdmNITXNJR2x1YzNRdVkyOXVkR1Y0ZENrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1NXWWdibTkwSUdFZ2MzUmhkR1ZzWlhOeklHTnZiWEJ2Ym1WdWRDd2dkMlVnYm05M0lISmxibVJsY2x4dUlDQWdJR2xtSUNoeVpXNWtaWEpsWkVWc1pXMWxiblFnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdjbVZ1WkdWeVpXUkZiR1Z0Wlc1MElEMGdkR2hwY3k1ZmNtVnVaR1Z5Vm1Gc2FXUmhkR1ZrUTI5dGNHOXVaVzUwS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZjbVZ1WkdWeVpXUkRiMjF3YjI1bGJuUWdQU0IwYUdsekxsOXBibk4wWVc1MGFXRjBaVkpsWVdOMFEyOXRjRzl1Wlc1MEtISmxibVJsY21Wa1JXeGxiV1Z1ZENrN1hHNWNiaUFnSUNCMllYSWdiV0Z5YTNWd0lEMGdVbVZoWTNSU1pXTnZibU5wYkdWeUxtMXZkVzUwUTI5dGNHOXVaVzUwS0hSb2FYTXVYM0psYm1SbGNtVmtRMjl0Y0c5dVpXNTBMQ0J5YjI5MFNVUXNJSFJ5WVc1ellXTjBhVzl1TENCMGFHbHpMbDl3Y205alpYTnpRMmhwYkdSRGIyNTBaWGgwS0dOdmJuUmxlSFFwS1R0Y2JpQWdJQ0JwWmlBb2FXNXpkQzVqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ2tnZTF4dUlDQWdJQ0FnZEhKaGJuTmhZM1JwYjI0dVoyVjBVbVZoWTNSTmIzVnVkRkpsWVdSNUtDa3VaVzV4ZFdWMVpTaHBibk4wTG1OdmJYQnZibVZ1ZEVScFpFMXZkVzUwTENCcGJuTjBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2JXRnlhM1Z3TzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaV3hsWVhObGN5QmhibmtnY21WemIzVnlZMlZ6SUdGc2JHOWpZWFJsWkNCaWVTQmdiVzkxYm5SRGIyMXdiMjVsYm5SZ0xseHVJQ0FnS2x4dUlDQWdLaUJBWm1sdVlXeGNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQjFibTF2ZFc1MFEyOXRjRzl1Wlc1ME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUdsdWMzUWdQU0IwYUdsekxsOXBibk4wWVc1alpUdGNibHh1SUNBZ0lHbG1JQ2hwYm5OMExtTnZiWEJ2Ym1WdWRGZHBiR3hWYm0xdmRXNTBLU0I3WEc0Z0lDQWdJQ0JwYm5OMExtTnZiWEJ2Ym1WdWRGZHBiR3hWYm0xdmRXNTBLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdVbVZoWTNSU1pXTnZibU5wYkdWeUxuVnViVzkxYm5SRGIyMXdiMjVsYm5Rb2RHaHBjeTVmY21WdVpHVnlaV1JEYjIxd2IyNWxiblFwTzF4dUlDQWdJSFJvYVhNdVgzSmxibVJsY21Wa1EyOXRjRzl1Wlc1MElEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxsOXBibk4wWVc1alpTQTlJRzUxYkd3N1hHNWNiaUFnSUNBdkx5QlNaWE5sZENCd1pXNWthVzVuSUdacFpXeGtjMXh1SUNBZ0lDOHZJRVYyWlc0Z2FXWWdkR2hwY3lCamIyMXdiMjVsYm5RZ2FYTWdjMk5vWldSMWJHVmtJR1p2Y2lCaGJtOTBhR1Z5SUhWd1pHRjBaU0JwYmlCU1pXRmpkRlZ3WkdGMFpYTXNYRzRnSUNBZ0x5OGdhWFFnZDI5MWJHUWdjM1JwYkd3Z1ltVWdhV2R1YjNKbFpDQmlaV05oZFhObElIUm9aWE5sSUdacFpXeGtjeUJoY21VZ2NtVnpaWFF1WEc0Z0lDQWdkR2hwY3k1ZmNHVnVaR2x1WjFOMFlYUmxVWFZsZFdVZ1BTQnVkV3hzTzF4dUlDQWdJSFJvYVhNdVgzQmxibVJwYm1kU1pYQnNZV05sVTNSaGRHVWdQU0JtWVd4elpUdGNiaUFnSUNCMGFHbHpMbDl3Wlc1a2FXNW5SbTl5WTJWVmNHUmhkR1VnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TGw5d1pXNWthVzVuUTJGc2JHSmhZMnR6SUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TGw5d1pXNWthVzVuUld4bGJXVnVkQ0E5SUc1MWJHdzdYRzVjYmlBZ0lDQXZMeUJVYUdWelpTQm1hV1ZzWkhNZ1pHOGdibTkwSUhKbFlXeHNlU0J1WldWa0lIUnZJR0psSUhKbGMyVjBJSE5wYm1ObElIUm9hWE1nYjJKcVpXTjBJR2x6SUc1dlhHNGdJQ0FnTHk4Z2JHOXVaMlZ5SUdGalkyVnpjMmxpYkdVdVhHNGdJQ0FnZEdocGN5NWZZMjl1ZEdWNGRDQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NWZjbTl2ZEU1dlpHVkpSQ0E5SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTVmZEc5d1RHVjJaV3hYY21Gd2NHVnlJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDOHZJRVJsYkdWMFpTQjBhR1VnY21WbVpYSmxibU5sSUdaeWIyMGdkR2hsSUdsdWMzUmhibU5sSUhSdklIUm9hWE1nYVc1MFpYSnVZV3dnY21Wd2NtVnpaVzUwWVhScGIyNWNiaUFnSUNBdkx5QjNhR2xqYUNCaGJHeHZkeUIwYUdVZ2FXNTBaWEp1WVd4eklIUnZJR0psSUhCeWIzQmxjbXg1SUdOc1pXRnVaV1FnZFhBZ1pYWmxiaUJwWmlCMGFHVWdkWE5sY2x4dUlDQWdJQzh2SUd4bFlXdHpJR0VnY21WbVpYSmxibU5sSUhSdklIUm9aU0J3ZFdKc2FXTWdhVzV6ZEdGdVkyVXVYRzRnSUNBZ1VtVmhZM1JKYm5OMFlXNWpaVTFoY0M1eVpXMXZkbVVvYVc1emRDazdYRzVjYmlBZ0lDQXZMeUJUYjIxbElHVjRhWE4wYVc1bklHTnZiWEJ2Ym1WdWRITWdjbVZzZVNCdmJpQnBibk4wTG5CeWIzQnpJR1YyWlc0Z1lXWjBaWElnZEdobGVTZDJaU0JpWldWdVhHNGdJQ0FnTHk4Z1pHVnpkSEp2ZVdWa0lDaHBiaUJsZG1WdWRDQm9ZVzVrYkdWeWN5a3VYRzRnSUNBZ0x5OGdWRTlFVHpvZ2FXNXpkQzV3Y205d2N5QTlJRzUxYkd3N1hHNGdJQ0FnTHk4Z1ZFOUVUem9nYVc1emRDNXpkR0YwWlNBOUlHNTFiR3c3WEc0Z0lDQWdMeThnVkU5RVR6b2dhVzV6ZEM1amIyNTBaWGgwSUQwZ2JuVnNiRHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1JtbHNkR1Z5Y3lCMGFHVWdZMjl1ZEdWNGRDQnZZbXBsWTNRZ2RHOGdiMjVzZVNCamIyNTBZV2x1SUd0bGVYTWdjM0JsWTJsbWFXVmtJR2x1WEc0Z0lDQXFJR0JqYjI1MFpYaDBWSGx3WlhOZ1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmpiMjUwWlhoMFhHNGdJQ0FxSUVCeVpYUjFjbTRnZXo5dlltcGxZM1I5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmYldGemEwTnZiblJsZUhRNklHWjFibU4wYVc5dUlDaGpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RtRnlJRzFoYzJ0bFpFTnZiblJsZUhRZ1BTQnVkV3hzTzF4dUlDQWdJSFpoY2lCRGIyMXdiMjVsYm5RZ1BTQjBhR2x6TGw5amRYSnlaVzUwUld4bGJXVnVkQzUwZVhCbE8xeHVJQ0FnSUhaaGNpQmpiMjUwWlhoMFZIbHdaWE1nUFNCRGIyMXdiMjVsYm5RdVkyOXVkR1Y0ZEZSNWNHVnpPMXh1SUNBZ0lHbG1JQ2doWTI5dWRHVjRkRlI1Y0dWektTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1pXMXdkSGxQWW1wbFkzUTdYRzRnSUNBZ2ZWeHVJQ0FnSUcxaGMydGxaRU52Ym5SbGVIUWdQU0I3ZlR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJqYjI1MFpYaDBUbUZ0WlNCcGJpQmpiMjUwWlhoMFZIbHdaWE1wSUh0Y2JpQWdJQ0FnSUcxaGMydGxaRU52Ym5SbGVIUmJZMjl1ZEdWNGRFNWhiV1ZkSUQwZ1kyOXVkR1Y0ZEZ0amIyNTBaWGgwVG1GdFpWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ0WVhOclpXUkRiMjUwWlhoME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJHYVd4MFpYSnpJSFJvWlNCamIyNTBaWGgwSUc5aWFtVmpkQ0IwYnlCdmJteDVJR052Ym5SaGFXNGdhMlY1Y3lCemNHVmphV1pwWldRZ2FXNWNiaUFnSUNvZ1lHTnZiblJsZUhSVWVYQmxjMkFzSUdGdVpDQmhjM05sY25SeklIUm9ZWFFnZEdobGVTQmhjbVVnZG1Gc2FXUXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JqYjI1MFpYaDBYRzRnSUNBcUlFQnlaWFIxY200Z2V6OXZZbXBsWTNSOVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFMMXh1SUNCZmNISnZZMlZ6YzBOdmJuUmxlSFE2SUdaMWJtTjBhVzl1SUNoamIyNTBaWGgwS1NCN1hHNGdJQ0FnZG1GeUlHMWhjMnRsWkVOdmJuUmxlSFFnUFNCMGFHbHpMbDl0WVhOclEyOXVkR1Y0ZENoamIyNTBaWGgwS1R0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdkbUZ5SUVOdmJYQnZibVZ1ZENBOUlIUm9hWE11WDJOMWNuSmxiblJGYkdWdFpXNTBMblI1Y0dVN1hHNGdJQ0FnSUNCcFppQW9RMjl0Y0c5dVpXNTBMbU52Ym5SbGVIUlVlWEJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amFHVmphMUJ5YjNCVWVYQmxjeWhEYjIxd2IyNWxiblF1WTI5dWRHVjRkRlI1Y0dWekxDQnRZWE5yWldSRGIyNTBaWGgwTENCU1pXRmpkRkJ5YjNCVWVYQmxURzlqWVhScGIyNXpMbU52Ym5SbGVIUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYldGemEyVmtRMjl1ZEdWNGREdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR04xY25KbGJuUkRiMjUwWlhoMFhHNGdJQ0FxSUVCeVpYUjFjbTRnZTI5aWFtVmpkSDFjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjl3Y205alpYTnpRMmhwYkdSRGIyNTBaWGgwT2lCbWRXNWpkR2x2YmlBb1kzVnljbVZ1ZEVOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IyWVhJZ1EyOXRjRzl1Wlc1MElEMGdkR2hwY3k1ZlkzVnljbVZ1ZEVWc1pXMWxiblF1ZEhsd1pUdGNiaUFnSUNCMllYSWdhVzV6ZENBOUlIUm9hWE11WDJsdWMzUmhibU5sTzF4dUlDQWdJSFpoY2lCamFHbHNaRU52Ym5SbGVIUWdQU0JwYm5OMExtZGxkRU5vYVd4a1EyOXVkR1Y0ZENBbUppQnBibk4wTG1kbGRFTm9hV3hrUTI5dWRHVjRkQ2dwTzF4dUlDQWdJR2xtSUNoamFHbHNaRU52Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0VvZEhsd1pXOW1JRU52YlhCdmJtVnVkQzVqYUdsc1pFTnZiblJsZUhSVWVYQmxjeUE5UFQwZ0oyOWlhbVZqZENjcElEOGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUdsdWRtRnlhV0Z1ZENobVlXeHpaU3dnSnlWekxtZGxkRU5vYVd4a1EyOXVkR1Y0ZENncE9pQmphR2xzWkVOdmJuUmxlSFJVZVhCbGN5QnRkWE4wSUdKbElHUmxabWx1WldRZ2FXNGdiM0prWlhJZ2RHOGdKeUFySUNkMWMyVWdaMlYwUTJocGJHUkRiMjUwWlhoMEtDa3VKeXdnZEdocGN5NW5aWFJPWVcxbEtDa2dmSHdnSjFKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBKeWtnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJobFkydFFjbTl3Vkhsd1pYTW9RMjl0Y0c5dVpXNTBMbU5vYVd4a1EyOXVkR1Y0ZEZSNWNHVnpMQ0JqYUdsc1pFTnZiblJsZUhRc0lGSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZibk11WTJocGJHUkRiMjUwWlhoMEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHNWhiV1VnYVc0Z1kyaHBiR1JEYjI1MFpYaDBLU0I3WEc0Z0lDQWdJQ0FnSUNFb2JtRnRaU0JwYmlCRGIyMXdiMjVsYm5RdVkyaHBiR1JEYjI1MFpYaDBWSGx3WlhNcElEOGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUdsdWRtRnlhV0Z1ZENobVlXeHpaU3dnSnlWekxtZGxkRU5vYVd4a1EyOXVkR1Y0ZENncE9pQnJaWGtnWENJbGMxd2lJR2x6SUc1dmRDQmtaV1pwYm1Wa0lHbHVJR05vYVd4a1EyOXVkR1Y0ZEZSNWNHVnpMaWNzSUhSb2FYTXVaMlYwVG1GdFpTZ3BJSHg4SUNkU1pXRmpkRU52YlhCdmMybDBaVU52YlhCdmJtVnVkQ2NzSUc1aGJXVXBJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJoYzNOcFoyNG9lMzBzSUdOMWNuSmxiblJEYjI1MFpYaDBMQ0JqYUdsc1pFTnZiblJsZUhRcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZM1Z5Y21WdWRFTnZiblJsZUhRN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkJ5YjJObGMzTmxjeUJ3Y205d2N5QmllU0J6WlhSMGFXNW5JR1JsWm1GMWJIUWdkbUZzZFdWeklHWnZjaUIxYm5Od1pXTnBabWxsWkNCd2NtOXdjeUJoYm1SY2JpQWdJQ29nWVhOelpYSjBhVzVuSUhSb1lYUWdkR2hsSUhCeWIzQnpJR0Z5WlNCMllXeHBaQzRnUkc5bGN5QnViM1FnYlhWMFlYUmxJR2wwY3lCaGNtZDFiV1Z1ZERzZ2NtVjBkWEp1YzF4dUlDQWdLaUJoSUc1bGR5QndjbTl3Y3lCdlltcGxZM1FnZDJsMGFDQmtaV1poZFd4MGN5QnRaWEpuWldRZ2FXNHVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J1WlhkUWNtOXdjMXh1SUNBZ0tpQkFjbVYwZFhKdUlIdHZZbXBsWTNSOVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFMMXh1SUNCZmNISnZZMlZ6YzFCeWIzQnpPaUJtZFc1amRHbHZiaUFvYm1WM1VISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdkbUZ5SUVOdmJYQnZibVZ1ZENBOUlIUm9hWE11WDJOMWNuSmxiblJGYkdWdFpXNTBMblI1Y0dVN1hHNGdJQ0FnSUNCcFppQW9RMjl0Y0c5dVpXNTBMbkJ5YjNCVWVYQmxjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYUdWamExQnliM0JVZVhCbGN5aERiMjF3YjI1bGJuUXVjSEp2Y0ZSNWNHVnpMQ0J1WlhkUWNtOXdjeXdnVW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dWN5NXdjbTl3S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkMUJ5YjNCek8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCYzNObGNuUWdkR2hoZENCMGFHVWdjSEp2Y0hNZ1lYSmxJSFpoYkdsa1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQndjbTl3Vkhsd1pYTWdUV0Z3SUc5bUlIQnliM0FnYm1GdFpTQjBieUJoSUZKbFlXTjBVSEp2Y0ZSNWNHVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCeWIzQnpYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCc2IyTmhkR2x2YmlCbExtY3VJRndpY0hKdmNGd2lMQ0JjSW1OdmJuUmxlSFJjSWl3Z1hDSmphR2xzWkNCamIyNTBaWGgwWENKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5amFHVmphMUJ5YjNCVWVYQmxjem9nWm5WdVkzUnBiMjRnS0hCeWIzQlVlWEJsY3l3Z2NISnZjSE1zSUd4dlkyRjBhVzl1S1NCN1hHNGdJQ0FnTHk4Z1ZFOUVUem9nVTNSdmNDQjJZV3hwWkdGMGFXNW5JSEJ5YjNBZ2RIbHdaWE1nYUdWeVpTQmhibVFnYjI1c2VTQjFjMlVnZEdobElHVnNaVzFsYm5SY2JpQWdJQ0F2THlCMllXeHBaR0YwYVc5dUxseHVJQ0FnSUhaaGNpQmpiMjF3YjI1bGJuUk9ZVzFsSUQwZ2RHaHBjeTVuWlhST1lXMWxLQ2s3WEc0Z0lDQWdabTl5SUNoMllYSWdjSEp2Y0U1aGJXVWdhVzRnY0hKdmNGUjVjR1Z6S1NCN1hHNGdJQ0FnSUNCcFppQW9jSEp2Y0ZSNWNHVnpMbWhoYzA5M2JsQnliM0JsY25SNUtIQnliM0JPWVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJwY3lCcGJuUmxiblJwYjI1aGJHeDVJR0Z1SUdsdWRtRnlhV0Z1ZENCMGFHRjBJR2RsZEhNZ1kyRjFaMmgwTGlCSmRDZHpJSFJvWlNCellXMWxYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1ltVm9ZWFpwYjNJZ1lYTWdkMmwwYUc5MWRDQjBhR2x6SUhOMFlYUmxiV1Z1ZENCbGVHTmxjSFFnZDJsMGFDQmhJR0psZEhSbGNpQnRaWE56WVdkbExseHVJQ0FnSUNBZ0lDQWdJQ0VvZEhsd1pXOW1JSEJ5YjNCVWVYQmxjMXR3Y205d1RtRnRaVjBnUFQwOUlDZG1kVzVqZEdsdmJpY3BJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0p5VnpPaUFsY3lCMGVYQmxJR0FsYzJBZ2FYTWdhVzUyWVd4cFpEc2dhWFFnYlhWemRDQmlaU0JoSUdaMWJtTjBhVzl1TENCMWMzVmhiR3g1SUNjZ0t5QW5abkp2YlNCU1pXRmpkQzVRY205d1ZIbHdaWE11Snl3Z1kyOXRjRzl1Wlc1MFRtRnRaU0I4ZkNBblVtVmhZM1FnWTJ4aGMzTW5MQ0JTWldGamRGQnliM0JVZVhCbFRHOWpZWFJwYjI1T1lXMWxjMXRzYjJOaGRHbHZibDBzSUhCeWIzQk9ZVzFsS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnWlhKeWIzSWdQU0J3Y205d1ZIbHdaWE5iY0hKdmNFNWhiV1ZkS0hCeWIzQnpMQ0J3Y205d1RtRnRaU3dnWTI5dGNHOXVaVzUwVG1GdFpTd2diRzlqWVhScGIyNHBPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsZUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdaWGc3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eUlHbHVjM1JoYm1ObGIyWWdSWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCWFpTQnRZWGtnZDJGdWRDQjBieUJsZUhSbGJtUWdkR2hwY3lCc2IyZHBZeUJtYjNJZ2MybHRhV3hoY2lCbGNuSnZjbk1nYVc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIwYjNBdGJHVjJaV3dnY21WdVpHVnlJR05oYkd4ekxDQnpieUJKSjIwZ1lXSnpkSEpoWTNScGJtY2dhWFFnWVhkaGVTQnBiblJ2WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZU0JtZFc1amRHbHZiaUIwYnlCdGFXNXBiV2w2WlNCeVpXWmhZM1J2Y21sdVp5QnBiaUIwYUdVZ1puVjBkWEpsWEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR0ZrWkdWdVpIVnRJRDBnWjJWMFJHVmpiR0Z5WVhScGIyNUZjbkp2Y2tGa1pHVnVaSFZ0S0hSb2FYTXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR3h2WTJGMGFXOXVJRDA5UFNCU1pXRmpkRkJ5YjNCVWVYQmxURzlqWVhScGIyNXpMbkJ5YjNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGQnlaV1poWTJVZ1oybDJaWE1nZFhNZ2MyOXRaWFJvYVc1bklIUnZJR0pzWVdOcmJHbHpkQ0JwYmlCM1lYSnVhVzVuSUcxdlpIVnNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29abUZzYzJVc0lDZEdZV2xzWldRZ1EyOXRjRzl6YVhSbElIQnliM0JVZVhCbE9pQWxjeVZ6Snl3Z1pYSnliM0l1YldWemMyRm5aU3dnWVdSa1pXNWtkVzBwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5aG1ZV3h6WlN3Z0owWmhhV3hsWkNCRGIyNTBaWGgwSUZSNWNHVnpPaUFsY3lWekp5d2daWEp5YjNJdWJXVnpjMkZuWlN3Z1lXUmtaVzVrZFcwcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQnlaV05sYVhabFEyOXRjRzl1Wlc1ME9pQm1kVzVqZEdsdmJpQW9ibVY0ZEVWc1pXMWxiblFzSUhSeVlXNXpZV04wYVc5dUxDQnVaWGgwUTI5dWRHVjRkQ2tnZTF4dUlDQWdJSFpoY2lCd2NtVjJSV3hsYldWdWRDQTlJSFJvYVhNdVgyTjFjbkpsYm5SRmJHVnRaVzUwTzF4dUlDQWdJSFpoY2lCd2NtVjJRMjl1ZEdWNGRDQTlJSFJvYVhNdVgyTnZiblJsZUhRN1hHNWNiaUFnSUNCMGFHbHpMbDl3Wlc1a2FXNW5SV3hsYldWdWRDQTlJRzUxYkd3N1hHNWNiaUFnSUNCMGFHbHpMblZ3WkdGMFpVTnZiWEJ2Ym1WdWRDaDBjbUZ1YzJGamRHbHZiaXdnY0hKbGRrVnNaVzFsYm5Rc0lHNWxlSFJGYkdWdFpXNTBMQ0J3Y21WMlEyOXVkR1Y0ZEN3Z2JtVjRkRU52Ym5SbGVIUXBPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSlppQmhibmtnYjJZZ1lGOXdaVzVrYVc1blJXeGxiV1Z1ZEdBc0lHQmZjR1Z1WkdsdVoxTjBZWFJsVVhWbGRXVmdMQ0J2Y2lCZ1gzQmxibVJwYm1kR2IzSmpaVlZ3WkdGMFpXQmNiaUFnSUNvZ2FYTWdjMlYwTENCMWNHUmhkR1VnZEdobElHTnZiWEJ2Ym1WdWRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRGSmxZMjl1WTJsc1pWUnlZVzV6WVdOMGFXOXVmU0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUhCbGNtWnZjbTFWY0dSaGRHVkpaazVsWTJWemMyRnllVG9nWm5WdVkzUnBiMjRnS0hSeVlXNXpZV04wYVc5dUtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzQmxibVJwYm1kRmJHVnRaVzUwSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUZKbFlXTjBVbVZqYjI1amFXeGxjaTV5WldObGFYWmxRMjl0Y0c5dVpXNTBLSFJvYVhNc0lIUm9hWE11WDNCbGJtUnBibWRGYkdWdFpXNTBJSHg4SUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1MExDQjBjbUZ1YzJGamRHbHZiaXdnZEdocGN5NWZZMjl1ZEdWNGRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzQmxibVJwYm1kVGRHRjBaVkYxWlhWbElDRTlQU0J1ZFd4c0lIeDhJSFJvYVhNdVgzQmxibVJwYm1kR2IzSmpaVlZ3WkdGMFpTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZEYjIxd2IyNWxiblFvZEhKaGJuTmhZM1JwYjI0c0lIUm9hWE11WDJOMWNuSmxiblJGYkdWdFpXNTBMQ0IwYUdsekxsOWpkWEp5Wlc1MFJXeGxiV1Z1ZEN3Z2RHaHBjeTVmWTI5dWRHVjRkQ3dnZEdocGN5NWZZMjl1ZEdWNGRDazdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJRWlhKbWIzSnRJR0Z1SUhWd1pHRjBaU0IwYnlCaElHMXZkVzUwWldRZ1kyOXRjRzl1Wlc1MExpQlVhR1VnWTI5dGNHOXVaVzUwVjJsc2JGSmxZMlZwZG1WUWNtOXdjeUJoYm1SY2JpQWdJQ29nYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbElHMWxkR2h2WkhNZ1lYSmxJR05oYkd4bFpDd2dkR2hsYmlBb1lYTnpkVzFwYm1jZ2RHaGxJSFZ3WkdGMFpTQnBjMjRuZEZ4dUlDQWdLaUJ6YTJsd2NHVmtLU0IwYUdVZ2NtVnRZV2x1YVc1bklIVndaR0YwWlNCc2FXWmxZM2xqYkdVZ2JXVjBhRzlrY3lCaGNtVWdZMkZzYkdWa0lHRnVaQ0IwYUdVZ1JFOU5YRzRnSUNBcUlISmxjSEpsYzJWdWRHRjBhVzl1SUdseklIVndaR0YwWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUo1SUdSbFptRjFiSFFzSUhSb2FYTWdhVzF3YkdWdFpXNTBjeUJTWldGamRDZHpJSEpsYm1SbGNtbHVaeUJoYm1RZ2NtVmpiMjVqYVd4cFlYUnBiMjRnWVd4bmIzSnBkR2h0TGx4dUlDQWdLaUJUYjNCb2FYTjBhV05oZEdWa0lHTnNhV1Z1ZEhNZ2JXRjVJSGRwYzJnZ2RHOGdiM1psY25KcFpHVWdkR2hwY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dWZTQjBjbUZ1YzJGamRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUld4bGJXVnVkSDBnY0hKbGRsQmhjbVZ1ZEVWc1pXMWxiblJjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEVWc1pXMWxiblI5SUc1bGVIUlFZWEpsYm5SRmJHVnRaVzUwWEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpQkFiM1psY25KcFpHRmliR1ZjYmlBZ0lDb3ZYRzRnSUhWd1pHRjBaVU52YlhCdmJtVnVkRG9nWm5WdVkzUnBiMjRnS0hSeVlXNXpZV04wYVc5dUxDQndjbVYyVUdGeVpXNTBSV3hsYldWdWRDd2dibVY0ZEZCaGNtVnVkRVZzWlcxbGJuUXNJSEJ5WlhaVmJtMWhjMnRsWkVOdmJuUmxlSFFzSUc1bGVIUlZibTFoYzJ0bFpFTnZiblJsZUhRcElIdGNiaUFnSUNCMllYSWdhVzV6ZENBOUlIUm9hWE11WDJsdWMzUmhibU5sTzF4dVhHNGdJQ0FnZG1GeUlHNWxlSFJEYjI1MFpYaDBJRDBnZEdocGN5NWZZMjl1ZEdWNGRDQTlQVDBnYm1WNGRGVnViV0Z6YTJWa1EyOXVkR1Y0ZENBL0lHbHVjM1F1WTI5dWRHVjRkQ0E2SUhSb2FYTXVYM0J5YjJObGMzTkRiMjUwWlhoMEtHNWxlSFJWYm0xaGMydGxaRU52Ym5SbGVIUXBPMXh1SUNBZ0lIWmhjaUJ1WlhoMFVISnZjSE03WEc1Y2JpQWdJQ0F2THlCRWFYTjBhVzVuZFdsemFDQmlaWFIzWldWdUlHRWdjSEp2Y0hNZ2RYQmtZWFJsSUhabGNuTjFjeUJoSUhOcGJYQnNaU0J6ZEdGMFpTQjFjR1JoZEdWY2JpQWdJQ0JwWmlBb2NISmxkbEJoY21WdWRFVnNaVzFsYm5RZ1BUMDlJRzVsZUhSUVlYSmxiblJGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0F2THlCVGEybHdJR05vWldOcmFXNW5JSEJ5YjNBZ2RIbHdaWE1nWVdkaGFXNGdMUzBnZDJVZ1pHOXVKM1FnY21WaFpDQnBibk4wTG5CeWIzQnpJSFJ2SUdGMmIybGtYRzRnSUNBZ0lDQXZMeUIzWVhKdWFXNW5JR1p2Y2lCRVQwMGdZMjl0Y0c5dVpXNTBJSEJ5YjNCeklHbHVJSFJvYVhNZ2RYQm5jbUZrWlZ4dUlDQWdJQ0FnYm1WNGRGQnliM0J6SUQwZ2JtVjRkRkJoY21WdWRFVnNaVzFsYm5RdWNISnZjSE03WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHNWxlSFJRY205d2N5QTlJSFJvYVhNdVgzQnliMk5sYzNOUWNtOXdjeWh1WlhoMFVHRnlaVzUwUld4bGJXVnVkQzV3Y205d2N5azdYRzRnSUNBZ0lDQXZMeUJCYmlCMWNHUmhkR1VnYUdWeVpTQjNhV3hzSUhOamFHVmtkV3hsSUdGdUlIVndaR0YwWlNCaWRYUWdhVzF0WldScFlYUmxiSGtnYzJWMFhHNGdJQ0FnSUNBdkx5QmZjR1Z1WkdsdVoxTjBZWFJsVVhWbGRXVWdkMmhwWTJnZ2QybHNiQ0JsYm5OMWNtVWdkR2hoZENCaGJua2djM1JoZEdVZ2RYQmtZWFJsY3lCblpYUnpYRzRnSUNBZ0lDQXZMeUJwYlcxbFpHbGhkR1ZzZVNCeVpXTnZibU5wYkdWa0lHbHVjM1JsWVdRZ2IyWWdkMkZwZEdsdVp5Qm1iM0lnZEdobElHNWxlSFFnWW1GMFkyZ3VYRzVjYmlBZ0lDQWdJR2xtSUNocGJuTjBMbU52YlhCdmJtVnVkRmRwYkd4U1pXTmxhWFpsVUhKdmNITXBJSHRjYmlBZ0lDQWdJQ0FnYVc1emRDNWpiMjF3YjI1bGJuUlhhV3hzVW1WalpXbDJaVkJ5YjNCektHNWxlSFJRY205d2N5d2dibVY0ZEVOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCdVpYaDBVM1JoZEdVZ1BTQjBhR2x6TGw5d2NtOWpaWE56VUdWdVpHbHVaMU4wWVhSbEtHNWxlSFJRY205d2N5d2dibVY0ZEVOdmJuUmxlSFFwTzF4dVhHNGdJQ0FnZG1GeUlITm9iM1ZzWkZWd1pHRjBaU0E5SUhSb2FYTXVYM0JsYm1ScGJtZEdiM0pqWlZWd1pHRjBaU0I4ZkNBaGFXNXpkQzV6YUc5MWJHUkRiMjF3YjI1bGJuUlZjR1JoZEdVZ2ZId2dhVzV6ZEM1emFHOTFiR1JEYjIxd2IyNWxiblJWY0dSaGRHVW9ibVY0ZEZCeWIzQnpMQ0J1WlhoMFUzUmhkR1VzSUc1bGVIUkRiMjUwWlhoMEtUdGNibHh1SUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5aDBlWEJsYjJZZ2MyaHZkV3hrVlhCa1lYUmxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5d2dKeVZ6TG5Ob2IzVnNaRU52YlhCdmJtVnVkRlZ3WkdGMFpTZ3BPaUJTWlhSMWNtNWxaQ0IxYm1SbFptbHVaV1FnYVc1emRHVmhaQ0J2WmlCaElDY2dLeUFuWW05dmJHVmhiaUIyWVd4MVpTNGdUV0ZyWlNCemRYSmxJSFJ2SUhKbGRIVnliaUIwY25WbElHOXlJR1poYkhObExpY3NJSFJvYVhNdVoyVjBUbUZ0WlNncElIeDhJQ2RTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRDY3BJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoemFHOTFiR1JWY0dSaGRHVXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzQmxibVJwYm1kR2IzSmpaVlZ3WkdGMFpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0x5OGdWMmxzYkNCelpYUWdZSFJvYVhNdWNISnZjSE5nTENCZ2RHaHBjeTV6ZEdGMFpXQWdZVzVrSUdCMGFHbHpMbU52Ym5SbGVIUmdMbHh1SUNBZ0lDQWdkR2hwY3k1ZmNHVnlabTl5YlVOdmJYQnZibVZ1ZEZWd1pHRjBaU2h1WlhoMFVHRnlaVzUwUld4bGJXVnVkQ3dnYm1WNGRGQnliM0J6TENCdVpYaDBVM1JoZEdVc0lHNWxlSFJEYjI1MFpYaDBMQ0IwY21GdWMyRmpkR2x2Yml3Z2JtVjRkRlZ1YldGemEyVmtRMjl1ZEdWNGRDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklFbG1JR2wwSjNNZ1pHVjBaWEp0YVc1bFpDQjBhR0YwSUdFZ1kyOXRjRzl1Wlc1MElITm9iM1ZzWkNCdWIzUWdkWEJrWVhSbExDQjNaU0J6ZEdsc2JDQjNZVzUwWEc0Z0lDQWdJQ0F2THlCMGJ5QnpaWFFnY0hKdmNITWdZVzVrSUhOMFlYUmxJR0oxZENCM1pTQnphRzl5ZEdOMWRDQjBhR1VnY21WemRDQnZaaUIwYUdVZ2RYQmtZWFJsTGx4dUlDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRFVnNaVzFsYm5RZ1BTQnVaWGgwVUdGeVpXNTBSV3hsYldWdWREdGNiaUFnSUNBZ0lIUm9hWE11WDJOdmJuUmxlSFFnUFNCdVpYaDBWVzV0WVhOclpXUkRiMjUwWlhoME8xeHVJQ0FnSUNBZ2FXNXpkQzV3Y205d2N5QTlJRzVsZUhSUWNtOXdjenRjYmlBZ0lDQWdJR2x1YzNRdWMzUmhkR1VnUFNCdVpYaDBVM1JoZEdVN1hHNGdJQ0FnSUNCcGJuTjBMbU52Ym5SbGVIUWdQU0J1WlhoMFEyOXVkR1Y0ZER0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ1gzQnliMk5sYzNOUVpXNWthVzVuVTNSaGRHVTZJR1oxYm1OMGFXOXVJQ2h3Y205d2N5d2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lIWmhjaUJwYm5OMElEMGdkR2hwY3k1ZmFXNXpkR0Z1WTJVN1hHNGdJQ0FnZG1GeUlIRjFaWFZsSUQwZ2RHaHBjeTVmY0dWdVpHbHVaMU4wWVhSbFVYVmxkV1U3WEc0Z0lDQWdkbUZ5SUhKbGNHeGhZMlVnUFNCMGFHbHpMbDl3Wlc1a2FXNW5VbVZ3YkdGalpWTjBZWFJsTzF4dUlDQWdJSFJvYVhNdVgzQmxibVJwYm1kU1pYQnNZV05sVTNSaGRHVWdQU0JtWVd4elpUdGNiaUFnSUNCMGFHbHpMbDl3Wlc1a2FXNW5VM1JoZEdWUmRXVjFaU0E5SUc1MWJHdzdYRzVjYmlBZ0lDQnBaaUFvSVhGMVpYVmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhVzV6ZEM1emRHRjBaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvY21Wd2JHRmpaU0FtSmlCeGRXVjFaUzVzWlc1bmRHZ2dQVDA5SURFcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCeGRXVjFaVnN3WFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2JtVjRkRk4wWVhSbElEMGdZWE56YVdkdUtIdDlMQ0J5WlhCc1lXTmxJRDhnY1hWbGRXVmJNRjBnT2lCcGJuTjBMbk4wWVhSbEtUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdjbVZ3YkdGalpTQS9JREVnT2lBd095QnBJRHdnY1hWbGRXVXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQndZWEowYVdGc0lEMGdjWFZsZFdWYmFWMDdYRzRnSUNBZ0lDQmhjM05wWjI0b2JtVjRkRk4wWVhSbExDQjBlWEJsYjJZZ2NHRnlkR2xoYkNBOVBUMGdKMloxYm1OMGFXOXVKeUEvSUhCaGNuUnBZV3d1WTJGc2JDaHBibk4wTENCdVpYaDBVM1JoZEdVc0lIQnliM0J6TENCamIyNTBaWGgwS1NBNklIQmhjblJwWVd3cE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhoMFUzUmhkR1U3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFMWxjbWRsY3lCdVpYY2djSEp2Y0hNZ1lXNWtJSE4wWVhSbExDQnViM1JwWm1sbGN5QmtaV3hsWjJGMFpTQnRaWFJvYjJSeklHOW1JSFZ3WkdGMFpTQmhibVJjYmlBZ0lDb2djR1Z5Wm05eWJYTWdkWEJrWVhSbExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFJXeGxiV1Z1ZEgwZ2JtVjRkRVZzWlcxbGJuUWdUbVY0ZENCbGJHVnRaVzUwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnVaWGgwVUhKdmNITWdUbVY0ZENCd2RXSnNhV01nYjJKcVpXTjBJSFJ2SUhObGRDQmhjeUJ3Y205d1pYSjBhV1Z6TGx4dUlDQWdLaUJBY0dGeVlXMGdlejl2WW1wbFkzUjlJRzVsZUhSVGRHRjBaU0JPWlhoMElHOWlhbVZqZENCMGJ5QnpaWFFnWVhNZ2MzUmhkR1V1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdQMjlpYW1WamRIMGdibVY0ZEVOdmJuUmxlSFFnVG1WNGRDQndkV0pzYVdNZ2IySnFaV04wSUhSdklITmxkQ0JoY3lCamIyNTBaWGgwTGx4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNTlJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdQMjlpYW1WamRIMGdkVzV0WVhOclpXUkRiMjUwWlhoMFhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFMMXh1SUNCZmNHVnlabTl5YlVOdmJYQnZibVZ1ZEZWd1pHRjBaVG9nWm5WdVkzUnBiMjRnS0c1bGVIUkZiR1Z0Wlc1MExDQnVaWGgwVUhKdmNITXNJRzVsZUhSVGRHRjBaU3dnYm1WNGRFTnZiblJsZUhRc0lIUnlZVzV6WVdOMGFXOXVMQ0IxYm0xaGMydGxaRU52Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnYVc1emRDQTlJSFJvYVhNdVgybHVjM1JoYm1ObE8xeHVYRzRnSUNBZ2RtRnlJR2hoYzBOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlNBOUlFSnZiMnhsWVc0b2FXNXpkQzVqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1VwTzF4dUlDQWdJSFpoY2lCd2NtVjJVSEp2Y0hNN1hHNGdJQ0FnZG1GeUlIQnlaWFpUZEdGMFpUdGNiaUFnSUNCMllYSWdjSEpsZGtOdmJuUmxlSFE3WEc0Z0lDQWdhV1lnS0doaGMwTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpTa2dlMXh1SUNBZ0lDQWdjSEpsZGxCeWIzQnpJRDBnYVc1emRDNXdjbTl3Y3p0Y2JpQWdJQ0FnSUhCeVpYWlRkR0YwWlNBOUlHbHVjM1F1YzNSaGRHVTdYRzRnSUNBZ0lDQndjbVYyUTI5dWRHVjRkQ0E5SUdsdWMzUXVZMjl1ZEdWNGREdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hVzV6ZEM1amIyMXdiMjVsYm5SWGFXeHNWWEJrWVhSbEtTQjdYRzRnSUNBZ0lDQnBibk4wTG1OdmJYQnZibVZ1ZEZkcGJHeFZjR1JoZEdVb2JtVjRkRkJ5YjNCekxDQnVaWGgwVTNSaGRHVXNJRzVsZUhSRGIyNTBaWGgwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFJXeGxiV1Z1ZENBOUlHNWxlSFJGYkdWdFpXNTBPMXh1SUNBZ0lIUm9hWE11WDJOdmJuUmxlSFFnUFNCMWJtMWhjMnRsWkVOdmJuUmxlSFE3WEc0Z0lDQWdhVzV6ZEM1d2NtOXdjeUE5SUc1bGVIUlFjbTl3Y3p0Y2JpQWdJQ0JwYm5OMExuTjBZWFJsSUQwZ2JtVjRkRk4wWVhSbE8xeHVJQ0FnSUdsdWMzUXVZMjl1ZEdWNGRDQTlJRzVsZUhSRGIyNTBaWGgwTzF4dVhHNGdJQ0FnZEdocGN5NWZkWEJrWVhSbFVtVnVaR1Z5WldSRGIyMXdiMjVsYm5Rb2RISmhibk5oWTNScGIyNHNJSFZ1YldGemEyVmtRMjl1ZEdWNGRDazdYRzVjYmlBZ0lDQnBaaUFvYUdGelEyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbEtTQjdYRzRnSUNBZ0lDQjBjbUZ1YzJGamRHbHZiaTVuWlhSU1pXRmpkRTF2ZFc1MFVtVmhaSGtvS1M1bGJuRjFaWFZsS0dsdWMzUXVZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxMbUpwYm1Rb2FXNXpkQ3dnY0hKbGRsQnliM0J6TENCd2NtVjJVM1JoZEdVc0lIQnlaWFpEYjI1MFpYaDBLU3dnYVc1emRDazdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEWVd4c0lIUm9aU0JqYjIxd2IyNWxiblFuY3lCZ2NtVnVaR1Z5WUNCdFpYUm9iMlFnWVc1a0lIVndaR0YwWlNCMGFHVWdSRTlOSUdGalkyOXlaR2x1WjJ4NUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNTlJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnWDNWd1pHRjBaVkpsYm1SbGNtVmtRMjl0Y0c5dVpXNTBPaUJtZFc1amRHbHZiaUFvZEhKaGJuTmhZM1JwYjI0c0lHTnZiblJsZUhRcElIdGNiaUFnSUNCMllYSWdjSEpsZGtOdmJYQnZibVZ1ZEVsdWMzUmhibU5sSUQwZ2RHaHBjeTVmY21WdVpHVnlaV1JEYjIxd2IyNWxiblE3WEc0Z0lDQWdkbUZ5SUhCeVpYWlNaVzVrWlhKbFpFVnNaVzFsYm5RZ1BTQndjbVYyUTI5dGNHOXVaVzUwU1c1emRHRnVZMlV1WDJOMWNuSmxiblJGYkdWdFpXNTBPMXh1SUNBZ0lIWmhjaUJ1WlhoMFVtVnVaR1Z5WldSRmJHVnRaVzUwSUQwZ2RHaHBjeTVmY21WdVpHVnlWbUZzYVdSaGRHVmtRMjl0Y0c5dVpXNTBLQ2s3WEc0Z0lDQWdhV1lnS0hOb2IzVnNaRlZ3WkdGMFpWSmxZV04wUTI5dGNHOXVaVzUwS0hCeVpYWlNaVzVrWlhKbFpFVnNaVzFsYm5Rc0lHNWxlSFJTWlc1a1pYSmxaRVZzWlcxbGJuUXBLU0I3WEc0Z0lDQWdJQ0JTWldGamRGSmxZMjl1WTJsc1pYSXVjbVZqWldsMlpVTnZiWEJ2Ym1WdWRDaHdjbVYyUTI5dGNHOXVaVzUwU1c1emRHRnVZMlVzSUc1bGVIUlNaVzVrWlhKbFpFVnNaVzFsYm5Rc0lIUnlZVzV6WVdOMGFXOXVMQ0IwYUdsekxsOXdjbTlqWlhOelEyaHBiR1JEYjI1MFpYaDBLR052Ym5SbGVIUXBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdWR2hsYzJVZ2RIZHZJRWxFY3lCaGNtVWdZV04wZFdGc2JIa2dkR2hsSUhOaGJXVWhJRUoxZENCdWIzUm9hVzVuSUhOb2IzVnNaQ0J5Wld4NUlHOXVJSFJvWVhRdVhHNGdJQ0FnSUNCMllYSWdkR2hwYzBsRUlEMGdkR2hwY3k1ZmNtOXZkRTV2WkdWSlJEdGNiaUFnSUNBZ0lIWmhjaUJ3Y21WMlEyOXRjRzl1Wlc1MFNVUWdQU0J3Y21WMlEyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVdVgzSnZiM1JPYjJSbFNVUTdYRzRnSUNBZ0lDQlNaV0ZqZEZKbFkyOXVZMmxzWlhJdWRXNXRiM1Z1ZEVOdmJYQnZibVZ1ZENod2NtVjJRMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVXBPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOXlaVzVrWlhKbFpFTnZiWEJ2Ym1WdWRDQTlJSFJvYVhNdVgybHVjM1JoYm5ScFlYUmxVbVZoWTNSRGIyMXdiMjVsYm5Rb2JtVjRkRkpsYm1SbGNtVmtSV3hsYldWdWRDazdYRzRnSUNBZ0lDQjJZWElnYm1WNGRFMWhjbXQxY0NBOUlGSmxZV04wVW1WamIyNWphV3hsY2k1dGIzVnVkRU52YlhCdmJtVnVkQ2gwYUdsekxsOXlaVzVrWlhKbFpFTnZiWEJ2Ym1WdWRDd2dkR2hwYzBsRUxDQjBjbUZ1YzJGamRHbHZiaXdnZEdocGN5NWZjSEp2WTJWemMwTm9hV3hrUTI5dWRHVjRkQ2hqYjI1MFpYaDBLU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOXlaWEJzWVdObFRtOWtaVmRwZEdoTllYSnJkWEJDZVVsRUtIQnlaWFpEYjIxd2IyNWxiblJKUkN3Z2JtVjRkRTFoY210MWNDazdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBY0hKdmRHVmpkR1ZrWEc0Z0lDQXFMMXh1SUNCZmNtVndiR0ZqWlU1dlpHVlhhWFJvVFdGeWEzVndRbmxKUkRvZ1puVnVZM1JwYjI0Z0tIQnlaWFpEYjIxd2IyNWxiblJKUkN3Z2JtVjRkRTFoY210MWNDa2dlMXh1SUNBZ0lGSmxZV04wUTI5dGNHOXVaVzUwUlc1MmFYSnZibTFsYm5RdWNtVndiR0ZqWlU1dlpHVlhhWFJvVFdGeWEzVndRbmxKUkNod2NtVjJRMjl0Y0c5dVpXNTBTVVFzSUc1bGVIUk5ZWEpyZFhBcE8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBY0hKdmRHVmpkR1ZrWEc0Z0lDQXFMMXh1SUNCZmNtVnVaR1Z5Vm1Gc2FXUmhkR1ZrUTI5dGNHOXVaVzUwVjJsMGFHOTFkRTkzYm1WeVQzSkRiMjUwWlhoME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUdsdWMzUWdQU0IwYUdsekxsOXBibk4wWVc1alpUdGNiaUFnSUNCMllYSWdjbVZ1WkdWeVpXUkRiMjF3YjI1bGJuUWdQU0JwYm5OMExuSmxibVJsY2lncE8xeHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0F2THlCWFpTQmhiR3h2ZHlCaGRYUnZMVzF2WTJ0eklIUnZJSEJ5YjJObFpXUWdZWE1nYVdZZ2RHaGxlU2R5WlNCeVpYUjFjbTVwYm1jZ2JuVnNiQzVjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY21WdVpHVnlaV1JEYjIxd2IyNWxiblFnUFQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUdsdWMzUXVjbVZ1WkdWeUxsOXBjMDF2WTJ0R2RXNWpkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJVYUdseklHbHpJSEJ5YjJKaFlteDVJR0poWkNCd2NtRmpkR2xqWlM0Z1EyOXVjMmxrWlhJZ2QyRnlibWx1WnlCb1pYSmxJR0Z1WkZ4dUlDQWdJQ0FnSUNBdkx5QmtaWEJ5WldOaGRHbHVaeUIwYUdseklHTnZiblpsYm1sbGJtTmxMbHh1SUNBZ0lDQWdJQ0J5Wlc1a1pYSmxaRU52YlhCdmJtVnVkQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGJtUmxjbVZrUTI5dGNHOXVaVzUwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYM0psYm1SbGNsWmhiR2xrWVhSbFpFTnZiWEJ2Ym1WdWREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCeVpXNWtaWEpsWkVOdmJYQnZibVZ1ZER0Y2JpQWdJQ0JTWldGamRFTjFjbkpsYm5SUGQyNWxjaTVqZFhKeVpXNTBJRDBnZEdocGN6dGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdjbVZ1WkdWeVpXUkRiMjF3YjI1bGJuUWdQU0IwYUdsekxsOXlaVzVrWlhKV1lXeHBaR0YwWldSRGIyMXdiMjVsYm5SWGFYUm9iM1YwVDNkdVpYSlBja052Ym5SbGVIUW9LVHRjYmlBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXVZM1Z5Y21WdWRDQTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJQ0VvWEc0Z0lDQWdMeThnVkU5RVR6b2dRVzRnWUdselZtRnNhV1JPYjJSbFlDQm1kVzVqZEdsdmJpQjNiM1ZzWkNCd2NtOWlZV0pzZVNCaVpTQnRiM0psSUdGd2NISnZjSEpwWVhSbFhHNGdJQ0FnY21WdVpHVnlaV1JEYjIxd2IyNWxiblFnUFQwOUlHNTFiR3dnZkh3Z2NtVnVaR1Z5WldSRGIyMXdiMjVsYm5RZ1BUMDlJR1poYkhObElIeDhJRkpsWVdOMFJXeGxiV1Z1ZEM1cGMxWmhiR2xrUld4bGJXVnVkQ2h5Wlc1a1pYSmxaRU52YlhCdmJtVnVkQ2twSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKeVZ6TG5KbGJtUmxjaWdwT2lCQklIWmhiR2xrSUZKbFlXTjBRMjl0Y0c5dVpXNTBJRzExYzNRZ1ltVWdjbVYwZFhKdVpXUXVJRmx2ZFNCdFlYa2dhR0YyWlNBbklDc2dKM0psZEhWeWJtVmtJSFZ1WkdWbWFXNWxaQ3dnWVc0Z1lYSnlZWGtnYjNJZ2MyOXRaU0J2ZEdobGNpQnBiblpoYkdsa0lHOWlhbVZqZEM0bkxDQjBhR2x6TG1kbGRFNWhiV1VvS1NCOGZDQW5VbVZoWTNSRGIyMXdiM05wZEdWRGIyMXdiMjVsYm5RbktTQTZJR2x1ZG1GeWFXRnVkQ2htWVd4elpTa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdjbVYwZFhKdUlISmxibVJsY21Wa1EyOXRjRzl1Wlc1ME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJNWVhwcGJIa2dZV3hzYjJOaGRHVnpJSFJvWlNCeVpXWnpJRzlpYW1WamRDQmhibVFnYzNSdmNtVnpJR0JqYjIxd2IyNWxiblJnSUdGeklHQnlaV1pnTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NtVm1JRkpsWm1WeVpXNWpaU0J1WVcxbExseHVJQ0FnS2lCQWNHRnlZVzBnZTJOdmJYQnZibVZ1ZEgwZ1kyOXRjRzl1Wlc1MElFTnZiWEJ2Ym1WdWRDQjBieUJ6ZEc5eVpTQmhjeUJnY21WbVlDNWNiaUFnSUNvZ1FHWnBibUZzWEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JoZEhSaFkyaFNaV1k2SUdaMWJtTjBhVzl1SUNoeVpXWXNJR052YlhCdmJtVnVkQ2tnZTF4dUlDQWdJSFpoY2lCcGJuTjBJRDBnZEdocGN5NW5aWFJRZFdKc2FXTkpibk4wWVc1alpTZ3BPMXh1SUNBZ0lDRW9hVzV6ZENBaFBTQnVkV3hzS1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RUZEdGMFpXeGxjM01nWm5WdVkzUnBiMjRnWTI5dGNHOXVaVzUwY3lCallXNXViM1FnYUdGMlpTQnlaV1p6TGljcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQjJZWElnY0hWaWJHbGpRMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVWdQU0JqYjIxd2IyNWxiblF1WjJWMFVIVmliR2xqU1c1emRHRnVZMlVvS1R0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdkbUZ5SUdOdmJYQnZibVZ1ZEU1aGJXVWdQU0JqYjIxd2IyNWxiblFnSmlZZ1kyOXRjRzl1Wlc1MExtZGxkRTVoYldVZ1B5QmpiMjF3YjI1bGJuUXVaMlYwVG1GdFpTZ3BJRG9nSjJFZ1kyOXRjRzl1Wlc1MEp6dGNiaUFnSUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LSEIxWW14cFkwTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElDRTlJRzUxYkd3c0lDZFRkR0YwWld4bGMzTWdablZ1WTNScGIyNGdZMjl0Y0c5dVpXNTBjeUJqWVc1dWIzUWdZbVVnWjJsMlpXNGdjbVZtY3lBbklDc2dKeWhUWldVZ2NtVm1JRndpSlhOY0lpQnBiaUFsY3lCamNtVmhkR1ZrSUdKNUlDVnpLUzRnSnlBcklDZEJkSFJsYlhCMGN5QjBieUJoWTJObGMzTWdkR2hwY3lCeVpXWWdkMmxzYkNCbVlXbHNMaWNzSUhKbFppd2dZMjl0Y0c5dVpXNTBUbUZ0WlN3Z2RHaHBjeTVuWlhST1lXMWxLQ2twSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2NtVm1jeUE5SUdsdWMzUXVjbVZtY3lBOVBUMGdaVzF3ZEhsUFltcGxZM1FnUHlCcGJuTjBMbkpsWm5NZ1BTQjdmU0E2SUdsdWMzUXVjbVZtY3p0Y2JpQWdJQ0J5WldaelczSmxabDBnUFNCd2RXSnNhV05EYjIxd2IyNWxiblJKYm5OMFlXNWpaVHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1JHVjBZV05vWlhNZ1lTQnlaV1psY21WdVkyVWdibUZ0WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISmxaaUJPWVcxbElIUnZJR1JsY21WbVpYSmxibU5sTGx4dUlDQWdLaUJBWm1sdVlXeGNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lHUmxkR0ZqYUZKbFpqb2dablZ1WTNScGIyNGdLSEpsWmlrZ2UxeHVJQ0FnSUhaaGNpQnlaV1p6SUQwZ2RHaHBjeTVuWlhSUWRXSnNhV05KYm5OMFlXNWpaU2dwTG5KbFpuTTdYRzRnSUNBZ1pHVnNaWFJsSUhKbFpuTmJjbVZtWFR0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSMlYwSUdFZ2RHVjRkQ0JrWlhOamNtbHdkR2x2YmlCdlppQjBhR1VnWTI5dGNHOXVaVzUwSUhSb1lYUWdZMkZ1SUdKbElIVnpaV1FnZEc4Z2FXUmxiblJwWm5rZ2FYUmNiaUFnSUNvZ2FXNGdaWEp5YjNJZ2JXVnpjMkZuWlhNdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTNOMGNtbHVaMzBnVkdobElHNWhiV1VnYjNJZ2JuVnNiQzVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0JuWlhST1lXMWxPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZG1GeUlIUjVjR1VnUFNCMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDNTBlWEJsTzF4dUlDQWdJSFpoY2lCamIyNXpkSEoxWTNSdmNpQTlJSFJvYVhNdVgybHVjM1JoYm1ObElDWW1JSFJvYVhNdVgybHVjM1JoYm1ObExtTnZibk4wY25WamRHOXlPMXh1SUNBZ0lISmxkSFZ5YmlCMGVYQmxMbVJwYzNCc1lYbE9ZVzFsSUh4OElHTnZibk4wY25WamRHOXlJQ1ltSUdOdmJuTjBjblZqZEc5eUxtUnBjM0JzWVhsT1lXMWxJSHg4SUhSNWNHVXVibUZ0WlNCOGZDQmpiMjV6ZEhKMVkzUnZjaUFtSmlCamIyNXpkSEoxWTNSdmNpNXVZVzFsSUh4OElHNTFiR3c3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0IwYUdVZ2NIVmliR2xqYkhrZ1lXTmpaWE56YVdKc1pTQnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQjBhR2x6SUdOdmJYQnZibVZ1ZENBdElHa3VaUzRnZDJoaGRGeHVJQ0FnS2lCcGN5QmxlSEJ2YzJWa0lHSjVJSEpsWm5NZ1lXNWtJSEpsZEhWeWJtVmtJR0o1SUhKbGJtUmxjaTRnUTJGdUlHSmxJRzUxYkd3Z1ptOXlJSE4wWVhSbGJHVnpjMXh1SUNBZ0tpQmpiMjF3YjI1bGJuUnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0U1pXRmpkRU52YlhCdmJtVnVkSDBnZEdobElIQjFZbXhwWXlCamIyMXdiMjVsYm5RZ2FXNXpkR0Z1WTJVdVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ1oyVjBVSFZpYkdsalNXNXpkR0Z1WTJVNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnYVc1emRDQTlJSFJvYVhNdVgybHVjM1JoYm1ObE8xeHVJQ0FnSUdsbUlDaHBibk4wSUdsdWMzUmhibU5sYjJZZ1UzUmhkR1ZzWlhOelEyOXRjRzl1Wlc1MEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdsdWMzUTdYRzRnSUgwc1hHNWNiaUFnTHk4Z1UzUjFZbHh1SUNCZmFXNXpkR0Z1ZEdsaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZERvZ2JuVnNiRnh1WEc1OU8xeHVYRzVTWldGamRGQmxjbVl1YldWaGMzVnlaVTFsZEdodlpITW9VbVZoWTNSRGIyMXdiM05wZEdWRGIyMXdiMjVsYm5STmFYaHBiaXdnSjFKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBKeXdnZTF4dUlDQnRiM1Z1ZEVOdmJYQnZibVZ1ZERvZ0oyMXZkVzUwUTI5dGNHOXVaVzUwSnl4Y2JpQWdkWEJrWVhSbFEyOXRjRzl1Wlc1ME9pQW5kWEJrWVhSbFEyOXRjRzl1Wlc1MEp5eGNiaUFnWDNKbGJtUmxjbFpoYkdsa1lYUmxaRU52YlhCdmJtVnVkRG9nSjE5eVpXNWtaWEpXWVd4cFpHRjBaV1JEYjIxd2IyNWxiblFuWEc1OUtUdGNibHh1ZG1GeUlGSmxZV04wUTI5dGNHOXphWFJsUTI5dGNHOXVaVzUwSUQwZ2UxeHVYRzRnSUUxcGVHbHVPaUJTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRFMXBlR2x1WEc1Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFkzUkRiMjF3YjNOcGRHVkRiMjF3YjI1bGJuUTdJbDE5IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q3VycmVudE93bmVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICpcbiAqIFRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBjb21wb25lbnQgd2hvIHNob3VsZCBvd24gYW55IGNvbXBvbmVudHMgdGhhdCBhcmVcbiAqIGN1cnJlbnRseSBiZWluZyBjb25zdHJ1Y3RlZC5cbiAqL1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge1JlYWN0Q29tcG9uZW50fVxuICAgKi9cbiAgY3VycmVudDogbnVsbFxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q3VycmVudE93bmVyOyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01cbiAqL1xuXG4vKiBnbG9iYWxzIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RET01UZXh0Q29tcG9uZW50Jyk7XG52YXIgUmVhY3REZWZhdWx0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRJbmplY3Rpb24nKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZUhhbmRsZXMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG52YXIgUmVhY3RWZXJzaW9uID0gcmVxdWlyZSgnLi9SZWFjdFZlcnNpb24nKTtcblxudmFyIGZpbmRET01Ob2RlID0gcmVxdWlyZSgnLi9maW5kRE9NTm9kZScpO1xudmFyIHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyID0gcmVxdWlyZSgnLi9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cblJlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTtcblxudmFyIHJlbmRlciA9IFJlYWN0UGVyZi5tZWFzdXJlKCdSZWFjdCcsICdyZW5kZXInLCBSZWFjdE1vdW50LnJlbmRlcik7XG5cbnZhciBSZWFjdCA9IHtcbiAgZmluZERPTU5vZGU6IGZpbmRET01Ob2RlLFxuICByZW5kZXI6IHJlbmRlcixcbiAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlLFxuICB2ZXJzaW9uOiBSZWFjdFZlcnNpb24sXG5cbiAgLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG4gIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOiBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMsXG4gIHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOiByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lclxufTtcblxuLy8gSW5qZWN0IHRoZSBydW50aW1lIGludG8gYSBkZXZ0b29scyBnbG9iYWwgaG9vayByZWdhcmRsZXNzIG9mIGJyb3dzZXIuXG4vLyBBbGxvd3MgZm9yIGRlYnVnZ2luZyB3aGVuIHRoZSBob29rIGlzIGluamVjdGVkIG9uIHRoZSBwYWdlLlxuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cbmlmICh0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0KHtcbiAgICBDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyLFxuICAgIEluc3RhbmNlSGFuZGxlczogUmVhY3RJbnN0YW5jZUhhbmRsZXMsXG4gICAgTW91bnQ6IFJlYWN0TW91bnQsXG4gICAgUmVjb25jaWxlcjogUmVhY3RSZWNvbmNpbGVyLFxuICAgIFRleHRDb21wb25lbnQ6IFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbiAgaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiB3aW5kb3cudG9wID09PSB3aW5kb3cuc2VsZikge1xuXG4gICAgLy8gRmlyc3QgY2hlY2sgaWYgZGV2dG9vbHMgaXMgbm90IGluc3RhbGxlZFxuICAgIGlmICh0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gSWYgd2UncmUgaW4gQ2hyb21lIG9yIEZpcmVmb3gsIHByb3ZpZGUgYSBkb3dubG9hZCBsaW5rIGlmIG5vdCBpbnN0YWxsZWQuXG4gICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRWRnZScpID09PSAtMSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+IC0xKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ0Rvd25sb2FkIHRoZSBSZWFjdCBEZXZUb29scyBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgaW4gSUU4LCBjaGVjayB0byBzZWUgaWYgd2UgYXJlIGluIGNvbXBhdGliaWxpdHkgbW9kZSBhbmQgcHJvdmlkZVxuICAgIC8vIGluZm9ybWF0aW9uIG9uIHByZXZlbnRpbmcgY29tcGF0aWJpbGl0eSBtb2RlXG4gICAgdmFyIGllQ29tcGF0aWJpbGl0eU1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgODtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpZUNvbXBhdGliaWxpdHlNb2RlLCAnSW50ZXJuZXQgRXhwbG9yZXIgaXMgcnVubmluZyBpbiBjb21wYXRpYmlsaXR5IG1vZGU7IHBsZWFzZSBhZGQgdGhlICcgKyAnZm9sbG93aW5nIHRhZyB0byB5b3VyIEhUTUwgdG8gcHJldmVudCB0aGlzIGZyb20gaGFwcGVuaW5nOiAnICsgJzxtZXRhIGh0dHAtZXF1aXY9XCJYLVVBLUNvbXBhdGlibGVcIiBjb250ZW50PVwiSUU9ZWRnZVwiIC8+JykgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZXhwZWN0ZWRGZWF0dXJlcyA9IFtcbiAgICAvLyBzaGltc1xuICAgIEFycmF5LmlzQXJyYXksIEFycmF5LnByb3RvdHlwZS5ldmVyeSwgQXJyYXkucHJvdG90eXBlLmZvckVhY2gsIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLCBBcnJheS5wcm90b3R5cGUubWFwLCBEYXRlLm5vdywgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsIE9iamVjdC5rZXlzLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCBTdHJpbmcucHJvdG90eXBlLnRyaW0sXG5cbiAgICAvLyBzaGFtc1xuICAgIE9iamVjdC5jcmVhdGUsIE9iamVjdC5mcmVlemVdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZEZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWV4cGVjdGVkRmVhdHVyZXNbaV0pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignT25lIG9yIG1vcmUgRVM1IHNoaW0vc2hhbXMgZXhwZWN0ZWQgYnkgUmVhY3QgYXJlIG5vdCBhdmFpbGFibGU6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscycpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRVQwMHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRFUlBUVnh1SUNvdlhHNWNiaThxSUdkc2IySmhiSE1nWDE5U1JVRkRWRjlFUlZaVVQwOU1VMTlIVEU5Q1FVeGZTRTlQUzE5ZktpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1VtVmhZM1JEZFhKeVpXNTBUM2R1WlhJZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlKeWs3WEc1MllYSWdVbVZoWTNSRVQwMVVaWGgwUTI5dGNHOXVaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVSUFRWUmxlSFJEYjIxd2IyNWxiblFuS1R0Y2JuWmhjaUJTWldGamRFUmxabUYxYkhSSmJtcGxZM1JwYjI0Z1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFJHVm1ZWFZzZEVsdWFtVmpkR2x2YmljcE8xeHVkbUZ5SUZKbFlXTjBTVzV6ZEdGdVkyVklZVzVrYkdWeklEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRFbHVjM1JoYm1ObFNHRnVaR3hsY3ljcE8xeHVkbUZ5SUZKbFlXTjBUVzkxYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFRXOTFiblFuS1R0Y2JuWmhjaUJTWldGamRGQmxjbVlnUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wVUdWeVppY3BPMXh1ZG1GeUlGSmxZV04wVW1WamIyNWphV3hsY2lBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSU1pXTnZibU5wYkdWeUp5azdYRzUyWVhJZ1VtVmhZM1JWY0dSaGRHVnpJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRlZ3WkdGMFpYTW5LVHRjYm5aaGNpQlNaV0ZqZEZabGNuTnBiMjRnUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wVm1WeWMybHZiaWNwTzF4dVhHNTJZWElnWm1sdVpFUlBUVTV2WkdVZ1BTQnlaWEYxYVhKbEtDY3VMMlpwYm1SRVQwMU9iMlJsSnlrN1hHNTJZWElnY21WdVpHVnlVM1ZpZEhKbFpVbHVkRzlEYjI1MFlXbHVaWElnUFNCeVpYRjFhWEpsS0NjdUwzSmxibVJsY2xOMVluUnlaV1ZKYm5SdlEyOXVkR0ZwYm1WeUp5azdYRzUyWVhJZ2QyRnlibWx1WnlBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwzZGhjbTVwYm1jbktUdGNibHh1VW1WaFkzUkVaV1poZFd4MFNXNXFaV04wYVc5dUxtbHVhbVZqZENncE8xeHVYRzUyWVhJZ2NtVnVaR1Z5SUQwZ1VtVmhZM1JRWlhKbUxtMWxZWE4xY21Vb0oxSmxZV04wSnl3Z0ozSmxibVJsY2ljc0lGSmxZV04wVFc5MWJuUXVjbVZ1WkdWeUtUdGNibHh1ZG1GeUlGSmxZV04wSUQwZ2UxeHVJQ0JtYVc1a1JFOU5UbTlrWlRvZ1ptbHVaRVJQVFU1dlpHVXNYRzRnSUhKbGJtUmxjam9nY21WdVpHVnlMRnh1SUNCMWJtMXZkVzUwUTI5dGNHOXVaVzUwUVhST2IyUmxPaUJTWldGamRFMXZkVzUwTG5WdWJXOTFiblJEYjIxd2IyNWxiblJCZEU1dlpHVXNYRzRnSUhabGNuTnBiMjQ2SUZKbFlXTjBWbVZ5YzJsdmJpeGNibHh1SUNBdktpQmxjMnhwYm5RdFpHbHpZV0pzWlNCallXMWxiR05oYzJVZ0tpOWNiaUFnZFc1emRHRmliR1ZmWW1GMFkyaGxaRlZ3WkdGMFpYTTZJRkpsWVdOMFZYQmtZWFJsY3k1aVlYUmphR1ZrVlhCa1lYUmxjeXhjYmlBZ2RXNXpkR0ZpYkdWZmNtVnVaR1Z5VTNWaWRISmxaVWx1ZEc5RGIyNTBZV2x1WlhJNklISmxibVJsY2xOMVluUnlaV1ZKYm5SdlEyOXVkR0ZwYm1WeVhHNTlPMXh1WEc0dkx5QkpibXBsWTNRZ2RHaGxJSEoxYm5ScGJXVWdhVzUwYnlCaElHUmxkblJ2YjJ4eklHZHNiMkpoYkNCb2IyOXJJSEpsWjJGeVpHeGxjM01nYjJZZ1luSnZkM05sY2k1Y2JpOHZJRUZzYkc5M2N5Qm1iM0lnWkdWaWRXZG5hVzVuSUhkb1pXNGdkR2hsSUdodmIyc2dhWE1nYVc1cVpXTjBaV1FnYjI0Z2RHaGxJSEJoWjJVdVhHNHZLaUJsYzJ4cGJuUXRaVzVoWW14bElHTmhiV1ZzWTJGelpTQXFMMXh1YVdZZ0tIUjVjR1Z2WmlCZlgxSkZRVU5VWDBSRlZsUlBUMHhUWDBkTVQwSkJURjlJVDA5TFgxOGdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFI1Y0dWdlppQmZYMUpGUVVOVVgwUkZWbFJQVDB4VFgwZE1UMEpCVEY5SVQwOUxYMTh1YVc1cVpXTjBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUY5ZlVrVkJRMVJmUkVWV1ZFOVBURk5mUjB4UFFrRk1YMGhQVDB0Zlh5NXBibXBsWTNRb2UxeHVJQ0FnSUVOMWNuSmxiblJQZDI1bGNqb2dVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXNYRzRnSUNBZ1NXNXpkR0Z1WTJWSVlXNWtiR1Z6T2lCU1pXRmpkRWx1YzNSaGJtTmxTR0Z1Wkd4bGN5eGNiaUFnSUNCTmIzVnVkRG9nVW1WaFkzUk5iM1Z1ZEN4Y2JpQWdJQ0JTWldOdmJtTnBiR1Z5T2lCU1pXRmpkRkpsWTI5dVkybHNaWElzWEc0Z0lDQWdWR1Y0ZEVOdmJYQnZibVZ1ZERvZ1VtVmhZM1JFVDAxVVpYaDBRMjl0Y0c5dVpXNTBYRzRnSUgwcE8xeHVmVnh1WEc1cFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQjJZWElnUlhobFkzVjBhVzl1Ulc1MmFYSnZibTFsYm5RZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOUZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQ2NwTzF4dUlDQnBaaUFvUlhobFkzVjBhVzl1Ulc1MmFYSnZibTFsYm5RdVkyRnVWWE5sUkU5TklDWW1JSGRwYm1SdmR5NTBiM0FnUFQwOUlIZHBibVJ2ZHk1elpXeG1LU0I3WEc1Y2JpQWdJQ0F2THlCR2FYSnpkQ0JqYUdWamF5QnBaaUJrWlhaMGIyOXNjeUJwY3lCdWIzUWdhVzV6ZEdGc2JHVmtYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmZYMUpGUVVOVVgwUkZWbFJQVDB4VFgwZE1UMEpCVEY5SVQwOUxYMThnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0F2THlCSlppQjNaU2R5WlNCcGJpQkRhSEp2YldVZ2IzSWdSbWx5WldadmVDd2djSEp2ZG1sa1pTQmhJR1J2ZDI1c2IyRmtJR3hwYm1zZ2FXWWdibTkwSUdsdWMzUmhiR3hsWkM1Y2JpQWdJQ0FnSUdsbUlDaHVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBMbWx1WkdWNFQyWW9KME5vY205dFpTY3BJRDRnTFRFZ0ppWWdibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkQzVwYm1SbGVFOW1LQ2RGWkdkbEp5a2dQVDA5SUMweElIeDhJRzVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblF1YVc1a1pYaFBaaWduUm1seVpXWnZlQ2NwSUQ0Z0xURXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVrWldKMVp5Z25SRzkzYm14dllXUWdkR2hsSUZKbFlXTjBJRVJsZGxSdmIyeHpJR1p2Y2lCaElHSmxkSFJsY2lCa1pYWmxiRzl3YldWdWRDQmxlSEJsY21sbGJtTmxPaUFuSUNzZ0oyaDBkSEJ6T2k4dlptSXViV1V2Y21WaFkzUXRaR1YyZEc5dmJITW5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJKWmlCM1pTZHlaU0JwYmlCSlJUZ3NJR05vWldOcklIUnZJSE5sWlNCcFppQjNaU0JoY21VZ2FXNGdZMjl0Y0dGMGFXSnBiR2wwZVNCdGIyUmxJR0Z1WkNCd2NtOTJhV1JsWEc0Z0lDQWdMeThnYVc1bWIzSnRZWFJwYjI0Z2IyNGdjSEpsZG1WdWRHbHVaeUJqYjIxd1lYUnBZbWxzYVhSNUlHMXZaR1ZjYmlBZ0lDQjJZWElnYVdWRGIyMXdZWFJwWW1sc2FYUjVUVzlrWlNBOUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFRXOWtaU0FtSmlCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEUxdlpHVWdQQ0E0TzF4dVhHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb0lXbGxRMjl0Y0dGMGFXSnBiR2wwZVUxdlpHVXNJQ2RKYm5SbGNtNWxkQ0JGZUhCc2IzSmxjaUJwY3lCeWRXNXVhVzVuSUdsdUlHTnZiWEJoZEdsaWFXeHBkSGtnYlc5a1pUc2djR3hsWVhObElHRmtaQ0IwYUdVZ0p5QXJJQ2RtYjJ4c2IzZHBibWNnZEdGbklIUnZJSGx2ZFhJZ1NGUk5UQ0IwYnlCd2NtVjJaVzUwSUhSb2FYTWdabkp2YlNCb1lYQndaVzVwYm1jNklDY2dLeUFuUEcxbGRHRWdhSFIwY0MxbGNYVnBkajFjSWxndFZVRXRRMjl0Y0dGMGFXSnNaVndpSUdOdmJuUmxiblE5WENKSlJUMWxaR2RsWENJZ0x6NG5LU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUhaaGNpQmxlSEJsWTNSbFpFWmxZWFIxY21WeklEMGdXMXh1SUNBZ0lDOHZJSE5vYVcxelhHNGdJQ0FnUVhKeVlYa3VhWE5CY25KaGVTd2dRWEp5WVhrdWNISnZkRzkwZVhCbExtVjJaWEo1TENCQmNuSmhlUzV3Y205MGIzUjVjR1V1Wm05eVJXRmphQ3dnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbWx1WkdWNFQyWXNJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXRZWEFzSUVSaGRHVXVibTkzTENCR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVdVltbHVaQ3dnVDJKcVpXTjBMbXRsZVhNc0lGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWMzQnNhWFFzSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1ZEhKcGJTeGNibHh1SUNBZ0lDOHZJSE5vWVcxelhHNGdJQ0FnVDJKcVpXTjBMbU55WldGMFpTd2dUMkpxWldOMExtWnlaV1Y2WlYwN1hHNWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHVjRjR1ZqZEdWa1JtVmhkSFZ5WlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2xtSUNnaFpYaHdaV04wWldSR1pXRjBkWEpsYzF0cFhTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZFBibVVnYjNJZ2JXOXlaU0JGVXpVZ2MyaHBiUzl6YUdGdGN5QmxlSEJsWTNSbFpDQmllU0JTWldGamRDQmhjbVVnYm05MElHRjJZV2xzWVdKc1pUb2dKeUFySUNkb2RIUndjem92TDJaaUxtMWxMM0psWVdOMExYZGhjbTVwYm1jdGNHOXNlV1pwYkd4ekp5azdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGSmxZV04wT3lKZGZRPT0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01CdXR0b25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBtb3VzZUxpc3RlbmVyTmFtZXMgPSB7XG4gIG9uQ2xpY2s6IHRydWUsXG4gIG9uRG91YmxlQ2xpY2s6IHRydWUsXG4gIG9uTW91c2VEb3duOiB0cnVlLFxuICBvbk1vdXNlTW92ZTogdHJ1ZSxcbiAgb25Nb3VzZVVwOiB0cnVlLFxuXG4gIG9uQ2xpY2tDYXB0dXJlOiB0cnVlLFxuICBvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZURvd25DYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlTW92ZUNhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VVcENhcHR1cmU6IHRydWVcbn07XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDxidXR0b24+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBkb2VzIG5vdCByZWNlaXZlIG1vdXNlIGV2ZW50c1xuICogd2hlbiBgZGlzYWJsZWRgIGlzIHNldC5cbiAqL1xudmFyIFJlYWN0RE9NQnV0dG9uID0ge1xuICBnZXROYXRpdmVQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzLCBjb250ZXh0KSB7XG4gICAgaWYgKCFwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH1cblxuICAgIC8vIENvcHkgdGhlIHByb3BzLCBleGNlcHQgdGhlIG1vdXNlIGxpc3RlbmVyc1xuICAgIHZhciBuYXRpdmVQcm9wcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGtleSkgJiYgIW1vdXNlTGlzdGVuZXJOYW1lc1trZXldKSB7XG4gICAgICAgIG5hdGl2ZVByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUJ1dHRvbjsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NQ29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qIGdsb2JhbCBoYXNPd25Qcm9wZXJ0eTp0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEF1dG9Gb2N1c1V0aWxzID0gcmVxdWlyZSgnLi9BdXRvRm9jdXNVdGlscycpO1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vQ1NTUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMnKTtcbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0RE9NQnV0dG9uID0gcmVxdWlyZSgnLi9SZWFjdERPTUJ1dHRvbicpO1xudmFyIFJlYWN0RE9NSW5wdXQgPSByZXF1aXJlKCcuL1JlYWN0RE9NSW5wdXQnKTtcbnZhciBSZWFjdERPTU9wdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01PcHRpb24nKTtcbnZhciBSZWFjdERPTVNlbGVjdCA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3QnKTtcbnZhciBSZWFjdERPTVRleHRhcmVhID0gcmVxdWlyZSgnLi9SZWFjdERPTVRleHRhcmVhJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0TXVsdGlDaGlsZCA9IHJlcXVpcmUoJy4vUmVhY3RNdWx0aUNoaWxkJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZVF1ZXVlJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vY2FuRGVmaW5lUHJvcGVydHknKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZSgnLi9zZXRJbm5lckhUTUwnKTtcbnZhciBzZXRUZXh0Q29udGVudCA9IHJlcXVpcmUoJy4vc2V0VGV4dENvbnRlbnQnKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcbnZhciB2YWxpZGF0ZURPTU5lc3RpbmcgPSByZXF1aXJlKCcuL3ZhbGlkYXRlRE9NTmVzdGluZycpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkZWxldGVMaXN0ZW5lciA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5kZWxldGVMaXN0ZW5lcjtcbnZhciBsaXN0ZW5UbyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5UbztcbnZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztcblxuLy8gRm9yIHF1aWNrbHkgbWF0Y2hpbmcgY2hpbGRyZW4gdHlwZSwgdG8gdGVzdCBpZiBjYW4gYmUgdHJlYXRlZCBhcyBjb250ZW50LlxudmFyIENPTlRFTlRfVFlQRVMgPSB7ICdzdHJpbmcnOiB0cnVlLCAnbnVtYmVyJzogdHJ1ZSB9O1xuXG52YXIgQ0hJTERSRU4gPSBrZXlPZih7IGNoaWxkcmVuOiBudWxsIH0pO1xudmFyIFNUWUxFID0ga2V5T2YoeyBzdHlsZTogbnVsbCB9KTtcbnZhciBIVE1MID0ga2V5T2YoeyBfX2h0bWw6IG51bGwgfSk7XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShpbnRlcm5hbEluc3RhbmNlKSB7XG4gIGlmIChpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgdmFyIG93bmVyID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQuX293bmVyIHx8IG51bGw7XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIFRoaXMgRE9NIG5vZGUgd2FzIHJlbmRlcmVkIGJ5IGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxudmFyIGxlZ2FjeVByb3BzRGVzY3JpcHRvcjtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGxlZ2FjeVByb3BzRGVzY3JpcHRvciA9IHtcbiAgICBwcm9wczoge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXMuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQ7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RET01Db21wb25lbnQ6IERvIG5vdCBhY2Nlc3MgLnByb3BzIG9mIGEgRE9NIG5vZGU7IGluc3RlYWQsICcgKyAncmVjcmVhdGUgdGhlIHByb3BzIGFzIGByZW5kZXJgIGRpZCBvcmlnaW5hbGx5IG9yIHJlYWQgdGhlIERPTSAnICsgJ3Byb3BlcnRpZXMvYXR0cmlidXRlcyBkaXJlY3RseSBmcm9tIHRoaXMgbm9kZSAoZS5nLiwgJyArICd0aGlzLnJlZnMuYm94LmNsYXNzTmFtZSkuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbGVnYWN5R2V0RE9NTm9kZSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5fcmVhY3RJbnRlcm5hbENvbXBvbmVudDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RE9NQ29tcG9uZW50OiBEbyBub3QgYWNjZXNzIC5nZXRET01Ob2RlKCkgb2YgYSBET00gbm9kZTsgJyArICdpbnN0ZWFkLCB1c2UgdGhlIG5vZGUgZGlyZWN0bHkuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGxlZ2FjeUlzTW91bnRlZCgpIHtcbiAgdmFyIGNvbXBvbmVudCA9IHRoaXMuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdERPTUNvbXBvbmVudDogRG8gbm90IGFjY2VzcyAuaXNNb3VudGVkKCkgb2YgYSBET00gbm9kZS4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpKSA6IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gISFjb21wb25lbnQ7XG59XG5cbmZ1bmN0aW9uIGxlZ2FjeVNldFN0YXRlRXRjKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBjb21wb25lbnQgPSB0aGlzLl9yZWFjdEludGVybmFsQ29tcG9uZW50O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RET01Db21wb25lbnQ6IERvIG5vdCBhY2Nlc3MgLnNldFN0YXRlKCksIC5yZXBsYWNlU3RhdGUoKSwgb3IgJyArICcuZm9yY2VVcGRhdGUoKSBvZiBhIERPTSBub2RlLiBUaGlzIGlzIGEgbm8tb3AuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVnYWN5U2V0UHJvcHMocGFydGlhbFByb3BzLCBjYWxsYmFjaykge1xuICB2YXIgY29tcG9uZW50ID0gdGhpcy5fcmVhY3RJbnRlcm5hbENvbXBvbmVudDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RE9NQ29tcG9uZW50OiBEbyBub3QgYWNjZXNzIC5zZXRQcm9wcygpIG9mIGEgRE9NIG5vZGUuICcgKyAnSW5zdGVhZCwgY2FsbCBSZWFjdERPTS5yZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoIWNvbXBvbmVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVTZXRQcm9wc0ludGVybmFsKGNvbXBvbmVudCwgcGFydGlhbFByb3BzKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbChjb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWdhY3lSZXBsYWNlUHJvcHMocGFydGlhbFByb3BzLCBjYWxsYmFjaykge1xuICB2YXIgY29tcG9uZW50ID0gdGhpcy5fcmVhY3RJbnRlcm5hbENvbXBvbmVudDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RE9NQ29tcG9uZW50OiBEbyBub3QgYWNjZXNzIC5yZXBsYWNlUHJvcHMoKSBvZiBhIERPTSBub2RlLiAnICsgJ0luc3RlYWQsIGNhbGwgUmVhY3RET00ucmVuZGVyIGFnYWluIGF0IHRoZSB0b3AgbGV2ZWwuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCFjb21wb25lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlUmVwbGFjZVByb3BzSW50ZXJuYWwoY29tcG9uZW50LCBwYXJ0aWFsUHJvcHMpO1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKGNvbXBvbmVudCwgY2FsbGJhY2spO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZyaWVuZGx5U3RyaW5naWZ5KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICByZXR1cm4gJ1snICsgb2JqLm1hcChmcmllbmRseVN0cmluZ2lmeSkuam9pbignLCAnKSArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhaXJzID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgdmFyIGtleUVzY2FwZWQgPSAvXlthLXokX11bXFx3JF9dKiQvaS50ZXN0KGtleSkgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpO1xuICAgICAgICAgIHBhaXJzLnB1c2goa2V5RXNjYXBlZCArICc6ICcgKyBmcmllbmRseVN0cmluZ2lmeShvYmpba2V5XSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJ3snICsgcGFpcnMuam9pbignLCAnKSArICd9JztcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuICdbZnVuY3Rpb24gb2JqZWN0XSc7XG4gIH1cbiAgLy8gRGlmZmVycyBmcm9tIEpTT04uc3RyaW5naWZ5IGluIHRoYXQgdW5kZWZpbmVkIGJlY2F1c2VzIHVuZGVmaW5lZCBhbmQgdGhhdFxuICAvLyBpbmYgYW5kIG5hbiBkb24ndCBiZWNvbWUgbnVsbFxuICByZXR1cm4gU3RyaW5nKG9iaik7XG59XG5cbnZhciBzdHlsZU11dGF0aW9uV2FybmluZyA9IHt9O1xuXG5mdW5jdGlvbiBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUoc3R5bGUxLCBzdHlsZTIsIGNvbXBvbmVudCkge1xuICBpZiAoc3R5bGUxID09IG51bGwgfHwgc3R5bGUyID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHNoYWxsb3dFcXVhbChzdHlsZTEsIHN0eWxlMikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5fdGFnO1xuICB2YXIgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgdmFyIG93bmVyTmFtZTtcbiAgaWYgKG93bmVyKSB7XG4gICAgb3duZXJOYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICB9XG5cbiAgdmFyIGhhc2ggPSBvd25lck5hbWUgKyAnfCcgKyBjb21wb25lbnROYW1lO1xuXG4gIGlmIChzdHlsZU11dGF0aW9uV2FybmluZy5oYXNPd25Qcm9wZXJ0eShoYXNoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0eWxlTXV0YXRpb25XYXJuaW5nW2hhc2hdID0gdHJ1ZTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2Alc2Agd2FzIHBhc3NlZCBhIHN0eWxlIG9iamVjdCB0aGF0IGhhcyBwcmV2aW91c2x5IGJlZW4gbXV0YXRlZC4gJyArICdNdXRhdGluZyBgc3R5bGVgIGlzIGRlcHJlY2F0ZWQuIENvbnNpZGVyIGNsb25pbmcgaXQgYmVmb3JlaGFuZC4gQ2hlY2sgJyArICd0aGUgYHJlbmRlcmAgJXMuIFByZXZpb3VzIHN0eWxlOiAlcy4gTXV0YXRlZCBzdHlsZTogJXMuJywgY29tcG9uZW50TmFtZSwgb3duZXIgPyAnb2YgYCcgKyBvd25lck5hbWUgKyAnYCcgOiAndXNpbmcgPCcgKyBjb21wb25lbnROYW1lICsgJz4nLCBmcmllbmRseVN0cmluZ2lmeShzdHlsZTEpLCBmcmllbmRseVN0cmluZ2lmeShzdHlsZTIpKSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IHByb3BzXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHMoY29tcG9uZW50LCBwcm9wcykge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIE5vdGUgdGhlIHVzZSBvZiBgPT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZvaWRFbGVtZW50VGFnc1tjb21wb25lbnQuX3RhZ10pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLmNoaWxkcmVuID09IG51bGwgJiYgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCwgJyVzIGlzIGEgdm9pZCBlbGVtZW50IHRhZyBhbmQgbXVzdCBub3QgaGF2ZSBgY2hpbGRyZW5gIG9yICcgKyAndXNlIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJXMnLCBjb21wb25lbnQuX3RhZywgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgPyAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICcgKyBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLicgOiAnJykgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGlmIChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAhPSBudWxsKSB7XG4gICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBzZXQgb25lIG9mIGBjaGlsZHJlbmAgb3IgYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgISh0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmIEhUTUwgaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Bwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAgbXVzdCBiZSBpbiB0aGUgZm9ybSBge19faHRtbDogLi4ufWAuICcgKyAnUGxlYXNlIHZpc2l0IGh0dHBzOi8vZmIubWUvcmVhY3QtaW52YXJpYW50LWRhbmdlcm91c2x5LXNldC1pbm5lci1odG1sICcgKyAnZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHJvcHMuaW5uZXJIVE1MID09IG51bGwsICdEaXJlY3RseSBzZXR0aW5nIHByb3BlcnR5IGBpbm5lckhUTUxgIGlzIG5vdCBwZXJtaXR0ZWQuICcgKyAnRm9yIG1vcmUgaW5mb3JtYXRpb24sIGxvb2t1cCBkb2N1bWVudGF0aW9uIG9uIGBkYW5nZXJvdXNseVNldElubmVySFRNTGAuJykgOiB1bmRlZmluZWQ7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIXByb3BzLmNvbnRlbnRFZGl0YWJsZSB8fCBwcm9wcy5jaGlsZHJlbiA9PSBudWxsLCAnQSBjb21wb25lbnQgaXMgYGNvbnRlbnRFZGl0YWJsZWAgYW5kIGNvbnRhaW5zIGBjaGlsZHJlbmAgbWFuYWdlZCBieSAnICsgJ1JlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mICcgKyAndGhvc2Ugbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzICcgKyAncHJvYmFibHkgbm90IGludGVudGlvbmFsLicpIDogdW5kZWZpbmVkO1xuICB9XG4gICEocHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGUgYHN0eWxlYCBwcm9wIGV4cGVjdHMgYSBtYXBwaW5nIGZyb20gc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMsICcgKyAnbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArIFxcJ2VtXFwnfX0gd2hlbiAnICsgJ3VzaW5nIEpTWC4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVucXVldWVQdXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIsIHRyYW5zYWN0aW9uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gSUU4IGhhcyBubyBBUEkgZm9yIGV2ZW50IGNhcHR1cmluZyBhbmQgdGhlIGBvblNjcm9sbGAgZXZlbnQgZG9lc24ndFxuICAgIC8vIGJ1YmJsZS5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhyZWdpc3RyYXRpb25OYW1lICE9PSAnb25TY3JvbGwnIHx8IGlzRXZlbnRTdXBwb3J0ZWQoJ3Njcm9sbCcsIHRydWUpLCAnVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50JykgOiB1bmRlZmluZWQ7XG4gIH1cbiAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuICBpZiAoY29udGFpbmVyKSB7XG4gICAgdmFyIGRvYyA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgPyBjb250YWluZXIub3duZXJEb2N1bWVudCA6IGNvbnRhaW5lcjtcbiAgICBsaXN0ZW5UbyhyZWdpc3RyYXRpb25OYW1lLCBkb2MpO1xuICB9XG4gIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUocHV0TGlzdGVuZXIsIHtcbiAgICBpZDogaWQsXG4gICAgcmVnaXN0cmF0aW9uTmFtZTogcmVnaXN0cmF0aW9uTmFtZSxcbiAgICBsaXN0ZW5lcjogbGlzdGVuZXJcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHB1dExpc3RlbmVyKCkge1xuICB2YXIgbGlzdGVuZXJUb1B1dCA9IHRoaXM7XG4gIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcihsaXN0ZW5lclRvUHV0LmlkLCBsaXN0ZW5lclRvUHV0LnJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyVG9QdXQubGlzdGVuZXIpO1xufVxuXG4vLyBUaGVyZSBhcmUgc28gbWFueSBtZWRpYSBldmVudHMsIGl0IG1ha2VzIHNlbnNlIHRvIGp1c3Rcbi8vIG1haW50YWluIGEgbGlzdCByYXRoZXIgdGhhbiBjcmVhdGUgYSBgdHJhcEJ1YmJsZWRFdmVudGAgZm9yIGVhY2hcbnZhciBtZWRpYUV2ZW50cyA9IHtcbiAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gIHRvcENhblBsYXk6ICdjYW5wbGF5JyxcbiAgdG9wQ2FuUGxheVRocm91Z2g6ICdjYW5wbGF5dGhyb3VnaCcsXG4gIHRvcER1cmF0aW9uQ2hhbmdlOiAnZHVyYXRpb25jaGFuZ2UnLFxuICB0b3BFbXB0aWVkOiAnZW1wdGllZCcsXG4gIHRvcEVuY3J5cHRlZDogJ2VuY3J5cHRlZCcsXG4gIHRvcEVuZGVkOiAnZW5kZWQnLFxuICB0b3BFcnJvcjogJ2Vycm9yJyxcbiAgdG9wTG9hZGVkRGF0YTogJ2xvYWRlZGRhdGEnLFxuICB0b3BMb2FkZWRNZXRhZGF0YTogJ2xvYWRlZG1ldGFkYXRhJyxcbiAgdG9wTG9hZFN0YXJ0OiAnbG9hZHN0YXJ0JyxcbiAgdG9wUGF1c2U6ICdwYXVzZScsXG4gIHRvcFBsYXk6ICdwbGF5JyxcbiAgdG9wUGxheWluZzogJ3BsYXlpbmcnLFxuICB0b3BQcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICB0b3BTZWVrZWQ6ICdzZWVrZWQnLFxuICB0b3BTZWVraW5nOiAnc2Vla2luZycsXG4gIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgdG9wU3VzcGVuZDogJ3N1c3BlbmQnLFxuICB0b3BUaW1lVXBkYXRlOiAndGltZXVwZGF0ZScsXG4gIHRvcFZvbHVtZUNoYW5nZTogJ3ZvbHVtZWNoYW5nZScsXG4gIHRvcFdhaXRpbmc6ICd3YWl0aW5nJ1xufTtcblxuZnVuY3Rpb24gdHJhcEJ1YmJsZWRFdmVudHNMb2NhbCgpIHtcbiAgdmFyIGluc3QgPSB0aGlzO1xuICAvLyBJZiBhIGNvbXBvbmVudCByZW5kZXJzIHRvIG51bGwgb3IgaWYgYW5vdGhlciBjb21wb25lbnQgZmF0YWxzIGFuZCBjYXVzZXNcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSB0cmVlIHRvIGJlIGNvcnJ1cHRlZCwgYG5vZGVgIGhlcmUgY2FuIGJlIG51bGwuXG4gICFpbnN0Ll9yb290Tm9kZUlEID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ011c3QgYmUgbW91bnRlZCB0byB0cmFwIGV2ZW50cycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaW5zdC5fcm9vdE5vZGVJRCk7XG4gICFub2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RyYXBCdWJibGVkRXZlbnQoLi4uKTogUmVxdWlyZXMgbm9kZSB0byBiZSByZW5kZXJlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgc3dpdGNoIChpbnN0Ll90YWcpIHtcbiAgICBjYXNlICdpZnJhbWUnOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcExvYWQsICdsb2FkJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndmlkZW8nOlxuICAgIGNhc2UgJ2F1ZGlvJzpcblxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtdO1xuICAgICAgLy8gY3JlYXRlIGxpc3RlbmVyIGZvciBlYWNoIG1lZGlhIGV2ZW50XG4gICAgICBmb3IgKHZhciBldmVudCBpbiBtZWRpYUV2ZW50cykge1xuICAgICAgICBpZiAobWVkaWFFdmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG4gICAgICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycy5wdXNoKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXNbZXZlbnRdLCBtZWRpYUV2ZW50c1tldmVudF0sIG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbWcnOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcEVycm9yLCAnZXJyb3InLCBub2RlKSwgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BMb2FkLCAnbG9hZCcsIG5vZGUpXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcFJlc2V0LCAncmVzZXQnLCBub2RlKSwgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQsICdzdWJtaXQnLCBub2RlKV07XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtb3VudFJlYWR5SW5wdXRXcmFwcGVyKCkge1xuICBSZWFjdERPTUlucHV0Lm1vdW50UmVhZHlXcmFwcGVyKHRoaXMpO1xufVxuXG5mdW5jdGlvbiBwb3N0VXBkYXRlU2VsZWN0V3JhcHBlcigpIHtcbiAgUmVhY3RET01TZWxlY3QucG9zdFVwZGF0ZVdyYXBwZXIodGhpcyk7XG59XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3Mgc2hvdWxkIG9taXQgdGhlaXIgY2xvc2UgdGFnLiBXZSBrZWVwIGEgd2hpdGVsaXN0IGZvclxuLy8gdGhvc2Ugc3BlY2lhbCBjYXNlZCB0YWdzLlxuXG52YXIgb21pdHRlZENsb3NlVGFncyA9IHtcbiAgJ2FyZWEnOiB0cnVlLFxuICAnYmFzZSc6IHRydWUsXG4gICdicic6IHRydWUsXG4gICdjb2wnOiB0cnVlLFxuICAnZW1iZWQnOiB0cnVlLFxuICAnaHInOiB0cnVlLFxuICAnaW1nJzogdHJ1ZSxcbiAgJ2lucHV0JzogdHJ1ZSxcbiAgJ2tleWdlbic6IHRydWUsXG4gICdsaW5rJzogdHJ1ZSxcbiAgJ21ldGEnOiB0cnVlLFxuICAncGFyYW0nOiB0cnVlLFxuICAnc291cmNlJzogdHJ1ZSxcbiAgJ3RyYWNrJzogdHJ1ZSxcbiAgJ3dicic6IHRydWVcbn07XG5cbi8vIE5PVEU6IG1lbnVpdGVtJ3MgY2xvc2UgdGFnIHNob3VsZCBiZSBvbWl0dGVkLCBidXQgdGhhdCBjYXVzZXMgcHJvYmxlbXMuXG52YXIgbmV3bGluZUVhdGluZ1RhZ3MgPSB7XG4gICdsaXN0aW5nJzogdHJ1ZSxcbiAgJ3ByZSc6IHRydWUsXG4gICd0ZXh0YXJlYSc6IHRydWVcbn07XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3MgY2Fubm90IGhhdmUgY2hpbGRyZW4uIFRoaXMgaGFzIHRoZSBzYW1lIHB1cnBvc2UgYXNcbi8vIGBvbWl0dGVkQ2xvc2VUYWdzYCBleGNlcHQgdGhhdCBgbWVudWl0ZW1gIHNob3VsZCBzdGlsbCBoYXZlIGl0cyBjbG9zaW5nIHRhZy5cblxudmFyIHZvaWRFbGVtZW50VGFncyA9IGFzc2lnbih7XG4gICdtZW51aXRlbSc6IHRydWVcbn0sIG9taXR0ZWRDbG9zZVRhZ3MpO1xuXG4vLyBXZSBhY2NlcHQgYW55IHRhZyB0byBiZSByZW5kZXJlZCBidXQgc2luY2UgdGhpcyBnZXRzIGluamVjdGVkIGludG8gYXJiaXRyYXJ5XG4vLyBIVE1MLCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGl0J3MgYSBzYWZlIHRhZy5cbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwvI05ULU5hbWVcblxudmFyIFZBTElEX1RBR19SRUdFWCA9IC9eW2EtekEtWl1bYS16QS1aOl9cXC5cXC1cXGRdKiQvOyAvLyBTaW1wbGlmaWVkIHN1YnNldFxudmFyIHZhbGlkYXRlZFRhZ0NhY2hlID0ge307XG52YXIgaGFzT3duUHJvcGVydHkgPSAoe30pLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpIHtcbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZFRhZ0NhY2hlLCB0YWcpKSB7XG4gICAgIVZBTElEX1RBR19SRUdFWC50ZXN0KHRhZykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCB0YWc6ICVzJywgdGFnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgdmFsaWRhdGVkVGFnQ2FjaGVbdGFnXSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NoaWxkQ29udGV4dERldihjb250ZXh0LCBpbnN0KSB7XG4gIC8vIFBhc3MgZG93biBvdXIgdGFnIG5hbWUgdG8gY2hpbGQgY29tcG9uZW50cyBmb3IgdmFsaWRhdGlvbiBwdXJwb3Nlc1xuICBjb250ZXh0ID0gYXNzaWduKHt9LCBjb250ZXh0KTtcbiAgdmFyIGluZm8gPSBjb250ZXh0W3ZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5XTtcbiAgY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0gPSB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyhpbmZvLCBpbnN0Ll90YWcsIGluc3QpO1xuICByZXR1cm4gY29udGV4dDtcbn1cblxuZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnQodGFnTmFtZSwgcHJvcHMpIHtcbiAgcmV0dXJuIHRhZ05hbWUuaW5kZXhPZignLScpID49IDAgfHwgcHJvcHMuaXMgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFJlYWN0IGNsYXNzIHRoYXQgaXMgaWRlbXBvdGVudCBhbmQgY2FwYWJsZSBvZiBjb250YWluaW5nIG90aGVyXG4gKiBSZWFjdCBjb21wb25lbnRzLiBJdCBhY2NlcHRzIGV2ZW50IGxpc3RlbmVycyBhbmQgRE9NIHByb3BlcnRpZXMgdGhhdCBhcmVcbiAqIHZhbGlkIGFjY29yZGluZyB0byBgRE9NUHJvcGVydHlgLlxuICpcbiAqICAtIEV2ZW50IGxpc3RlbmVyczogYG9uQ2xpY2tgLCBgb25Nb3VzZURvd25gLCBldGMuXG4gKiAgLSBET00gcHJvcGVydGllczogYGNsYXNzTmFtZWAsIGBuYW1lYCwgYHRpdGxlYCwgZXRjLlxuICpcbiAqIFRoZSBgc3R5bGVgIHByb3BlcnR5IGZ1bmN0aW9ucyBkaWZmZXJlbnRseSBmcm9tIHRoZSBET00gQVBJLiBJdCBhY2NlcHRzIGFuXG4gKiBvYmplY3QgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgUmVhY3RET01Db21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0TXVsdGlDaGlsZFxuICovXG5mdW5jdGlvbiBSZWFjdERPTUNvbXBvbmVudCh0YWcpIHtcbiAgdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKTtcbiAgdGhpcy5fdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLl9wcmV2aW91c1N0eWxlID0gbnVsbDtcbiAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgdGhpcy5fd3JhcHBlclN0YXRlID0gbnVsbDtcbiAgdGhpcy5fdG9wTGV2ZWxXcmFwcGVyID0gbnVsbDtcbiAgdGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzID0gbnVsbDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0aGlzLl91bnByb2Nlc3NlZENvbnRleHREZXYgPSBudWxsO1xuICAgIHRoaXMuX3Byb2Nlc3NlZENvbnRleHREZXYgPSBudWxsO1xuICB9XG59XG5cblJlYWN0RE9NQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1JlYWN0RE9NQ29tcG9uZW50JztcblxuUmVhY3RET01Db21wb25lbnQuTWl4aW4gPSB7XG5cbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgfSxcblxuICAvKipcbiAgICogR2VuZXJhdGVzIHJvb3QgdGFnIG1hcmt1cCB0aGVuIHJlY3Vyc2VzLiBUaGlzIG1ldGhvZCBoYXMgc2lkZSBlZmZlY3RzIGFuZFxuICAgKiBpcyBub3QgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgVGhlIHJvb3QgRE9NIElEIGZvciB0aGlzIG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb21wdXRlZCBtYXJrdXAuXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuXG4gICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnaWZyYW1lJzpcbiAgICAgIGNhc2UgJ2ltZyc6XG4gICAgICBjYXNlICdmb3JtJzpcbiAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgdGhpcy5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgICAgIGxpc3RlbmVyczogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIHByb3BzID0gUmVhY3RET01CdXR0b24uZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgUmVhY3RET01JbnB1dC5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBwcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIFJlYWN0RE9NT3B0aW9uLm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIFJlYWN0RE9NU2VsZWN0Lm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01TZWxlY3QuZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBjb250ZXh0ID0gUmVhY3RET01TZWxlY3QucHJvY2Vzc0NoaWxkQ29udGV4dCh0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBSZWFjdERPTVRleHRhcmVhLm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01UZXh0YXJlYS5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcywgcHJvcHMpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0pIHtcbiAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nKHRoaXMuX3RhZywgdGhpcywgY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLl91bnByb2Nlc3NlZENvbnRleHREZXYgPSBjb250ZXh0O1xuICAgICAgdGhpcy5fcHJvY2Vzc2VkQ29udGV4dERldiA9IHByb2Nlc3NDaGlsZENvbnRleHREZXYoY29udGV4dCwgdGhpcyk7XG4gICAgICBjb250ZXh0ID0gdGhpcy5fcHJvY2Vzc2VkQ29udGV4dERldjtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRJbWFnZTtcbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBjb250ZXh0W1JlYWN0TW91bnQub3duZXJEb2N1bWVudENvbnRleHRLZXldO1xuICAgICAgdmFyIGVsID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUpO1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldEF0dHJpYnV0ZUZvcklEKGVsLCB0aGlzLl9yb290Tm9kZUlEKTtcbiAgICAgIC8vIFBvcHVsYXRlIG5vZGUgY2FjaGVcbiAgICAgIFJlYWN0TW91bnQuZ2V0SUQoZWwpO1xuICAgICAgdGhpcy5fdXBkYXRlRE9NUHJvcGVydGllcyh7fSwgcHJvcHMsIHRyYW5zYWN0aW9uLCBlbCk7XG4gICAgICB0aGlzLl9jcmVhdGVJbml0aWFsQ2hpbGRyZW4odHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0LCBlbCk7XG4gICAgICBtb3VudEltYWdlID0gZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0YWdPcGVuID0gdGhpcy5fY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVycyh0cmFuc2FjdGlvbiwgcHJvcHMpO1xuICAgICAgdmFyIHRhZ0NvbnRlbnQgPSB0aGlzLl9jcmVhdGVDb250ZW50TWFya3VwKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCk7XG4gICAgICBpZiAoIXRhZ0NvbnRlbnQgJiYgb21pdHRlZENsb3NlVGFnc1t0aGlzLl90YWddKSB7XG4gICAgICAgIG1vdW50SW1hZ2UgPSB0YWdPcGVuICsgJy8+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vdW50SW1hZ2UgPSB0YWdPcGVuICsgJz4nICsgdGFnQ29udGVudCArICc8LycgKyB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlICsgJz4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUobW91bnRSZWFkeUlucHV0V3JhcHBlciwgdGhpcyk7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlICdidXR0b24nOlxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgaWYgKHByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoQXV0b0ZvY3VzVXRpbHMuZm9jdXNET01Db21wb25lbnQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBtb3VudEltYWdlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIG9wZW4gdGFnIGFuZCBhbGwgYXR0cmlidXRlcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBiZWNhdXNlIGV2ZW50cyBnZXQgcmVnaXN0ZXJlZC5cbiAgICpcbiAgICogSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXMgaXMgZmFzdGVyIHRoYW4gaXRlcmF0aW5nIG92ZXIgYXJyYXlzLlxuICAgKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL29iai12cy1hcnItaXRlcmF0aW9uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgb2Ygb3BlbmluZyB0YWcuXG4gICAqL1xuICBfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVyczogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcm9wcykge1xuICAgIHZhciByZXQgPSAnPCcgKyB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuXG4gICAgZm9yICh2YXIgcHJvcEtleSBpbiBwcm9wcykge1xuICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBpZiAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgZW5xdWV1ZVB1dExpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXksIHByb3BWYWx1ZSwgdHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgICBpZiAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAvLyBTZWUgYF91cGRhdGVET01Qcm9wZXJ0aWVzYC4gc3R5bGUgYmxvY2tcbiAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IHByb3BWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3BWYWx1ZSA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gYXNzaWduKHt9LCBwcm9wcy5zdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BWYWx1ZSA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMocHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya3VwID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3RhZyAhPSBudWxsICYmIGlzQ3VzdG9tQ29tcG9uZW50KHRoaXMuX3RhZywgcHJvcHMpKSB7XG4gICAgICAgICAgaWYgKHByb3BLZXkgIT09IENISUxEUkVOKSB7XG4gICAgICAgICAgICBtYXJrdXAgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yQ3VzdG9tQXR0cmlidXRlKHByb3BLZXksIHByb3BWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hcmt1cCA9IERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXJrdXApIHtcbiAgICAgICAgICByZXQgKz0gJyAnICsgbWFya3VwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRm9yIHN0YXRpYyBwYWdlcywgbm8gbmVlZCB0byBwdXQgUmVhY3QgSUQgYW5kIGNoZWNrc3VtLiBTYXZlcyBsb3RzIG9mXG4gICAgLy8gYnl0ZXMuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHZhciBtYXJrdXBGb3JJRCA9IERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JJRCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICByZXR1cm4gcmV0ICsgJyAnICsgbWFya3VwRm9ySUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciB0aGUgY29udGVudCBiZXR3ZWVuIHRoZSB0YWdzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4ge3N0cmluZ30gQ29udGVudCBtYXJrdXAuXG4gICAqL1xuICBfY3JlYXRlQ29udGVudE1hcmt1cDogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCkge1xuICAgIHZhciByZXQgPSAnJztcblxuICAgIC8vIEludGVudGlvbmFsIHVzZSBvZiAhPSB0byBhdm9pZCBjYXRjaGluZyB6ZXJvL2ZhbHNlLlxuICAgIHZhciBpbm5lckhUTUwgPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcbiAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgIGlmIChpbm5lckhUTUwuX19odG1sICE9IG51bGwpIHtcbiAgICAgICAgcmV0ID0gaW5uZXJIVE1MLl9faHRtbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbnRlbnRUb1VzZSA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIHByb3BzLmNoaWxkcmVuXSA/IHByb3BzLmNoaWxkcmVuIDogbnVsbDtcbiAgICAgIHZhciBjaGlsZHJlblRvVXNlID0gY29udGVudFRvVXNlICE9IG51bGwgPyBudWxsIDogcHJvcHMuY2hpbGRyZW47XG4gICAgICBpZiAoY29udGVudFRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogVmFsaWRhdGUgdGhhdCB0ZXh0IGlzIGFsbG93ZWQgYXMgYSBjaGlsZCBvZiB0aGlzIG5vZGVcbiAgICAgICAgcmV0ID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKGNvbnRlbnRUb1VzZSk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuVG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oY2hpbGRyZW5Ub1VzZSwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICByZXQgPSBtb3VudEltYWdlcy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5ld2xpbmVFYXRpbmdUYWdzW3RoaXMuX3RhZ10gJiYgcmV0LmNoYXJBdCgwKSA9PT0gJ1xcbicpIHtcbiAgICAgIC8vIHRleHQvaHRtbCBpZ25vcmVzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlc2UgdGFncyBpZiBpdCdzIGEgbmV3bGluZVxuICAgICAgLy8gUHJlZmVyIHRvIGJyZWFrIGFwcGxpY2F0aW9uL3htbCBvdmVyIHRleHQvaHRtbCAoZm9yIG5vdykgYnkgYWRkaW5nXG4gICAgICAvLyBhIG5ld2xpbmUgc3BlY2lmaWNhbGx5IHRvIGdldCBlYXRlbiBieSB0aGUgcGFyc2VyLiAoQWx0ZXJuYXRlbHkgZm9yXG4gICAgICAvLyB0ZXh0YXJlYXMsIHJlcGxhY2luZyBcIl5cXG5cIiB3aXRoIFwiXFxyXFxuXCIgZG9lc24ndCBnZXQgZWF0ZW4sIGFuZCB0aGUgZmlyc3RcbiAgICAgIC8vIFxcciBpcyBub3JtYWxpemVkIG91dCBieSBIVE1MVGV4dEFyZWFFbGVtZW50I3ZhbHVlLilcbiAgICAgIC8vIFNlZTogPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWwtcG9seWdsb3QvI25ld2xpbmVzLWluLXRleHRhcmVhLWFuZC1wcmU+XG4gICAgICAvLyBTZWU6IDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNlbGVtZW50LXJlc3RyaWN0aW9ucz5cbiAgICAgIC8vIFNlZTogPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI25ld2xpbmVzPlxuICAgICAgLy8gU2VlOiBQYXJzaW5nIG9mIFwidGV4dGFyZWFcIiBcImxpc3RpbmdcIiBhbmQgXCJwcmVcIiBlbGVtZW50c1xuICAgICAgLy8gIGZyb20gPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHk+XG4gICAgICByZXR1cm4gJ1xcbicgKyByZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9LFxuXG4gIF9jcmVhdGVJbml0aWFsQ2hpbGRyZW46IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQsIGVsKSB7XG4gICAgLy8gSW50ZW50aW9uYWwgdXNlIG9mICE9IHRvIGF2b2lkIGNhdGNoaW5nIHplcm8vZmFsc2UuXG4gICAgdmFyIGlubmVySFRNTCA9IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuICAgIGlmIChpbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICAgaWYgKGlubmVySFRNTC5fX2h0bWwgIT0gbnVsbCkge1xuICAgICAgICBzZXRJbm5lckhUTUwoZWwsIGlubmVySFRNTC5fX2h0bWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGVudFRvVXNlID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgdmFyIGNoaWxkcmVuVG9Vc2UgPSBjb250ZW50VG9Vc2UgIT0gbnVsbCA/IG51bGwgOiBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGlmIChjb250ZW50VG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiBWYWxpZGF0ZSB0aGF0IHRleHQgaXMgYWxsb3dlZCBhcyBhIGNoaWxkIG9mIHRoaXMgbm9kZVxuICAgICAgICBzZXRUZXh0Q29udGVudChlbCwgY29udGVudFRvVXNlKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5Ub1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW91bnRJbWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBlbC5hcHBlbmRDaGlsZChtb3VudEltYWdlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY2VpdmVzIGEgbmV4dCBlbGVtZW50IGFuZCB1cGRhdGVzIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIG5hdGl2ZSBET00gY29tcG9uZW50IGFmdGVyIGl0IGhhcyBhbHJlYWR5IGJlZW4gYWxsb2NhdGVkIGFuZFxuICAgKiBhdHRhY2hlZCB0byB0aGUgRE9NLiBSZWNvbmNpbGVzIHRoZSByb290IERPTSBub2RlLCB0aGVuIHJlY3Vyc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBwcmV2RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgY29udGV4dCkge1xuICAgIHZhciBsYXN0UHJvcHMgPSBwcmV2RWxlbWVudC5wcm9wcztcbiAgICB2YXIgbmV4dFByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnYnV0dG9uJzpcbiAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01CdXR0b24uZ2V0TmF0aXZlUHJvcHModGhpcywgbGFzdFByb3BzKTtcbiAgICAgICAgbmV4dFByb3BzID0gUmVhY3RET01CdXR0b24uZ2V0TmF0aXZlUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIFJlYWN0RE9NSW5wdXQudXBkYXRlV3JhcHBlcih0aGlzKTtcbiAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01JbnB1dC5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTUlucHV0LmdldE5hdGl2ZVByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0TmF0aXZlUHJvcHModGhpcywgbGFzdFByb3BzKTtcbiAgICAgICAgbmV4dFByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0TmF0aXZlUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgUmVhY3RET01UZXh0YXJlYS51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTVRleHRhcmVhLmdldE5hdGl2ZVByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0TmF0aXZlUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIElmIHRoZSBjb250ZXh0IGlzIHJlZmVyZW5jZS1lcXVhbCB0byB0aGUgb2xkIG9uZSwgcGFzcyBkb3duIHRoZSBzYW1lXG4gICAgICAvLyBwcm9jZXNzZWQgb2JqZWN0IHNvIHRoZSB1cGRhdGUgYmFpbG91dCBpbiBSZWFjdFJlY29uY2lsZXIgYmVoYXZlc1xuICAgICAgLy8gY29ycmVjdGx5IChhbmQgaWRlbnRpY2FsbHkgaW4gZGV2IGFuZCBwcm9kKS4gU2VlICM1MDA1LlxuICAgICAgaWYgKHRoaXMuX3VucHJvY2Vzc2VkQ29udGV4dERldiAhPT0gY29udGV4dCkge1xuICAgICAgICB0aGlzLl91bnByb2Nlc3NlZENvbnRleHREZXYgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLl9wcm9jZXNzZWRDb250ZXh0RGV2ID0gcHJvY2Vzc0NoaWxkQ29udGV4dERldihjb250ZXh0LCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQgPSB0aGlzLl9wcm9jZXNzZWRDb250ZXh0RGV2O1xuICAgIH1cblxuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgbnVsbCk7XG4gICAgdGhpcy5fdXBkYXRlRE9NQ2hpbGRyZW4obGFzdFByb3BzLCBuZXh0UHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcblxuICAgIGlmICghY2FuRGVmaW5lUHJvcGVydHkgJiYgdGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLl9ub2RlV2l0aExlZ2FjeVByb3BlcnRpZXMucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vIDxzZWxlY3Q+IHZhbHVlIHVwZGF0ZSBuZWVkcyB0byBvY2N1ciBhZnRlciA8b3B0aW9uPiBjaGlsZHJlblxuICAgICAgLy8gcmVjb25jaWxpYXRpb25cbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUocG9zdFVwZGF0ZVNlbGVjdFdyYXBwZXIsIHRoaXMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVjb25jaWxlcyB0aGUgcHJvcGVydGllcyBieSBkZXRlY3RpbmcgZGlmZmVyZW5jZXMgaW4gcHJvcGVydHkgdmFsdWVzIGFuZFxuICAgKiB1cGRhdGluZyB0aGUgRE9NIGFzIG5lY2Vzc2FyeS4gVGhpcyBmdW5jdGlvbiBpcyBwcm9iYWJseSB0aGUgc2luZ2xlIG1vc3RcbiAgICogY3JpdGljYWwgcGF0aCBmb3IgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgKlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgd2hldGhlciBjaGVja2luZyBmb3IgY2hhbmdlZCB2YWx1ZXMgaW4gbWVtb3J5IGFjdHVhbGx5XG4gICAqICAgICAgIGltcHJvdmVzIHBlcmZvcm1hbmNlIChlc3BlY2lhbGx5IHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50cykuXG4gICAqIFRPRE86IEJlbmNobWFyayB0aGUgZWZmZWN0cyBvZiBwdXR0aW5nIHRoaXMgYXQgdGhlIHRvcCBzaW5jZSA5OSUgb2YgcHJvcHNcbiAgICogICAgICAgZG8gbm90IGNoYW5nZSBmb3IgYSBnaXZlbiByZWNvbmNpbGlhdGlvbi5cbiAgICogVE9ETzogQmVuY2htYXJrIGFyZWFzIHRoYXQgY2FuIGJlIGltcHJvdmVkIHdpdGggY2FjaGluZy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/RE9NRWxlbWVudH0gbm9kZVxuICAgKi9cbiAgX3VwZGF0ZURPTVByb3BlcnRpZXM6IGZ1bmN0aW9uIChsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24sIG5vZGUpIHtcbiAgICB2YXIgcHJvcEtleTtcbiAgICB2YXIgc3R5bGVOYW1lO1xuICAgIHZhciBzdHlsZVVwZGF0ZXM7XG4gICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCAhbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIHZhciBsYXN0U3R5bGUgPSB0aGlzLl9wcmV2aW91c1N0eWxlQ29weTtcbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFN0eWxlKSB7XG4gICAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChsYXN0UHJvcHNbcHJvcEtleV0pIHtcbiAgICAgICAgICAvLyBPbmx5IGNhbGwgZGVsZXRlTGlzdGVuZXIgaWYgdGhlcmUgd2FzIGEgbGlzdGVuZXIgcHJldmlvdXNseSBvclxuICAgICAgICAgIC8vIGVsc2Ugd2lsbERlbGV0ZUxpc3RlbmVyIGdldHMgY2FsbGVkIHdoZW4gdGhlcmUgd2Fzbid0IGFjdHVhbGx5IGFcbiAgICAgICAgICAvLyBsaXN0ZW5lciAoZS5nLiwgb25DbGljaz17bnVsbH0pXG4gICAgICAgICAgZGVsZXRlTGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICB9XG4gICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIHByb3BLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgICB2YXIgbGFzdFByb3AgPSBwcm9wS2V5ID09PSBTVFlMRSA/IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5IDogbGFzdFByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbmV4dFByb3AgPT09IGxhc3RQcm9wKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUodGhpcy5fcHJldmlvdXNTdHlsZUNvcHksIHRoaXMuX3ByZXZpb3VzU3R5bGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IG5leHRQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0UHJvcCA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gYXNzaWduKHt9LCBuZXh0UHJvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAgIC8vIFVuc2V0IHN0eWxlcyBvbiBgbGFzdFByb3BgIGJ1dCBub3Qgb24gYG5leHRQcm9wYC5cbiAgICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0UHJvcCkge1xuICAgICAgICAgICAgaWYgKGxhc3RQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgKCFuZXh0UHJvcCB8fCAhbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBVcGRhdGUgc3R5bGVzIHRoYXQgY2hhbmdlZCBzaW5jZSBgbGFzdFByb3BgLlxuICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIG5leHRQcm9wKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiBsYXN0UHJvcFtzdHlsZU5hbWVdICE9PSBuZXh0UHJvcFtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSBuZXh0UHJvcFtzdHlsZU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZWxpZXMgb24gYHVwZGF0ZVN0eWxlc0J5SURgIG5vdCBtdXRhdGluZyBgc3R5bGVVcGRhdGVzYC5cbiAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBuZXh0UHJvcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICBlbnF1ZXVlUHV0TGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSwgbmV4dFByb3AsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAgIGRlbGV0ZUxpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQ3VzdG9tQ29tcG9uZW50KHRoaXMuX3RhZywgbmV4dFByb3BzKSkge1xuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wS2V5ID09PSBDSElMRFJFTikge1xuICAgICAgICAgIG5leHRQcm9wID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgcHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3Byb3BLZXldIHx8IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UncmUgdXBkYXRpbmcgdG8gbnVsbCBvciB1bmRlZmluZWQsIHdlIHNob3VsZCByZW1vdmUgdGhlIHByb3BlcnR5XG4gICAgICAgIC8vIGZyb20gdGhlIERPTSBub2RlIGluc3RlYWQgb2YgaW5hZHZlcnRhbnRseSBzZXR0aW5nIHRvIGEgc3RyaW5nLiBUaGlzXG4gICAgICAgIC8vIGJyaW5ncyB1cyBpbiBsaW5lIHdpdGggdGhlIHNhbWUgYmVoYXZpb3Igd2UgaGF2ZSBvbiBpbml0aWFsIHJlbmRlci5cbiAgICAgICAgaWYgKG5leHRQcm9wICE9IG51bGwpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlVXBkYXRlcykge1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgICB9XG4gICAgICBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMobm9kZSwgc3R5bGVVcGRhdGVzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY29uY2lsZXMgdGhlIGNoaWxkcmVuIHdpdGggdGhlIHZhcmlvdXMgcHJvcGVydGllcyB0aGF0IGFmZmVjdCB0aGVcbiAgICogY2hpbGRyZW4gY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICovXG4gIF91cGRhdGVET01DaGlsZHJlbjogZnVuY3Rpb24gKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBsYXN0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIGxhc3RQcm9wcy5jaGlsZHJlbl0gPyBsYXN0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgIHZhciBuZXh0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIG5leHRQcm9wcy5jaGlsZHJlbl0gPyBuZXh0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuXG4gICAgdmFyIGxhc3RIdG1sID0gbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG5cbiAgICAvLyBOb3RlIHRoZSB1c2Ugb2YgYCE9YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgIHZhciBsYXN0Q2hpbGRyZW4gPSBsYXN0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IGxhc3RQcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBuZXh0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAvLyBJZiB3ZSdyZSBzd2l0Y2hpbmcgZnJvbSBjaGlsZHJlbiB0byBjb250ZW50L2h0bWwgb3IgdmljZSB2ZXJzYSwgcmVtb3ZlXG4gICAgLy8gdGhlIG9sZCBjb250ZW50XG4gICAgdmFyIGxhc3RIYXNDb250ZW50T3JIdG1sID0gbGFzdENvbnRlbnQgIT0gbnVsbCB8fCBsYXN0SHRtbCAhPSBudWxsO1xuICAgIHZhciBuZXh0SGFzQ29udGVudE9ySHRtbCA9IG5leHRDb250ZW50ICE9IG51bGwgfHwgbmV4dEh0bWwgIT0gbnVsbDtcbiAgICBpZiAobGFzdENoaWxkcmVuICE9IG51bGwgJiYgbmV4dENoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obnVsbCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAobGFzdEhhc0NvbnRlbnRPckh0bWwgJiYgIW5leHRIYXNDb250ZW50T3JIdG1sKSB7XG4gICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnKTtcbiAgICB9XG5cbiAgICBpZiAobmV4dENvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgaWYgKGxhc3RDb250ZW50ICE9PSBuZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnICsgbmV4dENvbnRlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dEh0bWwgIT0gbnVsbCkge1xuICAgICAgaWYgKGxhc3RIdG1sICE9PSBuZXh0SHRtbCkge1xuICAgICAgICB0aGlzLnVwZGF0ZU1hcmt1cCgnJyArIG5leHRIdG1sKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHRDaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVzdHJveXMgYWxsIGV2ZW50IHJlZ2lzdHJhdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuIERvZXMgbm90IHJlbW92ZSBmcm9tXG4gICAqIHRoZSBET00uIFRoYXQgbXVzdCBiZSBkb25lIGJ5IHRoZSBwYXJlbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpZnJhbWUnOlxuICAgICAgY2FzZSAnaW1nJzpcbiAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgY2FzZSAndmlkZW8nOlxuICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fd3JhcHBlclN0YXRlLmxpc3RlbmVycztcbiAgICAgICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0ucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBSZWFjdERPTUlucHV0LnVubW91bnRXcmFwcGVyKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICdib2R5JzpcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbXBvbmVudHMgbGlrZSA8aHRtbD4gPGhlYWQ+IGFuZCA8Ym9keT4gY2FuJ3QgYmUgcmVtb3ZlZCBvciBhZGRlZFxuICAgICAgICAgKiBlYXNpbHkgaW4gYSBjcm9zcy1icm93c2VyIHdheSwgaG93ZXZlciBpdCdzIHZhbHVhYmxlIHRvIGJlIGFibGUgdG9cbiAgICAgICAgICogdGFrZSBhZHZhbnRhZ2Ugb2YgUmVhY3QncyByZWNvbmNpbGlhdGlvbiBmb3Igc3R5bGluZyBhbmQgPHRpdGxlPlxuICAgICAgICAgKiBtYW5hZ2VtZW50LiBTbyB3ZSBqdXN0IGRvY3VtZW50IGl0IGFuZCB0aHJvdyBpbiBkYW5nZXJvdXMgY2FzZXMuXG4gICAgICAgICAqL1xuICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPCVzPiB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzICcgKyAnaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgJyArICc8aGVhZD4sIGFuZCA8Ym9keT4pIHJlbGlhYmx5IGFuZCBlZmZpY2llbnRseS4gVG8gZml4IHRoaXMsIGhhdmUgYSAnICsgJ3NpbmdsZSB0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlICcgKyAnZWxlbWVudHMuJywgdGhpcy5fdGFnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMudW5tb3VudENoaWxkcmVuKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmRlbGV0ZUFsbExpc3RlbmVycyh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5fd3JhcHBlclN0YXRlID0gbnVsbDtcbiAgICBpZiAodGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcztcbiAgICAgIG5vZGUuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzID0gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0UHVibGljSW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcykge1xuICAgICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG5cbiAgICAgIG5vZGUuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQgPSB0aGlzO1xuICAgICAgbm9kZS5nZXRET01Ob2RlID0gbGVnYWN5R2V0RE9NTm9kZTtcbiAgICAgIG5vZGUuaXNNb3VudGVkID0gbGVnYWN5SXNNb3VudGVkO1xuICAgICAgbm9kZS5zZXRTdGF0ZSA9IGxlZ2FjeVNldFN0YXRlRXRjO1xuICAgICAgbm9kZS5yZXBsYWNlU3RhdGUgPSBsZWdhY3lTZXRTdGF0ZUV0YztcbiAgICAgIG5vZGUuZm9yY2VVcGRhdGUgPSBsZWdhY3lTZXRTdGF0ZUV0YztcbiAgICAgIG5vZGUuc2V0UHJvcHMgPSBsZWdhY3lTZXRQcm9wcztcbiAgICAgIG5vZGUucmVwbGFjZVByb3BzID0gbGVnYWN5UmVwbGFjZVByb3BzO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhub2RlLCBsZWdhY3lQcm9wc0Rlc2NyaXB0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHVwZGF0ZUNvbXBvbmVudCB3aWxsIHVwZGF0ZSB0aGlzIHByb3BlcnR5IG9uIHN1YnNlcXVlbnQgcmVuZGVyc1xuICAgICAgICAgIG5vZGUucHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXBkYXRlQ29tcG9uZW50IHdpbGwgdXBkYXRlIHRoaXMgcHJvcGVydHkgb24gc3Vic2VxdWVudCByZW5kZXJzXG4gICAgICAgIG5vZGUucHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzID0gbm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcztcbiAgfVxuXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RET01Db21wb25lbnQsICdSZWFjdERPTUNvbXBvbmVudCcsIHtcbiAgbW91bnRDb21wb25lbnQ6ICdtb3VudENvbXBvbmVudCcsXG4gIHVwZGF0ZUNvbXBvbmVudDogJ3VwZGF0ZUNvbXBvbmVudCdcbn0pO1xuXG5hc3NpZ24oUmVhY3RET01Db21wb25lbnQucHJvdG90eXBlLCBSZWFjdERPTUNvbXBvbmVudC5NaXhpbiwgUmVhY3RNdWx0aUNoaWxkLk1peGluKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbXBvbmVudDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRVQwMURiMjF3YjI1bGJuUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEZ4dUlDb2dRSFI1Y0dWamFHVmphM01nYzNSaGRHbGpMVzl1YkhsY2JpQXFMMXh1WEc0dktpQm5iRzlpWVd3Z2FHRnpUM2R1VUhKdmNHVnlkSGs2ZEhKMVpTQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQkJkWFJ2Um05amRYTlZkR2xzY3lBOUlISmxjWFZwY21Vb0p5NHZRWFYwYjBadlkzVnpWWFJwYkhNbktUdGNiblpoY2lCRFUxTlFjbTl3WlhKMGVVOXdaWEpoZEdsdmJuTWdQU0J5WlhGMWFYSmxLQ2N1TDBOVFUxQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5Y3BPMXh1ZG1GeUlFUlBUVkJ5YjNCbGNuUjVJRDBnY21WeGRXbHlaU2duTGk5RVQwMVFjbTl3WlhKMGVTY3BPMXh1ZG1GeUlFUlBUVkJ5YjNCbGNuUjVUM0JsY21GMGFXOXVjeUE5SUhKbGNYVnBjbVVvSnk0dlJFOU5VSEp2Y0dWeWRIbFBjR1Z5WVhScGIyNXpKeWs3WEc1MllYSWdSWFpsYm5SRGIyNXpkR0Z1ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMFYyWlc1MFEyOXVjM1JoYm5Sekp5azdYRzUyWVhJZ1VtVmhZM1JDY205M2MyVnlSWFpsYm5SRmJXbDBkR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVKeWIzZHpaWEpGZG1WdWRFVnRhWFIwWlhJbktUdGNiblpoY2lCU1pXRmpkRU52YlhCdmJtVnVkRUp5YjNkelpYSkZiblpwY205dWJXVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JEYjIxd2IyNWxiblJDY205M2MyVnlSVzUyYVhKdmJtMWxiblFuS1R0Y2JuWmhjaUJTWldGamRFUlBUVUoxZEhSdmJpQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUkVUMDFDZFhSMGIyNG5LVHRjYm5aaGNpQlNaV0ZqZEVSUFRVbHVjSFYwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVSUFRVbHVjSFYwSnlrN1hHNTJZWElnVW1WaFkzUkVUMDFQY0hScGIyNGdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBSRTlOVDNCMGFXOXVKeWs3WEc1MllYSWdVbVZoWTNSRVQwMVRaV3hsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFJFOU5VMlZzWldOMEp5azdYRzUyWVhJZ1VtVmhZM1JFVDAxVVpYaDBZWEpsWVNBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSRVQwMVVaWGgwWVhKbFlTY3BPMXh1ZG1GeUlGSmxZV04wVFc5MWJuUWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBUVzkxYm5RbktUdGNiblpoY2lCU1pXRmpkRTExYkhScFEyaHBiR1FnUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wVFhWc2RHbERhR2xzWkNjcE8xeHVkbUZ5SUZKbFlXTjBVR1Z5WmlBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSUVpYSm1KeWs3WEc1MllYSWdVbVZoWTNSVmNHUmhkR1ZSZFdWMVpTQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUlZjR1JoZEdWUmRXVjFaU2NwTzF4dVhHNTJZWElnWVhOemFXZHVJRDBnY21WeGRXbHlaU2duTGk5UFltcGxZM1F1WVhOemFXZHVKeWs3WEc1MllYSWdZMkZ1UkdWbWFXNWxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDJOaGJrUmxabWx1WlZCeWIzQmxjblI1SnlrN1hHNTJZWElnWlhOallYQmxWR1Y0ZEVOdmJuUmxiblJHYjNKQ2NtOTNjMlZ5SUQwZ2NtVnhkV2x5WlNnbkxpOWxjMk5oY0dWVVpYaDBRMjl1ZEdWdWRFWnZja0p5YjNkelpYSW5LVHRjYm5aaGNpQnBiblpoY21saGJuUWdQU0J5WlhGMWFYSmxLQ2RtWW1wekwyeHBZaTlwYm5aaGNtbGhiblFuS1R0Y2JuWmhjaUJwYzBWMlpXNTBVM1Z3Y0c5eWRHVmtJRDBnY21WeGRXbHlaU2duTGk5cGMwVjJaVzUwVTNWd2NHOXlkR1ZrSnlrN1hHNTJZWElnYTJWNVQyWWdQU0J5WlhGMWFYSmxLQ2RtWW1wekwyeHBZaTlyWlhsUFppY3BPMXh1ZG1GeUlITmxkRWx1Ym1WeVNGUk5UQ0E5SUhKbGNYVnBjbVVvSnk0dmMyVjBTVzV1WlhKSVZFMU1KeWs3WEc1MllYSWdjMlYwVkdWNGRFTnZiblJsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMM05sZEZSbGVIUkRiMjUwWlc1MEp5azdYRzUyWVhJZ2MyaGhiR3h2ZDBWeGRXRnNJRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2YzJoaGJHeHZkMFZ4ZFdGc0p5azdYRzUyWVhJZ2RtRnNhV1JoZEdWRVQwMU9aWE4wYVc1bklEMGdjbVZ4ZFdseVpTZ25MaTkyWVd4cFpHRjBaVVJQVFU1bGMzUnBibWNuS1R0Y2JuWmhjaUIzWVhKdWFXNW5JRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2ZDJGeWJtbHVaeWNwTzF4dVhHNTJZWElnWkdWc1pYUmxUR2x6ZEdWdVpYSWdQU0JTWldGamRFSnliM2R6WlhKRmRtVnVkRVZ0YVhSMFpYSXVaR1ZzWlhSbFRHbHpkR1Z1WlhJN1hHNTJZWElnYkdsemRHVnVWRzhnUFNCU1pXRmpkRUp5YjNkelpYSkZkbVZ1ZEVWdGFYUjBaWEl1YkdsemRHVnVWRzg3WEc1MllYSWdjbVZuYVhOMGNtRjBhVzl1VG1GdFpVMXZaSFZzWlhNZ1BTQlNaV0ZqZEVKeWIzZHpaWEpGZG1WdWRFVnRhWFIwWlhJdWNtVm5hWE4wY21GMGFXOXVUbUZ0WlUxdlpIVnNaWE03WEc1Y2JpOHZJRVp2Y2lCeGRXbGphMng1SUcxaGRHTm9hVzVuSUdOb2FXeGtjbVZ1SUhSNWNHVXNJSFJ2SUhSbGMzUWdhV1lnWTJGdUlHSmxJSFJ5WldGMFpXUWdZWE1nWTI5dWRHVnVkQzVjYm5aaGNpQkRUMDVVUlU1VVgxUlpVRVZUSUQwZ2V5QW5jM1J5YVc1bkp6b2dkSEoxWlN3Z0oyNTFiV0psY2ljNklIUnlkV1VnZlR0Y2JseHVkbUZ5SUVOSVNVeEVVa1ZPSUQwZ2EyVjVUMllvZXlCamFHbHNaSEpsYmpvZ2JuVnNiQ0I5S1R0Y2JuWmhjaUJUVkZsTVJTQTlJR3RsZVU5bUtIc2djM1I1YkdVNklHNTFiR3dnZlNrN1hHNTJZWElnU0ZSTlRDQTlJR3RsZVU5bUtIc2dYMTlvZEcxc09pQnVkV3hzSUgwcE8xeHVYRzUyWVhJZ1JVeEZUVVZPVkY5T1QwUkZYMVJaVUVVZ1BTQXhPMXh1WEc1bWRXNWpkR2x2YmlCblpYUkVaV05zWVhKaGRHbHZia1Z5Y205eVFXUmtaVzVrZFcwb2FXNTBaWEp1WVd4SmJuTjBZVzVqWlNrZ2UxeHVJQ0JwWmlBb2FXNTBaWEp1WVd4SmJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUhaaGNpQnZkMjVsY2lBOUlHbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVdVgyTjFjbkpsYm5SRmJHVnRaVzUwTGw5dmQyNWxjaUI4ZkNCdWRXeHNPMXh1SUNBZ0lHbG1JQ2h2ZDI1bGNpa2dlMXh1SUNBZ0lDQWdkbUZ5SUc1aGJXVWdQU0J2ZDI1bGNpNW5aWFJPWVcxbEtDazdYRzRnSUNBZ0lDQnBaaUFvYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKeUJVYUdseklFUlBUU0J1YjJSbElIZGhjeUJ5Wlc1a1pYSmxaQ0JpZVNCZ0p5QXJJRzVoYldVZ0t5QW5ZQzRuTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdKeWM3WEc1OVhHNWNiblpoY2lCc1pXZGhZM2xRY205d2MwUmxjMk55YVhCMGIzSTdYRzVwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNCc1pXZGhZM2xRY205d2MwUmxjMk55YVhCMGIzSWdQU0I3WEc0Z0lDQWdjSEp2Y0hNNklIdGNiaUFnSUNBZ0lHVnVkVzFsY21GaWJHVTZJR1poYkhObExGeHVJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqYjIxd2IyNWxiblFnUFNCMGFHbHpMbDl5WldGamRFbHVkR1Z5Ym1Gc1EyOXRjRzl1Wlc1ME8xeHVJQ0FnSUNBZ0lDQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnZDJGeWJtbHVaeWhtWVd4elpTd2dKMUpsWVdOMFJFOU5RMjl0Y0c5dVpXNTBPaUJFYnlCdWIzUWdZV05qWlhOeklDNXdjbTl3Y3lCdlppQmhJRVJQVFNCdWIyUmxPeUJwYm5OMFpXRmtMQ0FuSUNzZ0ozSmxZM0psWVhSbElIUm9aU0J3Y205d2N5QmhjeUJnY21WdVpHVnlZQ0JrYVdRZ2IzSnBaMmx1WVd4c2VTQnZjaUJ5WldGa0lIUm9aU0JFVDAwZ0p5QXJJQ2R3Y205d1pYSjBhV1Z6TDJGMGRISnBZblYwWlhNZ1pHbHlaV04wYkhrZ1puSnZiU0IwYUdseklHNXZaR1VnS0dVdVp5NHNJQ2NnS3lBbmRHaHBjeTV5WldaekxtSnZlQzVqYkdGemMwNWhiV1VwTGlWekp5d2daMlYwUkdWamJHRnlZWFJwYjI1RmNuSnZja0ZrWkdWdVpIVnRLR052YlhCdmJtVnVkQ2twSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXRjRzl1Wlc1MExsOWpkWEp5Wlc1MFJXeGxiV1Z1ZEM1d2NtOXdjenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUd4bFoyRmplVWRsZEVSUFRVNXZaR1VvS1NCN1hHNGdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ2RtRnlJR052YlhCdmJtVnVkQ0E5SUhSb2FYTXVYM0psWVdOMFNXNTBaWEp1WVd4RGIyMXdiMjVsYm5RN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb1ptRnNjMlVzSUNkU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZERvZ1JHOGdibTkwSUdGalkyVnpjeUF1WjJWMFJFOU5UbTlrWlNncElHOW1JR0VnUkU5TklHNXZaR1U3SUNjZ0t5QW5hVzV6ZEdWaFpDd2dkWE5sSUhSb1pTQnViMlJsSUdScGNtVmpkR3g1TGlWekp5d2daMlYwUkdWamJHRnlZWFJwYjI1RmNuSnZja0ZrWkdWdVpIVnRLR052YlhCdmJtVnVkQ2twSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGFHbHpPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnNaV2RoWTNsSmMwMXZkVzUwWldRb0tTQjdYRzRnSUhaaGNpQmpiMjF3YjI1bGJuUWdQU0IwYUdsekxsOXlaV0ZqZEVsdWRHVnlibUZzUTI5dGNHOXVaVzUwTzF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktHWmhiSE5sTENBblVtVmhZM1JFVDAxRGIyMXdiMjVsYm5RNklFUnZJRzV2ZENCaFkyTmxjM01nTG1selRXOTFiblJsWkNncElHOW1JR0VnUkU5TklHNXZaR1V1SlhNbkxDQm5aWFJFWldOc1lYSmhkR2x2YmtWeWNtOXlRV1JrWlc1a2RXMG9ZMjl0Y0c5dVpXNTBLU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUNFaFkyOXRjRzl1Wlc1ME8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCc1pXZGhZM2xUWlhSVGRHRjBaVVYwWXlncElIdGNiaUFnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQjJZWElnWTI5dGNHOXVaVzUwSUQwZ2RHaHBjeTVmY21WaFkzUkpiblJsY201aGJFTnZiWEJ2Ym1WdWREdGNiaUFnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5aG1ZV3h6WlN3Z0oxSmxZV04wUkU5TlEyOXRjRzl1Wlc1ME9pQkVieUJ1YjNRZ1lXTmpaWE56SUM1elpYUlRkR0YwWlNncExDQXVjbVZ3YkdGalpWTjBZWFJsS0Nrc0lHOXlJQ2NnS3lBbkxtWnZjbU5sVlhCa1lYUmxLQ2tnYjJZZ1lTQkVUMDBnYm05a1pTNGdWR2hwY3lCcGN5QmhJRzV2TFc5d0xpVnpKeXdnWjJWMFJHVmpiR0Z5WVhScGIyNUZjbkp2Y2tGa1pHVnVaSFZ0S0dOdmJYQnZibVZ1ZENrcElEb2dkVzVrWldacGJtVmtPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUd4bFoyRmplVk5sZEZCeWIzQnpLSEJoY25ScFlXeFFjbTl3Y3l3Z1kyRnNiR0poWTJzcElIdGNiaUFnZG1GeUlHTnZiWEJ2Ym1WdWRDQTlJSFJvYVhNdVgzSmxZV04wU1c1MFpYSnVZV3hEYjIxd2IyNWxiblE3WEc0Z0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb1ptRnNjMlVzSUNkU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZERvZ1JHOGdibTkwSUdGalkyVnpjeUF1YzJWMFVISnZjSE1vS1NCdlppQmhJRVJQVFNCdWIyUmxMaUFuSUNzZ0owbHVjM1JsWVdRc0lHTmhiR3dnVW1WaFkzUkVUMDB1Y21WdVpHVnlJR0ZuWVdsdUlHRjBJSFJvWlNCMGIzQWdiR1YyWld3dUpYTW5MQ0JuWlhSRVpXTnNZWEpoZEdsdmJrVnljbTl5UVdSa1pXNWtkVzBvWTI5dGNHOXVaVzUwS1NrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JpQWdhV1lnS0NGamIyMXdiMjVsYm5RcElIdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNiaUFnVW1WaFkzUlZjR1JoZEdWUmRXVjFaUzVsYm5GMVpYVmxVMlYwVUhKdmNITkpiblJsY201aGJDaGpiMjF3YjI1bGJuUXNJSEJoY25ScFlXeFFjbTl3Y3lrN1hHNGdJR2xtSUNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUZKbFlXTjBWWEJrWVhSbFVYVmxkV1V1Wlc1eGRXVjFaVU5oYkd4aVlXTnJTVzUwWlhKdVlXd29ZMjl0Y0c5dVpXNTBMQ0JqWVd4c1ltRmpheWs3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2JHVm5ZV041VW1Wd2JHRmpaVkJ5YjNCektIQmhjblJwWVd4UWNtOXdjeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdkbUZ5SUdOdmJYQnZibVZ1ZENBOUlIUm9hWE11WDNKbFlXTjBTVzUwWlhKdVlXeERiMjF3YjI1bGJuUTdYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUhkaGNtNXBibWNvWm1Gc2MyVXNJQ2RTWldGamRFUlBUVU52YlhCdmJtVnVkRG9nUkc4Z2JtOTBJR0ZqWTJWemN5QXVjbVZ3YkdGalpWQnliM0J6S0NrZ2IyWWdZU0JFVDAwZ2JtOWtaUzRnSnlBcklDZEpibk4wWldGa0xDQmpZV3hzSUZKbFlXTjBSRTlOTG5KbGJtUmxjaUJoWjJGcGJpQmhkQ0IwYUdVZ2RHOXdJR3hsZG1Wc0xpVnpKeXdnWjJWMFJHVmpiR0Z5WVhScGIyNUZjbkp2Y2tGa1pHVnVaSFZ0S0dOdmJYQnZibVZ1ZENrcElEb2dkVzVrWldacGJtVmtPMXh1SUNCOVhHNGdJR2xtSUNnaFkyOXRjRzl1Wlc1MEtTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzRnSUZKbFlXTjBWWEJrWVhSbFVYVmxkV1V1Wlc1eGRXVjFaVkpsY0d4aFkyVlFjbTl3YzBsdWRHVnlibUZzS0dOdmJYQnZibVZ1ZEN3Z2NHRnlkR2xoYkZCeWIzQnpLVHRjYmlBZ2FXWWdLR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdVbVZoWTNSVmNHUmhkR1ZSZFdWMVpTNWxibkYxWlhWbFEyRnNiR0poWTJ0SmJuUmxjbTVoYkNoamIyMXdiMjVsYm5Rc0lHTmhiR3hpWVdOcktUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJtY21sbGJtUnNlVk4wY21sdVoybG1lU2h2WW1vcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCdlltb2dQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYjJKcUtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDZGJKeUFySUc5aWFpNXRZWEFvWm5KcFpXNWtiSGxUZEhKcGJtZHBabmtwTG1wdmFXNG9KeXdnSnlrZ0t5QW5YU2M3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIWmhjaUJ3WVdseWN5QTlJRnRkTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRzlpYWlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFpd2dhMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCclpYbEZjMk5oY0dWa0lEMGdMMTViWVMxNkpGOWRXMXhjZHlSZlhTb2tMMmt1ZEdWemRDaHJaWGtwSUQ4Z2EyVjVJRG9nU2xOUFRpNXpkSEpwYm1kcFpua29hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQndZV2x5Y3k1d2RYTm9LR3RsZVVWelkyRndaV1FnS3lBbk9pQW5JQ3NnWm5KcFpXNWtiSGxUZEhKcGJtZHBabmtvYjJKcVcydGxlVjBwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUNkN0p5QXJJSEJoYVhKekxtcHZhVzRvSnl3Z0p5a2dLeUFuZlNjN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnZZbW9nUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUVwVFQwNHVjM1J5YVc1bmFXWjVLRzlpYWlrN1hHNGdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JRzlpYWlBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSEpsZEhWeWJpQW5XMloxYm1OMGFXOXVJRzlpYW1WamRGMG5PMXh1SUNCOVhHNGdJQzh2SUVScFptWmxjbk1nWm5KdmJTQktVMDlPTG5OMGNtbHVaMmxtZVNCcGJpQjBhR0YwSUhWdVpHVm1hVzVsWkNCaVpXTmhkWE5sY3lCMWJtUmxabWx1WldRZ1lXNWtJSFJvWVhSY2JpQWdMeThnYVc1bUlHRnVaQ0J1WVc0Z1pHOXVKM1FnWW1WamIyMWxJRzUxYkd4Y2JpQWdjbVYwZFhKdUlGTjBjbWx1Wnlodlltb3BPMXh1ZlZ4dVhHNTJZWElnYzNSNWJHVk5kWFJoZEdsdmJsZGhjbTVwYm1jZ1BTQjdmVHRjYmx4dVpuVnVZM1JwYjI0Z1kyaGxZMnRCYm1SWFlYSnVSbTl5VFhWMFlYUmxaRk4wZVd4bEtITjBlV3hsTVN3Z2MzUjViR1V5TENCamIyMXdiMjVsYm5RcElIdGNiaUFnYVdZZ0tITjBlV3hsTVNBOVBTQnVkV3hzSUh4OElITjBlV3hsTWlBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNGdJR2xtSUNoemFHRnNiRzkzUlhGMVlXd29jM1I1YkdVeExDQnpkSGxzWlRJcEtTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzVjYmlBZ2RtRnlJR052YlhCdmJtVnVkRTVoYldVZ1BTQmpiMjF3YjI1bGJuUXVYM1JoWnp0Y2JpQWdkbUZ5SUc5M2JtVnlJRDBnWTI5dGNHOXVaVzUwTGw5amRYSnlaVzUwUld4bGJXVnVkQzVmYjNkdVpYSTdYRzRnSUhaaGNpQnZkMjVsY2s1aGJXVTdYRzRnSUdsbUlDaHZkMjVsY2lrZ2UxeHVJQ0FnSUc5M2JtVnlUbUZ0WlNBOUlHOTNibVZ5TG1kbGRFNWhiV1VvS1R0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJvWVhOb0lEMGdiM2R1WlhKT1lXMWxJQ3NnSjN3bklDc2dZMjl0Y0c5dVpXNTBUbUZ0WlR0Y2JseHVJQ0JwWmlBb2MzUjViR1ZOZFhSaGRHbHZibGRoY201cGJtY3VhR0Z6VDNkdVVISnZjR1Z5ZEhrb2FHRnphQ2twSUh0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0J6ZEhsc1pVMTFkR0YwYVc5dVYyRnlibWx1WjF0b1lYTm9YU0E5SUhSeWRXVTdYRzVjYmlBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29abUZzYzJVc0lDZGdKWE5nSUhkaGN5QndZWE56WldRZ1lTQnpkSGxzWlNCdlltcGxZM1FnZEdoaGRDQm9ZWE1nY0hKbGRtbHZkWE5zZVNCaVpXVnVJRzExZEdGMFpXUXVJQ2NnS3lBblRYVjBZWFJwYm1jZ1lITjBlV3hsWUNCcGN5QmtaWEJ5WldOaGRHVmtMaUJEYjI1emFXUmxjaUJqYkc5dWFXNW5JR2wwSUdKbFptOXlaV2hoYm1RdUlFTm9aV05ySUNjZ0t5QW5kR2hsSUdCeVpXNWtaWEpnSUNWekxpQlFjbVYyYVc5MWN5QnpkSGxzWlRvZ0pYTXVJRTExZEdGMFpXUWdjM1I1YkdVNklDVnpMaWNzSUdOdmJYQnZibVZ1ZEU1aGJXVXNJRzkzYm1WeUlEOGdKMjltSUdBbklDc2diM2R1WlhKT1lXMWxJQ3NnSjJBbklEb2dKM1Z6YVc1bklEd25JQ3NnWTI5dGNHOXVaVzUwVG1GdFpTQXJJQ2MrSnl3Z1puSnBaVzVrYkhsVGRISnBibWRwWm5rb2MzUjViR1V4S1N3Z1puSnBaVzVrYkhsVGRISnBibWRwWm5rb2MzUjViR1V5S1NrZ09pQjFibVJsWm1sdVpXUTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUdOdmJYQnZibVZ1ZEZ4dUlDb2dRSEJoY21GdElIcy9iMkpxWldOMGZTQndjbTl3YzF4dUlDb3ZYRzVtZFc1amRHbHZiaUJoYzNObGNuUldZV3hwWkZCeWIzQnpLR052YlhCdmJtVnVkQ3dnY0hKdmNITXBJSHRjYmlBZ2FXWWdLQ0Z3Y205d2N5a2dlMXh1SUNBZ0lISmxkSFZ5Ymp0Y2JpQWdmVnh1SUNBdkx5Qk9iM1JsSUhSb1pTQjFjMlVnYjJZZ1lEMDlZQ0IzYUdsamFDQmphR1ZqYTNNZ1ptOXlJRzUxYkd3Z2IzSWdkVzVrWldacGJtVmtMbHh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR2xtSUNoMmIybGtSV3hsYldWdWRGUmhaM05iWTI5dGNHOXVaVzUwTGw5MFlXZGRLU0I3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1Wnlod2NtOXdjeTVqYUdsc1pISmxiaUE5UFNCdWRXeHNJQ1ltSUhCeWIzQnpMbVJoYm1kbGNtOTFjMng1VTJWMFNXNXVaWEpJVkUxTUlEMDlJRzUxYkd3c0lDY2xjeUJwY3lCaElIWnZhV1FnWld4bGJXVnVkQ0IwWVdjZ1lXNWtJRzExYzNRZ2JtOTBJR2hoZG1VZ1lHTm9hV3hrY21WdVlDQnZjaUFuSUNzZ0ozVnpaU0JnY0hKdmNITXVaR0Z1WjJWeWIzVnpiSGxUWlhSSmJtNWxja2hVVFV4Z0xpVnpKeXdnWTI5dGNHOXVaVzUwTGw5MFlXY3NJR052YlhCdmJtVnVkQzVmWTNWeWNtVnVkRVZzWlcxbGJuUXVYMjkzYm1WeUlEOGdKeUJEYUdWamF5QjBhR1VnY21WdVpHVnlJRzFsZEdodlpDQnZaaUFuSUNzZ1kyOXRjRzl1Wlc1MExsOWpkWEp5Wlc1MFJXeGxiV1Z1ZEM1ZmIzZHVaWEl1WjJWMFRtRnRaU2dwSUNzZ0p5NG5JRG9nSnljcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnBaaUFvY0hKdmNITXVaR0Z1WjJWeWIzVnpiSGxUWlhSSmJtNWxja2hVVFV3Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNFb2NISnZjSE11WTJocGJHUnlaVzRnUFQwZ2JuVnNiQ2tnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5RMkZ1SUc5dWJIa2djMlYwSUc5dVpTQnZaaUJnWTJocGJHUnlaVzVnSUc5eUlHQndjbTl3Y3k1a1lXNW5aWEp2ZFhOc2VWTmxkRWx1Ym1WeVNGUk5UR0F1SnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDRW9kSGx3Wlc5bUlIQnliM0J6TG1SaGJtZGxjbTkxYzJ4NVUyVjBTVzV1WlhKSVZFMU1JRDA5UFNBbmIySnFaV04wSnlBbUppQklWRTFNSUdsdUlIQnliM0J6TG1SaGJtZGxjbTkxYzJ4NVUyVjBTVzV1WlhKSVZFMU1LU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZGdjSEp2Y0hNdVpHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXhnSUcxMWMzUWdZbVVnYVc0Z2RHaGxJR1p2Y20wZ1lIdGZYMmgwYld3NklDNHVMbjFnTGlBbklDc2dKMUJzWldGelpTQjJhWE5wZENCb2RIUndjem92TDJaaUxtMWxMM0psWVdOMExXbHVkbUZ5YVdGdWRDMWtZVzVuWlhKdmRYTnNlUzF6WlhRdGFXNXVaWEl0YUhSdGJDQW5JQ3NnSjJadmNpQnRiM0psSUdsdVptOXliV0YwYVc5dUxpY3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdmVnh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCM1lYSnVhVzVuS0hCeWIzQnpMbWx1Ym1WeVNGUk5UQ0E5UFNCdWRXeHNMQ0FuUkdseVpXTjBiSGtnYzJWMGRHbHVaeUJ3Y205d1pYSjBlU0JnYVc1dVpYSklWRTFNWUNCcGN5QnViM1FnY0dWeWJXbDBkR1ZrTGlBbklDc2dKMFp2Y2lCdGIzSmxJR2x1Wm05eWJXRjBhVzl1TENCc2IyOXJkWEFnWkc5amRXMWxiblJoZEdsdmJpQnZiaUJnWkdGdVoyVnliM1Z6YkhsVFpYUkpibTVsY2toVVRVeGdMaWNwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktDRndjbTl3Y3k1amIyNTBaVzUwUldScGRHRmliR1VnZkh3Z2NISnZjSE11WTJocGJHUnlaVzRnUFQwZ2JuVnNiQ3dnSjBFZ1kyOXRjRzl1Wlc1MElHbHpJR0JqYjI1MFpXNTBSV1JwZEdGaWJHVmdJR0Z1WkNCamIyNTBZV2x1Y3lCZ1kyaHBiR1J5Wlc1Z0lHMWhibUZuWldRZ1lua2dKeUFySUNkU1pXRmpkQzRnU1hRZ2FYTWdibTkzSUhsdmRYSWdjbVZ6Y0c5dWMybGlhV3hwZEhrZ2RHOGdaM1ZoY21GdWRHVmxJSFJvWVhRZ2JtOXVaU0J2WmlBbklDc2dKM1JvYjNObElHNXZaR1Z6SUdGeVpTQjFibVY0Y0dWamRHVmtiSGtnYlc5a2FXWnBaV1FnYjNJZ1pIVndiR2xqWVhSbFpDNGdWR2hwY3lCcGN5QW5JQ3NnSjNCeWIySmhZbXg1SUc1dmRDQnBiblJsYm5ScGIyNWhiQzRuS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnZlZ4dUlDQWhLSEJ5YjNCekxuTjBlV3hsSUQwOUlHNTFiR3dnZkh3Z2RIbHdaVzltSUhCeWIzQnpMbk4wZVd4bElEMDlQU0FuYjJKcVpXTjBKeWtnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5WR2hsSUdCemRIbHNaV0FnY0hKdmNDQmxlSEJsWTNSeklHRWdiV0Z3Y0dsdVp5Qm1jbTl0SUhOMGVXeGxJSEJ5YjNCbGNuUnBaWE1nZEc4Z2RtRnNkV1Z6TENBbklDc2dKMjV2ZENCaElITjBjbWx1Wnk0Z1JtOXlJR1Y0WVcxd2JHVXNJSE4wZVd4bFBYdDdiV0Z5WjJsdVVtbG5hSFE2SUhOd1lXTnBibWNnS3lCY1hDZGxiVnhjSjMxOUlIZG9aVzRnSnlBcklDZDFjMmx1WnlCS1UxZ3VKWE1uTENCblpYUkVaV05zWVhKaGRHbHZia1Z5Y205eVFXUmtaVzVrZFcwb1kyOXRjRzl1Wlc1MEtTa2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJsYm5GMVpYVmxVSFYwVEdsemRHVnVaWElvYVdRc0lISmxaMmx6ZEhKaGRHbHZiazVoYldVc0lHeHBjM1JsYm1WeUxDQjBjbUZ1YzJGamRHbHZiaWtnZTF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUM4dklFbEZPQ0JvWVhNZ2JtOGdRVkJKSUdadmNpQmxkbVZ1ZENCallYQjBkWEpwYm1jZ1lXNWtJSFJvWlNCZ2IyNVRZM0p2Ykd4Z0lHVjJaVzUwSUdSdlpYTnVKM1JjYmlBZ0lDQXZMeUJpZFdKaWJHVXVYRzRnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29jbVZuYVhOMGNtRjBhVzl1VG1GdFpTQWhQVDBnSjI5dVUyTnliMnhzSnlCOGZDQnBjMFYyWlc1MFUzVndjRzl5ZEdWa0tDZHpZM0p2Ykd3bkxDQjBjblZsS1N3Z0oxUm9hWE1nWW5KdmQzTmxjaUJrYjJWemJseGNKM1FnYzNWd2NHOXlkQ0IwYUdVZ1lHOXVVMk55YjJ4c1lDQmxkbVZ1ZENjcElEb2dkVzVrWldacGJtVmtPMXh1SUNCOVhHNGdJSFpoY2lCamIyNTBZV2x1WlhJZ1BTQlNaV0ZqZEUxdmRXNTBMbVpwYm1SU1pXRmpkRU52Ym5SaGFXNWxja1p2Y2tsRUtHbGtLVHRjYmlBZ2FXWWdLR052Ym5SaGFXNWxjaWtnZTF4dUlDQWdJSFpoY2lCa2IyTWdQU0JqYjI1MFlXbHVaWEl1Ym05a1pWUjVjR1VnUFQwOUlFVk1SVTFGVGxSZlRrOUVSVjlVV1ZCRklEOGdZMjl1ZEdGcGJtVnlMbTkzYm1WeVJHOWpkVzFsYm5RZ09pQmpiMjUwWVdsdVpYSTdYRzRnSUNBZ2JHbHpkR1Z1Vkc4b2NtVm5hWE4wY21GMGFXOXVUbUZ0WlN3Z1pHOWpLVHRjYmlBZ2ZWeHVJQ0IwY21GdWMyRmpkR2x2Ymk1blpYUlNaV0ZqZEUxdmRXNTBVbVZoWkhrb0tTNWxibkYxWlhWbEtIQjFkRXhwYzNSbGJtVnlMQ0I3WEc0Z0lDQWdhV1E2SUdsa0xGeHVJQ0FnSUhKbFoybHpkSEpoZEdsdmJrNWhiV1U2SUhKbFoybHpkSEpoZEdsdmJrNWhiV1VzWEc0Z0lDQWdiR2x6ZEdWdVpYSTZJR3hwYzNSbGJtVnlYRzRnSUgwcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCd2RYUk1hWE4wWlc1bGNpZ3BJSHRjYmlBZ2RtRnlJR3hwYzNSbGJtVnlWRzlRZFhRZ1BTQjBhR2x6TzF4dUlDQlNaV0ZqZEVKeWIzZHpaWEpGZG1WdWRFVnRhWFIwWlhJdWNIVjBUR2x6ZEdWdVpYSW9iR2x6ZEdWdVpYSlViMUIxZEM1cFpDd2diR2x6ZEdWdVpYSlViMUIxZEM1eVpXZHBjM1J5WVhScGIyNU9ZVzFsTENCc2FYTjBaVzVsY2xSdlVIVjBMbXhwYzNSbGJtVnlLVHRjYm4xY2JseHVMeThnVkdobGNtVWdZWEpsSUhOdklHMWhibmtnYldWa2FXRWdaWFpsYm5SekxDQnBkQ0J0WVd0bGN5QnpaVzV6WlNCMGJ5QnFkWE4wWEc0dkx5QnRZV2x1ZEdGcGJpQmhJR3hwYzNRZ2NtRjBhR1Z5SUhSb1lXNGdZM0psWVhSbElHRWdZSFJ5WVhCQ2RXSmliR1ZrUlhabGJuUmdJR1p2Y2lCbFlXTm9YRzUyWVhJZ2JXVmthV0ZGZG1WdWRITWdQU0I3WEc0Z0lIUnZjRUZpYjNKME9pQW5ZV0p2Y25RbkxGeHVJQ0IwYjNCRFlXNVFiR0Y1T2lBblkyRnVjR3hoZVNjc1hHNGdJSFJ2Y0VOaGJsQnNZWGxVYUhKdmRXZG9PaUFuWTJGdWNHeGhlWFJvY205MVoyZ25MRnh1SUNCMGIzQkVkWEpoZEdsdmJrTm9ZVzVuWlRvZ0oyUjFjbUYwYVc5dVkyaGhibWRsSnl4Y2JpQWdkRzl3Ulcxd2RHbGxaRG9nSjJWdGNIUnBaV1FuTEZ4dUlDQjBiM0JGYm1OeWVYQjBaV1E2SUNkbGJtTnllWEIwWldRbkxGeHVJQ0IwYjNCRmJtUmxaRG9nSjJWdVpHVmtKeXhjYmlBZ2RHOXdSWEp5YjNJNklDZGxjbkp2Y2ljc1hHNGdJSFJ2Y0V4dllXUmxaRVJoZEdFNklDZHNiMkZrWldSa1lYUmhKeXhjYmlBZ2RHOXdURzloWkdWa1RXVjBZV1JoZEdFNklDZHNiMkZrWldSdFpYUmhaR0YwWVNjc1hHNGdJSFJ2Y0V4dllXUlRkR0Z5ZERvZ0oyeHZZV1J6ZEdGeWRDY3NYRzRnSUhSdmNGQmhkWE5sT2lBbmNHRjFjMlVuTEZ4dUlDQjBiM0JRYkdGNU9pQW5jR3hoZVNjc1hHNGdJSFJ2Y0ZCc1lYbHBibWM2SUNkd2JHRjVhVzVuSnl4Y2JpQWdkRzl3VUhKdlozSmxjM002SUNkd2NtOW5jbVZ6Y3ljc1hHNGdJSFJ2Y0ZKaGRHVkRhR0Z1WjJVNklDZHlZWFJsWTJoaGJtZGxKeXhjYmlBZ2RHOXdVMlZsYTJWa09pQW5jMlZsYTJWa0p5eGNiaUFnZEc5d1UyVmxhMmx1WnpvZ0ozTmxaV3RwYm1jbkxGeHVJQ0IwYjNCVGRHRnNiR1ZrT2lBbmMzUmhiR3hsWkNjc1hHNGdJSFJ2Y0ZOMWMzQmxibVE2SUNkemRYTndaVzVrSnl4Y2JpQWdkRzl3VkdsdFpWVndaR0YwWlRvZ0ozUnBiV1YxY0dSaGRHVW5MRnh1SUNCMGIzQldiMngxYldWRGFHRnVaMlU2SUNkMmIyeDFiV1ZqYUdGdVoyVW5MRnh1SUNCMGIzQlhZV2wwYVc1bk9pQW5kMkZwZEdsdVp5ZGNibjA3WEc1Y2JtWjFibU4wYVc5dUlIUnlZWEJDZFdKaWJHVmtSWFpsYm5SelRHOWpZV3dvS1NCN1hHNGdJSFpoY2lCcGJuTjBJRDBnZEdocGN6dGNiaUFnTHk4Z1NXWWdZU0JqYjIxd2IyNWxiblFnY21WdVpHVnljeUIwYnlCdWRXeHNJRzl5SUdsbUlHRnViM1JvWlhJZ1kyOXRjRzl1Wlc1MElHWmhkR0ZzY3lCaGJtUWdZMkYxYzJWelhHNGdJQzh2SUhSb1pTQnpkR0YwWlNCdlppQjBhR1VnZEhKbFpTQjBieUJpWlNCamIzSnlkWEIwWldRc0lHQnViMlJsWUNCb1pYSmxJR05oYmlCaVpTQnVkV3hzTGx4dUlDQWhhVzV6ZEM1ZmNtOXZkRTV2WkdWSlJDQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkTmRYTjBJR0psSUcxdmRXNTBaV1FnZEc4Z2RISmhjQ0JsZG1WdWRITW5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJSFpoY2lCdWIyUmxJRDBnVW1WaFkzUk5iM1Z1ZEM1blpYUk9iMlJsS0dsdWMzUXVYM0p2YjNST2IyUmxTVVFwTzF4dUlDQWhibTlrWlNBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2QwY21Gd1FuVmlZbXhsWkVWMlpXNTBLQzR1TGlrNklGSmxjWFZwY21WeklHNXZaR1VnZEc4Z1ltVWdjbVZ1WkdWeVpXUXVKeWtnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUhOM2FYUmphQ0FvYVc1emRDNWZkR0ZuS1NCN1hHNGdJQ0FnWTJGelpTQW5hV1p5WVcxbEp6cGNiaUFnSUNBZ0lHbHVjM1F1WDNkeVlYQndaWEpUZEdGMFpTNXNhWE4wWlc1bGNuTWdQU0JiVW1WaFkzUkNjbTkzYzJWeVJYWmxiblJGYldsMGRHVnlMblJ5WVhCQ2RXSmliR1ZrUlhabGJuUW9SWFpsYm5SRGIyNXpkR0Z1ZEhNdWRHOXdUR1YyWld4VWVYQmxjeTUwYjNCTWIyRmtMQ0FuYkc5aFpDY3NJRzV2WkdVcFhUdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0ozWnBaR1Z2SnpwY2JpQWdJQ0JqWVhObElDZGhkV1JwYnljNlhHNWNiaUFnSUNBZ0lHbHVjM1F1WDNkeVlYQndaWEpUZEdGMFpTNXNhWE4wWlc1bGNuTWdQU0JiWFR0Y2JpQWdJQ0FnSUM4dklHTnlaV0YwWlNCc2FYTjBaVzVsY2lCbWIzSWdaV0ZqYUNCdFpXUnBZU0JsZG1WdWRGeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1pYWmxiblFnYVc0Z2JXVmthV0ZGZG1WdWRITXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHMWxaR2xoUlhabGJuUnpMbWhoYzA5M2JsQnliM0JsY25SNUtHVjJaVzUwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2x1YzNRdVgzZHlZWEJ3WlhKVGRHRjBaUzVzYVhOMFpXNWxjbk11Y0hWemFDaFNaV0ZqZEVKeWIzZHpaWEpGZG1WdWRFVnRhWFIwWlhJdWRISmhjRUoxWW1Kc1pXUkZkbVZ1ZENoRmRtVnVkRU52Ym5OMFlXNTBjeTUwYjNCTVpYWmxiRlI1Y0dWelcyVjJaVzUwWFN3Z2JXVmthV0ZGZG1WdWRITmJaWFpsYm5SZExDQnViMlJsS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWTJGelpTQW5hVzFuSnpwY2JpQWdJQ0FnSUdsdWMzUXVYM2R5WVhCd1pYSlRkR0YwWlM1c2FYTjBaVzVsY25NZ1BTQmJVbVZoWTNSQ2NtOTNjMlZ5UlhabGJuUkZiV2wwZEdWeUxuUnlZWEJDZFdKaWJHVmtSWFpsYm5Rb1JYWmxiblJEYjI1emRHRnVkSE11ZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JGY25KdmNpd2dKMlZ5Y205eUp5d2dibTlrWlNrc0lGSmxZV04wUW5KdmQzTmxja1YyWlc1MFJXMXBkSFJsY2k1MGNtRndRblZpWW14bFpFVjJaVzUwS0VWMlpXNTBRMjl1YzNSaGJuUnpMblJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdURzloWkN3Z0oyeHZZV1FuTENCdWIyUmxLVjA3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCallYTmxJQ2RtYjNKdEp6cGNiaUFnSUNBZ0lHbHVjM1F1WDNkeVlYQndaWEpUZEdGMFpTNXNhWE4wWlc1bGNuTWdQU0JiVW1WaFkzUkNjbTkzYzJWeVJYWmxiblJGYldsMGRHVnlMblJ5WVhCQ2RXSmliR1ZrUlhabGJuUW9SWFpsYm5SRGIyNXpkR0Z1ZEhNdWRHOXdUR1YyWld4VWVYQmxjeTUwYjNCU1pYTmxkQ3dnSjNKbGMyVjBKeXdnYm05a1pTa3NJRkpsWVdOMFFuSnZkM05sY2tWMlpXNTBSVzFwZEhSbGNpNTBjbUZ3UW5WaVlteGxaRVYyWlc1MEtFVjJaVzUwUTI5dWMzUmhiblJ6TG5SdmNFeGxkbVZzVkhsd1pYTXVkRzl3VTNWaWJXbDBMQ0FuYzNWaWJXbDBKeXdnYm05a1pTbGRPMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdiVzkxYm5SU1pXRmtlVWx1Y0hWMFYzSmhjSEJsY2lncElIdGNiaUFnVW1WaFkzUkVUMDFKYm5CMWRDNXRiM1Z1ZEZKbFlXUjVWM0poY0hCbGNpaDBhR2x6S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY0c5emRGVndaR0YwWlZObGJHVmpkRmR5WVhCd1pYSW9LU0I3WEc0Z0lGSmxZV04wUkU5TlUyVnNaV04wTG5CdmMzUlZjR1JoZEdWWGNtRndjR1Z5S0hSb2FYTXBPMXh1ZlZ4dVhHNHZMeUJHYjNJZ1NGUk5UQ3dnWTJWeWRHRnBiaUIwWVdkeklITm9iM1ZzWkNCdmJXbDBJSFJvWldseUlHTnNiM05sSUhSaFp5NGdWMlVnYTJWbGNDQmhJSGRvYVhSbGJHbHpkQ0JtYjNKY2JpOHZJSFJvYjNObElITndaV05wWVd3Z1kyRnpaV1FnZEdGbmN5NWNibHh1ZG1GeUlHOXRhWFIwWldSRGJHOXpaVlJoWjNNZ1BTQjdYRzRnSUNkaGNtVmhKem9nZEhKMVpTeGNiaUFnSjJKaGMyVW5PaUIwY25WbExGeHVJQ0FuWW5Jbk9pQjBjblZsTEZ4dUlDQW5ZMjlzSnpvZ2RISjFaU3hjYmlBZ0oyVnRZbVZrSnpvZ2RISjFaU3hjYmlBZ0oyaHlKem9nZEhKMVpTeGNiaUFnSjJsdFp5YzZJSFJ5ZFdVc1hHNGdJQ2RwYm5CMWRDYzZJSFJ5ZFdVc1hHNGdJQ2RyWlhsblpXNG5PaUIwY25WbExGeHVJQ0FuYkdsdWF5YzZJSFJ5ZFdVc1hHNGdJQ2R0WlhSaEp6b2dkSEoxWlN4Y2JpQWdKM0JoY21GdEp6b2dkSEoxWlN4Y2JpQWdKM052ZFhKalpTYzZJSFJ5ZFdVc1hHNGdJQ2QwY21GamF5YzZJSFJ5ZFdVc1hHNGdJQ2QzWW5Jbk9pQjBjblZsWEc1OU8xeHVYRzR2THlCT1QxUkZPaUJ0Wlc1MWFYUmxiU2R6SUdOc2IzTmxJSFJoWnlCemFHOTFiR1FnWW1VZ2IyMXBkSFJsWkN3Z1luVjBJSFJvWVhRZ1kyRjFjMlZ6SUhCeWIySnNaVzF6TGx4dWRtRnlJRzVsZDJ4cGJtVkZZWFJwYm1kVVlXZHpJRDBnZTF4dUlDQW5iR2x6ZEdsdVp5YzZJSFJ5ZFdVc1hHNGdJQ2R3Y21Vbk9pQjBjblZsTEZ4dUlDQW5kR1Y0ZEdGeVpXRW5PaUIwY25WbFhHNTlPMXh1WEc0dkx5QkdiM0lnU0ZSTlRDd2dZMlZ5ZEdGcGJpQjBZV2R6SUdOaGJtNXZkQ0JvWVhabElHTm9hV3hrY21WdUxpQlVhR2x6SUdoaGN5QjBhR1VnYzJGdFpTQndkWEp3YjNObElHRnpYRzR2THlCZ2IyMXBkSFJsWkVOc2IzTmxWR0ZuYzJBZ1pYaGpaWEIwSUhSb1lYUWdZRzFsYm5WcGRHVnRZQ0J6YUc5MWJHUWdjM1JwYkd3Z2FHRjJaU0JwZEhNZ1kyeHZjMmx1WnlCMFlXY3VYRzVjYm5aaGNpQjJiMmxrUld4bGJXVnVkRlJoWjNNZ1BTQmhjM05wWjI0b2UxeHVJQ0FuYldWdWRXbDBaVzBuT2lCMGNuVmxYRzU5TENCdmJXbDBkR1ZrUTJ4dmMyVlVZV2R6S1R0Y2JseHVMeThnVjJVZ1lXTmpaWEIwSUdGdWVTQjBZV2NnZEc4Z1ltVWdjbVZ1WkdWeVpXUWdZblYwSUhOcGJtTmxJSFJvYVhNZ1oyVjBjeUJwYm1wbFkzUmxaQ0JwYm5SdklHRnlZbWwwY21GeWVWeHVMeThnU0ZSTlRDd2dkMlVnZDJGdWRDQjBieUJ0WVd0bElITjFjbVVnZEdoaGRDQnBkQ2R6SUdFZ2MyRm1aU0IwWVdjdVhHNHZMeUJvZEhSd09pOHZkM2QzTG5jekxtOXlaeTlVVWk5U1JVTXRlRzFzTHlOT1ZDMU9ZVzFsWEc1Y2JuWmhjaUJXUVV4SlJGOVVRVWRmVWtWSFJWZ2dQU0F2WGx0aExYcEJMVnBkVzJFdGVrRXRXanBmWEZ3dVhGd3RYRnhrWFNva0x6c2dMeThnVTJsdGNHeHBabWxsWkNCemRXSnpaWFJjYm5aaGNpQjJZV3hwWkdGMFpXUlVZV2REWVdOb1pTQTlJSHQ5TzF4dWRtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdLSHQ5S1M1b1lYTlBkMjVRY205d1pYSjBlVHRjYmx4dVpuVnVZM1JwYjI0Z2RtRnNhV1JoZEdWRVlXNW5aWEp2ZFhOVVlXY29kR0ZuS1NCN1hHNGdJR2xtSUNnaGFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaDJZV3hwWkdGMFpXUlVZV2REWVdOb1pTd2dkR0ZuS1NrZ2UxeHVJQ0FnSUNGV1FVeEpSRjlVUVVkZlVrVkhSVmd1ZEdWemRDaDBZV2NwSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMGx1ZG1Gc2FXUWdkR0ZuT2lBbGN5Y3NJSFJoWnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lIWmhiR2xrWVhSbFpGUmhaME5oWTJobFczUmhaMTBnUFNCMGNuVmxPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeWIyTmxjM05EYUdsc1pFTnZiblJsZUhSRVpYWW9ZMjl1ZEdWNGRDd2dhVzV6ZENrZ2UxeHVJQ0F2THlCUVlYTnpJR1J2ZDI0Z2IzVnlJSFJoWnlCdVlXMWxJSFJ2SUdOb2FXeGtJR052YlhCdmJtVnVkSE1nWm05eUlIWmhiR2xrWVhScGIyNGdjSFZ5Y0c5elpYTmNiaUFnWTI5dWRHVjRkQ0E5SUdGemMybG5iaWg3ZlN3Z1kyOXVkR1Y0ZENrN1hHNGdJSFpoY2lCcGJtWnZJRDBnWTI5dWRHVjRkRnQyWVd4cFpHRjBaVVJQVFU1bGMzUnBibWN1WVc1alpYTjBiM0pKYm1adlEyOXVkR1Y0ZEV0bGVWMDdYRzRnSUdOdmJuUmxlSFJiZG1Gc2FXUmhkR1ZFVDAxT1pYTjBhVzVuTG1GdVkyVnpkRzl5U1c1bWIwTnZiblJsZUhSTFpYbGRJRDBnZG1Gc2FXUmhkR1ZFVDAxT1pYTjBhVzVuTG5Wd1pHRjBaV1JCYm1ObGMzUnZja2x1Wm04b2FXNW1ieXdnYVc1emRDNWZkR0ZuTENCcGJuTjBLVHRjYmlBZ2NtVjBkWEp1SUdOdmJuUmxlSFE3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6UTNWemRHOXRRMjl0Y0c5dVpXNTBLSFJoWjA1aGJXVXNJSEJ5YjNCektTQjdYRzRnSUhKbGRIVnliaUIwWVdkT1lXMWxMbWx1WkdWNFQyWW9KeTBuS1NBK1BTQXdJSHg4SUhCeWIzQnpMbWx6SUNFOUlHNTFiR3c3WEc1OVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJRzVsZHlCU1pXRmpkQ0JqYkdGemN5QjBhR0YwSUdseklHbGtaVzF3YjNSbGJuUWdZVzVrSUdOaGNHRmliR1VnYjJZZ1kyOXVkR0ZwYm1sdVp5QnZkR2hsY2x4dUlDb2dVbVZoWTNRZ1kyOXRjRzl1Wlc1MGN5NGdTWFFnWVdOalpYQjBjeUJsZG1WdWRDQnNhWE4wWlc1bGNuTWdZVzVrSUVSUFRTQndjbTl3WlhKMGFXVnpJSFJvWVhRZ1lYSmxYRzRnS2lCMllXeHBaQ0JoWTJOdmNtUnBibWNnZEc4Z1lFUlBUVkJ5YjNCbGNuUjVZQzVjYmlBcVhHNGdLaUFnTFNCRmRtVnVkQ0JzYVhOMFpXNWxjbk02SUdCdmJrTnNhV05yWUN3Z1lHOXVUVzkxYzJWRWIzZHVZQ3dnWlhSakxseHVJQ29nSUMwZ1JFOU5JSEJ5YjNCbGNuUnBaWE02SUdCamJHRnpjMDVoYldWZ0xDQmdibUZ0WldBc0lHQjBhWFJzWldBc0lHVjBZeTVjYmlBcVhHNGdLaUJVYUdVZ1lITjBlV3hsWUNCd2NtOXdaWEowZVNCbWRXNWpkR2x2Ym5NZ1pHbG1abVZ5Wlc1MGJIa2dabkp2YlNCMGFHVWdSRTlOSUVGUVNTNGdTWFFnWVdOalpYQjBjeUJoYmx4dUlDb2diMkpxWldOMElHMWhjSEJwYm1jZ2IyWWdjM1I1YkdVZ2NISnZjR1Z5ZEdsbGN5QjBieUIyWVd4MVpYTXVYRzRnS2x4dUlDb2dRR052Ym5OMGNuVmpkRzl5SUZKbFlXTjBSRTlOUTI5dGNHOXVaVzUwWEc0Z0tpQkFaWGgwWlc1a2N5QlNaV0ZqZEUxMWJIUnBRMmhwYkdSY2JpQXFMMXh1Wm5WdVkzUnBiMjRnVW1WaFkzUkVUMDFEYjIxd2IyNWxiblFvZEdGbktTQjdYRzRnSUhaaGJHbGtZWFJsUkdGdVoyVnliM1Z6VkdGbktIUmhaeWs3WEc0Z0lIUm9hWE11WDNSaFp5QTlJSFJoWnk1MGIweHZkMlZ5UTJGelpTZ3BPMXh1SUNCMGFHbHpMbDl5Wlc1a1pYSmxaRU5vYVd4a2NtVnVJRDBnYm5Wc2JEdGNiaUFnZEdocGN5NWZjSEpsZG1sdmRYTlRkSGxzWlNBOUlHNTFiR3c3WEc0Z0lIUm9hWE11WDNCeVpYWnBiM1Z6VTNSNWJHVkRiM0I1SUQwZ2JuVnNiRHRjYmlBZ2RHaHBjeTVmY205dmRFNXZaR1ZKUkNBOUlHNTFiR3c3WEc0Z0lIUm9hWE11WDNkeVlYQndaWEpUZEdGMFpTQTlJRzUxYkd3N1hHNGdJSFJvYVhNdVgzUnZjRXhsZG1Wc1YzSmhjSEJsY2lBOUlHNTFiR3c3WEc0Z0lIUm9hWE11WDI1dlpHVlhhWFJvVEdWbllXTjVVSEp2Y0dWeWRHbGxjeUE5SUc1MWJHdzdYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdkR2hwY3k1ZmRXNXdjbTlqWlhOelpXUkRiMjUwWlhoMFJHVjJJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDl3Y205alpYTnpaV1JEYjI1MFpYaDBSR1YySUQwZ2JuVnNiRHRjYmlBZ2ZWeHVmVnh1WEc1U1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEM1a2FYTndiR0Y1VG1GdFpTQTlJQ2RTWldGamRFUlBUVU52YlhCdmJtVnVkQ2M3WEc1Y2JsSmxZV04wUkU5TlEyOXRjRzl1Wlc1MExrMXBlR2x1SUQwZ2UxeHVYRzRnSUdOdmJuTjBjblZqZERvZ1puVnVZM1JwYjI0Z0tHVnNaVzFsYm5RcElIdGNiaUFnSUNCMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDQTlJR1ZzWlcxbGJuUTdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkbGJtVnlZWFJsY3lCeWIyOTBJSFJoWnlCdFlYSnJkWEFnZEdobGJpQnlaV04xY25ObGN5NGdWR2hwY3lCdFpYUm9iMlFnYUdGeklITnBaR1VnWldabVpXTjBjeUJoYm1SY2JpQWdJQ29nYVhNZ2JtOTBJR2xrWlcxd2IzUmxiblF1WEc0Z0lDQXFYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY205dmRFbEVJRlJvWlNCeWIyOTBJRVJQVFNCSlJDQm1iM0lnZEdocGN5QnViMlJsTGx4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNThVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2Ym4wZ2RISmhibk5oWTNScGIyNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUdOdmJuUmxlSFJjYmlBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQlVhR1VnWTI5dGNIVjBaV1FnYldGeWEzVndMbHh1SUNBZ0tpOWNiaUFnYlc5MWJuUkRiMjF3YjI1bGJuUTZJR1oxYm1OMGFXOXVJQ2h5YjI5MFNVUXNJSFJ5WVc1ellXTjBhVzl1TENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnZEdocGN5NWZjbTl2ZEU1dlpHVkpSQ0E5SUhKdmIzUkpSRHRjYmx4dUlDQWdJSFpoY2lCd2NtOXdjeUE5SUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1MExuQnliM0J6TzF4dVhHNGdJQ0FnYzNkcGRHTm9JQ2gwYUdsekxsOTBZV2NwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdKMmxtY21GdFpTYzZYRzRnSUNBZ0lDQmpZWE5sSUNkcGJXY25PbHh1SUNBZ0lDQWdZMkZ6WlNBblptOXliU2M2WEc0Z0lDQWdJQ0JqWVhObElDZDJhV1JsYnljNlhHNGdJQ0FnSUNCallYTmxJQ2RoZFdScGJ5YzZYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzZHlZWEJ3WlhKVGRHRjBaU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQnNhWE4wWlc1bGNuTTZJRzUxYkd4Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjR1WjJWMFVtVmhZM1JOYjNWdWRGSmxZV1I1S0NrdVpXNXhkV1YxWlNoMGNtRndRblZpWW14bFpFVjJaVzUwYzB4dlkyRnNMQ0IwYUdsektUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2RpZFhSMGIyNG5PbHh1SUNBZ0lDQWdJQ0J3Y205d2N5QTlJRkpsWVdOMFJFOU5RblYwZEc5dUxtZGxkRTVoZEdsMlpWQnliM0J6S0hSb2FYTXNJSEJ5YjNCekxDQmpiMjUwWlhoMEtUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2RwYm5CMWRDYzZYRzRnSUNBZ0lDQWdJRkpsWVdOMFJFOU5TVzV3ZFhRdWJXOTFiblJYY21Gd2NHVnlLSFJvYVhNc0lIQnliM0J6TENCamIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ2NISnZjSE1nUFNCU1pXRmpkRVJQVFVsdWNIVjBMbWRsZEU1aGRHbDJaVkJ5YjNCektIUm9hWE1zSUhCeWIzQnpMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUNkdmNIUnBiMjRuT2x4dUlDQWdJQ0FnSUNCU1pXRmpkRVJQVFU5d2RHbHZiaTV0YjNWdWRGZHlZWEJ3WlhJb2RHaHBjeXdnY0hKdmNITXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lDQWdJQ0J3Y205d2N5QTlJRkpsWVdOMFJFOU5UM0IwYVc5dUxtZGxkRTVoZEdsMlpWQnliM0J6S0hSb2FYTXNJSEJ5YjNCekxDQmpiMjUwWlhoMEtUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2R6Wld4bFkzUW5PbHh1SUNBZ0lDQWdJQ0JTWldGamRFUlBUVk5sYkdWamRDNXRiM1Z1ZEZkeVlYQndaWElvZEdocGN5d2djSEp2Y0hNc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQndjbTl3Y3lBOUlGSmxZV04wUkU5TlUyVnNaV04wTG1kbGRFNWhkR2wyWlZCeWIzQnpLSFJvYVhNc0lIQnliM0J6TENCamIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVkR1Y0ZENBOUlGSmxZV04wUkU5TlUyVnNaV04wTG5CeWIyTmxjM05EYUdsc1pFTnZiblJsZUhRb2RHaHBjeXdnY0hKdmNITXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnSjNSbGVIUmhjbVZoSnpwY2JpQWdJQ0FnSUNBZ1VtVmhZM1JFVDAxVVpYaDBZWEpsWVM1dGIzVnVkRmR5WVhCd1pYSW9kR2hwY3l3Z2NISnZjSE1zSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnSUNCd2NtOXdjeUE5SUZKbFlXTjBSRTlOVkdWNGRHRnlaV0V1WjJWMFRtRjBhWFpsVUhKdmNITW9kR2hwY3l3Z2NISnZjSE1zSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmhjM05sY25SV1lXeHBaRkJ5YjNCektIUm9hWE1zSUhCeWIzQnpLVHRjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLR052Ym5SbGVIUmJkbUZzYVdSaGRHVkVUMDFPWlhOMGFXNW5MbUZ1WTJWemRHOXlTVzVtYjBOdmJuUmxlSFJMWlhsZEtTQjdYRzRnSUNBZ0lDQWdJSFpoYkdsa1lYUmxSRTlOVG1WemRHbHVaeWgwYUdsekxsOTBZV2NzSUhSb2FYTXNJR052Ym5SbGVIUmJkbUZzYVdSaGRHVkVUMDFPWlhOMGFXNW5MbUZ1WTJWemRHOXlTVzVtYjBOdmJuUmxlSFJMWlhsZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZkVzV3Y205alpYTnpaV1JEYjI1MFpYaDBSR1YySUQwZ1kyOXVkR1Y0ZER0Y2JpQWdJQ0FnSUhSb2FYTXVYM0J5YjJObGMzTmxaRU52Ym5SbGVIUkVaWFlnUFNCd2NtOWpaWE56UTJocGJHUkRiMjUwWlhoMFJHVjJLR052Ym5SbGVIUXNJSFJvYVhNcE8xeHVJQ0FnSUNBZ1kyOXVkR1Y0ZENBOUlIUm9hWE11WDNCeWIyTmxjM05sWkVOdmJuUmxlSFJFWlhZN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHMXZkVzUwU1cxaFoyVTdYRzRnSUNBZ2FXWWdLSFJ5WVc1ellXTjBhVzl1TG5WelpVTnlaV0YwWlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUhaaGNpQnZkMjVsY2tSdlkzVnRaVzUwSUQwZ1kyOXVkR1Y0ZEZ0U1pXRmpkRTF2ZFc1MExtOTNibVZ5Ukc5amRXMWxiblJEYjI1MFpYaDBTMlY1WFR0Y2JpQWdJQ0FnSUhaaGNpQmxiQ0E5SUc5M2JtVnlSRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDNTBlWEJsS1R0Y2JpQWdJQ0FnSUVSUFRWQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5NXpaWFJCZEhSeWFXSjFkR1ZHYjNKSlJDaGxiQ3dnZEdocGN5NWZjbTl2ZEU1dlpHVkpSQ2s3WEc0Z0lDQWdJQ0F2THlCUWIzQjFiR0YwWlNCdWIyUmxJR05oWTJobFhHNGdJQ0FnSUNCU1pXRmpkRTF2ZFc1MExtZGxkRWxFS0dWc0tUdGNiaUFnSUNBZ0lIUm9hWE11WDNWd1pHRjBaVVJQVFZCeWIzQmxjblJwWlhNb2UzMHNJSEJ5YjNCekxDQjBjbUZ1YzJGamRHbHZiaXdnWld3cE8xeHVJQ0FnSUNBZ2RHaHBjeTVmWTNKbFlYUmxTVzVwZEdsaGJFTm9hV3hrY21WdUtIUnlZVzV6WVdOMGFXOXVMQ0J3Y205d2N5d2dZMjl1ZEdWNGRDd2daV3dwTzF4dUlDQWdJQ0FnYlc5MWJuUkpiV0ZuWlNBOUlHVnNPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMllYSWdkR0ZuVDNCbGJpQTlJSFJvYVhNdVgyTnlaV0YwWlU5d1pXNVVZV2ROWVhKcmRYQkJibVJRZFhSTWFYTjBaVzVsY25Nb2RISmhibk5oWTNScGIyNHNJSEJ5YjNCektUdGNiaUFnSUNBZ0lIWmhjaUIwWVdkRGIyNTBaVzUwSUQwZ2RHaHBjeTVmWTNKbFlYUmxRMjl1ZEdWdWRFMWhjbXQxY0NoMGNtRnVjMkZqZEdsdmJpd2djSEp2Y0hNc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ2FXWWdLQ0YwWVdkRGIyNTBaVzUwSUNZbUlHOXRhWFIwWldSRGJHOXpaVlJoWjNOYmRHaHBjeTVmZEdGblhTa2dlMXh1SUNBZ0lDQWdJQ0J0YjNWdWRFbHRZV2RsSUQwZ2RHRm5UM0JsYmlBcklDY3ZQaWM3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J0YjNWdWRFbHRZV2RsSUQwZ2RHRm5UM0JsYmlBcklDYytKeUFySUhSaFowTnZiblJsYm5RZ0t5QW5QQzhuSUNzZ2RHaHBjeTVmWTNWeWNtVnVkRVZzWlcxbGJuUXVkSGx3WlNBcklDYytKenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkMmwwWTJnZ0tIUm9hWE11WDNSaFp5a2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbmFXNXdkWFFuT2x4dUlDQWdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJpNW5aWFJTWldGamRFMXZkVzUwVW1WaFpIa29LUzVsYm5GMVpYVmxLRzF2ZFc1MFVtVmhaSGxKYm5CMWRGZHlZWEJ3WlhJc0lIUm9hWE1wTzF4dUlDQWdJQ0FnTHk4Z1ptRnNiSE1nZEdoeWIzVm5hRnh1SUNBZ0lDQWdZMkZ6WlNBblluVjBkRzl1SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM05sYkdWamRDYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMFpYaDBZWEpsWVNjNlhHNGdJQ0FnSUNBZ0lHbG1JQ2h3Y205d2N5NWhkWFJ2Um05amRYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJpNW5aWFJTWldGamRFMXZkVzUwVW1WaFpIa29LUzVsYm5GMVpYVmxLRUYxZEc5R2IyTjFjMVYwYVd4ekxtWnZZM1Z6UkU5TlEyOXRjRzl1Wlc1MExDQjBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiVzkxYm5SSmJXRm5aVHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsY3lCdFlYSnJkWEFnWm05eUlIUm9aU0J2Y0dWdUlIUmhaeUJoYm1RZ1lXeHNJR0YwZEhKcFluVjBaWE11WEc0Z0lDQXFYRzRnSUNBcUlGUm9hWE1nYldWMGFHOWtJR2hoY3lCemFXUmxJR1ZtWm1WamRITWdZbVZqWVhWelpTQmxkbVZ1ZEhNZ1oyVjBJSEpsWjJsemRHVnlaV1F1WEc0Z0lDQXFYRzRnSUNBcUlFbDBaWEpoZEdsdVp5QnZkbVZ5SUc5aWFtVmpkQ0J3Y205d1pYSjBhV1Z6SUdseklHWmhjM1JsY2lCMGFHRnVJR2wwWlhKaGRHbHVaeUJ2ZG1WeUlHRnljbUY1Y3k1Y2JpQWdJQ29nUUhObFpTQm9kSFJ3T2k4dmFuTndaWEptTG1OdmJTOXZZbW90ZG5NdFlYSnlMV2wwWlhKaGRHbHZibHh1SUNBZ0tseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNThVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2Ym4wZ2RISmhibk5oWTNScGIyNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCeWIzQnpYRzRnSUNBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ1RXRnlhM1Z3SUc5bUlHOXdaVzVwYm1jZ2RHRm5MbHh1SUNBZ0tpOWNiaUFnWDJOeVpXRjBaVTl3Wlc1VVlXZE5ZWEpyZFhCQmJtUlFkWFJNYVhOMFpXNWxjbk02SUdaMWJtTjBhVzl1SUNoMGNtRnVjMkZqZEdsdmJpd2djSEp2Y0hNcElIdGNiaUFnSUNCMllYSWdjbVYwSUQwZ0p6d25JQ3NnZEdocGN5NWZZM1Z5Y21WdWRFVnNaVzFsYm5RdWRIbHdaVHRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJSEJ5YjNCTFpYa2dhVzRnY0hKdmNITXBJSHRjYmlBZ0lDQWdJR2xtSUNnaGNISnZjSE11YUdGelQzZHVVSEp2Y0dWeWRIa29jSEp2Y0V0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IyWVhJZ2NISnZjRlpoYkhWbElEMGdjSEp2Y0hOYmNISnZjRXRsZVYwN1hHNGdJQ0FnSUNCcFppQW9jSEp2Y0ZaaGJIVmxJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2NtVm5hWE4wY21GMGFXOXVUbUZ0WlUxdlpIVnNaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29jSEp2Y0V0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnliM0JXWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdWdWNYVmxkV1ZRZFhSTWFYTjBaVzVsY2loMGFHbHpMbDl5YjI5MFRtOWtaVWxFTENCd2NtOXdTMlY1TENCd2NtOXdWbUZzZFdVc0lIUnlZVzV6WVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnliM0JMWlhrZ1BUMDlJRk5VV1V4RktTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnliM0JXWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyVmxJR0JmZFhCa1lYUmxSRTlOVUhKdmNHVnlkR2xsYzJBdUlITjBlV3hsSUdKc2IyTnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNCeVpYWnBiM1Z6VTNSNWJHVWdQU0J3Y205d1ZtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdWbUZzZFdVZ1BTQjBhR2x6TGw5d2NtVjJhVzkxYzFOMGVXeGxRMjl3ZVNBOUlHRnpjMmxuYmloN2ZTd2djSEp2Y0hNdWMzUjViR1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J3Y205d1ZtRnNkV1VnUFNCRFUxTlFjbTl3WlhKMGVVOXdaWEpoZEdsdmJuTXVZM0psWVhSbFRXRnlhM1Z3Um05eVUzUjViR1Z6S0hCeWIzQldZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUcxaGNtdDFjQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDkwWVdjZ0lUMGdiblZzYkNBbUppQnBjME4xYzNSdmJVTnZiWEJ2Ym1WdWRDaDBhR2x6TGw5MFlXY3NJSEJ5YjNCektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbTl3UzJWNUlDRTlQU0JEU0VsTVJGSkZUaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Z5YTNWd0lEMGdSRTlOVUhKdmNHVnlkSGxQY0dWeVlYUnBiMjV6TG1OeVpXRjBaVTFoY210MWNFWnZja04xYzNSdmJVRjBkSEpwWW5WMFpTaHdjbTl3UzJWNUxDQndjbTl3Vm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnRZWEpyZFhBZ1BTQkVUMDFRY205d1pYSjBlVTl3WlhKaGRHbHZibk11WTNKbFlYUmxUV0Z5YTNWd1JtOXlVSEp2Y0dWeWRIa29jSEp2Y0V0bGVTd2djSEp2Y0ZaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9iV0Z5YTNWd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMElDczlJQ2NnSnlBcklHMWhjbXQxY0R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFWnZjaUJ6ZEdGMGFXTWdjR0ZuWlhNc0lHNXZJRzVsWldRZ2RHOGdjSFYwSUZKbFlXTjBJRWxFSUdGdVpDQmphR1ZqYTNOMWJTNGdVMkYyWlhNZ2JHOTBjeUJ2Wmx4dUlDQWdJQzh2SUdKNWRHVnpMbHh1SUNBZ0lHbG1JQ2gwY21GdWMyRmpkR2x2Ymk1eVpXNWtaWEpVYjFOMFlYUnBZMDFoY210MWNDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlISmxkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnYldGeWEzVndSbTl5U1VRZ1BTQkVUMDFRY205d1pYSjBlVTl3WlhKaGRHbHZibk11WTNKbFlYUmxUV0Z5YTNWd1JtOXlTVVFvZEdocGN5NWZjbTl2ZEU1dlpHVkpSQ2s3WEc0Z0lDQWdjbVYwZFhKdUlISmxkQ0FySUNjZ0p5QXJJRzFoY210MWNFWnZja2xFTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdWeklHMWhjbXQxY0NCbWIzSWdkR2hsSUdOdmJuUmxiblFnWW1WMGQyVmxiaUIwYUdVZ2RHRm5jeTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRGSmxZMjl1WTJsc1pWUnlZVzV6WVdOMGFXOXVmRkpsWVdOMFUyVnlkbVZ5VW1WdVpHVnlhVzVuVkhKaGJuTmhZM1JwYjI1OUlIUnlZVzV6WVdOMGFXOXVYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCd2NtOXdjMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1kyOXVkR1Y0ZEZ4dUlDQWdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJRU52Ym5SbGJuUWdiV0Z5YTNWd0xseHVJQ0FnS2k5Y2JpQWdYMk55WldGMFpVTnZiblJsYm5STllYSnJkWEE2SUdaMWJtTjBhVzl1SUNoMGNtRnVjMkZqZEdsdmJpd2djSEp2Y0hNc0lHTnZiblJsZUhRcElIdGNiaUFnSUNCMllYSWdjbVYwSUQwZ0p5YzdYRzVjYmlBZ0lDQXZMeUJKYm5SbGJuUnBiMjVoYkNCMWMyVWdiMllnSVQwZ2RHOGdZWFp2YVdRZ1kyRjBZMmhwYm1jZ2VtVnlieTltWVd4elpTNWNiaUFnSUNCMllYSWdhVzV1WlhKSVZFMU1JRDBnY0hKdmNITXVaR0Z1WjJWeWIzVnpiSGxUWlhSSmJtNWxja2hVVFV3N1hHNGdJQ0FnYVdZZ0tHbHVibVZ5U0ZSTlRDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnBaaUFvYVc1dVpYSklWRTFNTGw5ZmFIUnRiQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRDQTlJR2x1Ym1WeVNGUk5UQzVmWDJoMGJXdzdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhaaGNpQmpiMjUwWlc1MFZHOVZjMlVnUFNCRFQwNVVSVTVVWDFSWlVFVlRXM1I1Y0dWdlppQndjbTl3Y3k1amFHbHNaSEpsYmwwZ1B5QndjbTl3Y3k1amFHbHNaSEpsYmlBNklHNTFiR3c3WEc0Z0lDQWdJQ0IyWVhJZ1kyaHBiR1J5Wlc1VWIxVnpaU0E5SUdOdmJuUmxiblJVYjFWelpTQWhQU0J1ZFd4c0lEOGdiblZzYkNBNklIQnliM0J6TG1Ob2FXeGtjbVZ1TzF4dUlDQWdJQ0FnYVdZZ0tHTnZiblJsYm5SVWIxVnpaU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUZaaGJHbGtZWFJsSUhSb1lYUWdkR1Y0ZENCcGN5QmhiR3h2ZDJWa0lHRnpJR0VnWTJocGJHUWdiMllnZEdocGN5QnViMlJsWEc0Z0lDQWdJQ0FnSUhKbGRDQTlJR1Z6WTJGd1pWUmxlSFJEYjI1MFpXNTBSbTl5UW5KdmQzTmxjaWhqYjI1MFpXNTBWRzlWYzJVcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGphR2xzWkhKbGJsUnZWWE5sSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzF2ZFc1MFNXMWhaMlZ6SUQwZ2RHaHBjeTV0YjNWdWRFTm9hV3hrY21WdUtHTm9hV3hrY21WdVZHOVZjMlVzSUhSeVlXNXpZV04wYVc5dUxDQmpiMjUwWlhoMEtUdGNiaUFnSUNBZ0lDQWdjbVYwSUQwZ2JXOTFiblJKYldGblpYTXVhbTlwYmlnbkp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHVaWGRzYVc1bFJXRjBhVzVuVkdGbmMxdDBhR2x6TGw5MFlXZGRJQ1ltSUhKbGRDNWphR0Z5UVhRb01Da2dQVDA5SUNkY1hHNG5LU0I3WEc0Z0lDQWdJQ0F2THlCMFpYaDBMMmgwYld3Z2FXZHViM0psY3lCMGFHVWdabWx5YzNRZ1kyaGhjbUZqZEdWeUlHbHVJSFJvWlhObElIUmhaM01nYVdZZ2FYUW5jeUJoSUc1bGQyeHBibVZjYmlBZ0lDQWdJQzh2SUZCeVpXWmxjaUIwYnlCaWNtVmhheUJoY0hCc2FXTmhkR2x2Ymk5NGJXd2diM1psY2lCMFpYaDBMMmgwYld3Z0tHWnZjaUJ1YjNjcElHSjVJR0ZrWkdsdVoxeHVJQ0FnSUNBZ0x5OGdZU0J1Wlhkc2FXNWxJSE53WldOcFptbGpZV3hzZVNCMGJ5Qm5aWFFnWldGMFpXNGdZbmtnZEdobElIQmhjbk5sY2k0Z0tFRnNkR1Z5Ym1GMFpXeDVJR1p2Y2x4dUlDQWdJQ0FnTHk4Z2RHVjRkR0Z5WldGekxDQnlaWEJzWVdOcGJtY2dYQ0plWEZ4dVhDSWdkMmwwYUNCY0lseGNjbHhjYmx3aUlHUnZaWE51SjNRZ1oyVjBJR1ZoZEdWdUxDQmhibVFnZEdobElHWnBjbk4wWEc0Z0lDQWdJQ0F2THlCY1hISWdhWE1nYm05eWJXRnNhWHBsWkNCdmRYUWdZbmtnU0ZSTlRGUmxlSFJCY21WaFJXeGxiV1Z1ZENOMllXeDFaUzRwWEc0Z0lDQWdJQ0F2THlCVFpXVTZJRHhvZEhSd09pOHZkM2QzTG5jekxtOXlaeTlVVWk5b2RHMXNMWEJ2YkhsbmJHOTBMeU51Wlhkc2FXNWxjeTFwYmkxMFpYaDBZWEpsWVMxaGJtUXRjSEpsUGx4dUlDQWdJQ0FnTHk4Z1UyVmxPaUE4YUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2VkZJdmFIUnRiRFV2YzNsdWRHRjRMbWgwYld3alpXeGxiV1Z1ZEMxeVpYTjBjbWxqZEdsdmJuTStYRzRnSUNBZ0lDQXZMeUJUWldVNklEeG9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OVVVaTlvZEcxc05TOXplVzUwWVhndWFIUnRiQ051Wlhkc2FXNWxjejVjYmlBZ0lDQWdJQzh2SUZObFpUb2dVR0Z5YzJsdVp5QnZaaUJjSW5SbGVIUmhjbVZoWENJZ1hDSnNhWE4wYVc1blhDSWdZVzVrSUZ3aWNISmxYQ0lnWld4bGJXVnVkSE5jYmlBZ0lDQWdJQzh2SUNCbWNtOXRJRHhvZEhSd09pOHZkM2QzTG5jekxtOXlaeTlVVWk5b2RHMXNOUzl6ZVc1MFlYZ3VhSFJ0YkNOd1lYSnphVzVuTFcxaGFXNHRhVzVpYjJSNVBseHVJQ0FnSUNBZ2NtVjBkWEp1SUNkY1hHNG5JQ3NnY21WME8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVYwTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCZlkzSmxZWFJsU1c1cGRHbGhiRU5vYVd4a2NtVnVPaUJtZFc1amRHbHZiaUFvZEhKaGJuTmhZM1JwYjI0c0lIQnliM0J6TENCamIyNTBaWGgwTENCbGJDa2dlMXh1SUNBZ0lDOHZJRWx1ZEdWdWRHbHZibUZzSUhWelpTQnZaaUFoUFNCMGJ5QmhkbTlwWkNCallYUmphR2x1WnlCNlpYSnZMMlpoYkhObExseHVJQ0FnSUhaaGNpQnBibTVsY2toVVRVd2dQU0J3Y205d2N5NWtZVzVuWlhKdmRYTnNlVk5sZEVsdWJtVnlTRlJOVER0Y2JpQWdJQ0JwWmlBb2FXNXVaWEpJVkUxTUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lHbG1JQ2hwYm01bGNraFVUVXd1WDE5b2RHMXNJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnYzJWMFNXNXVaWEpJVkUxTUtHVnNMQ0JwYm01bGNraFVUVXd1WDE5b2RHMXNLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtRnlJR052Ym5SbGJuUlViMVZ6WlNBOUlFTlBUbFJGVGxSZlZGbFFSVk5iZEhsd1pXOW1JSEJ5YjNCekxtTm9hV3hrY21WdVhTQS9JSEJ5YjNCekxtTm9hV3hrY21WdUlEb2diblZzYkR0Y2JpQWdJQ0FnSUhaaGNpQmphR2xzWkhKbGJsUnZWWE5sSUQwZ1kyOXVkR1Z1ZEZSdlZYTmxJQ0U5SUc1MWJHd2dQeUJ1ZFd4c0lEb2djSEp2Y0hNdVkyaHBiR1J5Wlc0N1hHNGdJQ0FnSUNCcFppQW9ZMjl1ZEdWdWRGUnZWWE5sSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1ZtRnNhV1JoZEdVZ2RHaGhkQ0IwWlhoMElHbHpJR0ZzYkc5M1pXUWdZWE1nWVNCamFHbHNaQ0J2WmlCMGFHbHpJRzV2WkdWY2JpQWdJQ0FnSUNBZ2MyVjBWR1Y0ZEVOdmJuUmxiblFvWld3c0lHTnZiblJsYm5SVWIxVnpaU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dOb2FXeGtjbVZ1Vkc5VmMyVWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JXOTFiblJKYldGblpYTWdQU0IwYUdsekxtMXZkVzUwUTJocGJHUnlaVzRvWTJocGJHUnlaVzVVYjFWelpTd2dkSEpoYm5OaFkzUnBiMjRzSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHMXZkVzUwU1cxaFoyVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaV3d1WVhCd1pXNWtRMmhwYkdRb2JXOTFiblJKYldGblpYTmJhVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaV05sYVhabGN5QmhJRzVsZUhRZ1pXeGxiV1Z1ZENCaGJtUWdkWEJrWVhSbGN5QjBhR1VnWTI5dGNHOXVaVzUwTGx4dUlDQWdLbHh1SUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRVZzWlcxbGJuUjlJRzVsZUhSRmJHVnRaVzUwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSU1pXTnZibU5wYkdWVWNtRnVjMkZqZEdsdmJueFNaV0ZqZEZObGNuWmxjbEpsYm1SbGNtbHVaMVJ5WVc1ellXTjBhVzl1ZlNCMGNtRnVjMkZqZEdsdmJseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnWTI5dWRHVjRkRnh1SUNBZ0tpOWNiaUFnY21WalpXbDJaVU52YlhCdmJtVnVkRG9nWm5WdVkzUnBiMjRnS0c1bGVIUkZiR1Z0Wlc1MExDQjBjbUZ1YzJGamRHbHZiaXdnWTI5dWRHVjRkQ2tnZTF4dUlDQWdJSFpoY2lCd2NtVjJSV3hsYldWdWRDQTlJSFJvYVhNdVgyTjFjbkpsYm5SRmJHVnRaVzUwTzF4dUlDQWdJSFJvYVhNdVgyTjFjbkpsYm5SRmJHVnRaVzUwSUQwZ2JtVjRkRVZzWlcxbGJuUTdYRzRnSUNBZ2RHaHBjeTUxY0dSaGRHVkRiMjF3YjI1bGJuUW9kSEpoYm5OaFkzUnBiMjRzSUhCeVpYWkZiR1Z0Wlc1MExDQnVaWGgwUld4bGJXVnVkQ3dnWTI5dWRHVjRkQ2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVndaR0YwWlhNZ1lTQnVZWFJwZG1VZ1JFOU5JR052YlhCdmJtVnVkQ0JoWm5SbGNpQnBkQ0JvWVhNZ1lXeHlaV0ZrZVNCaVpXVnVJR0ZzYkc5allYUmxaQ0JoYm1SY2JpQWdJQ29nWVhSMFlXTm9aV1FnZEc4Z2RHaGxJRVJQVFM0Z1VtVmpiMjVqYVd4bGN5QjBhR1VnY205dmRDQkVUMDBnYm05a1pTd2dkR2hsYmlCeVpXTjFjbk5sY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dWZTQjBjbUZ1YzJGamRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUld4bGJXVnVkSDBnY0hKbGRrVnNaVzFsYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRFVnNaVzFsYm5SOUlHNWxlSFJGYkdWdFpXNTBYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2lCQWIzWmxjbkpwWkdGaWJHVmNiaUFnSUNvdlhHNGdJSFZ3WkdGMFpVTnZiWEJ2Ym1WdWREb2dablZ1WTNScGIyNGdLSFJ5WVc1ellXTjBhVzl1TENCd2NtVjJSV3hsYldWdWRDd2dibVY0ZEVWc1pXMWxiblFzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IyWVhJZ2JHRnpkRkJ5YjNCeklEMGdjSEpsZGtWc1pXMWxiblF1Y0hKdmNITTdYRzRnSUNBZ2RtRnlJRzVsZUhSUWNtOXdjeUE5SUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1MExuQnliM0J6TzF4dVhHNGdJQ0FnYzNkcGRHTm9JQ2gwYUdsekxsOTBZV2NwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdKMkoxZEhSdmJpYzZYRzRnSUNBZ0lDQWdJR3hoYzNSUWNtOXdjeUE5SUZKbFlXTjBSRTlOUW5WMGRHOXVMbWRsZEU1aGRHbDJaVkJ5YjNCektIUm9hWE1zSUd4aGMzUlFjbTl3Y3lrN1hHNGdJQ0FnSUNBZ0lHNWxlSFJRY205d2N5QTlJRkpsWVdOMFJFOU5RblYwZEc5dUxtZGxkRTVoZEdsMlpWQnliM0J6S0hSb2FYTXNJRzVsZUhSUWNtOXdjeWs3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNBbmFXNXdkWFFuT2x4dUlDQWdJQ0FnSUNCU1pXRmpkRVJQVFVsdWNIVjBMblZ3WkdGMFpWZHlZWEJ3WlhJb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUd4aGMzUlFjbTl3Y3lBOUlGSmxZV04wUkU5TlNXNXdkWFF1WjJWMFRtRjBhWFpsVUhKdmNITW9kR2hwY3l3Z2JHRnpkRkJ5YjNCektUdGNiaUFnSUNBZ0lDQWdibVY0ZEZCeWIzQnpJRDBnVW1WaFkzUkVUMDFKYm5CMWRDNW5aWFJPWVhScGRtVlFjbTl3Y3loMGFHbHpMQ0J1WlhoMFVISnZjSE1wTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR05oYzJVZ0oyOXdkR2x2YmljNlhHNGdJQ0FnSUNBZ0lHeGhjM1JRY205d2N5QTlJRkpsWVdOMFJFOU5UM0IwYVc5dUxtZGxkRTVoZEdsMlpWQnliM0J6S0hSb2FYTXNJR3hoYzNSUWNtOXdjeWs3WEc0Z0lDQWdJQ0FnSUc1bGVIUlFjbTl3Y3lBOUlGSmxZV04wUkU5TlQzQjBhVzl1TG1kbGRFNWhkR2wyWlZCeWIzQnpLSFJvYVhNc0lHNWxlSFJRY205d2N5azdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ1kyRnpaU0FuYzJWc1pXTjBKenBjYmlBZ0lDQWdJQ0FnYkdGemRGQnliM0J6SUQwZ1VtVmhZM1JFVDAxVFpXeGxZM1F1WjJWMFRtRjBhWFpsVUhKdmNITW9kR2hwY3l3Z2JHRnpkRkJ5YjNCektUdGNiaUFnSUNBZ0lDQWdibVY0ZEZCeWIzQnpJRDBnVW1WaFkzUkVUMDFUWld4bFkzUXVaMlYwVG1GMGFYWmxVSEp2Y0hNb2RHaHBjeXdnYm1WNGRGQnliM0J6S1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0JqWVhObElDZDBaWGgwWVhKbFlTYzZYRzRnSUNBZ0lDQWdJRkpsWVdOMFJFOU5WR1Y0ZEdGeVpXRXVkWEJrWVhSbFYzSmhjSEJsY2loMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnYkdGemRGQnliM0J6SUQwZ1VtVmhZM1JFVDAxVVpYaDBZWEpsWVM1blpYUk9ZWFJwZG1WUWNtOXdjeWgwYUdsekxDQnNZWE4wVUhKdmNITXBPMXh1SUNBZ0lDQWdJQ0J1WlhoMFVISnZjSE1nUFNCU1pXRmpkRVJQVFZSbGVIUmhjbVZoTG1kbGRFNWhkR2wyWlZCeWIzQnpLSFJvYVhNc0lHNWxlSFJRY205d2N5azdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0F2THlCSlppQjBhR1VnWTI5dWRHVjRkQ0JwY3lCeVpXWmxjbVZ1WTJVdFpYRjFZV3dnZEc4Z2RHaGxJRzlzWkNCdmJtVXNJSEJoYzNNZ1pHOTNiaUIwYUdVZ2MyRnRaVnh1SUNBZ0lDQWdMeThnY0hKdlkyVnpjMlZrSUc5aWFtVmpkQ0J6YnlCMGFHVWdkWEJrWVhSbElHSmhhV3h2ZFhRZ2FXNGdVbVZoWTNSU1pXTnZibU5wYkdWeUlHSmxhR0YyWlhOY2JpQWdJQ0FnSUM4dklHTnZjbkpsWTNSc2VTQW9ZVzVrSUdsa1pXNTBhV05oYkd4NUlHbHVJR1JsZGlCaGJtUWdjSEp2WkNrdUlGTmxaU0FqTlRBd05TNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOTFibkJ5YjJObGMzTmxaRU52Ym5SbGVIUkVaWFlnSVQwOUlHTnZiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRXNXdjbTlqWlhOelpXUkRiMjUwWlhoMFJHVjJJRDBnWTI5dWRHVjRkRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjSEp2WTJWemMyVmtRMjl1ZEdWNGRFUmxkaUE5SUhCeWIyTmxjM05EYUdsc1pFTnZiblJsZUhSRVpYWW9ZMjl1ZEdWNGRDd2dkR2hwY3lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCamIyNTBaWGgwSUQwZ2RHaHBjeTVmY0hKdlkyVnpjMlZrUTI5dWRHVjRkRVJsZGp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JoYzNObGNuUldZV3hwWkZCeWIzQnpLSFJvYVhNc0lHNWxlSFJRY205d2N5azdYRzRnSUNBZ2RHaHBjeTVmZFhCa1lYUmxSRTlOVUhKdmNHVnlkR2xsY3loc1lYTjBVSEp2Y0hNc0lHNWxlSFJRY205d2N5d2dkSEpoYm5OaFkzUnBiMjRzSUc1MWJHd3BPMXh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaVVJQVFVOb2FXeGtjbVZ1S0d4aGMzUlFjbTl3Y3l3Z2JtVjRkRkJ5YjNCekxDQjBjbUZ1YzJGamRHbHZiaXdnWTI5dWRHVjRkQ2s3WEc1Y2JpQWdJQ0JwWmlBb0lXTmhia1JsWm1sdVpWQnliM0JsY25SNUlDWW1JSFJvYVhNdVgyNXZaR1ZYYVhSb1RHVm5ZV041VUhKdmNHVnlkR2xsY3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmYm05a1pWZHBkR2hNWldkaFkzbFFjbTl3WlhKMGFXVnpMbkJ5YjNCeklEMGdibVY0ZEZCeWIzQnpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxsOTBZV2NnUFQwOUlDZHpaV3hsWTNRbktTQjdYRzRnSUNBZ0lDQXZMeUE4YzJWc1pXTjBQaUIyWVd4MVpTQjFjR1JoZEdVZ2JtVmxaSE1nZEc4Z2IyTmpkWElnWVdaMFpYSWdQRzl3ZEdsdmJqNGdZMmhwYkdSeVpXNWNiaUFnSUNBZ0lDOHZJSEpsWTI5dVkybHNhV0YwYVc5dVhHNGdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJpNW5aWFJTWldGamRFMXZkVzUwVW1WaFpIa29LUzVsYm5GMVpYVmxLSEJ2YzNSVmNHUmhkR1ZUWld4bFkzUlhjbUZ3Y0dWeUxDQjBhR2x6S1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxZMjl1WTJsc1pYTWdkR2hsSUhCeWIzQmxjblJwWlhNZ1lua2daR1YwWldOMGFXNW5JR1JwWm1abGNtVnVZMlZ6SUdsdUlIQnliM0JsY25SNUlIWmhiSFZsY3lCaGJtUmNiaUFnSUNvZ2RYQmtZWFJwYm1jZ2RHaGxJRVJQVFNCaGN5QnVaV05sYzNOaGNua3VJRlJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdjSEp2WW1GaWJIa2dkR2hsSUhOcGJtZHNaU0J0YjNOMFhHNGdJQ0FxSUdOeWFYUnBZMkZzSUhCaGRHZ2dabTl5SUhCbGNtWnZjbTFoYm1ObElHOXdkR2x0YVhwaGRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1ZFOUVUem9nUW1WdVkyaHRZWEpySUhkb1pYUm9aWElnWTJobFkydHBibWNnWm05eUlHTm9ZVzVuWldRZ2RtRnNkV1Z6SUdsdUlHMWxiVzl5ZVNCaFkzUjFZV3hzZVZ4dUlDQWdLaUFnSUNBZ0lDQnBiWEJ5YjNabGN5QndaWEptYjNKdFlXNWpaU0FvWlhOd1pXTnBZV3hzZVNCemRHRjBhV05oYkd4NUlIQnZjMmwwYVc5dVpXUWdaV3hsYldWdWRITXBMbHh1SUNBZ0tpQlVUMFJQT2lCQ1pXNWphRzFoY21zZ2RHaGxJR1ZtWm1WamRITWdiMllnY0hWMGRHbHVaeUIwYUdseklHRjBJSFJvWlNCMGIzQWdjMmx1WTJVZ09Ua2xJRzltSUhCeWIzQnpYRzRnSUNBcUlDQWdJQ0FnSUdSdklHNXZkQ0JqYUdGdVoyVWdabTl5SUdFZ1oybDJaVzRnY21WamIyNWphV3hwWVhScGIyNHVYRzRnSUNBcUlGUlBSRTg2SUVKbGJtTm9iV0Z5YXlCaGNtVmhjeUIwYUdGMElHTmhiaUJpWlNCcGJYQnliM1psWkNCM2FYUm9JR05oWTJocGJtY3VYRzRnSUNBcVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnNZWE4wVUhKdmNITmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUc1bGVIUlFjbTl3YzF4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNTlJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdQMFJQVFVWc1pXMWxiblI5SUc1dlpHVmNiaUFnSUNvdlhHNGdJRjkxY0dSaGRHVkVUMDFRY205d1pYSjBhV1Z6T2lCbWRXNWpkR2x2YmlBb2JHRnpkRkJ5YjNCekxDQnVaWGgwVUhKdmNITXNJSFJ5WVc1ellXTjBhVzl1TENCdWIyUmxLU0I3WEc0Z0lDQWdkbUZ5SUhCeWIzQkxaWGs3WEc0Z0lDQWdkbUZ5SUhOMGVXeGxUbUZ0WlR0Y2JpQWdJQ0IyWVhJZ2MzUjViR1ZWY0dSaGRHVnpPMXh1SUNBZ0lHWnZjaUFvY0hKdmNFdGxlU0JwYmlCc1lYTjBVSEp2Y0hNcElIdGNiaUFnSUNBZ0lHbG1JQ2h1WlhoMFVISnZjSE11YUdGelQzZHVVSEp2Y0dWeWRIa29jSEp2Y0V0bGVTa2dmSHdnSVd4aGMzUlFjbTl3Y3k1b1lYTlBkMjVRY205d1pYSjBlU2h3Y205d1MyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaHdjbTl3UzJWNUlEMDlQU0JUVkZsTVJTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JHRnpkRk4wZVd4bElEMGdkR2hwY3k1ZmNISmxkbWx2ZFhOVGRIbHNaVU52Y0hrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYzNSNWJHVk9ZVzFsSUdsdUlHeGhjM1JUZEhsc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHNZWE4wVTNSNWJHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2MzUjViR1ZPWVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1ZWY0dSaGRHVnpJRDBnYzNSNWJHVlZjR1JoZEdWeklIeDhJSHQ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdWVmNHUmhkR1Z6VzNOMGVXeGxUbUZ0WlYwZ1BTQW5KenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNISmxkbWx2ZFhOVGRIbHNaVU52Y0hrZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXZHBjM1J5WVhScGIyNU9ZVzFsVFc5a2RXeGxjeTVvWVhOUGQyNVFjbTl3WlhKMGVTaHdjbTl3UzJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JHRnpkRkJ5YjNCelczQnliM0JMWlhsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1QyNXNlU0JqWVd4c0lHUmxiR1YwWlV4cGMzUmxibVZ5SUdsbUlIUm9aWEpsSUhkaGN5QmhJR3hwYzNSbGJtVnlJSEJ5WlhacGIzVnpiSGtnYjNKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJsYkhObElIZHBiR3hFWld4bGRHVk1hWE4wWlc1bGNpQm5aWFJ6SUdOaGJHeGxaQ0IzYUdWdUlIUm9aWEpsSUhkaGMyNG5kQ0JoWTNSMVlXeHNlU0JoWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdiR2x6ZEdWdVpYSWdLR1V1Wnk0c0lHOXVRMnhwWTJzOWUyNTFiR3g5S1Z4dUlDQWdJQ0FnSUNBZ0lHUmxiR1YwWlV4cGMzUmxibVZ5S0hSb2FYTXVYM0p2YjNST2IyUmxTVVFzSUhCeWIzQkxaWGtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tFUlBUVkJ5YjNCbGNuUjVMbkJ5YjNCbGNuUnBaWE5iY0hKdmNFdGxlVjBnZkh3Z1JFOU5VSEp2Y0dWeWRIa3VhWE5EZFhOMGIyMUJkSFJ5YVdKMWRHVW9jSEp2Y0V0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnViMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdibTlrWlNBOUlGSmxZV04wVFc5MWJuUXVaMlYwVG05a1pTaDBhR2x6TGw5eWIyOTBUbTlrWlVsRUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NdVpHVnNaWFJsVm1Gc2RXVkdiM0pRY205d1pYSjBlU2h1YjJSbExDQndjbTl3UzJWNUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWm05eUlDaHdjbTl3UzJWNUlHbHVJRzVsZUhSUWNtOXdjeWtnZTF4dUlDQWdJQ0FnZG1GeUlHNWxlSFJRY205d0lEMGdibVY0ZEZCeWIzQnpXM0J5YjNCTFpYbGRPMXh1SUNBZ0lDQWdkbUZ5SUd4aGMzUlFjbTl3SUQwZ2NISnZjRXRsZVNBOVBUMGdVMVJaVEVVZ1B5QjBhR2x6TGw5d2NtVjJhVzkxYzFOMGVXeGxRMjl3ZVNBNklHeGhjM1JRY205d2MxdHdjbTl3UzJWNVhUdGNiaUFnSUNBZ0lHbG1JQ2doYm1WNGRGQnliM0J6TG1oaGMwOTNibEJ5YjNCbGNuUjVLSEJ5YjNCTFpYa3BJSHg4SUc1bGVIUlFjbTl3SUQwOVBTQnNZWE4wVUhKdmNDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNod2NtOXdTMlY1SUQwOVBTQlRWRmxNUlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYm1WNGRGQnliM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydEJibVJYWVhKdVJtOXlUWFYwWVhSbFpGTjBlV3hsS0hSb2FYTXVYM0J5WlhacGIzVnpVM1I1YkdWRGIzQjVMQ0IwYUdsekxsOXdjbVYyYVc5MWMxTjBlV3hsTENCMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNCeVpYWnBiM1Z6VTNSNWJHVWdQU0J1WlhoMFVISnZjRHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdibVY0ZEZCeWIzQWdQU0IwYUdsekxsOXdjbVYyYVc5MWMxTjBlV3hsUTI5d2VTQTlJR0Z6YzJsbmJpaDdmU3dnYm1WNGRGQnliM0FwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDNCeVpYWnBiM1Z6VTNSNWJHVkRiM0I1SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9iR0Z6ZEZCeWIzQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlZibk5sZENCemRIbHNaWE1nYjI0Z1lHeGhjM1JRY205d1lDQmlkWFFnYm05MElHOXVJR0J1WlhoMFVISnZjR0F1WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlJQ2h6ZEhsc1pVNWhiV1VnYVc0Z2JHRnpkRkJ5YjNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNZWE4wVUhKdmNDNW9ZWE5QZDI1UWNtOXdaWEowZVNoemRIbHNaVTVoYldVcElDWW1JQ2doYm1WNGRGQnliM0FnZkh3Z0lXNWxlSFJRY205d0xtaGhjMDkzYmxCeWIzQmxjblI1S0hOMGVXeGxUbUZ0WlNrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsVlhCa1lYUmxjeUE5SUhOMGVXeGxWWEJrWVhSbGN5QjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVlZjR1JoZEdWelczTjBlV3hsVG1GdFpWMGdQU0FuSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdMeThnVlhCa1lYUmxJSE4wZVd4bGN5QjBhR0YwSUdOb1lXNW5aV1FnYzJsdVkyVWdZR3hoYzNSUWNtOXdZQzVjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLSE4wZVd4bFRtRnRaU0JwYmlCdVpYaDBVSEp2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWxlSFJRY205d0xtaGhjMDkzYmxCeWIzQmxjblI1S0hOMGVXeGxUbUZ0WlNrZ0ppWWdiR0Z6ZEZCeWIzQmJjM1I1YkdWT1lXMWxYU0FoUFQwZ2JtVjRkRkJ5YjNCYmMzUjViR1ZPWVcxbFhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlZWd1pHRjBaWE1nUFNCemRIbHNaVlZ3WkdGMFpYTWdmSHdnZTMwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxWWEJrWVhSbGMxdHpkSGxzWlU1aGJXVmRJRDBnYm1WNGRGQnliM0JiYzNSNWJHVk9ZVzFsWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVW1Wc2FXVnpJRzl1SUdCMWNHUmhkR1ZUZEhsc1pYTkNlVWxFWUNCdWIzUWdiWFYwWVhScGJtY2dZSE4wZVd4bFZYQmtZWFJsYzJBdVhHNGdJQ0FnSUNBZ0lDQWdjM1I1YkdWVmNHUmhkR1Z6SUQwZ2JtVjRkRkJ5YjNBN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZuYVhOMGNtRjBhVzl1VG1GdFpVMXZaSFZzWlhNdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0hKdmNFdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzVsZUhSUWNtOXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pXNXhkV1YxWlZCMWRFeHBjM1JsYm1WeUtIUm9hWE11WDNKdmIzUk9iMlJsU1VRc0lIQnliM0JMWlhrc0lHNWxlSFJRY205d0xDQjBjbUZ1YzJGamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JHRnpkRkJ5YjNBcElIdGNiaUFnSUNBZ0lDQWdJQ0JrWld4bGRHVk1hWE4wWlc1bGNpaDBhR2x6TGw5eWIyOTBUbTlrWlVsRUxDQndjbTl3UzJWNUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hwYzBOMWMzUnZiVU52YlhCdmJtVnVkQ2gwYUdsekxsOTBZV2NzSUc1bGVIUlFjbTl3Y3lrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGdWIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaU0E5SUZKbFlXTjBUVzkxYm5RdVoyVjBUbTlrWlNoMGFHbHpMbDl5YjI5MFRtOWtaVWxFS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvY0hKdmNFdGxlU0E5UFQwZ1EwaEpURVJTUlU0cElIdGNiaUFnSUNBZ0lDQWdJQ0J1WlhoMFVISnZjQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnUkU5TlVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1ekxuTmxkRlpoYkhWbFJtOXlRWFIwY21saWRYUmxLRzV2WkdVc0lIQnliM0JMWlhrc0lHNWxlSFJRY205d0tUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9SRTlOVUhKdmNHVnlkSGt1Y0hKdmNHVnlkR2xsYzF0d2NtOXdTMlY1WFNCOGZDQkVUMDFRY205d1pYSjBlUzVwYzBOMWMzUnZiVUYwZEhKcFluVjBaU2h3Y205d1MyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVzV2WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0J1YjJSbElEMGdVbVZoWTNSTmIzVnVkQzVuWlhST2IyUmxLSFJvYVhNdVgzSnZiM1JPYjJSbFNVUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklFbG1JSGRsSjNKbElIVndaR0YwYVc1bklIUnZJRzUxYkd3Z2IzSWdkVzVrWldacGJtVmtMQ0IzWlNCemFHOTFiR1FnY21WdGIzWmxJSFJvWlNCd2NtOXdaWEowZVZ4dUlDQWdJQ0FnSUNBdkx5Qm1jbTl0SUhSb1pTQkVUMDBnYm05a1pTQnBibk4wWldGa0lHOW1JR2x1WVdSMlpYSjBZVzUwYkhrZ2MyVjBkR2x1WnlCMGJ5QmhJSE4wY21sdVp5NGdWR2hwYzF4dUlDQWdJQ0FnSUNBdkx5QmljbWx1WjNNZ2RYTWdhVzRnYkdsdVpTQjNhWFJvSUhSb1pTQnpZVzFsSUdKbGFHRjJhVzl5SUhkbElHaGhkbVVnYjI0Z2FXNXBkR2xoYkNCeVpXNWtaWEl1WEc0Z0lDQWdJQ0FnSUdsbUlDaHVaWGgwVUhKdmNDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnUkU5TlVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1ekxuTmxkRlpoYkhWbFJtOXlVSEp2Y0dWeWRIa29ibTlrWlN3Z2NISnZjRXRsZVN3Z2JtVjRkRkJ5YjNBcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJRVJQVFZCeWIzQmxjblI1VDNCbGNtRjBhVzl1Y3k1a1pXeGxkR1ZXWVd4MVpVWnZjbEJ5YjNCbGNuUjVLRzV2WkdVc0lIQnliM0JMWlhrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHpkSGxzWlZWd1pHRjBaWE1wSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hibTlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQnViMlJsSUQwZ1VtVmhZM1JOYjNWdWRDNW5aWFJPYjJSbEtIUm9hWE11WDNKdmIzUk9iMlJsU1VRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1ExTlRVSEp2Y0dWeWRIbFBjR1Z5WVhScGIyNXpMbk5sZEZaaGJIVmxSbTl5VTNSNWJHVnpLRzV2WkdVc0lITjBlV3hsVlhCa1lYUmxjeWs3WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXTnZibU5wYkdWeklIUm9aU0JqYUdsc1pISmxiaUIzYVhSb0lIUm9aU0IyWVhKcGIzVnpJSEJ5YjNCbGNuUnBaWE1nZEdoaGRDQmhabVpsWTNRZ2RHaGxYRzRnSUNBcUlHTm9hV3hrY21WdUlHTnZiblJsYm5RdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnNZWE4wVUhKdmNITmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUc1bGVIUlFjbTl3YzF4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNTlJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmpiMjUwWlhoMFhHNGdJQ0FxTDF4dUlDQmZkWEJrWVhSbFJFOU5RMmhwYkdSeVpXNDZJR1oxYm1OMGFXOXVJQ2hzWVhOMFVISnZjSE1zSUc1bGVIUlFjbTl3Y3l3Z2RISmhibk5oWTNScGIyNHNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnYkdGemRFTnZiblJsYm5RZ1BTQkRUMDVVUlU1VVgxUlpVRVZUVzNSNWNHVnZaaUJzWVhOMFVISnZjSE11WTJocGJHUnlaVzVkSUQ4Z2JHRnpkRkJ5YjNCekxtTm9hV3hrY21WdUlEb2diblZzYkR0Y2JpQWdJQ0IyWVhJZ2JtVjRkRU52Ym5SbGJuUWdQU0JEVDA1VVJVNVVYMVJaVUVWVFczUjVjR1Z2WmlCdVpYaDBVSEp2Y0hNdVkyaHBiR1J5Wlc1ZElEOGdibVY0ZEZCeWIzQnpMbU5vYVd4a2NtVnVJRG9nYm5Wc2JEdGNibHh1SUNBZ0lIWmhjaUJzWVhOMFNIUnRiQ0E5SUd4aGMzUlFjbTl3Y3k1a1lXNW5aWEp2ZFhOc2VWTmxkRWx1Ym1WeVNGUk5UQ0FtSmlCc1lYTjBVSEp2Y0hNdVpHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXd1WDE5b2RHMXNPMXh1SUNBZ0lIWmhjaUJ1WlhoMFNIUnRiQ0E5SUc1bGVIUlFjbTl3Y3k1a1lXNW5aWEp2ZFhOc2VWTmxkRWx1Ym1WeVNGUk5UQ0FtSmlCdVpYaDBVSEp2Y0hNdVpHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXd1WDE5b2RHMXNPMXh1WEc0Z0lDQWdMeThnVG05MFpTQjBhR1VnZFhObElHOW1JR0FoUFdBZ2QyaHBZMmdnWTJobFkydHpJR1p2Y2lCdWRXeHNJRzl5SUhWdVpHVm1hVzVsWkM1Y2JpQWdJQ0IyWVhJZ2JHRnpkRU5vYVd4a2NtVnVJRDBnYkdGemRFTnZiblJsYm5RZ0lUMGdiblZzYkNBL0lHNTFiR3dnT2lCc1lYTjBVSEp2Y0hNdVkyaHBiR1J5Wlc0N1hHNGdJQ0FnZG1GeUlHNWxlSFJEYUdsc1pISmxiaUE5SUc1bGVIUkRiMjUwWlc1MElDRTlJRzUxYkd3Z1B5QnVkV3hzSURvZ2JtVjRkRkJ5YjNCekxtTm9hV3hrY21WdU8xeHVYRzRnSUNBZ0x5OGdTV1lnZDJVbmNtVWdjM2RwZEdOb2FXNW5JR1p5YjIwZ1kyaHBiR1J5Wlc0Z2RHOGdZMjl1ZEdWdWRDOW9kRzFzSUc5eUlIWnBZMlVnZG1WeWMyRXNJSEpsYlc5MlpWeHVJQ0FnSUM4dklIUm9aU0J2YkdRZ1kyOXVkR1Z1ZEZ4dUlDQWdJSFpoY2lCc1lYTjBTR0Z6UTI5dWRHVnVkRTl5U0hSdGJDQTlJR3hoYzNSRGIyNTBaVzUwSUNFOUlHNTFiR3dnZkh3Z2JHRnpkRWgwYld3Z0lUMGdiblZzYkR0Y2JpQWdJQ0IyWVhJZ2JtVjRkRWhoYzBOdmJuUmxiblJQY2toMGJXd2dQU0J1WlhoMFEyOXVkR1Z1ZENBaFBTQnVkV3hzSUh4OElHNWxlSFJJZEcxc0lDRTlJRzUxYkd3N1hHNGdJQ0FnYVdZZ0tHeGhjM1JEYUdsc1pISmxiaUFoUFNCdWRXeHNJQ1ltSUc1bGVIUkRhR2xzWkhKbGJpQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVU5vYVd4a2NtVnVLRzUxYkd3c0lIUnlZVzV6WVdOMGFXOXVMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR3hoYzNSSVlYTkRiMjUwWlc1MFQzSklkRzFzSUNZbUlDRnVaWGgwU0dGelEyOXVkR1Z1ZEU5eVNIUnRiQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NTFjR1JoZEdWVVpYaDBRMjl1ZEdWdWRDZ25KeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0c1bGVIUkRiMjUwWlc1MElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lHbG1JQ2hzWVhOMFEyOXVkR1Z1ZENBaFBUMGdibVY0ZEVOdmJuUmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVlVaWGgwUTI5dWRHVnVkQ2duSnlBcklHNWxlSFJEYjI1MFpXNTBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzVsZUhSSWRHMXNJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR2xtSUNoc1lYTjBTSFJ0YkNBaFBUMGdibVY0ZEVoMGJXd3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWTllYSnJkWEFvSnljZ0t5QnVaWGgwU0hSdGJDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHVaWGgwUTJocGJHUnlaVzRnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NTFjR1JoZEdWRGFHbHNaSEpsYmlodVpYaDBRMmhwYkdSeVpXNHNJSFJ5WVc1ellXTjBhVzl1TENCamIyNTBaWGgwS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxjM1J5YjNseklHRnNiQ0JsZG1WdWRDQnlaV2RwYzNSeVlYUnBiMjV6SUdadmNpQjBhR2x6SUdsdWMzUmhibU5sTGlCRWIyVnpJRzV2ZENCeVpXMXZkbVVnWm5KdmJWeHVJQ0FnS2lCMGFHVWdSRTlOTGlCVWFHRjBJRzExYzNRZ1ltVWdaRzl1WlNCaWVTQjBhR1VnY0dGeVpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lIVnViVzkxYm5SRGIyMXdiMjVsYm5RNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tIUm9hWE11WDNSaFp5a2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbmFXWnlZVzFsSnpwY2JpQWdJQ0FnSUdOaGMyVWdKMmx0WnljNlhHNGdJQ0FnSUNCallYTmxJQ2RtYjNKdEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjNacFpHVnZKenBjYmlBZ0lDQWdJR05oYzJVZ0oyRjFaR2x2SnpwY2JpQWdJQ0FnSUNBZ2RtRnlJR3hwYzNSbGJtVnljeUE5SUhSb2FYTXVYM2R5WVhCd1pYSlRkR0YwWlM1c2FYTjBaVzVsY25NN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hzYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hwYzNSbGJtVnljeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdsemRHVnVaWEp6VzJsZExuSmxiVzkyWlNncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR05oYzJVZ0oybHVjSFYwSnpwY2JpQWdJQ0FnSUNBZ1VtVmhZM1JFVDAxSmJuQjFkQzUxYm0xdmRXNTBWM0poY0hCbGNpaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0JqWVhObElDZG9kRzFzSnpwY2JpQWdJQ0FnSUdOaGMyVWdKMmhsWVdRbk9seHVJQ0FnSUNBZ1kyRnpaU0FuWW05a2VTYzZYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQkRiMjF3YjI1bGJuUnpJR3hwYTJVZ1BHaDBiV3crSUR4b1pXRmtQaUJoYm1RZ1BHSnZaSGsrSUdOaGJpZDBJR0psSUhKbGJXOTJaV1FnYjNJZ1lXUmtaV1JjYmlBZ0lDQWdJQ0FnSUNvZ1pXRnphV3g1SUdsdUlHRWdZM0p2YzNNdFluSnZkM05sY2lCM1lYa3NJR2h2ZDJWMlpYSWdhWFFuY3lCMllXeDFZV0pzWlNCMGJ5QmlaU0JoWW14bElIUnZYRzRnSUNBZ0lDQWdJQ0FxSUhSaGEyVWdZV1IyWVc1MFlXZGxJRzltSUZKbFlXTjBKM01nY21WamIyNWphV3hwWVhScGIyNGdabTl5SUhOMGVXeHBibWNnWVc1a0lEeDBhWFJzWlQ1Y2JpQWdJQ0FnSUNBZ0lDb2diV0Z1WVdkbGJXVnVkQzRnVTI4Z2QyVWdhblZ6ZENCa2IyTjFiV1Z1ZENCcGRDQmhibVFnZEdoeWIzY2dhVzRnWkdGdVoyVnliM1Z6SUdOaGMyVnpMbHh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ0lXWmhiSE5sSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKendsY3o0Z2RISnBaV1FnZEc4Z2RXNXRiM1Z1ZEM0Z1FtVmpZWFZ6WlNCdlppQmpjbTl6Y3kxaWNtOTNjMlZ5SUhGMWFYSnJjeUJwZENCcGN5QW5JQ3NnSjJsdGNHOXpjMmxpYkdVZ2RHOGdkVzV0YjNWdWRDQnpiMjFsSUhSdmNDMXNaWFpsYkNCamIyMXdiMjVsYm5SeklDaGxaeUE4YUhSdGJENHNJQ2NnS3lBblBHaGxZV1ErTENCaGJtUWdQR0p2WkhrK0tTQnlaV3hwWVdKc2VTQmhibVFnWldabWFXTnBaVzUwYkhrdUlGUnZJR1pwZUNCMGFHbHpMQ0JvWVhabElHRWdKeUFySUNkemFXNW5iR1VnZEc5d0xXeGxkbVZzSUdOdmJYQnZibVZ1ZENCMGFHRjBJRzVsZG1WeUlIVnViVzkxYm5SeklISmxibVJsY2lCMGFHVnpaU0FuSUNzZ0oyVnNaVzFsYm5SekxpY3NJSFJvYVhNdVgzUmhaeWtnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxuVnViVzkxYm5SRGFHbHNaSEpsYmlncE8xeHVJQ0FnSUZKbFlXTjBRbkp2ZDNObGNrVjJaVzUwUlcxcGRIUmxjaTVrWld4bGRHVkJiR3hNYVhOMFpXNWxjbk1vZEdocGN5NWZjbTl2ZEU1dlpHVkpSQ2s3WEc0Z0lDQWdVbVZoWTNSRGIyMXdiMjVsYm5SQ2NtOTNjMlZ5Ulc1MmFYSnZibTFsYm5RdWRXNXRiM1Z1ZEVsRVJuSnZiVVZ1ZG1seWIyNXRaVzUwS0hSb2FYTXVYM0p2YjNST2IyUmxTVVFwTzF4dUlDQWdJSFJvYVhNdVgzSnZiM1JPYjJSbFNVUWdQU0J1ZFd4c08xeHVJQ0FnSUhSb2FYTXVYM2R5WVhCd1pYSlRkR0YwWlNBOUlHNTFiR3c3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMjV2WkdWWGFYUm9UR1ZuWVdONVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdkbUZ5SUc1dlpHVWdQU0IwYUdsekxsOXViMlJsVjJsMGFFeGxaMkZqZVZCeWIzQmxjblJwWlhNN1hHNGdJQ0FnSUNCdWIyUmxMbDl5WldGamRFbHVkR1Z5Ym1Gc1EyOXRjRzl1Wlc1MElEMGdiblZzYkR0Y2JpQWdJQ0FnSUhSb2FYTXVYMjV2WkdWWGFYUm9UR1ZuWVdONVVISnZjR1Z5ZEdsbGN5QTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lHZGxkRkIxWW14cFkwbHVjM1JoYm1ObE9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbDl1YjJSbFYybDBhRXhsWjJGamVWQnliM0JsY25ScFpYTXBJSHRjYmlBZ0lDQWdJSFpoY2lCdWIyUmxJRDBnVW1WaFkzUk5iM1Z1ZEM1blpYUk9iMlJsS0hSb2FYTXVYM0p2YjNST2IyUmxTVVFwTzF4dVhHNGdJQ0FnSUNCdWIyUmxMbDl5WldGamRFbHVkR1Z5Ym1Gc1EyOXRjRzl1Wlc1MElEMGdkR2hwY3p0Y2JpQWdJQ0FnSUc1dlpHVXVaMlYwUkU5TlRtOWtaU0E5SUd4bFoyRmplVWRsZEVSUFRVNXZaR1U3WEc0Z0lDQWdJQ0J1YjJSbExtbHpUVzkxYm5SbFpDQTlJR3hsWjJGamVVbHpUVzkxYm5SbFpEdGNiaUFnSUNBZ0lHNXZaR1V1YzJWMFUzUmhkR1VnUFNCc1pXZGhZM2xUWlhSVGRHRjBaVVYwWXp0Y2JpQWdJQ0FnSUc1dlpHVXVjbVZ3YkdGalpWTjBZWFJsSUQwZ2JHVm5ZV041VTJWMFUzUmhkR1ZGZEdNN1hHNGdJQ0FnSUNCdWIyUmxMbVp2Y21ObFZYQmtZWFJsSUQwZ2JHVm5ZV041VTJWMFUzUmhkR1ZGZEdNN1hHNGdJQ0FnSUNCdWIyUmxMbk5sZEZCeWIzQnpJRDBnYkdWbllXTjVVMlYwVUhKdmNITTdYRzRnSUNBZ0lDQnViMlJsTG5KbGNHeGhZMlZRY205d2N5QTlJR3hsWjJGamVWSmxjR3hoWTJWUWNtOXdjenRjYmx4dUlDQWdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTmhia1JsWm1sdVpWQnliM0JsY25SNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9ibTlrWlN3Z2JHVm5ZV041VUhKdmNITkVaWE5qY21sd2RHOXlLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QjFjR1JoZEdWRGIyMXdiMjVsYm5RZ2QybHNiQ0IxY0dSaGRHVWdkR2hwY3lCd2NtOXdaWEowZVNCdmJpQnpkV0p6WlhGMVpXNTBJSEpsYm1SbGNuTmNiaUFnSUNBZ0lDQWdJQ0J1YjJSbExuQnliM0J6SUQwZ2RHaHBjeTVmWTNWeWNtVnVkRVZzWlcxbGJuUXVjSEp2Y0hNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDOHZJSFZ3WkdGMFpVTnZiWEJ2Ym1WdWRDQjNhV3hzSUhWd1pHRjBaU0IwYUdseklIQnliM0JsY25SNUlHOXVJSE4xWW5ObGNYVmxiblFnY21WdVpHVnljMXh1SUNBZ0lDQWdJQ0J1YjJSbExuQnliM0J6SUQwZ2RHaHBjeTVmWTNWeWNtVnVkRVZzWlcxbGJuUXVjSEp2Y0hNN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIUm9hWE11WDI1dlpHVlhhWFJvVEdWbllXTjVVSEp2Y0dWeWRHbGxjeUE5SUc1dlpHVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXViMlJsVjJsMGFFeGxaMkZqZVZCeWIzQmxjblJwWlhNN1hHNGdJSDFjYmx4dWZUdGNibHh1VW1WaFkzUlFaWEptTG0xbFlYTjFjbVZOWlhSb2IyUnpLRkpsWVdOMFJFOU5RMjl0Y0c5dVpXNTBMQ0FuVW1WaFkzUkVUMDFEYjIxd2IyNWxiblFuTENCN1hHNGdJRzF2ZFc1MFEyOXRjRzl1Wlc1ME9pQW5iVzkxYm5SRGIyMXdiMjVsYm5RbkxGeHVJQ0IxY0dSaGRHVkRiMjF3YjI1bGJuUTZJQ2QxY0dSaGRHVkRiMjF3YjI1bGJuUW5YRzU5S1R0Y2JseHVZWE56YVdkdUtGSmxZV04wUkU5TlEyOXRjRzl1Wlc1MExuQnliM1J2ZEhsd1pTd2dVbVZoWTNSRVQwMURiMjF3YjI1bGJuUXVUV2w0YVc0c0lGSmxZV04wVFhWc2RHbERhR2xzWkM1TmFYaHBiaWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1VtVmhZM1JFVDAxRGIyMXdiMjVsYm5RN0lsMTkiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NRmFjdG9yaWVzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3InKTtcblxudmFyIG1hcE9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL21hcE9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGFnIG5hbWUgKGUuZy4gYGRpdmApLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRE9NRmFjdG9yeSh0YWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3RvcnkodGFnKTtcbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkodGFnKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwcGluZyBmcm9tIHN1cHBvcnRlZCBIVE1MIHRhZ3MgdG8gYFJlYWN0RE9NQ29tcG9uZW50YCBjbGFzc2VzLlxuICogVGhpcyBpcyBhbHNvIGFjY2Vzc2libGUgdmlhIGBSZWFjdC5ET01gLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFJlYWN0RE9NRmFjdG9yaWVzID0gbWFwT2JqZWN0KHtcbiAgYTogJ2EnLFxuICBhYmJyOiAnYWJicicsXG4gIGFkZHJlc3M6ICdhZGRyZXNzJyxcbiAgYXJlYTogJ2FyZWEnLFxuICBhcnRpY2xlOiAnYXJ0aWNsZScsXG4gIGFzaWRlOiAnYXNpZGUnLFxuICBhdWRpbzogJ2F1ZGlvJyxcbiAgYjogJ2InLFxuICBiYXNlOiAnYmFzZScsXG4gIGJkaTogJ2JkaScsXG4gIGJkbzogJ2JkbycsXG4gIGJpZzogJ2JpZycsXG4gIGJsb2NrcXVvdGU6ICdibG9ja3F1b3RlJyxcbiAgYm9keTogJ2JvZHknLFxuICBicjogJ2JyJyxcbiAgYnV0dG9uOiAnYnV0dG9uJyxcbiAgY2FudmFzOiAnY2FudmFzJyxcbiAgY2FwdGlvbjogJ2NhcHRpb24nLFxuICBjaXRlOiAnY2l0ZScsXG4gIGNvZGU6ICdjb2RlJyxcbiAgY29sOiAnY29sJyxcbiAgY29sZ3JvdXA6ICdjb2xncm91cCcsXG4gIGRhdGE6ICdkYXRhJyxcbiAgZGF0YWxpc3Q6ICdkYXRhbGlzdCcsXG4gIGRkOiAnZGQnLFxuICBkZWw6ICdkZWwnLFxuICBkZXRhaWxzOiAnZGV0YWlscycsXG4gIGRmbjogJ2RmbicsXG4gIGRpYWxvZzogJ2RpYWxvZycsXG4gIGRpdjogJ2RpdicsXG4gIGRsOiAnZGwnLFxuICBkdDogJ2R0JyxcbiAgZW06ICdlbScsXG4gIGVtYmVkOiAnZW1iZWQnLFxuICBmaWVsZHNldDogJ2ZpZWxkc2V0JyxcbiAgZmlnY2FwdGlvbjogJ2ZpZ2NhcHRpb24nLFxuICBmaWd1cmU6ICdmaWd1cmUnLFxuICBmb290ZXI6ICdmb290ZXInLFxuICBmb3JtOiAnZm9ybScsXG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIGhlYWQ6ICdoZWFkJyxcbiAgaGVhZGVyOiAnaGVhZGVyJyxcbiAgaGdyb3VwOiAnaGdyb3VwJyxcbiAgaHI6ICdocicsXG4gIGh0bWw6ICdodG1sJyxcbiAgaTogJ2knLFxuICBpZnJhbWU6ICdpZnJhbWUnLFxuICBpbWc6ICdpbWcnLFxuICBpbnB1dDogJ2lucHV0JyxcbiAgaW5zOiAnaW5zJyxcbiAga2JkOiAna2JkJyxcbiAga2V5Z2VuOiAna2V5Z2VuJyxcbiAgbGFiZWw6ICdsYWJlbCcsXG4gIGxlZ2VuZDogJ2xlZ2VuZCcsXG4gIGxpOiAnbGknLFxuICBsaW5rOiAnbGluaycsXG4gIG1haW46ICdtYWluJyxcbiAgbWFwOiAnbWFwJyxcbiAgbWFyazogJ21hcmsnLFxuICBtZW51OiAnbWVudScsXG4gIG1lbnVpdGVtOiAnbWVudWl0ZW0nLFxuICBtZXRhOiAnbWV0YScsXG4gIG1ldGVyOiAnbWV0ZXInLFxuICBuYXY6ICduYXYnLFxuICBub3NjcmlwdDogJ25vc2NyaXB0JyxcbiAgb2JqZWN0OiAnb2JqZWN0JyxcbiAgb2w6ICdvbCcsXG4gIG9wdGdyb3VwOiAnb3B0Z3JvdXAnLFxuICBvcHRpb246ICdvcHRpb24nLFxuICBvdXRwdXQ6ICdvdXRwdXQnLFxuICBwOiAncCcsXG4gIHBhcmFtOiAncGFyYW0nLFxuICBwaWN0dXJlOiAncGljdHVyZScsXG4gIHByZTogJ3ByZScsXG4gIHByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICBxOiAncScsXG4gIHJwOiAncnAnLFxuICBydDogJ3J0JyxcbiAgcnVieTogJ3J1YnknLFxuICBzOiAncycsXG4gIHNhbXA6ICdzYW1wJyxcbiAgc2NyaXB0OiAnc2NyaXB0JyxcbiAgc2VjdGlvbjogJ3NlY3Rpb24nLFxuICBzZWxlY3Q6ICdzZWxlY3QnLFxuICBzbWFsbDogJ3NtYWxsJyxcbiAgc291cmNlOiAnc291cmNlJyxcbiAgc3BhbjogJ3NwYW4nLFxuICBzdHJvbmc6ICdzdHJvbmcnLFxuICBzdHlsZTogJ3N0eWxlJyxcbiAgc3ViOiAnc3ViJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICBzdXA6ICdzdXAnLFxuICB0YWJsZTogJ3RhYmxlJyxcbiAgdGJvZHk6ICd0Ym9keScsXG4gIHRkOiAndGQnLFxuICB0ZXh0YXJlYTogJ3RleHRhcmVhJyxcbiAgdGZvb3Q6ICd0Zm9vdCcsXG4gIHRoOiAndGgnLFxuICB0aGVhZDogJ3RoZWFkJyxcbiAgdGltZTogJ3RpbWUnLFxuICB0aXRsZTogJ3RpdGxlJyxcbiAgdHI6ICd0cicsXG4gIHRyYWNrOiAndHJhY2snLFxuICB1OiAndScsXG4gIHVsOiAndWwnLFxuICAndmFyJzogJ3ZhcicsXG4gIHZpZGVvOiAndmlkZW8nLFxuICB3YnI6ICd3YnInLFxuXG4gIC8vIFNWR1xuICBjaXJjbGU6ICdjaXJjbGUnLFxuICBjbGlwUGF0aDogJ2NsaXBQYXRoJyxcbiAgZGVmczogJ2RlZnMnLFxuICBlbGxpcHNlOiAnZWxsaXBzZScsXG4gIGc6ICdnJyxcbiAgaW1hZ2U6ICdpbWFnZScsXG4gIGxpbmU6ICdsaW5lJyxcbiAgbGluZWFyR3JhZGllbnQ6ICdsaW5lYXJHcmFkaWVudCcsXG4gIG1hc2s6ICdtYXNrJyxcbiAgcGF0aDogJ3BhdGgnLFxuICBwYXR0ZXJuOiAncGF0dGVybicsXG4gIHBvbHlnb246ICdwb2x5Z29uJyxcbiAgcG9seWxpbmU6ICdwb2x5bGluZScsXG4gIHJhZGlhbEdyYWRpZW50OiAncmFkaWFsR3JhZGllbnQnLFxuICByZWN0OiAncmVjdCcsXG4gIHN0b3A6ICdzdG9wJyxcbiAgc3ZnOiAnc3ZnJyxcbiAgdGV4dDogJ3RleHQnLFxuICB0c3BhbjogJ3RzcGFuJ1xuXG59LCBjcmVhdGVET01GYWN0b3J5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZhY3Rvcmllcztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRVQwMUdZV04wYjNKcFpYTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZKbFlXTjBSRTlOUm1GamRHOXlhV1Z6WEc0Z0tpQkFkSGx3WldOb1pXTnJjeUJ6ZEdGMGFXTXRiMjVzZVZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlGSmxZV04wUld4bGJXVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JGYkdWdFpXNTBKeWs3WEc1MllYSWdVbVZoWTNSRmJHVnRaVzUwVm1Gc2FXUmhkRzl5SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVWc1pXMWxiblJXWVd4cFpHRjBiM0luS1R0Y2JseHVkbUZ5SUcxaGNFOWlhbVZqZENBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwyMWhjRTlpYW1WamRDY3BPMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaU0JoSUdaaFkzUnZjbmtnZEdoaGRDQmpjbVZoZEdWeklFaFVUVXdnZEdGbklHVnNaVzFsYm5SekxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMFlXY2dWR0ZuSUc1aGJXVWdLR1V1Wnk0Z1lHUnBkbUFwTGx4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUkU5TlJtRmpkRzl5ZVNoMFlXY3BJSHRjYmlBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdVbVZoWTNSRmJHVnRaVzUwVm1Gc2FXUmhkRzl5TG1OeVpXRjBaVVpoWTNSdmNua29kR0ZuS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnVW1WaFkzUkZiR1Z0Wlc1MExtTnlaV0YwWlVaaFkzUnZjbmtvZEdGbktUdGNibjFjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ2JXRndjR2x1WnlCbWNtOXRJSE4xY0hCdmNuUmxaQ0JJVkUxTUlIUmhaM01nZEc4Z1lGSmxZV04wUkU5TlEyOXRjRzl1Wlc1MFlDQmpiR0Z6YzJWekxseHVJQ29nVkdocGN5QnBjeUJoYkhOdklHRmpZMlZ6YzJsaWJHVWdkbWxoSUdCU1pXRmpkQzVFVDAxZ0xseHVJQ3BjYmlBcUlFQndkV0pzYVdOY2JpQXFMMXh1ZG1GeUlGSmxZV04wUkU5TlJtRmpkRzl5YVdWeklEMGdiV0Z3VDJKcVpXTjBLSHRjYmlBZ1lUb2dKMkVuTEZ4dUlDQmhZbUp5T2lBbllXSmljaWNzWEc0Z0lHRmtaSEpsYzNNNklDZGhaR1J5WlhOekp5eGNiaUFnWVhKbFlUb2dKMkZ5WldFbkxGeHVJQ0JoY25ScFkyeGxPaUFuWVhKMGFXTnNaU2NzWEc0Z0lHRnphV1JsT2lBbllYTnBaR1VuTEZ4dUlDQmhkV1JwYnpvZ0oyRjFaR2x2Snl4Y2JpQWdZam9nSjJJbkxGeHVJQ0JpWVhObE9pQW5ZbUZ6WlNjc1hHNGdJR0prYVRvZ0oySmthU2NzWEc0Z0lHSmtiem9nSjJKa2J5Y3NYRzRnSUdKcFp6b2dKMkpwWnljc1hHNGdJR0pzYjJOcmNYVnZkR1U2SUNkaWJHOWphM0YxYjNSbEp5eGNiaUFnWW05a2VUb2dKMkp2WkhrbkxGeHVJQ0JpY2pvZ0oySnlKeXhjYmlBZ1luVjBkRzl1T2lBblluVjBkRzl1Snl4Y2JpQWdZMkZ1ZG1Gek9pQW5ZMkZ1ZG1Gekp5eGNiaUFnWTJGd2RHbHZiam9nSjJOaGNIUnBiMjRuTEZ4dUlDQmphWFJsT2lBblkybDBaU2NzWEc0Z0lHTnZaR1U2SUNkamIyUmxKeXhjYmlBZ1kyOXNPaUFuWTI5c0p5eGNiaUFnWTI5c1ozSnZkWEE2SUNkamIyeG5jbTkxY0Njc1hHNGdJR1JoZEdFNklDZGtZWFJoSnl4Y2JpQWdaR0YwWVd4cGMzUTZJQ2RrWVhSaGJHbHpkQ2NzWEc0Z0lHUmtPaUFuWkdRbkxGeHVJQ0JrWld3NklDZGtaV3duTEZ4dUlDQmtaWFJoYVd4ek9pQW5aR1YwWVdsc2N5Y3NYRzRnSUdSbWJqb2dKMlJtYmljc1hHNGdJR1JwWVd4dlp6b2dKMlJwWVd4dlp5Y3NYRzRnSUdScGRqb2dKMlJwZGljc1hHNGdJR1JzT2lBblpHd25MRnh1SUNCa2REb2dKMlIwSnl4Y2JpQWdaVzA2SUNkbGJTY3NYRzRnSUdWdFltVmtPaUFuWlcxaVpXUW5MRnh1SUNCbWFXVnNaSE5sZERvZ0oyWnBaV3hrYzJWMEp5eGNiaUFnWm1sblkyRndkR2x2YmpvZ0oyWnBaMk5oY0hScGIyNG5MRnh1SUNCbWFXZDFjbVU2SUNkbWFXZDFjbVVuTEZ4dUlDQm1iMjkwWlhJNklDZG1iMjkwWlhJbkxGeHVJQ0JtYjNKdE9pQW5abTl5YlNjc1hHNGdJR2d4T2lBbmFERW5MRnh1SUNCb01qb2dKMmd5Snl4Y2JpQWdhRE02SUNkb015Y3NYRzRnSUdnME9pQW5hRFFuTEZ4dUlDQm9OVG9nSjJnMUp5eGNiaUFnYURZNklDZG9OaWNzWEc0Z0lHaGxZV1E2SUNkb1pXRmtKeXhjYmlBZ2FHVmhaR1Z5T2lBbmFHVmhaR1Z5Snl4Y2JpQWdhR2R5YjNWd09pQW5hR2R5YjNWd0p5eGNiaUFnYUhJNklDZG9jaWNzWEc0Z0lHaDBiV3c2SUNkb2RHMXNKeXhjYmlBZ2FUb2dKMmtuTEZ4dUlDQnBabkpoYldVNklDZHBabkpoYldVbkxGeHVJQ0JwYldjNklDZHBiV2NuTEZ4dUlDQnBibkIxZERvZ0oybHVjSFYwSnl4Y2JpQWdhVzV6T2lBbmFXNXpKeXhjYmlBZ2EySmtPaUFuYTJKa0p5eGNiaUFnYTJWNVoyVnVPaUFuYTJWNVoyVnVKeXhjYmlBZ2JHRmlaV3c2SUNkc1lXSmxiQ2NzWEc0Z0lHeGxaMlZ1WkRvZ0oyeGxaMlZ1WkNjc1hHNGdJR3hwT2lBbmJHa25MRnh1SUNCc2FXNXJPaUFuYkdsdWF5Y3NYRzRnSUcxaGFXNDZJQ2R0WVdsdUp5eGNiaUFnYldGd09pQW5iV0Z3Snl4Y2JpQWdiV0Z5YXpvZ0oyMWhjbXNuTEZ4dUlDQnRaVzUxT2lBbmJXVnVkU2NzWEc0Z0lHMWxiblZwZEdWdE9pQW5iV1Z1ZFdsMFpXMG5MRnh1SUNCdFpYUmhPaUFuYldWMFlTY3NYRzRnSUcxbGRHVnlPaUFuYldWMFpYSW5MRnh1SUNCdVlYWTZJQ2R1WVhZbkxGeHVJQ0J1YjNOamNtbHdkRG9nSjI1dmMyTnlhWEIwSnl4Y2JpQWdiMkpxWldOME9pQW5iMkpxWldOMEp5eGNiaUFnYjJ3NklDZHZiQ2NzWEc0Z0lHOXdkR2R5YjNWd09pQW5iM0IwWjNKdmRYQW5MRnh1SUNCdmNIUnBiMjQ2SUNkdmNIUnBiMjRuTEZ4dUlDQnZkWFJ3ZFhRNklDZHZkWFJ3ZFhRbkxGeHVJQ0J3T2lBbmNDY3NYRzRnSUhCaGNtRnRPaUFuY0dGeVlXMG5MRnh1SUNCd2FXTjBkWEpsT2lBbmNHbGpkSFZ5WlNjc1hHNGdJSEJ5WlRvZ0ozQnlaU2NzWEc0Z0lIQnliMmR5WlhOek9pQW5jSEp2WjNKbGMzTW5MRnh1SUNCeE9pQW5jU2NzWEc0Z0lISndPaUFuY25BbkxGeHVJQ0J5ZERvZ0ozSjBKeXhjYmlBZ2NuVmllVG9nSjNKMVlua25MRnh1SUNCek9pQW5jeWNzWEc0Z0lITmhiWEE2SUNkellXMXdKeXhjYmlBZ2MyTnlhWEIwT2lBbmMyTnlhWEIwSnl4Y2JpQWdjMlZqZEdsdmJqb2dKM05sWTNScGIyNG5MRnh1SUNCelpXeGxZM1E2SUNkelpXeGxZM1FuTEZ4dUlDQnpiV0ZzYkRvZ0ozTnRZV3hzSnl4Y2JpQWdjMjkxY21ObE9pQW5jMjkxY21ObEp5eGNiaUFnYzNCaGJqb2dKM053WVc0bkxGeHVJQ0J6ZEhKdmJtYzZJQ2R6ZEhKdmJtY25MRnh1SUNCemRIbHNaVG9nSjNOMGVXeGxKeXhjYmlBZ2MzVmlPaUFuYzNWaUp5eGNiaUFnYzNWdGJXRnllVG9nSjNOMWJXMWhjbmtuTEZ4dUlDQnpkWEE2SUNkemRYQW5MRnh1SUNCMFlXSnNaVG9nSjNSaFlteGxKeXhjYmlBZ2RHSnZaSGs2SUNkMFltOWtlU2NzWEc0Z0lIUmtPaUFuZEdRbkxGeHVJQ0IwWlhoMFlYSmxZVG9nSjNSbGVIUmhjbVZoSnl4Y2JpQWdkR1p2YjNRNklDZDBabTl2ZENjc1hHNGdJSFJvT2lBbmRHZ25MRnh1SUNCMGFHVmhaRG9nSjNSb1pXRmtKeXhjYmlBZ2RHbHRaVG9nSjNScGJXVW5MRnh1SUNCMGFYUnNaVG9nSjNScGRHeGxKeXhjYmlBZ2RISTZJQ2QwY2ljc1hHNGdJSFJ5WVdOck9pQW5kSEpoWTJzbkxGeHVJQ0IxT2lBbmRTY3NYRzRnSUhWc09pQW5kV3duTEZ4dUlDQW5kbUZ5SnpvZ0ozWmhjaWNzWEc0Z0lIWnBaR1Z2T2lBbmRtbGtaVzhuTEZ4dUlDQjNZbkk2SUNkM1luSW5MRnh1WEc0Z0lDOHZJRk5XUjF4dUlDQmphWEpqYkdVNklDZGphWEpqYkdVbkxGeHVJQ0JqYkdsd1VHRjBhRG9nSjJOc2FYQlFZWFJvSnl4Y2JpQWdaR1ZtY3pvZ0oyUmxabk1uTEZ4dUlDQmxiR3hwY0hObE9pQW5aV3hzYVhCelpTY3NYRzRnSUdjNklDZG5KeXhjYmlBZ2FXMWhaMlU2SUNkcGJXRm5aU2NzWEc0Z0lHeHBibVU2SUNkc2FXNWxKeXhjYmlBZ2JHbHVaV0Z5UjNKaFpHbGxiblE2SUNkc2FXNWxZWEpIY21Ga2FXVnVkQ2NzWEc0Z0lHMWhjMnM2SUNkdFlYTnJKeXhjYmlBZ2NHRjBhRG9nSjNCaGRHZ25MRnh1SUNCd1lYUjBaWEp1T2lBbmNHRjBkR1Z5Ymljc1hHNGdJSEJ2YkhsbmIyNDZJQ2R3YjJ4NVoyOXVKeXhjYmlBZ2NHOXNlV3hwYm1VNklDZHdiMng1YkdsdVpTY3NYRzRnSUhKaFpHbGhiRWR5WVdScFpXNTBPaUFuY21Ga2FXRnNSM0poWkdsbGJuUW5MRnh1SUNCeVpXTjBPaUFuY21WamRDY3NYRzRnSUhOMGIzQTZJQ2R6ZEc5d0p5eGNiaUFnYzNabk9pQW5jM1puSnl4Y2JpQWdkR1Y0ZERvZ0ozUmxlSFFuTEZ4dUlDQjBjM0JoYmpvZ0ozUnpjR0Z1SjF4dVhHNTlMQ0JqY21WaGRHVkVUMDFHWVdOMGIzSjVLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRVJQVFVaaFkzUnZjbWxsY3pzaVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01GZWF0dXJlRmxhZ3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHtcbiAgdXNlQ3JlYXRlRWxlbWVudDogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01GZWF0dXJlRmxhZ3M7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUlET3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTUNoaWxkcmVuT3BlcmF0aW9ucycpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBFcnJvcnMgZm9yIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90IGJlIHVwZGF0ZWQgd2l0aCBgdXBkYXRlUHJvcGVydHlCeUlEKClgLlxuICpcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMgPSB7XG4gIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlSW5uZXJIVE1MQnlJRCgpYC4nLFxuICBzdHlsZTogJ2BzdHlsZWAgbXVzdCBiZSBzZXQgdXNpbmcgYHVwZGF0ZVN0eWxlc0J5SUQoKWAuJ1xufTtcblxuLyoqXG4gKiBPcGVyYXRpb25zIHVzZWQgdG8gcHJvY2VzcyB1cGRhdGVzIHRvIERPTSBub2Rlcy5cbiAqL1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgcHJvcGVydHkgdmFsdWVzLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG9cbiAgICogdXBkYXRlIERPTSBwcm9wZXJ0aWVzIGluIGBET01Qcm9wZXJ0eWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgdmFsaWQgcHJvcGVydHkgbmFtZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVQcm9wZXJ0eUJ5SUQ6IGZ1bmN0aW9uIChpZCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgISFJTlZBTElEX1BST1BFUlRZX0VSUk9SUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXMnLCBJTlZBTElEX1BST1BFUlRZX0VSUk9SU1tuYW1lXSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgd2UncmUgdXBkYXRpbmcgdG8gbnVsbCBvciB1bmRlZmluZWQsIHdlIHNob3VsZCByZW1vdmUgdGhlIHByb3BlcnR5XG4gICAgLy8gZnJvbSB0aGUgRE9NIG5vZGUgaW5zdGVhZCBvZiBpbmFkdmVydGFudGx5IHNldHRpbmcgdG8gYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBicmluZ3MgdXMgaW4gbGluZSB3aXRoIHRoZSBzYW1lIGJlaGF2aW9yIHdlIGhhdmUgb24gaW5pdGlhbCByZW5kZXIuXG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIERPTSBub2RlIHRoYXQgZXhpc3RzIGluIHRoZSBkb2N1bWVudCB3aXRoIG1hcmt1cC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGNoaWxkIHRvIGJlIHJlcGxhY2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIERhbmdlcm91cyBtYXJrdXAgdG8gaW5qZWN0IGluIHBsYWNlIG9mIGNoaWxkLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwfVxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBmdW5jdGlvbiAoaWQsIG1hcmt1cCkge1xuICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAobm9kZSwgbWFya3VwKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogZnVuY3Rpb24gKHVwZGF0ZXMsIG1hcmt1cCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdXBkYXRlc1tpXS5wYXJlbnROb2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHVwZGF0ZXNbaV0ucGFyZW50SUQpO1xuICAgIH1cbiAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMucHJvY2Vzc1VwZGF0ZXModXBkYXRlcywgbWFya3VwKTtcbiAgfVxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0RE9NSURPcGVyYXRpb25zLCAnUmVhY3RET01JRE9wZXJhdGlvbnMnLCB7XG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCcsXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogJ2Rhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcydcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSURPcGVyYXRpb25zO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JFVDAxSlJFOXdaWEpoZEdsdmJuTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnVW1WaFkzUkVUMDFKUkU5d1pYSmhkR2x2Ym5OY2JpQXFJRUIwZVhCbFkyaGxZMnR6SUhOMFlYUnBZeTF2Ym14NVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdSRTlOUTJocGJHUnlaVzVQY0dWeVlYUnBiMjV6SUQwZ2NtVnhkV2x5WlNnbkxpOUVUMDFEYUdsc1pISmxiazl3WlhKaGRHbHZibk1uS1R0Y2JuWmhjaUJFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NZ1BTQnlaWEYxYVhKbEtDY3VMMFJQVFZCeWIzQmxjblI1VDNCbGNtRjBhVzl1Y3ljcE8xeHVkbUZ5SUZKbFlXTjBUVzkxYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFRXOTFiblFuS1R0Y2JuWmhjaUJTWldGamRGQmxjbVlnUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wVUdWeVppY3BPMXh1WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2YVc1MllYSnBZVzUwSnlrN1hHNWNiaThxS2x4dUlDb2dSWEp5YjNKeklHWnZjaUJ3Y205d1pYSjBhV1Z6SUhSb1lYUWdjMmh2ZFd4a0lHNXZkQ0JpWlNCMWNHUmhkR1ZrSUhkcGRHZ2dZSFZ3WkdGMFpWQnliM0JsY25SNVFubEpSQ2dwWUM1Y2JpQXFYRzRnS2lCQWRIbHdaU0I3YjJKcVpXTjBmVnh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFMMXh1ZG1GeUlFbE9Wa0ZNU1VSZlVGSlBVRVZTVkZsZlJWSlNUMUpUSUQwZ2UxeHVJQ0JrWVc1blpYSnZkWE5zZVZObGRFbHVibVZ5U0ZSTlREb2dKMkJrWVc1blpYSnZkWE5zZVZObGRFbHVibVZ5U0ZSTlRHQWdiWFZ6ZENCaVpTQnpaWFFnZFhOcGJtY2dZSFZ3WkdGMFpVbHVibVZ5U0ZSTlRFSjVTVVFvS1dBdUp5eGNiaUFnYzNSNWJHVTZJQ2RnYzNSNWJHVmdJRzExYzNRZ1ltVWdjMlYwSUhWemFXNW5JR0IxY0dSaGRHVlRkSGxzWlhOQ2VVbEVLQ2xnTGlkY2JuMDdYRzVjYmk4cUtseHVJQ29nVDNCbGNtRjBhVzl1Y3lCMWMyVmtJSFJ2SUhCeWIyTmxjM01nZFhCa1lYUmxjeUIwYnlCRVQwMGdibTlrWlhNdVhHNGdLaTljYm5aaGNpQlNaV0ZqZEVSUFRVbEVUM0JsY21GMGFXOXVjeUE5SUh0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxjeUJoSUVSUFRTQnViMlJsSUhkcGRHZ2dibVYzSUhCeWIzQmxjblI1SUhaaGJIVmxjeTRnVkdocGN5QnphRzkxYkdRZ2IyNXNlU0JpWlNCMWMyVmtJSFJ2WEc0Z0lDQXFJSFZ3WkdGMFpTQkVUMDBnY0hKdmNHVnlkR2xsY3lCcGJpQmdSRTlOVUhKdmNHVnlkSGxnTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2FXUWdTVVFnYjJZZ2RHaGxJRzV2WkdVZ2RHOGdkWEJrWVhSbExseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1GdFpTQkJJSFpoYkdsa0lIQnliM0JsY25SNUlHNWhiV1VzSUhObFpTQmdSRTlOVUhKdmNHVnlkSGxnTGx4dUlDQWdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRTVsZHlCMllXeDFaU0J2WmlCMGFHVWdjSEp2Y0dWeWRIa3VYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdkWEJrWVhSbFVISnZjR1Z5ZEhsQ2VVbEVPaUJtZFc1amRHbHZiaUFvYVdRc0lHNWhiV1VzSUhaaGJIVmxLU0I3WEc0Z0lDQWdkbUZ5SUc1dlpHVWdQU0JTWldGamRFMXZkVzUwTG1kbGRFNXZaR1VvYVdRcE8xeHVJQ0FnSUNFaFNVNVdRVXhKUkY5UVVrOVFSVkpVV1Y5RlVsSlBVbE11YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuZFhCa1lYUmxVSEp2Y0dWeWRIbENlVWxFS0M0dUxpazZJQ1Z6Snl3Z1NVNVdRVXhKUkY5UVVrOVFSVkpVV1Y5RlVsSlBVbE5iYm1GdFpWMHBJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUM4dklFbG1JSGRsSjNKbElIVndaR0YwYVc1bklIUnZJRzUxYkd3Z2IzSWdkVzVrWldacGJtVmtMQ0IzWlNCemFHOTFiR1FnY21WdGIzWmxJSFJvWlNCd2NtOXdaWEowZVZ4dUlDQWdJQzh2SUdaeWIyMGdkR2hsSUVSUFRTQnViMlJsSUdsdWMzUmxZV1FnYjJZZ2FXNWhaSFpsY25SaGJuUnNlU0J6WlhSMGFXNW5JSFJ2SUdFZ2MzUnlhVzVuTGlCVWFHbHpYRzRnSUNBZ0x5OGdZbkpwYm1keklIVnpJR2x1SUd4cGJtVWdkMmwwYUNCMGFHVWdjMkZ0WlNCaVpXaGhkbWx2Y2lCM1pTQm9ZWFpsSUc5dUlHbHVhWFJwWVd3Z2NtVnVaR1Z5TGx4dUlDQWdJR2xtSUNoMllXeDFaU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0JFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NdWMyVjBWbUZzZFdWR2IzSlFjbTl3WlhKMGVTaHViMlJsTENCdVlXMWxMQ0IyWVd4MVpTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUVSUFRWQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5NWtaV3hsZEdWV1lXeDFaVVp2Y2xCeWIzQmxjblI1S0c1dlpHVXNJRzVoYldVcE8xeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ3YkdGalpYTWdZU0JFVDAwZ2JtOWtaU0IwYUdGMElHVjRhWE4wY3lCcGJpQjBhR1VnWkc5amRXMWxiblFnZDJsMGFDQnRZWEpyZFhBdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnBaQ0JKUkNCdlppQmphR2xzWkNCMGJ5QmlaU0J5WlhCc1lXTmxaQzVjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMWhjbXQxY0NCRVlXNW5aWEp2ZFhNZ2JXRnlhM1Z3SUhSdklHbHVhbVZqZENCcGJpQndiR0ZqWlNCdlppQmphR2xzWkM1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFJRUJ6WldVZ2UwUmhibWRsY2k1a1lXNW5aWEp2ZFhOc2VWSmxjR3hoWTJWT2IyUmxWMmwwYUUxaGNtdDFjSDFjYmlBZ0lDb3ZYRzRnSUdSaGJtZGxjbTkxYzJ4NVVtVndiR0ZqWlU1dlpHVlhhWFJvVFdGeWEzVndRbmxKUkRvZ1puVnVZM1JwYjI0Z0tHbGtMQ0J0WVhKcmRYQXBJSHRjYmlBZ0lDQjJZWElnYm05a1pTQTlJRkpsWVdOMFRXOTFiblF1WjJWMFRtOWtaU2hwWkNrN1hHNGdJQ0FnUkU5TlEyaHBiR1J5Wlc1UGNHVnlZWFJwYjI1ekxtUmhibWRsY205MWMyeDVVbVZ3YkdGalpVNXZaR1ZYYVhSb1RXRnlhM1Z3S0c1dlpHVXNJRzFoY210MWNDazdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWd1pHRjBaWE1nWVNCamIyMXdiMjVsYm5RbmN5QmphR2xzWkhKbGJpQmllU0J3Y205alpYTnphVzVuSUdFZ2MyVnlhV1Z6SUc5bUlIVndaR0YwWlhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdZWEp5WVhrOGIySnFaV04wUG4wZ2RYQmtZWFJsY3lCTWFYTjBJRzltSUhWd1pHRjBaU0JqYjI1bWFXZDFjbUYwYVc5dWN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUh0aGNuSmhlVHh6ZEhKcGJtYytmU0J0WVhKcmRYQWdUR2x6ZENCdlppQnRZWEpyZFhBZ2MzUnlhVzVuY3k1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCa1lXNW5aWEp2ZFhOc2VWQnliMk5sYzNORGFHbHNaSEpsYmxWd1pHRjBaWE02SUdaMWJtTjBhVzl1SUNoMWNHUmhkR1Z6TENCdFlYSnJkWEFwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhWd1pHRjBaWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIVndaR0YwWlhOYmFWMHVjR0Z5Wlc1MFRtOWtaU0E5SUZKbFlXTjBUVzkxYm5RdVoyVjBUbTlrWlNoMWNHUmhkR1Z6VzJsZExuQmhjbVZ1ZEVsRUtUdGNiaUFnSUNCOVhHNGdJQ0FnUkU5TlEyaHBiR1J5Wlc1UGNHVnlZWFJwYjI1ekxuQnliMk5sYzNOVmNHUmhkR1Z6S0hWd1pHRjBaWE1zSUcxaGNtdDFjQ2s3WEc0Z0lIMWNibjA3WEc1Y2JsSmxZV04wVUdWeVppNXRaV0Z6ZFhKbFRXVjBhRzlrY3loU1pXRmpkRVJQVFVsRVQzQmxjbUYwYVc5dWN5d2dKMUpsWVdOMFJFOU5TVVJQY0dWeVlYUnBiMjV6Snl3Z2UxeHVJQ0JrWVc1blpYSnZkWE5zZVZKbGNHeGhZMlZPYjJSbFYybDBhRTFoY210MWNFSjVTVVE2SUNka1lXNW5aWEp2ZFhOc2VWSmxjR3hoWTJWT2IyUmxWMmwwYUUxaGNtdDFjRUo1U1VRbkxGeHVJQ0JrWVc1blpYSnZkWE5zZVZCeWIyTmxjM05EYUdsc1pISmxibFZ3WkdGMFpYTTZJQ2RrWVc1blpYSnZkWE5zZVZCeWIyTmxjM05EYUdsc1pISmxibFZ3WkdGMFpYTW5YRzU5S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNaV0ZqZEVSUFRVbEVUM0JsY21GMGFXOXVjenNpWFgwPSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JbnB1dFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdERPTUlET3BlcmF0aW9ucycpO1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKCcuL0xpbmtlZFZhbHVlVXRpbHMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgaW5zdGFuY2VzQnlSZWFjdElEID0ge307XG5cbmZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICBpZiAodGhpcy5fcm9vdE5vZGVJRCkge1xuICAgIC8vIERPTSBjb21wb25lbnQgaXMgc3RpbGwgbW91bnRlZDsgdXBkYXRlXG4gICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8aW5wdXQ+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuICogcHJvcHM6IGBjaGVja2VkYCwgYHZhbHVlYCwgYGRlZmF1bHRDaGVja2VkYCwgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICpcbiAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG4gKiB0aGF0IGFmZmVjdCB0aGUgY2hlY2tlZCBzdGF0ZSBvciB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG4gKiB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBwcm9wcyBtdXN0IGNoYW5nZSBpbiBvcmRlciBmb3JcbiAqIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCBhcyB1bmNoZWNrZWQgKG9yIGBkZWZhdWx0Q2hlY2tlZGApXG4gKiB3aXRoIGFuIGVtcHR5IHZhbHVlIChvciBgZGVmYXVsdFZhbHVlYCkuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELWh0bWw1LTIwMTIxMDI1L3RoZS1pbnB1dC1lbGVtZW50Lmh0bWxcbiAqL1xudmFyIFJlYWN0RE9NSW5wdXQgPSB7XG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICB2YXIgY2hlY2tlZCA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0Q2hlY2tlZChwcm9wcyk7XG5cbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICBkZWZhdWx0Q2hlY2tlZDogdW5kZWZpbmVkLFxuICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICB2YWx1ZTogdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxcbiAgICAgIGNoZWNrZWQ6IGNoZWNrZWQgIT0gbnVsbCA/IGNoZWNrZWQgOiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQsXG4gICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gIH0sXG5cbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygnaW5wdXQnLCBwcm9wcywgaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICAgIGluaXRpYWxDaGVja2VkOiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCB8fCBmYWxzZSxcbiAgICAgIGluaXRpYWxWYWx1ZTogZGVmYXVsdFZhbHVlICE9IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBudWxsLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KVxuICAgIH07XG4gIH0sXG5cbiAgbW91bnRSZWFkeVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgLy8gQ2FuJ3QgYmUgaW4gbW91bnRXcmFwcGVyIG9yIGVsc2Ugc2VydmVyIHJlbmRlcmluZyBsZWFrcy5cbiAgICBpbnN0YW5jZXNCeVJlYWN0SURbaW5zdC5fcm9vdE5vZGVJRF0gPSBpbnN0O1xuICB9LFxuXG4gIHVubW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0SURbaW5zdC5fcm9vdE5vZGVJRF07XG4gIH0sXG5cbiAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIC8vIFRPRE86IFNob3VsZG4ndCB0aGlzIGJlIGdldENoZWNrZWQocHJvcHMpP1xuICAgIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZDtcbiAgICBpZiAoY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgICBSZWFjdERPTUlET3BlcmF0aW9ucy51cGRhdGVQcm9wZXJ0eUJ5SUQoaW5zdC5fcm9vdE5vZGVJRCwgJ2NoZWNrZWQnLCBjaGVja2VkIHx8IGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICAgIFJlYWN0RE9NSURPcGVyYXRpb25zLnVwZGF0ZVByb3BlcnR5QnlJRChpbnN0Ll9yb290Tm9kZUlELCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgdmFyIHJldHVyblZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5leGVjdXRlT25DaGFuZ2UocHJvcHMsIGV2ZW50KTtcblxuICAvLyBIZXJlIHdlIHVzZSBhc2FwIHRvIHdhaXQgdW50aWwgYWxsIHVwZGF0ZXMgaGF2ZSBwcm9wYWdhdGVkLCB3aGljaFxuICAvLyBpcyBpbXBvcnRhbnQgd2hlbiB1c2luZyBjb250cm9sbGVkIGNvbXBvbmVudHMgd2l0aGluIGxheWVyczpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjk4XG4gIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcblxuICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gIGlmIChwcm9wcy50eXBlID09PSAncmFkaW8nICYmIG5hbWUgIT0gbnVsbCkge1xuICAgIHZhciByb290Tm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZSh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICB2YXIgcXVlcnlSb290ID0gcm9vdE5vZGU7XG5cbiAgICB3aGlsZSAocXVlcnlSb290LnBhcmVudE5vZGUpIHtcbiAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIC8vIElmIGByb290Tm9kZS5mb3JtYCB3YXMgbm9uLW51bGwsIHRoZW4gd2UgY291bGQgdHJ5IGBmb3JtLmVsZW1lbnRzYCxcbiAgICAvLyBidXQgdGhhdCBzb21ldGltZXMgYmVoYXZlcyBzdHJhbmdlbHkgaW4gSUU4LiBXZSBjb3VsZCBhbHNvIHRyeSB1c2luZ1xuICAgIC8vIGBmb3JtLmdldEVsZW1lbnRzQnlOYW1lYCwgYnV0IHRoYXQgd2lsbCBvbmx5IHJldHVybiBkaXJlY3QgY2hpbGRyZW5cbiAgICAvLyBhbmQgd29uJ3QgaW5jbHVkZSBpbnB1dHMgdGhhdCB1c2UgdGhlIEhUTUw1IGBmb3JtPWAgYXR0cmlidXRlLiBTaW5jZVxuICAgIC8vIHRoZSBpbnB1dCBtaWdodCBub3QgZXZlbiBiZSBpbiBhIGZvcm0sIGxldCdzIGp1c3QgdXNlIHRoZSBnbG9iYWxcbiAgICAvLyBgcXVlcnlTZWxlY3RvckFsbGAgdG8gZW5zdXJlIHdlIGRvbid0IG1pc3MgYW55dGhpbmcuXG4gICAgdmFyIGdyb3VwID0gcXVlcnlSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWU9JyArIEpTT04uc3RyaW5naWZ5KCcnICsgbmFtZSkgKyAnXVt0eXBlPVwicmFkaW9cIl0nKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChvdGhlck5vZGUgPT09IHJvb3ROb2RlIHx8IG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGlmIHJhZGlvIGJ1dHRvbnMgcmVuZGVyZWQgYnkgZGlmZmVyZW50IGNvcGllcyBvZiBSZWFjdFxuICAgICAgLy8gYW5kIHRoZSBzYW1lIG5hbWUgYXJlIHJlbmRlcmVkIGludG8gdGhlIHNhbWUgZm9ybSAoc2FtZSBhcyAjMTkzOSkuXG4gICAgICAvLyBUaGF0J3MgcHJvYmFibHkgb2theTsgd2UgZG9uJ3Qgc3VwcG9ydCBpdCBqdXN0IGFzIHdlIGRvbid0IHN1cHBvcnRcbiAgICAgIC8vIG1peGluZyBSZWFjdCB3aXRoIG5vbi1SZWFjdC5cbiAgICAgIHZhciBvdGhlcklEID0gUmVhY3RNb3VudC5nZXRJRChvdGhlck5vZGUpO1xuICAgICAgIW90aGVySUQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlICcgKyAnc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgb3RoZXJJbnN0YW5jZSA9IGluc3RhbmNlc0J5UmVhY3RJRFtvdGhlcklEXTtcbiAgICAgICFvdGhlckluc3RhbmNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0RE9NSW5wdXQ6IFVua25vd24gcmFkaW8gYnV0dG9uIElEICVzLicsIG90aGVySUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBjb250cm9sbGVkIHJhZGlvIGJ1dHRvbiBncm91cCwgZm9yY2luZyB0aGUgaW5wdXQgdGhhdFxuICAgICAgLy8gd2FzIHByZXZpb3VzbHkgY2hlY2tlZCB0byB1cGRhdGUgd2lsbCBjYXVzZSBpdCB0byBiZSBjb21lIHJlLWNoZWNrZWRcbiAgICAgIC8vIGFzIGFwcHJvcHJpYXRlLlxuICAgICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIG90aGVySW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUlucHV0O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JFVDAxSmJuQjFkQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnVW1WaFkzUkVUMDFKYm5CMWRGeHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMFJFOU5TVVJQY0dWeVlYUnBiMjV6SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVSUFRVbEVUM0JsY21GMGFXOXVjeWNwTzF4dWRtRnlJRXhwYm10bFpGWmhiSFZsVlhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TDB4cGJtdGxaRlpoYkhWbFZYUnBiSE1uS1R0Y2JuWmhjaUJTWldGamRFMXZkVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEUxdmRXNTBKeWs3WEc1MllYSWdVbVZoWTNSVmNHUmhkR1Z6SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEZWd1pHRjBaWE1uS1R0Y2JseHVkbUZ5SUdGemMybG5iaUE5SUhKbGNYVnBjbVVvSnk0dlQySnFaV04wTG1GemMybG5iaWNwTzF4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDJsdWRtRnlhV0Z1ZENjcE8xeHVYRzUyWVhJZ2FXNXpkR0Z1WTJWelFubFNaV0ZqZEVsRUlEMGdlMzA3WEc1Y2JtWjFibU4wYVc5dUlHWnZjbU5sVlhCa1lYUmxTV1pOYjNWdWRHVmtLQ2tnZTF4dUlDQnBaaUFvZEdocGN5NWZjbTl2ZEU1dlpHVkpSQ2tnZTF4dUlDQWdJQzh2SUVSUFRTQmpiMjF3YjI1bGJuUWdhWE1nYzNScGJHd2diVzkxYm5SbFpEc2dkWEJrWVhSbFhHNGdJQ0FnVW1WaFkzUkVUMDFKYm5CMWRDNTFjR1JoZEdWWGNtRndjR1Z5S0hSb2FYTXBPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nU1cxd2JHVnRaVzUwY3lCaGJpQThhVzV3ZFhRK0lHNWhkR2wyWlNCamIyMXdiMjVsYm5RZ2RHaGhkQ0JoYkd4dmQzTWdjMlYwZEdsdVp5QjBhR1Z6WlNCdmNIUnBiMjVoYkZ4dUlDb2djSEp2Y0hNNklHQmphR1ZqYTJWa1lDd2dZSFpoYkhWbFlDd2dZR1JsWm1GMWJIUkRhR1ZqYTJWa1lDd2dZVzVrSUdCa1pXWmhkV3gwVm1Gc2RXVmdMbHh1SUNwY2JpQXFJRWxtSUdCamFHVmphMlZrWUNCdmNpQmdkbUZzZFdWZ0lHRnlaU0J1YjNRZ2MzVndjR3hwWldRZ0tHOXlJRzUxYkd3dmRXNWtaV1pwYm1Wa0tTd2dkWE5sY2lCaFkzUnBiMjV6WEc0Z0tpQjBhR0YwSUdGbVptVmpkQ0IwYUdVZ1kyaGxZMnRsWkNCemRHRjBaU0J2Y2lCMllXeDFaU0IzYVd4c0lIUnlhV2RuWlhJZ2RYQmtZWFJsY3lCMGJ5QjBhR1VnWld4bGJXVnVkQzVjYmlBcVhHNGdLaUJKWmlCMGFHVjVJR0Z5WlNCemRYQndiR2xsWkNBb1lXNWtJRzV2ZENCdWRXeHNMM1Z1WkdWbWFXNWxaQ2tzSUhSb1pTQnlaVzVrWlhKbFpDQmxiR1Z0Wlc1MElIZHBiR3dnYm05MFhHNGdLaUIwY21sbloyVnlJSFZ3WkdGMFpYTWdkRzhnZEdobElHVnNaVzFsYm5RdUlFbHVjM1JsWVdRc0lIUm9aU0J3Y205d2N5QnRkWE4wSUdOb1lXNW5aU0JwYmlCdmNtUmxjaUJtYjNKY2JpQXFJSFJvWlNCeVpXNWtaWEpsWkNCbGJHVnRaVzUwSUhSdklHSmxJSFZ3WkdGMFpXUXVYRzRnS2x4dUlDb2dWR2hsSUhKbGJtUmxjbVZrSUdWc1pXMWxiblFnZDJsc2JDQmlaU0JwYm1sMGFXRnNhWHBsWkNCaGN5QjFibU5vWldOclpXUWdLRzl5SUdCa1pXWmhkV3gwUTJobFkydGxaR0FwWEc0Z0tpQjNhWFJvSUdGdUlHVnRjSFI1SUhaaGJIVmxJQ2h2Y2lCZ1pHVm1ZWFZzZEZaaGJIVmxZQ2t1WEc0Z0tseHVJQ29nUUhObFpTQm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OVVVaTh5TURFeUwxZEVMV2gwYld3MUxUSXdNVEl4TURJMUwzUm9aUzFwYm5CMWRDMWxiR1Z0Wlc1MExtaDBiV3hjYmlBcUwxeHVkbUZ5SUZKbFlXTjBSRTlOU1c1d2RYUWdQU0I3WEc0Z0lHZGxkRTVoZEdsMlpWQnliM0J6T2lCbWRXNWpkR2x2YmlBb2FXNXpkQ3dnY0hKdmNITXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0JNYVc1clpXUldZV3gxWlZWMGFXeHpMbWRsZEZaaGJIVmxLSEJ5YjNCektUdGNiaUFnSUNCMllYSWdZMmhsWTJ0bFpDQTlJRXhwYm10bFpGWmhiSFZsVlhScGJITXVaMlYwUTJobFkydGxaQ2h3Y205d2N5azdYRzVjYmlBZ0lDQjJZWElnYm1GMGFYWmxVSEp2Y0hNZ1BTQmhjM05wWjI0b2UzMHNJSEJ5YjNCekxDQjdYRzRnSUNBZ0lDQmtaV1poZFd4MFEyaGxZMnRsWkRvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ1pHVm1ZWFZzZEZaaGJIVmxPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0IyWVd4MVpUb2dkbUZzZFdVZ0lUMGdiblZzYkNBL0lIWmhiSFZsSURvZ2FXNXpkQzVmZDNKaGNIQmxjbE4wWVhSbExtbHVhWFJwWVd4V1lXeDFaU3hjYmlBZ0lDQWdJR05vWldOclpXUTZJR05vWldOclpXUWdJVDBnYm5Wc2JDQS9JR05vWldOclpXUWdPaUJwYm5OMExsOTNjbUZ3Y0dWeVUzUmhkR1V1YVc1cGRHbGhiRU5vWldOclpXUXNYRzRnSUNBZ0lDQnZia05vWVc1blpUb2dhVzV6ZEM1ZmQzSmhjSEJsY2xOMFlYUmxMbTl1UTJoaGJtZGxYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtRjBhWFpsVUhKdmNITTdYRzRnSUgwc1hHNWNiaUFnYlc5MWJuUlhjbUZ3Y0dWeU9pQm1kVzVqZEdsdmJpQW9hVzV6ZEN3Z2NISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdUR2x1YTJWa1ZtRnNkV1ZWZEdsc2N5NWphR1ZqYTFCeWIzQlVlWEJsY3lnbmFXNXdkWFFuTENCd2NtOXdjeXdnYVc1emRDNWZZM1Z5Y21WdWRFVnNaVzFsYm5RdVgyOTNibVZ5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ1pHVm1ZWFZzZEZaaGJIVmxJRDBnY0hKdmNITXVaR1ZtWVhWc2RGWmhiSFZsTzF4dUlDQWdJR2x1YzNRdVgzZHlZWEJ3WlhKVGRHRjBaU0E5SUh0Y2JpQWdJQ0FnSUdsdWFYUnBZV3hEYUdWamEyVmtPaUJ3Y205d2N5NWtaV1poZFd4MFEyaGxZMnRsWkNCOGZDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUdsdWFYUnBZV3hXWVd4MVpUb2daR1ZtWVhWc2RGWmhiSFZsSUNFOUlHNTFiR3dnUHlCa1pXWmhkV3gwVm1Gc2RXVWdPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ2IyNURhR0Z1WjJVNklGOW9ZVzVrYkdWRGFHRnVaMlV1WW1sdVpDaHBibk4wS1Z4dUlDQWdJSDA3WEc0Z0lIMHNYRzVjYmlBZ2JXOTFiblJTWldGa2VWZHlZWEJ3WlhJNklHWjFibU4wYVc5dUlDaHBibk4wS1NCN1hHNGdJQ0FnTHk4Z1EyRnVKM1FnWW1VZ2FXNGdiVzkxYm5SWGNtRndjR1Z5SUc5eUlHVnNjMlVnYzJWeWRtVnlJSEpsYm1SbGNtbHVaeUJzWldGcmN5NWNiaUFnSUNCcGJuTjBZVzVqWlhOQ2VWSmxZV04wU1VSYmFXNXpkQzVmY205dmRFNXZaR1ZKUkYwZ1BTQnBibk4wTzF4dUlDQjlMRnh1WEc0Z0lIVnViVzkxYm5SWGNtRndjR1Z5T2lCbWRXNWpkR2x2YmlBb2FXNXpkQ2tnZTF4dUlDQWdJR1JsYkdWMFpTQnBibk4wWVc1alpYTkNlVkpsWVdOMFNVUmJhVzV6ZEM1ZmNtOXZkRTV2WkdWSlJGMDdYRzRnSUgwc1hHNWNiaUFnZFhCa1lYUmxWM0poY0hCbGNqb2dablZ1WTNScGIyNGdLR2x1YzNRcElIdGNiaUFnSUNCMllYSWdjSEp2Y0hNZ1BTQnBibk4wTGw5amRYSnlaVzUwUld4bGJXVnVkQzV3Y205d2N6dGNibHh1SUNBZ0lDOHZJRlJQUkU4NklGTm9iM1ZzWkc0bmRDQjBhR2x6SUdKbElHZGxkRU5vWldOclpXUW9jSEp2Y0hNcFAxeHVJQ0FnSUhaaGNpQmphR1ZqYTJWa0lEMGdjSEp2Y0hNdVkyaGxZMnRsWkR0Y2JpQWdJQ0JwWmlBb1kyaGxZMnRsWkNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCU1pXRmpkRVJQVFVsRVQzQmxjbUYwYVc5dWN5NTFjR1JoZEdWUWNtOXdaWEowZVVKNVNVUW9hVzV6ZEM1ZmNtOXZkRTV2WkdWSlJDd2dKMk5vWldOclpXUW5MQ0JqYUdWamEyVmtJSHg4SUdaaGJITmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0JNYVc1clpXUldZV3gxWlZWMGFXeHpMbWRsZEZaaGJIVmxLSEJ5YjNCektUdGNiaUFnSUNCcFppQW9kbUZzZFdVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0x5OGdRMkZ6ZENCZ2RtRnNkV1ZnSUhSdklHRWdjM1J5YVc1bklIUnZJR1Z1YzNWeVpTQjBhR1VnZG1Gc2RXVWdhWE1nYzJWMElHTnZjbkpsWTNSc2VTNGdWMmhwYkdWY2JpQWdJQ0FnSUM4dklHSnliM2R6WlhKeklIUjVjR2xqWVd4c2VTQmtieUIwYUdseklHRnpJRzVsWTJWemMyRnllU3dnYW5Oa2IyMGdaRzlsYzI0bmRDNWNiaUFnSUNBZ0lGSmxZV04wUkU5TlNVUlBjR1Z5WVhScGIyNXpMblZ3WkdGMFpWQnliM0JsY25SNVFubEpSQ2hwYm5OMExsOXliMjkwVG05a1pVbEVMQ0FuZG1Gc2RXVW5MQ0FuSnlBcklIWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JtWjFibU4wYVc5dUlGOW9ZVzVrYkdWRGFHRnVaMlVvWlhabGJuUXBJSHRjYmlBZ2RtRnlJSEJ5YjNCeklEMGdkR2hwY3k1ZlkzVnljbVZ1ZEVWc1pXMWxiblF1Y0hKdmNITTdYRzVjYmlBZ2RtRnlJSEpsZEhWeWJsWmhiSFZsSUQwZ1RHbHVhMlZrVm1Gc2RXVlZkR2xzY3k1bGVHVmpkWFJsVDI1RGFHRnVaMlVvY0hKdmNITXNJR1YyWlc1MEtUdGNibHh1SUNBdkx5QklaWEpsSUhkbElIVnpaU0JoYzJGd0lIUnZJSGRoYVhRZ2RXNTBhV3dnWVd4c0lIVndaR0YwWlhNZ2FHRjJaU0J3Y205d1lXZGhkR1ZrTENCM2FHbGphRnh1SUNBdkx5QnBjeUJwYlhCdmNuUmhiblFnZDJobGJpQjFjMmx1WnlCamIyNTBjbTlzYkdWa0lHTnZiWEJ2Ym1WdWRITWdkMmwwYUdsdUlHeGhlV1Z5Y3pwY2JpQWdMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJaaFkyVmliMjlyTDNKbFlXTjBMMmx6YzNWbGN5OHhOams0WEc0Z0lGSmxZV04wVlhCa1lYUmxjeTVoYzJGd0tHWnZjbU5sVlhCa1lYUmxTV1pOYjNWdWRHVmtMQ0IwYUdsektUdGNibHh1SUNCMllYSWdibUZ0WlNBOUlIQnliM0J6TG01aGJXVTdYRzRnSUdsbUlDaHdjbTl3Y3k1MGVYQmxJRDA5UFNBbmNtRmthVzhuSUNZbUlHNWhiV1VnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJSFpoY2lCeWIyOTBUbTlrWlNBOUlGSmxZV04wVFc5MWJuUXVaMlYwVG05a1pTaDBhR2x6TGw5eWIyOTBUbTlrWlVsRUtUdGNiaUFnSUNCMllYSWdjWFZsY25sU2IyOTBJRDBnY205dmRFNXZaR1U3WEc1Y2JpQWdJQ0IzYUdsc1pTQW9jWFZsY25sU2IyOTBMbkJoY21WdWRFNXZaR1VwSUh0Y2JpQWdJQ0FnSUhGMVpYSjVVbTl2ZENBOUlIRjFaWEo1VW05dmRDNXdZWEpsYm5ST2IyUmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRWxtSUdCeWIyOTBUbTlrWlM1bWIzSnRZQ0IzWVhNZ2JtOXVMVzUxYkd3c0lIUm9aVzRnZDJVZ1kyOTFiR1FnZEhKNUlHQm1iM0p0TG1Wc1pXMWxiblJ6WUN4Y2JpQWdJQ0F2THlCaWRYUWdkR2hoZENCemIyMWxkR2x0WlhNZ1ltVm9ZWFpsY3lCemRISmhibWRsYkhrZ2FXNGdTVVU0TGlCWFpTQmpiM1ZzWkNCaGJITnZJSFJ5ZVNCMWMybHVaMXh1SUNBZ0lDOHZJR0JtYjNKdExtZGxkRVZzWlcxbGJuUnpRbmxPWVcxbFlDd2dZblYwSUhSb1lYUWdkMmxzYkNCdmJteDVJSEpsZEhWeWJpQmthWEpsWTNRZ1kyaHBiR1J5Wlc1Y2JpQWdJQ0F2THlCaGJtUWdkMjl1SjNRZ2FXNWpiSFZrWlNCcGJuQjFkSE1nZEdoaGRDQjFjMlVnZEdobElFaFVUVXcxSUdCbWIzSnRQV0FnWVhSMGNtbGlkWFJsTGlCVGFXNWpaVnh1SUNBZ0lDOHZJSFJvWlNCcGJuQjFkQ0J0YVdkb2RDQnViM1FnWlhabGJpQmlaU0JwYmlCaElHWnZjbTBzSUd4bGRDZHpJR3AxYzNRZ2RYTmxJSFJvWlNCbmJHOWlZV3hjYmlBZ0lDQXZMeUJnY1hWbGNubFRaV3hsWTNSdmNrRnNiR0FnZEc4Z1pXNXpkWEpsSUhkbElHUnZiaWQwSUcxcGMzTWdZVzU1ZEdocGJtY3VYRzRnSUNBZ2RtRnlJR2R5YjNWd0lEMGdjWFZsY25sU2IyOTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KMmx1Y0hWMFcyNWhiV1U5SnlBcklFcFRUMDR1YzNSeWFXNW5hV1o1S0NjbklDc2dibUZ0WlNrZ0t5QW5YVnQwZVhCbFBWd2ljbUZrYVc5Y0lsMG5LVHRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWjNKdmRYQXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQnZkR2hsY2s1dlpHVWdQU0JuY205MWNGdHBYVHRjYmlBZ0lDQWdJR2xtSUNodmRHaGxjazV2WkdVZ1BUMDlJSEp2YjNST2IyUmxJSHg4SUc5MGFHVnlUbTlrWlM1bWIzSnRJQ0U5UFNCeWIyOTBUbTlrWlM1bWIzSnRLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnTHk4Z1ZHaHBjeUIzYVd4c0lIUm9jbTkzSUdsbUlISmhaR2x2SUdKMWRIUnZibk1nY21WdVpHVnlaV1FnWW5rZ1pHbG1abVZ5Wlc1MElHTnZjR2xsY3lCdlppQlNaV0ZqZEZ4dUlDQWdJQ0FnTHk4Z1lXNWtJSFJvWlNCellXMWxJRzVoYldVZ1lYSmxJSEpsYm1SbGNtVmtJR2x1ZEc4Z2RHaGxJSE5oYldVZ1ptOXliU0FvYzJGdFpTQmhjeUFqTVRrek9Ta3VYRzRnSUNBZ0lDQXZMeUJVYUdGMEozTWdjSEp2WW1GaWJIa2diMnRoZVRzZ2QyVWdaRzl1SjNRZ2MzVndjRzl5ZENCcGRDQnFkWE4wSUdGeklIZGxJR1J2YmlkMElITjFjSEJ2Y25SY2JpQWdJQ0FnSUM4dklHMXBlR2x1WnlCU1pXRmpkQ0IzYVhSb0lHNXZiaTFTWldGamRDNWNiaUFnSUNBZ0lIWmhjaUJ2ZEdobGNrbEVJRDBnVW1WaFkzUk5iM1Z1ZEM1blpYUkpSQ2h2ZEdobGNrNXZaR1VwTzF4dUlDQWdJQ0FnSVc5MGFHVnlTVVFnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5VbVZoWTNSRVQwMUpibkIxZERvZ1RXbDRhVzVuSUZKbFlXTjBJR0Z1WkNCdWIyNHRVbVZoWTNRZ2NtRmthVzhnYVc1d2RYUnpJSGRwZEdnZ2RHaGxJQ2NnS3lBbmMyRnRaU0JnYm1GdFpXQWdhWE1nYm05MElITjFjSEJ2Y25SbFpDNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNCMllYSWdiM1JvWlhKSmJuTjBZVzVqWlNBOUlHbHVjM1JoYm1ObGMwSjVVbVZoWTNSSlJGdHZkR2hsY2tsRVhUdGNiaUFnSUNBZ0lDRnZkR2hsY2tsdWMzUmhibU5sSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMUpsWVdOMFJFOU5TVzV3ZFhRNklGVnVhMjV2ZDI0Z2NtRmthVzhnWW5WMGRHOXVJRWxFSUNWekxpY3NJRzkwYUdWeVNVUXBJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUM4dklFbG1JSFJvYVhNZ2FYTWdZU0JqYjI1MGNtOXNiR1ZrSUhKaFpHbHZJR0oxZEhSdmJpQm5jbTkxY0N3Z1ptOXlZMmx1WnlCMGFHVWdhVzV3ZFhRZ2RHaGhkRnh1SUNBZ0lDQWdMeThnZDJGeklIQnlaWFpwYjNWemJIa2dZMmhsWTJ0bFpDQjBieUIxY0dSaGRHVWdkMmxzYkNCallYVnpaU0JwZENCMGJ5QmlaU0JqYjIxbElISmxMV05vWldOclpXUmNiaUFnSUNBZ0lDOHZJR0Z6SUdGd2NISnZjSEpwWVhSbExseHVJQ0FnSUNBZ1VtVmhZM1JWY0dSaGRHVnpMbUZ6WVhBb1ptOXlZMlZWY0dSaGRHVkpaazF2ZFc1MFpXUXNJRzkwYUdWeVNXNXpkR0Z1WTJVcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCeVpYUjFjbTVXWVd4MVpUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRVJQVFVsdWNIVjBPeUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01PcHRpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENoaWxkcmVuID0gcmVxdWlyZSgnLi9SZWFjdENoaWxkcmVuJyk7XG52YXIgUmVhY3RET01TZWxlY3QgPSByZXF1aXJlKCcuL1JlYWN0RE9NU2VsZWN0Jyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgdmFsdWVDb250ZXh0S2V5ID0gUmVhY3RET01TZWxlY3QudmFsdWVDb250ZXh0S2V5O1xuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gPG9wdGlvbj4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IHdhcm5zIHdoZW4gYHNlbGVjdGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTU9wdGlvbiA9IHtcbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHJvcHMuc2VsZWN0ZWQgPT0gbnVsbCwgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBvbiA8c2VsZWN0PiBpbnN0ZWFkIG9mICcgKyAnc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+LicpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIExvb2sgdXAgd2hldGhlciB0aGlzIG9wdGlvbiBpcyAnc2VsZWN0ZWQnIHZpYSBjb250ZXh0XG4gICAgdmFyIHNlbGVjdFZhbHVlID0gY29udGV4dFt2YWx1ZUNvbnRleHRLZXldO1xuXG4gICAgLy8gSWYgY29udGV4dCBrZXkgaXMgbnVsbCAoZS5nLiwgbm8gc3BlY2lmaWVkIHZhbHVlIG9yIGFmdGVyIGluaXRpYWwgbW91bnQpXG4gICAgLy8gb3IgbWlzc2luZyAoZS5nLiwgZm9yIDxkYXRhbGlzdD4pLCB3ZSBkb24ndCBjaGFuZ2UgcHJvcHMuc2VsZWN0ZWRcbiAgICB2YXIgc2VsZWN0ZWQgPSBudWxsO1xuICAgIGlmIChzZWxlY3RWYWx1ZSAhPSBudWxsKSB7XG4gICAgICBzZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0VmFsdWUpKSB7XG4gICAgICAgIC8vIG11bHRpcGxlXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoJycgKyBzZWxlY3RWYWx1ZVtpXSA9PT0gJycgKyBwcm9wcy52YWx1ZSkge1xuICAgICAgICAgICAgc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZCA9ICcnICsgc2VsZWN0VmFsdWUgPT09ICcnICsgcHJvcHMudmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0geyBzZWxlY3RlZDogc2VsZWN0ZWQgfTtcbiAgfSxcblxuICBnZXROYXRpdmVQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIG5hdGl2ZVByb3BzID0gYXNzaWduKHsgc2VsZWN0ZWQ6IHVuZGVmaW5lZCwgY2hpbGRyZW46IHVuZGVmaW5lZCB9LCBwcm9wcyk7XG5cbiAgICAvLyBSZWFkIHN0YXRlIG9ubHkgZnJvbSBpbml0aWFsIG1vdW50IGJlY2F1c2UgPHNlbGVjdD4gdXBkYXRlcyB2YWx1ZVxuICAgIC8vIG1hbnVhbGx5OyB3ZSBuZWVkIHRoZSBpbml0aWFsIHN0YXRlIG9ubHkgZm9yIHNlcnZlciByZW5kZXJpbmdcbiAgICBpZiAoaW5zdC5fd3JhcHBlclN0YXRlLnNlbGVjdGVkICE9IG51bGwpIHtcbiAgICAgIG5hdGl2ZVByb3BzLnNlbGVjdGVkID0gaW5zdC5fd3JhcHBlclN0YXRlLnNlbGVjdGVkO1xuICAgIH1cblxuICAgIHZhciBjb250ZW50ID0gJyc7XG5cbiAgICAvLyBGbGF0dGVuIGNoaWxkcmVuIGFuZCB3YXJuIGlmIHRoZXkgYXJlbid0IHN0cmluZ3Mgb3IgbnVtYmVycztcbiAgICAvLyBpbnZhbGlkIHR5cGVzIGFyZSBpZ25vcmVkLlxuICAgIFJlYWN0Q2hpbGRyZW4uZm9yRWFjaChwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gY2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ09ubHkgc3RyaW5ncyBhbmQgbnVtYmVycyBhcmUgc3VwcG9ydGVkIGFzIDxvcHRpb24+IGNoaWxkcmVuLicpIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIG5hdGl2ZVByb3BzLmNoaWxkcmVuID0gY29udGVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTU9wdGlvbjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRVQwMVBjSFJwYjI0dWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRFUlBUVTl3ZEdsdmJseHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMFEyaHBiR1J5Wlc0Z1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFEyaHBiR1J5Wlc0bktUdGNiblpoY2lCU1pXRmpkRVJQVFZObGJHVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JFVDAxVFpXeGxZM1FuS1R0Y2JseHVkbUZ5SUdGemMybG5iaUE5SUhKbGNYVnBjbVVvSnk0dlQySnFaV04wTG1GemMybG5iaWNwTzF4dWRtRnlJSGRoY201cGJtY2dQU0J5WlhGMWFYSmxLQ2RtWW1wekwyeHBZaTkzWVhKdWFXNW5KeWs3WEc1Y2JuWmhjaUIyWVd4MVpVTnZiblJsZUhSTFpYa2dQU0JTWldGamRFUlBUVk5sYkdWamRDNTJZV3gxWlVOdmJuUmxlSFJMWlhrN1hHNWNiaThxS2x4dUlDb2dTVzF3YkdWdFpXNTBjeUJoYmlBOGIzQjBhVzl1UGlCdVlYUnBkbVVnWTI5dGNHOXVaVzUwSUhSb1lYUWdkMkZ5Ym5NZ2QyaGxiaUJnYzJWc1pXTjBaV1JnSUdseklITmxkQzVjYmlBcUwxeHVkbUZ5SUZKbFlXTjBSRTlOVDNCMGFXOXVJRDBnZTF4dUlDQnRiM1Z1ZEZkeVlYQndaWEk2SUdaMWJtTjBhVzl1SUNocGJuTjBMQ0J3Y205d2N5d2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDOHZJRlJQUkU4Z0tIbDFibWR6ZEdWeWN5azZJRkpsYlc5MlpTQnpkWEJ3YjNKMElHWnZjaUJnYzJWc1pXTjBaV1JnSUdsdUlEeHZjSFJwYjI0K0xseHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1Wnlod2NtOXdjeTV6Wld4bFkzUmxaQ0E5UFNCdWRXeHNMQ0FuVlhObElIUm9aU0JnWkdWbVlYVnNkRlpoYkhWbFlDQnZjaUJnZG1Gc2RXVmdJSEJ5YjNCeklHOXVJRHh6Wld4bFkzUStJR2x1YzNSbFlXUWdiMllnSnlBcklDZHpaWFIwYVc1bklHQnpaV3hsWTNSbFpHQWdiMjRnUEc5d2RHbHZiajR1SnlrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdURzl2YXlCMWNDQjNhR1YwYUdWeUlIUm9hWE1nYjNCMGFXOXVJR2x6SUNkelpXeGxZM1JsWkNjZ2RtbGhJR052Ym5SbGVIUmNiaUFnSUNCMllYSWdjMlZzWldOMFZtRnNkV1VnUFNCamIyNTBaWGgwVzNaaGJIVmxRMjl1ZEdWNGRFdGxlVjA3WEc1Y2JpQWdJQ0F2THlCSlppQmpiMjUwWlhoMElHdGxlU0JwY3lCdWRXeHNJQ2hsTG1jdUxDQnVieUJ6Y0dWamFXWnBaV1FnZG1Gc2RXVWdiM0lnWVdaMFpYSWdhVzVwZEdsaGJDQnRiM1Z1ZENsY2JpQWdJQ0F2THlCdmNpQnRhWE56YVc1bklDaGxMbWN1TENCbWIzSWdQR1JoZEdGc2FYTjBQaWtzSUhkbElHUnZiaWQwSUdOb1lXNW5aU0J3Y205d2N5NXpaV3hsWTNSbFpGeHVJQ0FnSUhaaGNpQnpaV3hsWTNSbFpDQTlJRzUxYkd3N1hHNGdJQ0FnYVdZZ0tITmxiR1ZqZEZaaGJIVmxJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSE5sYkdWamRHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaHpaV3hsWTNSV1lXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdiWFZzZEdsd2JHVmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6Wld4bFkzUldZV3gxWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ25KeUFySUhObGJHVmpkRlpoYkhWbFcybGRJRDA5UFNBbkp5QXJJSEJ5YjNCekxuWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bFkzUmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lITmxiR1ZqZEdWa0lEMGdKeWNnS3lCelpXeGxZM1JXWVd4MVpTQTlQVDBnSnljZ0t5QndjbTl3Y3k1MllXeDFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBibk4wTGw5M2NtRndjR1Z5VTNSaGRHVWdQU0I3SUhObGJHVmpkR1ZrT2lCelpXeGxZM1JsWkNCOU8xeHVJQ0I5TEZ4dVhHNGdJR2RsZEU1aGRHbDJaVkJ5YjNCek9pQm1kVzVqZEdsdmJpQW9hVzV6ZEN3Z2NISnZjSE1zSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IyWVhJZ2JtRjBhWFpsVUhKdmNITWdQU0JoYzNOcFoyNG9leUJ6Wld4bFkzUmxaRG9nZFc1a1pXWnBibVZrTENCamFHbHNaSEpsYmpvZ2RXNWtaV1pwYm1Wa0lIMHNJSEJ5YjNCektUdGNibHh1SUNBZ0lDOHZJRkpsWVdRZ2MzUmhkR1VnYjI1c2VTQm1jbTl0SUdsdWFYUnBZV3dnYlc5MWJuUWdZbVZqWVhWelpTQThjMlZzWldOMFBpQjFjR1JoZEdWeklIWmhiSFZsWEc0Z0lDQWdMeThnYldGdWRXRnNiSGs3SUhkbElHNWxaV1FnZEdobElHbHVhWFJwWVd3Z2MzUmhkR1VnYjI1c2VTQm1iM0lnYzJWeWRtVnlJSEpsYm1SbGNtbHVaMXh1SUNBZ0lHbG1JQ2hwYm5OMExsOTNjbUZ3Y0dWeVUzUmhkR1V1YzJWc1pXTjBaV1FnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnYm1GMGFYWmxVSEp2Y0hNdWMyVnNaV04wWldRZ1BTQnBibk4wTGw5M2NtRndjR1Z5VTNSaGRHVXVjMlZzWldOMFpXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR052Ym5SbGJuUWdQU0FuSnp0Y2JseHVJQ0FnSUM4dklFWnNZWFIwWlc0Z1kyaHBiR1J5Wlc0Z1lXNWtJSGRoY200Z2FXWWdkR2hsZVNCaGNtVnVKM1FnYzNSeWFXNW5jeUJ2Y2lCdWRXMWlaWEp6TzF4dUlDQWdJQzh2SUdsdWRtRnNhV1FnZEhsd1pYTWdZWEpsSUdsbmJtOXlaV1F1WEc0Z0lDQWdVbVZoWTNSRGFHbHNaSEpsYmk1bWIzSkZZV05vS0hCeWIzQnpMbU5vYVd4a2NtVnVMQ0JtZFc1amRHbHZiaUFvWTJocGJHUXBJSHRjYmlBZ0lDQWdJR2xtSUNoamFHbHNaQ0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTJocGJHUWdQVDA5SUNkemRISnBibWNuSUh4OElIUjVjR1Z2WmlCamFHbHNaQ0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lDQWdZMjl1ZEdWdWRDQXJQU0JqYUdsc1pEdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LR1poYkhObExDQW5UMjVzZVNCemRISnBibWR6SUdGdVpDQnVkVzFpWlhKeklHRnlaU0J6ZFhCd2IzSjBaV1FnWVhNZ1BHOXdkR2x2Ymo0Z1kyaHBiR1J5Wlc0dUp5a2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JwWmlBb1kyOXVkR1Z1ZENrZ2UxeHVJQ0FnSUNBZ2JtRjBhWFpsVUhKdmNITXVZMmhwYkdSeVpXNGdQU0JqYjI1MFpXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdVlYUnBkbVZRY205d2N6dGNiaUFnZlZ4dVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBSRTlOVDNCMGFXOXVPeUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01TZWxlY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZSgnLi9MaW5rZWRWYWx1ZVV0aWxzJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgdmFsdWVDb250ZXh0S2V5ID0gJ19fUmVhY3RET01TZWxlY3RfdmFsdWUkJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCgpIHtcbiAgaWYgKHRoaXMuX3Jvb3ROb2RlSUQgJiYgdGhpcy5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUpIHtcbiAgICB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG5cbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCBCb29sZWFuKHByb3BzLm11bHRpcGxlKSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxudmFyIHZhbHVlUHJvcE5hbWVzID0gWyd2YWx1ZScsICdkZWZhdWx0VmFsdWUnXTtcblxuLyoqXG4gKiBWYWxpZGF0aW9uIGZ1bmN0aW9uIGZvciBgdmFsdWVgIGFuZCBgZGVmYXVsdFZhbHVlYC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrU2VsZWN0UHJvcFR5cGVzKGluc3QsIHByb3BzKSB7XG4gIHZhciBvd25lciA9IGluc3QuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygnc2VsZWN0JywgcHJvcHMsIG93bmVyKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlUHJvcE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3BOYW1lID0gdmFsdWVQcm9wTmFtZXNbaV07XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSksICdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYW4gYXJyYXkgaWYgJyArICdgbXVsdGlwbGVgIGlzIHRydWUuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSkgOiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSksICdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYSBzY2FsYXIgJyArICd2YWx1ZSBpZiBgbXVsdGlwbGVgIGlzIGZhbHNlLiVzJywgcHJvcE5hbWUsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGluc3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbXVsdGlwbGVcbiAqIEBwYXJhbSB7Kn0gcHJvcFZhbHVlIEEgc3RyaW5nYWJsZSAod2l0aCBgbXVsdGlwbGVgLCBhIGxpc3Qgb2Ygc3RyaW5nYWJsZXMpLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhpbnN0LCBtdWx0aXBsZSwgcHJvcFZhbHVlKSB7XG4gIHZhciBzZWxlY3RlZFZhbHVlLCBpO1xuICB2YXIgb3B0aW9ucyA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpbnN0Ll9yb290Tm9kZUlEKS5vcHRpb25zO1xuXG4gIGlmIChtdWx0aXBsZSkge1xuICAgIHNlbGVjdGVkVmFsdWUgPSB7fTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzZWxlY3RlZFZhbHVlWycnICsgcHJvcFZhbHVlW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3RlZFZhbHVlLmhhc093blByb3BlcnR5KG9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgaWYgKG9wdGlvbnNbaV0uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRG8gbm90IHNldCBgc2VsZWN0LnZhbHVlYCBhcyBleGFjdCBiZWhhdmlvciBpc24ndCBjb25zaXN0ZW50IGFjcm9zcyBhbGxcbiAgICAvLyBicm93c2VycyBmb3IgYWxsIGNhc2VzLlxuICAgIHNlbGVjdGVkVmFsdWUgPSAnJyArIHByb3BWYWx1ZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG9wdGlvbnNbaV0udmFsdWUgPT09IHNlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgb3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICBvcHRpb25zWzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHNlbGVjdD4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGFsbG93cyBvcHRpb25hbGx5IHNldHRpbmcgdGhlXG4gKiBwcm9wcyBgdmFsdWVgIGFuZCBgZGVmYXVsdFZhbHVlYC4gSWYgYG11bHRpcGxlYCBpcyBmYWxzZSwgdGhlIHByb3AgbXVzdCBiZSBhXG4gKiBzdHJpbmdhYmxlLiBJZiBgbXVsdGlwbGVgIGlzIHRydWUsIHRoZSBwcm9wIG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5nYWJsZXMuXG4gKlxuICogSWYgYHZhbHVlYCBpcyBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zIHRoYXQgY2hhbmdlIHRoZVxuICogc2VsZWN0ZWQgb3B0aW9uIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICpcbiAqIElmIGl0IGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIG9wdGlvbnMgd2lsbCBub3RcbiAqIHVwZGF0ZSBpbiByZXNwb25zZSB0byB1c2VyIGFjdGlvbnMuIEluc3RlYWQsIHRoZSBgdmFsdWVgIHByb3AgbXVzdCBjaGFuZ2UgaW5cbiAqIG9yZGVyIGZvciB0aGUgcmVuZGVyZWQgb3B0aW9ucyB0byB1cGRhdGUuXG4gKlxuICogSWYgYGRlZmF1bHRWYWx1ZWAgaXMgcHJvdmlkZWQsIGFueSBvcHRpb25zIHdpdGggdGhlIHN1cHBsaWVkIHZhbHVlcyB3aWxsIGJlXG4gKiBzZWxlY3RlZC5cbiAqL1xudmFyIFJlYWN0RE9NU2VsZWN0ID0ge1xuICB2YWx1ZUNvbnRleHRLZXk6IHZhbHVlQ29udGV4dEtleSxcblxuICBnZXROYXRpdmVQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2UsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH0sXG5cbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tTZWxlY3RQcm9wVHlwZXMoaW5zdCwgcHJvcHMpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICAgIHBlbmRpbmdVcGRhdGU6IGZhbHNlLFxuICAgICAgaW5pdGlhbFZhbHVlOiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBvbkNoYW5nZTogX2hhbmRsZUNoYW5nZS5iaW5kKGluc3QpLFxuICAgICAgd2FzTXVsdGlwbGU6IEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpXG4gICAgfTtcbiAgfSxcblxuICBwcm9jZXNzQ2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICAvLyBQYXNzIGRvd24gaW5pdGlhbCB2YWx1ZSBzbyBpbml0aWFsIGdlbmVyYXRlZCBtYXJrdXAgaGFzIGNvcnJlY3RcbiAgICAvLyBgc2VsZWN0ZWRgIGF0dHJpYnV0ZXNcbiAgICB2YXIgY2hpbGRDb250ZXh0ID0gYXNzaWduKHt9LCBjb250ZXh0KTtcbiAgICBjaGlsZENvbnRleHRbdmFsdWVDb250ZXh0S2V5XSA9IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7XG4gICAgcmV0dXJuIGNoaWxkQ29udGV4dDtcbiAgfSxcblxuICBwb3N0VXBkYXRlV3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIC8vIEFmdGVyIHRoZSBpbml0aWFsIG1vdW50LCB3ZSBjb250cm9sIHNlbGVjdGVkLW5lc3MgbWFudWFsbHkgc28gZG9uJ3QgcGFzc1xuICAgIC8vIHRoZSBjb250ZXh0IHZhbHVlIGRvd25cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIHdhc011bHRpcGxlID0gaW5zdC5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO1xuICAgIGluc3QuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSA9IEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpO1xuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlID0gZmFsc2U7XG4gICAgICB1cGRhdGVPcHRpb25zKGluc3QsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh3YXNNdWx0aXBsZSAhPT0gQm9vbGVhbihwcm9wcy5tdWx0aXBsZSkpIHtcbiAgICAgIC8vIEZvciBzaW1wbGljaXR5LCByZWFwcGx5IGBkZWZhdWx0VmFsdWVgIGlmIGBtdWx0aXBsZWAgaXMgdG9nZ2xlZC5cbiAgICAgIGlmIChwcm9wcy5kZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVPcHRpb25zKGluc3QsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV2ZXJ0IHRoZSBzZWxlY3QgYmFjayB0byBpdHMgZGVmYXVsdCB1bnNlbGVjdGVkIHN0YXRlLlxuICAgICAgICB1cGRhdGVPcHRpb25zKGluc3QsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCBwcm9wcy5tdWx0aXBsZSA/IFtdIDogJycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gX2hhbmRsZUNoYW5nZShldmVudCkge1xuICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgdmFyIHJldHVyblZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5leGVjdXRlT25DaGFuZ2UocHJvcHMsIGV2ZW50KTtcblxuICB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IHRydWU7XG4gIFJlYWN0VXBkYXRlcy5hc2FwKHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkLCB0aGlzKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JFVDAxVFpXeGxZM1F1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQlNaV0ZqZEVSUFRWTmxiR1ZqZEZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlFeHBibXRsWkZaaGJIVmxWWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMMHhwYm10bFpGWmhiSFZsVlhScGJITW5LVHRjYm5aaGNpQlNaV0ZqZEUxdmRXNTBJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRTF2ZFc1MEp5azdYRzUyWVhJZ1VtVmhZM1JWY0dSaGRHVnpJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRlZ3WkdGMFpYTW5LVHRjYmx4dWRtRnlJR0Z6YzJsbmJpQTlJSEpsY1hWcGNtVW9KeTR2VDJKcVpXTjBMbUZ6YzJsbmJpY3BPMXh1ZG1GeUlIZGhjbTVwYm1jZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOTNZWEp1YVc1bkp5azdYRzVjYm5aaGNpQjJZV3gxWlVOdmJuUmxlSFJMWlhrZ1BTQW5YMTlTWldGamRFUlBUVk5sYkdWamRGOTJZV3gxWlNRbklDc2dUV0YwYUM1eVlXNWtiMjBvS1M1MGIxTjBjbWx1Wnlnek5pa3VjMnhwWTJVb01pazdYRzVjYm1aMWJtTjBhVzl1SUhWd1pHRjBaVTl3ZEdsdmJuTkpabEJsYm1ScGJtZFZjR1JoZEdWQmJtUk5iM1Z1ZEdWa0tDa2dlMXh1SUNCcFppQW9kR2hwY3k1ZmNtOXZkRTV2WkdWSlJDQW1KaUIwYUdsekxsOTNjbUZ3Y0dWeVUzUmhkR1V1Y0dWdVpHbHVaMVZ3WkdGMFpTa2dlMXh1SUNBZ0lIUm9hWE11WDNkeVlYQndaWEpUZEdGMFpTNXdaVzVrYVc1blZYQmtZWFJsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0IyWVhJZ2NISnZjSE1nUFNCMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDNXdjbTl3Y3p0Y2JpQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCTWFXNXJaV1JXWVd4MVpWVjBhV3h6TG1kbGRGWmhiSFZsS0hCeWIzQnpLVHRjYmx4dUlDQWdJR2xtSUNoMllXeDFaU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0IxY0dSaGRHVlBjSFJwYjI1ektIUm9hWE1zSUVKdmIyeGxZVzRvY0hKdmNITXViWFZzZEdsd2JHVXBMQ0IyWVd4MVpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEVSbFkyeGhjbUYwYVc5dVJYSnliM0pCWkdSbGJtUjFiU2h2ZDI1bGNpa2dlMXh1SUNCcFppQW9iM2R1WlhJcElIdGNiaUFnSUNCMllYSWdibUZ0WlNBOUlHOTNibVZ5TG1kbGRFNWhiV1VvS1R0Y2JpQWdJQ0JwWmlBb2JtRnRaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2NnUTJobFkyc2dkR2hsSUhKbGJtUmxjaUJ0WlhSb2IyUWdiMllnWUNjZ0t5QnVZVzFsSUNzZ0oyQXVKenRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlDY25PMXh1ZlZ4dVhHNTJZWElnZG1Gc2RXVlFjbTl3VG1GdFpYTWdQU0JiSjNaaGJIVmxKeXdnSjJSbFptRjFiSFJXWVd4MVpTZGRPMXh1WEc0dktpcGNiaUFxSUZaaGJHbGtZWFJwYjI0Z1puVnVZM1JwYjI0Z1ptOXlJR0IyWVd4MVpXQWdZVzVrSUdCa1pXWmhkV3gwVm1Gc2RXVmdMbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWTJobFkydFRaV3hsWTNSUWNtOXdWSGx3WlhNb2FXNXpkQ3dnY0hKdmNITXBJSHRjYmlBZ2RtRnlJRzkzYm1WeUlEMGdhVzV6ZEM1ZlkzVnljbVZ1ZEVWc1pXMWxiblF1WDI5M2JtVnlPMXh1SUNCTWFXNXJaV1JXWVd4MVpWVjBhV3h6TG1Ob1pXTnJVSEp2Y0ZSNWNHVnpLQ2R6Wld4bFkzUW5MQ0J3Y205d2N5d2diM2R1WlhJcE8xeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RtRnNkV1ZRY205d1RtRnRaWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCMllYSWdjSEp2Y0U1aGJXVWdQU0IyWVd4MVpWQnliM0JPWVcxbGMxdHBYVHRjYmlBZ0lDQnBaaUFvY0hKdmNITmJjSEp2Y0U1aGJXVmRJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jSEp2Y0hNdWJYVnNkR2x3YkdVcElIdGNiaUFnSUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LRUZ5Y21GNUxtbHpRWEp5WVhrb2NISnZjSE5iY0hKdmNFNWhiV1ZkS1N3Z0oxUm9aU0JnSlhOZ0lIQnliM0FnYzNWd2NHeHBaV1FnZEc4Z1BITmxiR1ZqZEQ0Z2JYVnpkQ0JpWlNCaGJpQmhjbkpoZVNCcFppQW5JQ3NnSjJCdGRXeDBhWEJzWldBZ2FYTWdkSEoxWlM0bGN5Y3NJSEJ5YjNCT1lXMWxMQ0JuWlhSRVpXTnNZWEpoZEdsdmJrVnljbTl5UVdSa1pXNWtkVzBvYjNkdVpYSXBLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUhkaGNtNXBibWNvSVVGeWNtRjVMbWx6UVhKeVlYa29jSEp2Y0hOYmNISnZjRTVoYldWZEtTd2dKMVJvWlNCZ0pYTmdJSEJ5YjNBZ2MzVndjR3hwWldRZ2RHOGdQSE5sYkdWamRENGdiWFZ6ZENCaVpTQmhJSE5qWVd4aGNpQW5JQ3NnSjNaaGJIVmxJR2xtSUdCdGRXeDBhWEJzWldBZ2FYTWdabUZzYzJVdUpYTW5MQ0J3Y205d1RtRnRaU3dnWjJWMFJHVmpiR0Z5WVhScGIyNUZjbkp2Y2tGa1pHVnVaSFZ0S0c5M2JtVnlLU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEgwZ2FXNXpkRnh1SUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCdGRXeDBhWEJzWlZ4dUlDb2dRSEJoY21GdElIc3FmU0J3Y205d1ZtRnNkV1VnUVNCemRISnBibWRoWW14bElDaDNhWFJvSUdCdGRXeDBhWEJzWldBc0lHRWdiR2x6ZENCdlppQnpkSEpwYm1kaFlteGxjeWt1WEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ292WEc1bWRXNWpkR2x2YmlCMWNHUmhkR1ZQY0hScGIyNXpLR2x1YzNRc0lHMTFiSFJwY0d4bExDQndjbTl3Vm1Gc2RXVXBJSHRjYmlBZ2RtRnlJSE5sYkdWamRHVmtWbUZzZFdVc0lHazdYRzRnSUhaaGNpQnZjSFJwYjI1eklEMGdVbVZoWTNSTmIzVnVkQzVuWlhST2IyUmxLR2x1YzNRdVgzSnZiM1JPYjJSbFNVUXBMbTl3ZEdsdmJuTTdYRzVjYmlBZ2FXWWdLRzExYkhScGNHeGxLU0I3WEc0Z0lDQWdjMlZzWldOMFpXUldZV3gxWlNBOUlIdDlPMXh1SUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCd2NtOXdWbUZzZFdVdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSE5sYkdWamRHVmtWbUZzZFdWYkp5Y2dLeUJ3Y205d1ZtRnNkV1ZiYVYxZElEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHOXdkR2x2Ym5NdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeGxZM1JsWkNBOUlITmxiR1ZqZEdWa1ZtRnNkV1V1YUdGelQzZHVVSEp2Y0dWeWRIa29iM0IwYVc5dWMxdHBYUzUyWVd4MVpTazdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjMXRwWFM1elpXeGxZM1JsWkNBaFBUMGdjMlZzWldOMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjMXRwWFM1elpXeGxZM1JsWkNBOUlITmxiR1ZqZEdWa08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNBdkx5QkVieUJ1YjNRZ2MyVjBJR0J6Wld4bFkzUXVkbUZzZFdWZ0lHRnpJR1Y0WVdOMElHSmxhR0YyYVc5eUlHbHpiaWQwSUdOdmJuTnBjM1JsYm5RZ1lXTnliM056SUdGc2JGeHVJQ0FnSUM4dklHSnliM2R6WlhKeklHWnZjaUJoYkd3Z1kyRnpaWE11WEc0Z0lDQWdjMlZzWldOMFpXUldZV3gxWlNBOUlDY25JQ3NnY0hKdmNGWmhiSFZsTzF4dUlDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnZjSFJwYjI1ekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1YzF0cFhTNTJZV3gxWlNBOVBUMGdjMlZzWldOMFpXUldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1elcybGRMbk5sYkdWamRHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk5iTUYwdWMyVnNaV04wWldRZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVsdGNHeGxiV1Z1ZEhNZ1lTQThjMlZzWldOMFBpQnVZWFJwZG1VZ1kyOXRjRzl1Wlc1MElIUm9ZWFFnWVd4c2IzZHpJRzl3ZEdsdmJtRnNiSGtnYzJWMGRHbHVaeUIwYUdWY2JpQXFJSEJ5YjNCeklHQjJZV3gxWldBZ1lXNWtJR0JrWldaaGRXeDBWbUZzZFdWZ0xpQkpaaUJnYlhWc2RHbHdiR1ZnSUdseklHWmhiSE5sTENCMGFHVWdjSEp2Y0NCdGRYTjBJR0psSUdGY2JpQXFJSE4wY21sdVoyRmliR1V1SUVsbUlHQnRkV3gwYVhCc1pXQWdhWE1nZEhKMVpTd2dkR2hsSUhCeWIzQWdiWFZ6ZENCaVpTQmhiaUJoY25KaGVTQnZaaUJ6ZEhKcGJtZGhZbXhsY3k1Y2JpQXFYRzRnS2lCSlppQmdkbUZzZFdWZ0lHbHpJRzV2ZENCemRYQndiR2xsWkNBb2IzSWdiblZzYkM5MWJtUmxabWx1WldRcExDQjFjMlZ5SUdGamRHbHZibk1nZEdoaGRDQmphR0Z1WjJVZ2RHaGxYRzRnS2lCelpXeGxZM1JsWkNCdmNIUnBiMjRnZDJsc2JDQjBjbWxuWjJWeUlIVndaR0YwWlhNZ2RHOGdkR2hsSUhKbGJtUmxjbVZrSUc5d2RHbHZibk11WEc0Z0tseHVJQ29nU1dZZ2FYUWdhWE1nYzNWd2NHeHBaV1FnS0dGdVpDQnViM1FnYm5Wc2JDOTFibVJsWm1sdVpXUXBMQ0IwYUdVZ2NtVnVaR1Z5WldRZ2IzQjBhVzl1Y3lCM2FXeHNJRzV2ZEZ4dUlDb2dkWEJrWVhSbElHbHVJSEpsYzNCdmJuTmxJSFJ2SUhWelpYSWdZV04wYVc5dWN5NGdTVzV6ZEdWaFpDd2dkR2hsSUdCMllXeDFaV0FnY0hKdmNDQnRkWE4wSUdOb1lXNW5aU0JwYmx4dUlDb2diM0prWlhJZ1ptOXlJSFJvWlNCeVpXNWtaWEpsWkNCdmNIUnBiMjV6SUhSdklIVndaR0YwWlM1Y2JpQXFYRzRnS2lCSlppQmdaR1ZtWVhWc2RGWmhiSFZsWUNCcGN5QndjbTkyYVdSbFpDd2dZVzU1SUc5d2RHbHZibk1nZDJsMGFDQjBhR1VnYzNWd2NHeHBaV1FnZG1Gc2RXVnpJSGRwYkd3Z1ltVmNiaUFxSUhObGJHVmpkR1ZrTGx4dUlDb3ZYRzUyWVhJZ1VtVmhZM1JFVDAxVFpXeGxZM1FnUFNCN1hHNGdJSFpoYkhWbFEyOXVkR1Y0ZEV0bGVUb2dkbUZzZFdWRGIyNTBaWGgwUzJWNUxGeHVYRzRnSUdkbGRFNWhkR2wyWlZCeWIzQnpPaUJtZFc1amRHbHZiaUFvYVc1emRDd2djSEp2Y0hNc0lHTnZiblJsZUhRcElIdGNiaUFnSUNCeVpYUjFjbTRnWVhOemFXZHVLSHQ5TENCd2NtOXdjeXdnZTF4dUlDQWdJQ0FnYjI1RGFHRnVaMlU2SUdsdWMzUXVYM2R5WVhCd1pYSlRkR0YwWlM1dmJrTm9ZVzVuWlN4Y2JpQWdJQ0FnSUhaaGJIVmxPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQjlLVHRjYmlBZ2ZTeGNibHh1SUNCdGIzVnVkRmR5WVhCd1pYSTZJR1oxYm1OMGFXOXVJQ2hwYm5OMExDQndjbTl3Y3lrZ2UxeHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0JqYUdWamExTmxiR1ZqZEZCeWIzQlVlWEJsY3locGJuTjBMQ0J3Y205d2N5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSFpoYkhWbElEMGdUR2x1YTJWa1ZtRnNkV1ZWZEdsc2N5NW5aWFJXWVd4MVpTaHdjbTl3Y3lrN1hHNGdJQ0FnYVc1emRDNWZkM0poY0hCbGNsTjBZWFJsSUQwZ2UxeHVJQ0FnSUNBZ2NHVnVaR2x1WjFWd1pHRjBaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQnBibWwwYVdGc1ZtRnNkV1U2SUhaaGJIVmxJQ0U5SUc1MWJHd2dQeUIyWVd4MVpTQTZJSEJ5YjNCekxtUmxabUYxYkhSV1lXeDFaU3hjYmlBZ0lDQWdJRzl1UTJoaGJtZGxPaUJmYUdGdVpHeGxRMmhoYm1kbExtSnBibVFvYVc1emRDa3NYRzRnSUNBZ0lDQjNZWE5OZFd4MGFYQnNaVG9nUW05dmJHVmhiaWh3Y205d2N5NXRkV3gwYVhCc1pTbGNiaUFnSUNCOU8xeHVJQ0I5TEZ4dVhHNGdJSEJ5YjJObGMzTkRhR2xzWkVOdmJuUmxlSFE2SUdaMWJtTjBhVzl1SUNocGJuTjBMQ0J3Y205d2N5d2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDOHZJRkJoYzNNZ1pHOTNiaUJwYm1sMGFXRnNJSFpoYkhWbElITnZJR2x1YVhScFlXd2daMlZ1WlhKaGRHVmtJRzFoY210MWNDQm9ZWE1nWTI5eWNtVmpkRnh1SUNBZ0lDOHZJR0J6Wld4bFkzUmxaR0FnWVhSMGNtbGlkWFJsYzF4dUlDQWdJSFpoY2lCamFHbHNaRU52Ym5SbGVIUWdQU0JoYzNOcFoyNG9lMzBzSUdOdmJuUmxlSFFwTzF4dUlDQWdJR05vYVd4a1EyOXVkR1Y0ZEZ0MllXeDFaVU52Ym5SbGVIUkxaWGxkSUQwZ2FXNXpkQzVmZDNKaGNIQmxjbE4wWVhSbExtbHVhWFJwWVd4V1lXeDFaVHRjYmlBZ0lDQnlaWFIxY200Z1kyaHBiR1JEYjI1MFpYaDBPMXh1SUNCOUxGeHVYRzRnSUhCdmMzUlZjR1JoZEdWWGNtRndjR1Z5T2lCbWRXNWpkR2x2YmlBb2FXNXpkQ2tnZTF4dUlDQWdJSFpoY2lCd2NtOXdjeUE5SUdsdWMzUXVYMk4xY25KbGJuUkZiR1Z0Wlc1MExuQnliM0J6TzF4dVhHNGdJQ0FnTHk4Z1FXWjBaWElnZEdobElHbHVhWFJwWVd3Z2JXOTFiblFzSUhkbElHTnZiblJ5YjJ3Z2MyVnNaV04wWldRdGJtVnpjeUJ0WVc1MVlXeHNlU0J6YnlCa2IyNG5kQ0J3WVhOelhHNGdJQ0FnTHk4Z2RHaGxJR052Ym5SbGVIUWdkbUZzZFdVZ1pHOTNibHh1SUNBZ0lHbHVjM1F1WDNkeVlYQndaWEpUZEdGMFpTNXBibWwwYVdGc1ZtRnNkV1VnUFNCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNCMllYSWdkMkZ6VFhWc2RHbHdiR1VnUFNCcGJuTjBMbDkzY21Gd2NHVnlVM1JoZEdVdWQyRnpUWFZzZEdsd2JHVTdYRzRnSUNBZ2FXNXpkQzVmZDNKaGNIQmxjbE4wWVhSbExuZGhjMDExYkhScGNHeGxJRDBnUW05dmJHVmhiaWh3Y205d2N5NXRkV3gwYVhCc1pTazdYRzVjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0JNYVc1clpXUldZV3gxWlZWMGFXeHpMbWRsZEZaaGJIVmxLSEJ5YjNCektUdGNiaUFnSUNCcFppQW9kbUZzZFdVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2FXNXpkQzVmZDNKaGNIQmxjbE4wWVhSbExuQmxibVJwYm1kVmNHUmhkR1VnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSFZ3WkdGMFpVOXdkR2x2Ym5Nb2FXNXpkQ3dnUW05dmJHVmhiaWh3Y205d2N5NXRkV3gwYVhCc1pTa3NJSFpoYkhWbEtUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIZGhjMDExYkhScGNHeGxJQ0U5UFNCQ2IyOXNaV0Z1S0hCeWIzQnpMbTExYkhScGNHeGxLU2tnZTF4dUlDQWdJQ0FnTHk4Z1JtOXlJSE5wYlhCc2FXTnBkSGtzSUhKbFlYQndiSGtnWUdSbFptRjFiSFJXWVd4MVpXQWdhV1lnWUcxMWJIUnBjR3hsWUNCcGN5QjBiMmRuYkdWa0xseHVJQ0FnSUNBZ2FXWWdLSEJ5YjNCekxtUmxabUYxYkhSV1lXeDFaU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhWd1pHRjBaVTl3ZEdsdmJuTW9hVzV6ZEN3Z1FtOXZiR1ZoYmlod2NtOXdjeTV0ZFd4MGFYQnNaU2tzSUhCeWIzQnpMbVJsWm1GMWJIUldZV3gxWlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBdkx5QlNaWFpsY25RZ2RHaGxJSE5sYkdWamRDQmlZV05ySUhSdklHbDBjeUJrWldaaGRXeDBJSFZ1YzJWc1pXTjBaV1FnYzNSaGRHVXVYRzRnSUNBZ0lDQWdJSFZ3WkdGMFpVOXdkR2x2Ym5Nb2FXNXpkQ3dnUW05dmJHVmhiaWh3Y205d2N5NXRkV3gwYVhCc1pTa3NJSEJ5YjNCekxtMTFiSFJwY0d4bElEOGdXMTBnT2lBbkp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJmYUdGdVpHeGxRMmhoYm1kbEtHVjJaVzUwS1NCN1hHNGdJSFpoY2lCd2NtOXdjeUE5SUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1MExuQnliM0J6TzF4dUlDQjJZWElnY21WMGRYSnVWbUZzZFdVZ1BTQk1hVzVyWldSV1lXeDFaVlYwYVd4ekxtVjRaV04xZEdWUGJrTm9ZVzVuWlNod2NtOXdjeXdnWlhabGJuUXBPMXh1WEc0Z0lIUm9hWE11WDNkeVlYQndaWEpUZEdGMFpTNXdaVzVrYVc1blZYQmtZWFJsSUQwZ2RISjFaVHRjYmlBZ1VtVmhZM1JWY0dSaGRHVnpMbUZ6WVhBb2RYQmtZWFJsVDNCMGFXOXVjMGxtVUdWdVpHbHVaMVZ3WkdGMFpVRnVaRTF2ZFc1MFpXUXNJSFJvYVhNcE8xeHVJQ0J5WlhSMWNtNGdjbVYwZFhKdVZtRnNkV1U3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVbVZoWTNSRVQwMVRaV3hsWTNRN0lsMTkiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01TZWxlY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gcmVxdWlyZSgnLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Jyk7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoJy4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcicpO1xuXG4vKipcbiAqIFdoaWxlIGBpc0NvbGxhcHNlZGAgaXMgYXZhaWxhYmxlIG9uIHRoZSBTZWxlY3Rpb24gb2JqZWN0IGFuZCBgY29sbGFwc2VkYFxuICogaXMgYXZhaWxhYmxlIG9uIHRoZSBSYW5nZSBvYmplY3QsIElFMTEgc29tZXRpbWVzIGdldHMgdGhlbSB3cm9uZy5cbiAqIElmIHRoZSBhbmNob3IvZm9jdXMgbm9kZXMgYW5kIG9mZnNldHMgYXJlIHRoZSBzYW1lLCB0aGUgcmFuZ2UgaXMgY29sbGFwc2VkLlxuICovXG5mdW5jdGlvbiBpc0NvbGxhcHNlZChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpIHtcbiAgcmV0dXJuIGFuY2hvck5vZGUgPT09IGZvY3VzTm9kZSAmJiBhbmNob3JPZmZzZXQgPT09IGZvY3VzT2Zmc2V0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgYXBwcm9wcmlhdGUgYW5jaG9yIGFuZCBmb2N1cyBub2RlL29mZnNldCBwYWlycyBmb3IgSUUuXG4gKlxuICogVGhlIGNhdGNoIGhlcmUgaXMgdGhhdCBJRSdzIHNlbGVjdGlvbiBBUEkgZG9lc24ndCBwcm92aWRlIGluZm9ybWF0aW9uXG4gKiBhYm91dCB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgZm9yd2FyZCBvciBiYWNrd2FyZCwgc28gd2UgaGF2ZSB0b1xuICogYmVoYXZlIGFzIHRob3VnaCBpdCdzIGFsd2F5cyBmb3J3YXJkLlxuICpcbiAqIElFIHRleHQgZGlmZmVycyBmcm9tIG1vZGVybiBzZWxlY3Rpb24gaW4gdGhhdCBpdCBiZWhhdmVzIGFzIHRob3VnaFxuICogYmxvY2sgZWxlbWVudHMgZW5kIHdpdGggYSBuZXcgbGluZS4gVGhpcyBtZWFucyBjaGFyYWN0ZXIgb2Zmc2V0cyB3aWxsXG4gKiBkaWZmZXIgYmV0d2VlbiB0aGUgdHdvIEFQSXMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldElFT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5zZWxlY3Rpb247XG4gIHZhciBzZWxlY3RlZFJhbmdlID0gc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gIHZhciBzZWxlY3RlZExlbmd0aCA9IHNlbGVjdGVkUmFuZ2UudGV4dC5sZW5ndGg7XG5cbiAgLy8gRHVwbGljYXRlIHNlbGVjdGlvbiBzbyB3ZSBjYW4gbW92ZSByYW5nZSB3aXRob3V0IGJyZWFraW5nIHVzZXIgc2VsZWN0aW9uLlxuICB2YXIgZnJvbVN0YXJ0ID0gc2VsZWN0ZWRSYW5nZS5kdXBsaWNhdGUoKTtcbiAgZnJvbVN0YXJ0Lm1vdmVUb0VsZW1lbnRUZXh0KG5vZGUpO1xuICBmcm9tU3RhcnQuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCBzZWxlY3RlZFJhbmdlKTtcblxuICB2YXIgc3RhcnRPZmZzZXQgPSBmcm9tU3RhcnQudGV4dC5sZW5ndGg7XG4gIHZhciBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIHNlbGVjdGVkTGVuZ3RoO1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0T2Zmc2V0LFxuICAgIGVuZDogZW5kT2Zmc2V0XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRNb2Rlcm5PZmZzZXRzKG5vZGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24gJiYgd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG4gIGlmICghc2VsZWN0aW9uIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYW5jaG9yTm9kZSA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICB2YXIgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldDtcbiAgdmFyIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gIHZhciBmb2N1c09mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcblxuICB2YXIgY3VycmVudFJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG5cbiAgLy8gSW4gRmlyZWZveCwgcmFuZ2Uuc3RhcnRDb250YWluZXIgYW5kIHJhbmdlLmVuZENvbnRhaW5lciBjYW4gYmUgXCJhbm9ueW1vdXNcbiAgLy8gZGl2c1wiLCBlLmcuIHRoZSB1cC9kb3duIGJ1dHRvbnMgb24gYW4gPGlucHV0IHR5cGU9XCJudW1iZXJcIj4uIEFub255bW91c1xuICAvLyBkaXZzIGRvIG5vdCBzZWVtIHRvIGV4cG9zZSBwcm9wZXJ0aWVzLCB0cmlnZ2VyaW5nIGEgXCJQZXJtaXNzaW9uIGRlbmllZFxuICAvLyBlcnJvclwiIGlmIGFueSBvZiBpdHMgcHJvcGVydGllcyBhcmUgYWNjZXNzZWQuIFRoZSBvbmx5IHNlZW1pbmdseSBwb3NzaWJsZVxuICAvLyB3YXkgdG8gYXZvaWQgZXJyb3JpbmcgaXMgdG8gYWNjZXNzIGEgcHJvcGVydHkgdGhhdCB0eXBpY2FsbHkgd29ya3MgZm9yXG4gIC8vIG5vbi1hbm9ueW1vdXMgZGl2cyBhbmQgY2F0Y2ggYW55IGVycm9yIHRoYXQgbWF5IG90aGVyd2lzZSBhcmlzZS4gU2VlXG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIwODQyN1xuICB0cnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lci5ub2RlVHlwZTtcbiAgICBjdXJyZW50UmFuZ2UuZW5kQ29udGFpbmVyLm5vZGVUeXBlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIElmIHRoZSBub2RlIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuXG4gIC8vIGBTZWxlY3Rpb24uaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBuYXRpdmVseSwgYnV0IElFIHNvbWV0aW1lcyBnZXRzXG4gIC8vIHRoaXMgdmFsdWUgd3JvbmcuXG4gIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHNlbGVjdGlvbi5hbmNob3JOb2RlLCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LCBzZWxlY3Rpb24uZm9jdXNOb2RlLCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpO1xuXG4gIHZhciByYW5nZUxlbmd0aCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkID8gMCA6IGN1cnJlbnRSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcblxuICB2YXIgdGVtcFJhbmdlID0gY3VycmVudFJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgdGVtcFJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTtcbiAgdGVtcFJhbmdlLnNldEVuZChjdXJyZW50UmFuZ2Uuc3RhcnRDb250YWluZXIsIGN1cnJlbnRSYW5nZS5zdGFydE9mZnNldCk7XG5cbiAgdmFyIGlzVGVtcFJhbmdlQ29sbGFwc2VkID0gaXNDb2xsYXBzZWQodGVtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLCB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsIHRlbXBSYW5nZS5lbmRDb250YWluZXIsIHRlbXBSYW5nZS5lbmRPZmZzZXQpO1xuXG4gIHZhciBzdGFydCA9IGlzVGVtcFJhbmdlQ29sbGFwc2VkID8gMCA6IHRlbXBSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgcmFuZ2VMZW5ndGg7XG5cbiAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBiYWNrd2FyZC5cbiAgdmFyIGRldGVjdGlvblJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0U3RhcnQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0KTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0RW5kKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB2YXIgaXNCYWNrd2FyZCA9IGRldGVjdGlvblJhbmdlLmNvbGxhcHNlZDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBpc0JhY2t3YXJkID8gZW5kIDogc3RhcnQsXG4gICAgZW5kOiBpc0JhY2t3YXJkID8gc3RhcnQgOiBlbmRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldElFT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICB2YXIgc3RhcnQsIGVuZDtcblxuICBpZiAodHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBzdGFydDtcbiAgfSBlbHNlIGlmIChvZmZzZXRzLnN0YXJ0ID4gb2Zmc2V0cy5lbmQpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuZW5kO1xuICAgIGVuZCA9IG9mZnNldHMuc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IG9mZnNldHMuZW5kO1xuICB9XG5cbiAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICByYW5nZS5zZWxlY3QoKTtcbn1cblxuLyoqXG4gKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG4gKiBzZWxlY3Rpb25zLlxuICpcbiAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuICogdGhlIGBleHRlbmRgIG1ldGhvZCwgd2hpY2ggbWVhbnMgdGhhdCBldmVuIGluIG1vZGVybiBJRSwgaXQncyBub3QgcG9zc2libGVcbiAqIHRvIHByb2dyYW1hdGljYWxseSBjcmVhdGUgYSBiYWNrd2FyZCBzZWxlY3Rpb24uIFRodXMsIGZvciBhbGwgSUVcbiAqIHZlcnNpb25zLCB3ZSB1c2UgdGhlIG9sZCBJRSBBUEkgdG8gY3JlYXRlIG91ciBzZWxlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0TW9kZXJuT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIGlmICghd2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBsZW5ndGggPSBub2RlW2dldFRleHRDb250ZW50QWNjZXNzb3IoKV0ubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBNYXRoLm1pbihvZmZzZXRzLnN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZW5kID0gdHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJyA/IHN0YXJ0IDogTWF0aC5taW4ob2Zmc2V0cy5lbmQsIGxlbmd0aCk7XG5cbiAgLy8gSUUgMTEgdXNlcyBtb2Rlcm4gc2VsZWN0aW9uLCBidXQgZG9lc24ndCBzdXBwb3J0IHRoZSBleHRlbmQgbWV0aG9kLlxuICAvLyBGbGlwIGJhY2t3YXJkIHNlbGVjdGlvbnMsIHNvIHdlIGNhbiBzZXQgd2l0aCBhIHNpbmdsZSByYW5nZS5cbiAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIHN0YXJ0ID4gZW5kKSB7XG4gICAgdmFyIHRlbXAgPSBlbmQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gICAgc3RhcnQgPSB0ZW1wO1xuICB9XG5cbiAgdmFyIHN0YXJ0TWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBzdGFydCk7XG4gIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIGVuZCk7XG5cbiAgaWYgKHN0YXJ0TWFya2VyICYmIGVuZE1hcmtlcikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRNYXJrZXIubm9kZSwgc3RhcnRNYXJrZXIub2Zmc2V0KTtcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciB1c2VJRU9mZnNldHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ3NlbGVjdGlvbicgaW4gZG9jdW1lbnQgJiYgISgnZ2V0U2VsZWN0aW9uJyBpbiB3aW5kb3cpO1xuXG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICovXG4gIGdldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IGdldElFT2Zmc2V0cyA6IGdldE1vZGVybk9mZnNldHMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICAgKi9cbiAgc2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gc2V0SUVPZmZzZXRzIDogc2V0TW9kZXJuT2Zmc2V0c1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01TZXJ2ZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEluamVjdGlvbicpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nID0gcmVxdWlyZSgnLi9SZWFjdFNlcnZlclJlbmRlcmluZycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cblJlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTtcblxudmFyIFJlYWN0RE9NU2VydmVyID0ge1xuICByZW5kZXJUb1N0cmluZzogUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdHJpbmcsXG4gIHJlbmRlclRvU3RhdGljTWFya3VwOiBSZWFjdFNlcnZlclJlbmRlcmluZy5yZW5kZXJUb1N0YXRpY01hcmt1cCxcbiAgdmVyc2lvbjogUmVhY3RWZXJzaW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VydmVyOyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01UZXh0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMnKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xudmFyIHNldFRleHRDb250ZW50ID0gcmVxdWlyZSgnLi9zZXRUZXh0Q29udGVudCcpO1xudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG5cbi8qKlxuICogVGV4dCBub2RlcyB2aW9sYXRlIGEgY291cGxlIGFzc3VtcHRpb25zIHRoYXQgUmVhY3QgbWFrZXMgYWJvdXQgY29tcG9uZW50czpcbiAqXG4gKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG4gKiAgLSBUZXh0IG5vZGVzIGNhbm5vdCBiZSBhc3NpZ25lZCBhIFJlYWN0IHJvb3QgSUQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgaW4gZWxlbWVudHMgc28gdGhhdCB0aGV5IGNhbiB1bmRlcmdvXG4gKiB0aGUgc2FtZSByZWNvbmNpbGlhdGlvbiB0aGF0IGlzIGFwcGxpZWQgdG8gZWxlbWVudHMuXG4gKlxuICogVE9ETzogSW52ZXN0aWdhdGUgcmVwcmVzZW50aW5nIFJlYWN0IGNvbXBvbmVudHMgaW4gdGhlIERPTSB3aXRoIHRleHQgbm9kZXMuXG4gKlxuICogQGNsYXNzIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gIC8vIFRoaXMgY29uc3RydWN0b3IgYW5kIGl0cyBhcmd1bWVudCBpcyBjdXJyZW50bHkgdXNlZCBieSBtb2Nrcy5cbn07XG5cbmFzc2lnbihSZWFjdERPTVRleHRDb21wb25lbnQucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3RUZXh0fSB0ZXh0XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0OiBmdW5jdGlvbiAodGV4dCkge1xuICAgIC8vIFRPRE86IFRoaXMgaXMgcmVhbGx5IGEgUmVhY3RUZXh0IChSZWFjdE5vZGUpLCBub3QgYSBSZWFjdEVsZW1lbnRcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IHRleHQ7XG4gICAgdGhpcy5fc3RyaW5nVGV4dCA9ICcnICsgdGV4dDtcblxuICAgIC8vIFByb3BlcnRpZXNcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl9tb3VudEluZGV4ID0gMDtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgbWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS4gVGhpcyBub2RlIGlzIG5vdCBpbnRlbmRlZCB0byBoYXZlXG4gICAqIGFueSBmZWF0dXJlcyBiZXNpZGVzIGNvbnRhaW5pbmcgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0pIHtcbiAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nKCdzcGFuJywgbnVsbCwgY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG4gICAgaWYgKHRyYW5zYWN0aW9uLnVzZUNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lckRvY3VtZW50ID0gY29udGV4dFtSZWFjdE1vdW50Lm93bmVyRG9jdW1lbnRDb250ZXh0S2V5XTtcbiAgICAgIHZhciBlbCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldEF0dHJpYnV0ZUZvcklEKGVsLCByb290SUQpO1xuICAgICAgLy8gUG9wdWxhdGUgbm9kZSBjYWNoZVxuICAgICAgUmVhY3RNb3VudC5nZXRJRChlbCk7XG4gICAgICBzZXRUZXh0Q29udGVudChlbCwgdGhpcy5fc3RyaW5nVGV4dCk7XG4gICAgICByZXR1cm4gZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlc2NhcGVkVGV4dCA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0aGlzLl9zdHJpbmdUZXh0KTtcblxuICAgICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICAgIC8vIE5vcm1hbGx5IHdlJ2Qgd3JhcCB0aGlzIGluIGEgYHNwYW5gIGZvciB0aGUgcmVhc29ucyBzdGF0ZWQgYWJvdmUsIGJ1dFxuICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIGEgc2l0dWF0aW9uIHdoZXJlIFJlYWN0IHdvbid0IHRha2Ugb3ZlciAoc3RhdGljIHBhZ2VzKSxcbiAgICAgICAgLy8gd2UgY2FuIHNpbXBseSByZXR1cm4gdGhlIHRleHQgYXMgaXQgaXMuXG4gICAgICAgIHJldHVybiBlc2NhcGVkVGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICc8c3BhbiAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHJvb3RJRCkgKyAnPicgKyBlc2NhcGVkVGV4dCArICc8L3NwYW4+JztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBjb21wb25lbnQgYnkgdXBkYXRpbmcgdGhlIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFRleHR9IG5leHRUZXh0IFRoZSBuZXh0IHRleHQgY29udGVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24gKG5leHRUZXh0LCB0cmFuc2FjdGlvbikge1xuICAgIGlmIChuZXh0VGV4dCAhPT0gdGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dFRleHQ7XG4gICAgICB2YXIgbmV4dFN0cmluZ1RleHQgPSAnJyArIG5leHRUZXh0O1xuICAgICAgaWYgKG5leHRTdHJpbmdUZXh0ICE9PSB0aGlzLl9zdHJpbmdUZXh0KSB7XG4gICAgICAgIC8vIFRPRE86IFNhdmUgdGhpcyBhcyBwZW5kaW5nIHByb3BzIGFuZCB1c2UgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5XG4gICAgICAgIC8vIGFuZC9vciB1cGRhdGVDb21wb25lbnQgdG8gZG8gdGhlIGFjdHVhbCB1cGRhdGUgZm9yIGNvbnNpc3RlbmN5IHdpdGhcbiAgICAgICAgLy8gb3RoZXIgY29tcG9uZW50IHR5cGVzP1xuICAgICAgICB0aGlzLl9zdHJpbmdUZXh0ID0gbmV4dFN0cmluZ1RleHQ7XG4gICAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnQobm9kZSwgbmV4dFN0cmluZ1RleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dENvbXBvbmVudDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRVQwMVVaWGgwUTI5dGNHOXVaVzUwTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRkpsWVdOMFJFOU5WR1Y0ZEVOdmJYQnZibVZ1ZEZ4dUlDb2dRSFI1Y0dWamFHVmphM01nYzNSaGRHbGpMVzl1YkhsY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQkVUMDFEYUdsc1pISmxiazl3WlhKaGRHbHZibk1nUFNCeVpYRjFhWEpsS0NjdUwwUlBUVU5vYVd4a2NtVnVUM0JsY21GMGFXOXVjeWNwTzF4dWRtRnlJRVJQVFZCeWIzQmxjblI1VDNCbGNtRjBhVzl1Y3lBOUlISmxjWFZwY21Vb0p5NHZSRTlOVUhKdmNHVnlkSGxQY0dWeVlYUnBiMjV6SnlrN1hHNTJZWElnVW1WaFkzUkRiMjF3YjI1bGJuUkNjbTkzYzJWeVJXNTJhWEp2Ym0xbGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBRMjl0Y0c5dVpXNTBRbkp2ZDNObGNrVnVkbWx5YjI1dFpXNTBKeWs3WEc1MllYSWdVbVZoWTNSTmIzVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JOYjNWdWRDY3BPMXh1WEc1MllYSWdZWE56YVdkdUlEMGdjbVZ4ZFdseVpTZ25MaTlQWW1wbFkzUXVZWE56YVdkdUp5azdYRzUyWVhJZ1pYTmpZWEJsVkdWNGRFTnZiblJsYm5SR2IzSkNjbTkzYzJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlsYzJOaGNHVlVaWGgwUTI5dWRHVnVkRVp2Y2tKeWIzZHpaWEluS1R0Y2JuWmhjaUJ6WlhSVVpYaDBRMjl1ZEdWdWRDQTlJSEpsY1hWcGNtVW9KeTR2YzJWMFZHVjRkRU52Ym5SbGJuUW5LVHRjYm5aaGNpQjJZV3hwWkdGMFpVUlBUVTVsYzNScGJtY2dQU0J5WlhGMWFYSmxLQ2N1TDNaaGJHbGtZWFJsUkU5TlRtVnpkR2x1WnljcE8xeHVYRzR2S2lwY2JpQXFJRlJsZUhRZ2JtOWtaWE1nZG1sdmJHRjBaU0JoSUdOdmRYQnNaU0JoYzNOMWJYQjBhVzl1Y3lCMGFHRjBJRkpsWVdOMElHMWhhMlZ6SUdGaWIzVjBJR052YlhCdmJtVnVkSE02WEc0Z0tseHVJQ29nSUMwZ1YyaGxiaUJ0YjNWdWRHbHVaeUIwWlhoMElHbHVkRzhnZEdobElFUlBUU3dnWVdScVlXTmxiblFnZEdWNGRDQnViMlJsY3lCaGNtVWdiV1Z5WjJWa0xseHVJQ29nSUMwZ1ZHVjRkQ0J1YjJSbGN5QmpZVzV1YjNRZ1ltVWdZWE56YVdkdVpXUWdZU0JTWldGamRDQnliMjkwSUVsRUxseHVJQ3BjYmlBcUlGUm9hWE1nWTI5dGNHOXVaVzUwSUdseklIVnpaV1FnZEc4Z2QzSmhjQ0J6ZEhKcGJtZHpJR2x1SUdWc1pXMWxiblJ6SUhOdklIUm9ZWFFnZEdobGVTQmpZVzRnZFc1a1pYSm5iMXh1SUNvZ2RHaGxJSE5oYldVZ2NtVmpiMjVqYVd4cFlYUnBiMjRnZEdoaGRDQnBjeUJoY0hCc2FXVmtJSFJ2SUdWc1pXMWxiblJ6TGx4dUlDcGNiaUFxSUZSUFJFODZJRWx1ZG1WemRHbG5ZWFJsSUhKbGNISmxjMlZ1ZEdsdVp5QlNaV0ZqZENCamIyMXdiMjVsYm5SeklHbHVJSFJvWlNCRVQwMGdkMmwwYUNCMFpYaDBJRzV2WkdWekxseHVJQ3BjYmlBcUlFQmpiR0Z6Y3lCU1pXRmpkRVJQVFZSbGVIUkRiMjF3YjI1bGJuUmNiaUFxSUVCbGVIUmxibVJ6SUZKbFlXTjBRMjl0Y0c5dVpXNTBYRzRnS2lCQWFXNTBaWEp1WVd4Y2JpQXFMMXh1ZG1GeUlGSmxZV04wUkU5TlZHVjRkRU52YlhCdmJtVnVkQ0E5SUdaMWJtTjBhVzl1SUNod2NtOXdjeWtnZTF4dUlDQXZMeUJVYUdseklHTnZibk4wY25WamRHOXlJR0Z1WkNCcGRITWdZWEpuZFcxbGJuUWdhWE1nWTNWeWNtVnVkR3g1SUhWelpXUWdZbmtnYlc5amEzTXVYRzU5TzF4dVhHNWhjM05wWjI0b1VtVmhZM1JFVDAxVVpYaDBRMjl0Y0c5dVpXNTBMbkJ5YjNSdmRIbHdaU3dnZTF4dVhHNGdJQzhxS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFZHVjRkSDBnZEdWNGRGeHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lHTnZibk4wY25WamREb2dablZ1WTNScGIyNGdLSFJsZUhRcElIdGNiaUFnSUNBdkx5QlVUMFJQT2lCVWFHbHpJR2x6SUhKbFlXeHNlU0JoSUZKbFlXTjBWR1Y0ZENBb1VtVmhZM1JPYjJSbEtTd2dibTkwSUdFZ1VtVmhZM1JGYkdWdFpXNTBYRzRnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRVZzWlcxbGJuUWdQU0IwWlhoME8xeHVJQ0FnSUhSb2FYTXVYM04wY21sdVoxUmxlSFFnUFNBbkp5QXJJSFJsZUhRN1hHNWNiaUFnSUNBdkx5QlFjbTl3WlhKMGFXVnpYRzRnSUNBZ2RHaHBjeTVmY205dmRFNXZaR1ZKUkNBOUlHNTFiR3c3WEc0Z0lDQWdkR2hwY3k1ZmJXOTFiblJKYm1SbGVDQTlJREE3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlhNZ2RHaGxJRzFoY210MWNDQm1iM0lnZEdocGN5QjBaWGgwSUc1dlpHVXVJRlJvYVhNZ2JtOWtaU0JwY3lCdWIzUWdhVzUwWlc1a1pXUWdkRzhnYUdGMlpWeHVJQ0FnS2lCaGJua2dabVZoZEhWeVpYTWdZbVZ6YVdSbGN5QmpiMjUwWVdsdWFXNW5JSFJsZUhRZ1kyOXVkR1Z1ZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISnZiM1JKUkNCRVQwMGdTVVFnYjJZZ2RHaGxJSEp2YjNRZ2JtOWtaUzVjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dWZGSmxZV04wVTJWeWRtVnlVbVZ1WkdWeWFXNW5WSEpoYm5OaFkzUnBiMjU5SUhSeVlXNXpZV04wYVc5dVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTNOMGNtbHVaMzBnVFdGeWEzVndJR1p2Y2lCMGFHbHpJSFJsZUhRZ2JtOWtaUzVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0J0YjNWdWRFTnZiWEJ2Ym1WdWREb2dablZ1WTNScGIyNGdLSEp2YjNSSlJDd2dkSEpoYm5OaFkzUnBiMjRzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFJiZG1Gc2FXUmhkR1ZFVDAxT1pYTjBhVzVuTG1GdVkyVnpkRzl5U1c1bWIwTnZiblJsZUhSTFpYbGRLU0I3WEc0Z0lDQWdJQ0FnSUhaaGJHbGtZWFJsUkU5TlRtVnpkR2x1WnlnbmMzQmhiaWNzSUc1MWJHd3NJR052Ym5SbGVIUmJkbUZzYVdSaGRHVkVUMDFPWlhOMGFXNW5MbUZ1WTJWemRHOXlTVzVtYjBOdmJuUmxlSFJMWlhsZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbDl5YjI5MFRtOWtaVWxFSUQwZ2NtOXZkRWxFTzF4dUlDQWdJR2xtSUNoMGNtRnVjMkZqZEdsdmJpNTFjMlZEY21WaGRHVkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQjJZWElnYjNkdVpYSkViMk4xYldWdWRDQTlJR052Ym5SbGVIUmJVbVZoWTNSTmIzVnVkQzV2ZDI1bGNrUnZZM1Z0Wlc1MFEyOXVkR1Y0ZEV0bGVWMDdYRzRnSUNBZ0lDQjJZWElnWld3Z1BTQnZkMjVsY2tSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM053WVc0bktUdGNiaUFnSUNBZ0lFUlBUVkJ5YjNCbGNuUjVUM0JsY21GMGFXOXVjeTV6WlhSQmRIUnlhV0oxZEdWR2IzSkpSQ2hsYkN3Z2NtOXZkRWxFS1R0Y2JpQWdJQ0FnSUM4dklGQnZjSFZzWVhSbElHNXZaR1VnWTJGamFHVmNiaUFnSUNBZ0lGSmxZV04wVFc5MWJuUXVaMlYwU1VRb1pXd3BPMXh1SUNBZ0lDQWdjMlYwVkdWNGRFTnZiblJsYm5Rb1pXd3NJSFJvYVhNdVgzTjBjbWx1WjFSbGVIUXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHVnNPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMllYSWdaWE5qWVhCbFpGUmxlSFFnUFNCbGMyTmhjR1ZVWlhoMFEyOXVkR1Z1ZEVadmNrSnliM2R6WlhJb2RHaHBjeTVmYzNSeWFXNW5WR1Y0ZENrN1hHNWNiaUFnSUNBZ0lHbG1JQ2gwY21GdWMyRmpkR2x2Ymk1eVpXNWtaWEpVYjFOMFlYUnBZMDFoY210MWNDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCT2IzSnRZV3hzZVNCM1pTZGtJSGR5WVhBZ2RHaHBjeUJwYmlCaElHQnpjR0Z1WUNCbWIzSWdkR2hsSUhKbFlYTnZibk1nYzNSaGRHVmtJR0ZpYjNabExDQmlkWFJjYmlBZ0lDQWdJQ0FnTHk4Z2MybHVZMlVnZEdocGN5QnBjeUJoSUhOcGRIVmhkR2x2YmlCM2FHVnlaU0JTWldGamRDQjNiMjRuZENCMFlXdGxJRzkyWlhJZ0tITjBZWFJwWXlCd1lXZGxjeWtzWEc0Z0lDQWdJQ0FnSUM4dklIZGxJR05oYmlCemFXMXdiSGtnY21WMGRYSnVJSFJvWlNCMFpYaDBJR0Z6SUdsMElHbHpMbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWE5qWVhCbFpGUmxlSFE3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUFuUEhOd1lXNGdKeUFySUVSUFRWQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5NWpjbVZoZEdWTllYSnJkWEJHYjNKSlJDaHliMjkwU1VRcElDc2dKejRuSUNzZ1pYTmpZWEJsWkZSbGVIUWdLeUFuUEM5emNHRnVQaWM3WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmNHUmhkR1Z6SUhSb2FYTWdZMjl0Y0c5dVpXNTBJR0o1SUhWd1pHRjBhVzVuSUhSb1pTQjBaWGgwSUdOdmJuUmxiblF1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JVWlhoMGZTQnVaWGgwVkdWNGRDQlVhR1VnYm1WNGRDQjBaWGgwSUdOdmJuUmxiblJjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dWZTQjBjbUZ1YzJGamRHbHZibHh1SUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNvdlhHNGdJSEpsWTJWcGRtVkRiMjF3YjI1bGJuUTZJR1oxYm1OMGFXOXVJQ2h1WlhoMFZHVjRkQ3dnZEhKaGJuTmhZM1JwYjI0cElIdGNiaUFnSUNCcFppQW9ibVY0ZEZSbGVIUWdJVDA5SUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5amRYSnlaVzUwUld4bGJXVnVkQ0E5SUc1bGVIUlVaWGgwTzF4dUlDQWdJQ0FnZG1GeUlHNWxlSFJUZEhKcGJtZFVaWGgwSUQwZ0p5Y2dLeUJ1WlhoMFZHVjRkRHRjYmlBZ0lDQWdJR2xtSUNodVpYaDBVM1J5YVc1blZHVjRkQ0FoUFQwZ2RHaHBjeTVmYzNSeWFXNW5WR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQlRZWFpsSUhSb2FYTWdZWE1nY0dWdVpHbHVaeUJ3Y205d2N5QmhibVFnZFhObElIQmxjbVp2Y20xVmNHUmhkR1ZKWms1bFkyVnpjMkZ5ZVZ4dUlDQWdJQ0FnSUNBdkx5QmhibVF2YjNJZ2RYQmtZWFJsUTI5dGNHOXVaVzUwSUhSdklHUnZJSFJvWlNCaFkzUjFZV3dnZFhCa1lYUmxJR1p2Y2lCamIyNXphWE4wWlc1amVTQjNhWFJvWEc0Z0lDQWdJQ0FnSUM4dklHOTBhR1Z5SUdOdmJYQnZibVZ1ZENCMGVYQmxjejljYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1J5YVc1blZHVjRkQ0E5SUc1bGVIUlRkSEpwYm1kVVpYaDBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JtOWtaU0E5SUZKbFlXTjBUVzkxYm5RdVoyVjBUbTlrWlNoMGFHbHpMbDl5YjI5MFRtOWtaVWxFS1R0Y2JpQWdJQ0FnSUNBZ1JFOU5RMmhwYkdSeVpXNVBjR1Z5WVhScGIyNXpMblZ3WkdGMFpWUmxlSFJEYjI1MFpXNTBLRzV2WkdVc0lHNWxlSFJUZEhKcGJtZFVaWGgwS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ2RXNXRiM1Z1ZEVOdmJYQnZibVZ1ZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lGSmxZV04wUTI5dGNHOXVaVzUwUW5KdmQzTmxja1Z1ZG1seWIyNXRaVzUwTG5WdWJXOTFiblJKUkVaeWIyMUZiblpwY205dWJXVnVkQ2gwYUdsekxsOXliMjkwVG05a1pVbEVLVHRjYmlBZ2ZWeHVYRzU5S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNaV0ZqZEVSUFRWUmxlSFJEYjIxd2IyNWxiblE3SWwxOSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01UZXh0YXJlYVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKCcuL0xpbmtlZFZhbHVlVXRpbHMnKTtcbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RET01JRE9wZXJhdGlvbnMnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgICBSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIHNldHRpbmcgYHZhbHVlYCwgYW5kXG4gKiBgZGVmYXVsdFZhbHVlYC4gVGhpcyBkaWZmZXJzIGZyb20gdGhlIHRyYWRpdGlvbmFsIERPTSBBUEkgYmVjYXVzZSB2YWx1ZSBpc1xuICogdXN1YWxseSBzZXQgYXMgUENEQVRBIGNoaWxkcmVuLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGFmZmVjdCB0aGVcbiAqIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsXG4gKiBub3QgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggYW4gZW1wdHkgdmFsdWUsIHRoZSBwcm9wXG4gKiBgZGVmYXVsdFZhbHVlYCBpZiBzcGVjaWZpZWQsIG9yIHRoZSBjaGlsZHJlbiBjb250ZW50IChkZXByZWNhdGVkKS5cbiAqL1xudmFyIFJlYWN0RE9NVGV4dGFyZWEgPSB7XG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICAhKHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgZG9lcyBub3QgbWFrZSBzZW5zZSBvbiA8dGV4dGFyZWE+LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gICAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC5cbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBjaGlsZHJlbjogaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2VcbiAgICB9KTtcblxuICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCd0ZXh0YXJlYScsIHByb3BzLCBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGNoaWxkcmVuIGNvbnRlbnQgaW4gPHRleHRhcmVhPi5cbiAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgKyAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgICEoZGVmYXVsdFZhbHVlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0lmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgIShjaGlsZHJlbi5sZW5ndGggPD0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdFZhbHVlID0gJycgKyBjaGlsZHJlbjtcbiAgICB9XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBkZWZhdWx0VmFsdWUgPSAnJztcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG5cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7XG4gICAgICAvLyBXZSBzYXZlIHRoZSBpbml0aWFsIHZhbHVlIHNvIHRoYXQgYFJlYWN0RE9NQ29tcG9uZW50YCBkb2Vzbid0IHVwZGF0ZVxuICAgICAgLy8gYHRleHRDb250ZW50YCAodW5uZWNlc3Nhcnkgc2luY2Ugd2UgdXBkYXRlIHZhbHVlKS5cbiAgICAgIC8vIFRoZSBpbml0aWFsIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQnc1xuICAgICAgLy8gZm9yY2VkIHRvIGJlIGEgc3RyaW5nLlxuICAgICAgaW5pdGlhbFZhbHVlOiAnJyArICh2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBkZWZhdWx0VmFsdWUpLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KVxuICAgIH07XG4gIH0sXG5cbiAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICAgIFJlYWN0RE9NSURPcGVyYXRpb25zLnVwZGF0ZVByb3BlcnR5QnlJRChpbnN0Ll9yb290Tm9kZUlELCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gIHZhciByZXR1cm5WYWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZXhlY3V0ZU9uQ2hhbmdlKHByb3BzLCBldmVudCk7XG4gIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dGFyZWE7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkVUMDFVWlhoMFlYSmxZUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRkpsWVdOMFJFOU5WR1Y0ZEdGeVpXRmNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJNYVc1clpXUldZV3gxWlZWMGFXeHpJRDBnY21WeGRXbHlaU2duTGk5TWFXNXJaV1JXWVd4MVpWVjBhV3h6SnlrN1hHNTJZWElnVW1WaFkzUkVUMDFKUkU5d1pYSmhkR2x2Ym5NZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFJFOU5TVVJQY0dWeVlYUnBiMjV6SnlrN1hHNTJZWElnVW1WaFkzUlZjR1JoZEdWeklEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRGVndaR0YwWlhNbktUdGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb0p5NHZUMkpxWldOMExtRnpjMmxuYmljcE8xeHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwybHVkbUZ5YVdGdWRDY3BPMXh1ZG1GeUlIZGhjbTVwYm1jZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOTNZWEp1YVc1bkp5azdYRzVjYm1aMWJtTjBhVzl1SUdadmNtTmxWWEJrWVhSbFNXWk5iM1Z1ZEdWa0tDa2dlMXh1SUNCcFppQW9kR2hwY3k1ZmNtOXZkRTV2WkdWSlJDa2dlMXh1SUNBZ0lDOHZJRVJQVFNCamIyMXdiMjVsYm5RZ2FYTWdjM1JwYkd3Z2JXOTFiblJsWkRzZ2RYQmtZWFJsWEc0Z0lDQWdVbVZoWTNSRVQwMVVaWGgwWVhKbFlTNTFjR1JoZEdWWGNtRndjR1Z5S0hSb2FYTXBPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nU1cxd2JHVnRaVzUwY3lCaElEeDBaWGgwWVhKbFlUNGdibUYwYVhabElHTnZiWEJ2Ym1WdWRDQjBhR0YwSUdGc2JHOTNjeUJ6WlhSMGFXNW5JR0IyWVd4MVpXQXNJR0Z1WkZ4dUlDb2dZR1JsWm1GMWJIUldZV3gxWldBdUlGUm9hWE1nWkdsbVptVnljeUJtY205dElIUm9aU0IwY21Ga2FYUnBiMjVoYkNCRVQwMGdRVkJKSUdKbFkyRjFjMlVnZG1Gc2RXVWdhWE5jYmlBcUlIVnpkV0ZzYkhrZ2MyVjBJR0Z6SUZCRFJFRlVRU0JqYUdsc1pISmxiaTVjYmlBcVhHNGdLaUJKWmlCZ2RtRnNkV1ZnSUdseklHNXZkQ0J6ZFhCd2JHbGxaQ0FvYjNJZ2JuVnNiQzkxYm1SbFptbHVaV1FwTENCMWMyVnlJR0ZqZEdsdmJuTWdkR2hoZENCaFptWmxZM1FnZEdobFhHNGdLaUIyWVd4MVpTQjNhV3hzSUhSeWFXZG5aWElnZFhCa1lYUmxjeUIwYnlCMGFHVWdaV3hsYldWdWRDNWNiaUFxWEc0Z0tpQkpaaUJnZG1Gc2RXVmdJR2x6SUhOMWNIQnNhV1ZrSUNoaGJtUWdibTkwSUc1MWJHd3ZkVzVrWldacGJtVmtLU3dnZEdobElISmxibVJsY21Wa0lHVnNaVzFsYm5RZ2QybHNiRnh1SUNvZ2JtOTBJSFJ5YVdkblpYSWdkWEJrWVhSbGN5QjBieUIwYUdVZ1pXeGxiV1Z1ZEM0Z1NXNXpkR1ZoWkN3Z2RHaGxJR0IyWVd4MVpXQWdjSEp2Y0NCdGRYTjBJR05vWVc1blpTQnBibHh1SUNvZ2IzSmtaWElnWm05eUlIUm9aU0J5Wlc1a1pYSmxaQ0JsYkdWdFpXNTBJSFJ2SUdKbElIVndaR0YwWldRdVhHNGdLbHh1SUNvZ1ZHaGxJSEpsYm1SbGNtVmtJR1ZzWlcxbGJuUWdkMmxzYkNCaVpTQnBibWwwYVdGc2FYcGxaQ0IzYVhSb0lHRnVJR1Z0Y0hSNUlIWmhiSFZsTENCMGFHVWdjSEp2Y0Z4dUlDb2dZR1JsWm1GMWJIUldZV3gxWldBZ2FXWWdjM0JsWTJsbWFXVmtMQ0J2Y2lCMGFHVWdZMmhwYkdSeVpXNGdZMjl1ZEdWdWRDQW9aR1Z3Y21WallYUmxaQ2t1WEc0Z0tpOWNiblpoY2lCU1pXRmpkRVJQVFZSbGVIUmhjbVZoSUQwZ2UxeHVJQ0JuWlhST1lYUnBkbVZRY205d2N6b2dablZ1WTNScGIyNGdLR2x1YzNRc0lIQnliM0J6TENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnSVNod2NtOXdjeTVrWVc1blpYSnZkWE5zZVZObGRFbHVibVZ5U0ZSTlRDQTlQU0J1ZFd4c0tTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkZ1pHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXhnSUdSdlpYTWdibTkwSUcxaGEyVWdjMlZ1YzJVZ2IyNGdQSFJsZUhSaGNtVmhQaTRuS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQXZMeUJCYkhkaGVYTWdjMlYwSUdOb2FXeGtjbVZ1SUhSdklIUm9aU0J6WVcxbElIUm9hVzVuTGlCSmJpQkpSVGtzSUhSb1pTQnpaV3hsWTNScGIyNGdjbUZ1WjJVZ2QybHNiRnh1SUNBZ0lDOHZJR2RsZENCeVpYTmxkQ0JwWmlCZ2RHVjRkRU52Ym5SbGJuUmdJR2x6SUcxMWRHRjBaV1F1WEc0Z0lDQWdkbUZ5SUc1aGRHbDJaVkJ5YjNCeklEMGdZWE56YVdkdUtIdDlMQ0J3Y205d2N5d2dlMXh1SUNBZ0lDQWdaR1ZtWVhWc2RGWmhiSFZsT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCMllXeDFaVG9nZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnWTJocGJHUnlaVzQ2SUdsdWMzUXVYM2R5WVhCd1pYSlRkR0YwWlM1cGJtbDBhV0ZzVm1Gc2RXVXNYRzRnSUNBZ0lDQnZia05vWVc1blpUb2dhVzV6ZEM1ZmQzSmhjSEJsY2xOMFlYUmxMbTl1UTJoaGJtZGxYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtRjBhWFpsVUhKdmNITTdYRzRnSUgwc1hHNWNiaUFnYlc5MWJuUlhjbUZ3Y0dWeU9pQm1kVzVqZEdsdmJpQW9hVzV6ZEN3Z2NISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdUR2x1YTJWa1ZtRnNkV1ZWZEdsc2N5NWphR1ZqYTFCeWIzQlVlWEJsY3lnbmRHVjRkR0Z5WldFbkxDQndjbTl3Y3l3Z2FXNXpkQzVmWTNWeWNtVnVkRVZzWlcxbGJuUXVYMjkzYm1WeUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdaR1ZtWVhWc2RGWmhiSFZsSUQwZ2NISnZjSE11WkdWbVlYVnNkRlpoYkhWbE8xeHVJQ0FnSUM4dklGUlBSRThnS0hsMWJtZHpkR1Z5Y3lrNklGSmxiVzkyWlNCemRYQndiM0owSUdadmNpQmphR2xzWkhKbGJpQmpiMjUwWlc1MElHbHVJRHgwWlhoMFlYSmxZVDR1WEc0Z0lDQWdkbUZ5SUdOb2FXeGtjbVZ1SUQwZ2NISnZjSE11WTJocGJHUnlaVzQ3WEc0Z0lDQWdhV1lnS0dOb2FXeGtjbVZ1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktHWmhiSE5sTENBblZYTmxJSFJvWlNCZ1pHVm1ZWFZzZEZaaGJIVmxZQ0J2Y2lCZ2RtRnNkV1ZnSUhCeWIzQnpJR2x1YzNSbFlXUWdiMllnYzJWMGRHbHVaeUFuSUNzZ0oyTm9hV3hrY21WdUlHOXVJRHgwWlhoMFlYSmxZVDR1SnlrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQWhLR1JsWm1GMWJIUldZV3gxWlNBOVBTQnVkV3hzS1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RKWmlCNWIzVWdjM1Z3Y0d4NUlHQmtaV1poZFd4MFZtRnNkV1ZnSUc5dUlHRWdQSFJsZUhSaGNtVmhQaXdnWkc4Z2JtOTBJSEJoYzNNZ1kyaHBiR1J5Wlc0dUp5a2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWTJocGJHUnlaVzRwS1NCN1hHNGdJQ0FnSUNBZ0lDRW9ZMmhwYkdSeVpXNHViR1Z1WjNSb0lEdzlJREVwSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKengwWlhoMFlYSmxZVDRnWTJGdUlHOXViSGtnYUdGMlpTQmhkQ0J0YjNOMElHOXVaU0JqYUdsc1pDNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lHTm9hV3hrY21WdUlEMGdZMmhwYkdSeVpXNWJNRjA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdSbFptRjFiSFJXWVd4MVpTQTlJQ2NuSUNzZ1kyaHBiR1J5Wlc0N1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoa1pXWmhkV3gwVm1Gc2RXVWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdaR1ZtWVhWc2RGWmhiSFZsSUQwZ0p5YzdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQjJZV3gxWlNBOUlFeHBibXRsWkZaaGJIVmxWWFJwYkhNdVoyVjBWbUZzZFdVb2NISnZjSE1wTzF4dVhHNGdJQ0FnYVc1emRDNWZkM0poY0hCbGNsTjBZWFJsSUQwZ2UxeHVJQ0FnSUNBZ0x5OGdWMlVnYzJGMlpTQjBhR1VnYVc1cGRHbGhiQ0IyWVd4MVpTQnpieUIwYUdGMElHQlNaV0ZqZEVSUFRVTnZiWEJ2Ym1WdWRHQWdaRzlsYzI0bmRDQjFjR1JoZEdWY2JpQWdJQ0FnSUM4dklHQjBaWGgwUTI5dWRHVnVkR0FnS0hWdWJtVmpaWE56WVhKNUlITnBibU5sSUhkbElIVndaR0YwWlNCMllXeDFaU2t1WEc0Z0lDQWdJQ0F2THlCVWFHVWdhVzVwZEdsaGJDQjJZV3gxWlNCallXNGdZbVVnWVNCaWIyOXNaV0Z1SUc5eUlHOWlhbVZqZENCemJ5QjBhR0YwSjNNZ2QyaDVJR2wwSjNOY2JpQWdJQ0FnSUM4dklHWnZjbU5sWkNCMGJ5QmlaU0JoSUhOMGNtbHVaeTVjYmlBZ0lDQWdJR2x1YVhScFlXeFdZV3gxWlRvZ0p5Y2dLeUFvZG1Gc2RXVWdJVDBnYm5Wc2JDQS9JSFpoYkhWbElEb2daR1ZtWVhWc2RGWmhiSFZsS1N4Y2JpQWdJQ0FnSUc5dVEyaGhibWRsT2lCZmFHRnVaR3hsUTJoaGJtZGxMbUpwYm1Rb2FXNXpkQ2xjYmlBZ0lDQjlPMXh1SUNCOUxGeHVYRzRnSUhWd1pHRjBaVmR5WVhCd1pYSTZJR1oxYm1OMGFXOXVJQ2hwYm5OMEtTQjdYRzRnSUNBZ2RtRnlJSEJ5YjNCeklEMGdhVzV6ZEM1ZlkzVnljbVZ1ZEVWc1pXMWxiblF1Y0hKdmNITTdYRzRnSUNBZ2RtRnlJSFpoYkhWbElEMGdUR2x1YTJWa1ZtRnNkV1ZWZEdsc2N5NW5aWFJXWVd4MVpTaHdjbTl3Y3lrN1hHNGdJQ0FnYVdZZ0tIWmhiSFZsSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUM4dklFTmhjM1FnWUhaaGJIVmxZQ0IwYnlCaElITjBjbWx1WnlCMGJ5Qmxibk4xY21VZ2RHaGxJSFpoYkhWbElHbHpJSE5sZENCamIzSnlaV04wYkhrdUlGZG9hV3hsWEc0Z0lDQWdJQ0F2THlCaWNtOTNjMlZ5Y3lCMGVYQnBZMkZzYkhrZ1pHOGdkR2hwY3lCaGN5QnVaV05sYzNOaGNua3NJR3B6Wkc5dElHUnZaWE51SjNRdVhHNGdJQ0FnSUNCU1pXRmpkRVJQVFVsRVQzQmxjbUYwYVc5dWN5NTFjR1JoZEdWUWNtOXdaWEowZVVKNVNVUW9hVzV6ZEM1ZmNtOXZkRTV2WkdWSlJDd2dKM1poYkhWbEp5d2dKeWNnS3lCMllXeDFaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCZmFHRnVaR3hsUTJoaGJtZGxLR1YyWlc1MEtTQjdYRzRnSUhaaGNpQndjbTl3Y3lBOUlIUm9hWE11WDJOMWNuSmxiblJGYkdWdFpXNTBMbkJ5YjNCek8xeHVJQ0IyWVhJZ2NtVjBkWEp1Vm1Gc2RXVWdQU0JNYVc1clpXUldZV3gxWlZWMGFXeHpMbVY0WldOMWRHVlBia05vWVc1blpTaHdjbTl3Y3l3Z1pYWmxiblFwTzF4dUlDQlNaV0ZqZEZWd1pHRjBaWE11WVhOaGNDaG1iM0pqWlZWd1pHRjBaVWxtVFc5MWJuUmxaQ3dnZEdocGN5azdYRzRnSUhKbGRIVnliaUJ5WlhSMWNtNVdZV3gxWlR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGamRFUlBUVlJsZUhSaGNtVmhPeUpkZlE9PSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNhY3Rpb24nKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG5cbnZhciBSRVNFVF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9IGZhbHNlO1xuICB9XG59O1xuXG52YXIgRkxVU0hfQkFUQ0hFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBlbXB0eUZ1bmN0aW9uLFxuICBjbG9zZTogUmVhY3RVcGRhdGVzLmZsdXNoQmF0Y2hlZFVwZGF0ZXMuYmluZChSZWFjdFVwZGF0ZXMpXG59O1xuXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbRkxVU0hfQkFUQ0hFRF9VUERBVEVTLCBSRVNFVF9CQVRDSEVEX1VQREFURVNdO1xuXG5mdW5jdGlvbiBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbn1cblxuYXNzaWduKFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH1cbn0pO1xuXG52YXIgdHJhbnNhY3Rpb24gPSBuZXcgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCk7XG5cbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0ge1xuICBpc0JhdGNoaW5nVXBkYXRlczogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGluIGEgY29udGV4dCB3aXRoaW4gd2hpY2ggY2FsbHMgdG8gYHNldFN0YXRlYFxuICAgKiBhbmQgZnJpZW5kcyBhcmUgYmF0Y2hlZCBzdWNoIHRoYXQgY29tcG9uZW50cyBhcmVuJ3QgdXBkYXRlZCB1bm5lY2Vzc2FyaWx5LlxuICAgKi9cbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uIChjYWxsYmFjaywgYSwgYiwgYywgZCwgZSkge1xuICAgIHZhciBhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcztcblxuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuXG4gICAgLy8gVGhlIGNvZGUgaXMgd3JpdHRlbiB0aGlzIHdheSB0byBhdm9pZCBleHRyYSBhbGxvY2F0aW9uc1xuICAgIGlmIChhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgICBjYWxsYmFjayhhLCBiLCBjLCBkLCBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNhY3Rpb24ucGVyZm9ybShjYWxsYmFjaywgbnVsbCwgYSwgYiwgYywgZCwgZSk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3k7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRJbmplY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luJyk7XG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL0NoYW5nZUV2ZW50UGx1Z2luJyk7XG52YXIgQ2xpZW50UmVhY3RSb290SW5kZXggPSByZXF1aXJlKCcuL0NsaWVudFJlYWN0Um9vdEluZGV4Jyk7XG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSByZXF1aXJlKCcuL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyJyk7XG52YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9FbnRlckxlYXZlRXZlbnRQbHVnaW4nKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZSgnLi9IVE1MRE9NUHJvcGVydHlDb25maWcnKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoJy4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4nKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50Jyk7XG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdERPTVRleHRDb21wb25lbnQnKTtcbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCcuL1JlYWN0RXZlbnRMaXN0ZW5lcicpO1xudmFyIFJlYWN0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluamVjdGlvbicpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlSGFuZGxlcycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uJyk7XG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL1NlbGVjdEV2ZW50UGx1Z2luJyk7XG52YXIgU2VydmVyUmVhY3RSb290SW5kZXggPSByZXF1aXJlKCcuL1NlcnZlclJlYWN0Um9vdEluZGV4Jyk7XG52YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL1NpbXBsZUV2ZW50UGx1Z2luJyk7XG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSByZXF1aXJlKCcuL1NWR0RPTVByb3BlcnR5Q29uZmlnJyk7XG5cbnZhciBhbHJlYWR5SW5qZWN0ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gaW5qZWN0KCkge1xuICBpZiAoYWxyZWFkeUluamVjdGVkKSB7XG4gICAgLy8gVE9ETzogVGhpcyBpcyBjdXJyZW50bHkgdHJ1ZSBiZWNhdXNlIHRoZXNlIGluamVjdGlvbnMgYXJlIHNoYXJlZCBiZXR3ZWVuXG4gICAgLy8gdGhlIGNsaWVudCBhbmQgdGhlIHNlcnZlciBwYWNrYWdlLiBUaGV5IHNob3VsZCBiZSBidWlsdCBpbmRlcGVuZGVudGx5XG4gICAgLy8gYW5kIG5vdCBzaGFyZSBhbnkgaW5qZWN0aW9uIHN0YXRlLiBUaGVuIHRoaXMgcHJvYmxlbSB3aWxsIGJlIHNvbHZlZC5cbiAgICByZXR1cm47XG4gIH1cbiAgYWxyZWFkeUluamVjdGVkID0gdHJ1ZTtcblxuICBSZWFjdEluamVjdGlvbi5FdmVudEVtaXR0ZXIuaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyKFJlYWN0RXZlbnRMaXN0ZW5lcik7XG5cbiAgLyoqXG4gICAqIEluamVjdCBtb2R1bGVzIGZvciByZXNvbHZpbmcgRE9NIGhpZXJhcmNoeSBhbmQgcGx1Z2luIG9yZGVyaW5nLlxuICAgKi9cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcik7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEluc3RhbmNlSGFuZGxlKFJlYWN0SW5zdGFuY2VIYW5kbGVzKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0TW91bnQoUmVhY3RNb3VudCk7XG5cbiAgLyoqXG4gICAqIFNvbWUgaW1wb3J0YW50IGV2ZW50IHBsdWdpbnMgaW5jbHVkZWQgYnkgZGVmYXVsdCAod2l0aG91dCBoYXZpbmcgdG8gcmVxdWlyZVxuICAgKiB0aGVtKS5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gICAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICAgIEVudGVyTGVhdmVFdmVudFBsdWdpbjogRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLFxuICAgIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcbiAgICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gICAgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICB9KTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzKFJlYWN0RE9NQ29tcG9uZW50KTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0VGV4dENvbXBvbmVudENsYXNzKFJlYWN0RE9NVGV4dENvbXBvbmVudCk7XG5cbiAgUmVhY3RJbmplY3Rpb24uQ2xhc3MuaW5qZWN0TWl4aW4oUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4pO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkRPTVByb3BlcnR5LmluamVjdERPTVByb3BlcnR5Q29uZmlnKEhUTUxET01Qcm9wZXJ0eUNvbmZpZyk7XG4gIFJlYWN0SW5qZWN0aW9uLkRPTVByb3BlcnR5LmluamVjdERPTVByb3BlcnR5Q29uZmlnKFNWR0RPTVByb3BlcnR5Q29uZmlnKTtcblxuICBSZWFjdEluamVjdGlvbi5FbXB0eUNvbXBvbmVudC5pbmplY3RFbXB0eUNvbXBvbmVudCgnbm9zY3JpcHQnKTtcblxuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSk7XG5cbiAgUmVhY3RJbmplY3Rpb24uUm9vdEluZGV4LmluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IENsaWVudFJlYWN0Um9vdEluZGV4LmNyZWF0ZVJlYWN0Um9vdEluZGV4IDogU2VydmVyUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXgpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkNvbXBvbmVudC5pbmplY3RFbnZpcm9ubWVudChSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgdXJsID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICcnO1xuICAgIGlmICgvWz8mXXJlYWN0X3BlcmZcXGIvLnRlc3QodXJsKSkge1xuICAgICAgdmFyIFJlYWN0RGVmYXVsdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdFBlcmYnKTtcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmYuc3RhcnQoKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluamVjdDogaW5qZWN0XG59O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JFWldaaGRXeDBTVzVxWldOMGFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRkpsWVdOMFJHVm1ZWFZzZEVsdWFtVmpkR2x2Ymx4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlFSmxabTl5WlVsdWNIVjBSWFpsYm5SUWJIVm5hVzRnUFNCeVpYRjFhWEpsS0NjdUwwSmxabTl5WlVsdWNIVjBSWFpsYm5SUWJIVm5hVzRuS1R0Y2JuWmhjaUJEYUdGdVoyVkZkbVZ1ZEZCc2RXZHBiaUE5SUhKbGNYVnBjbVVvSnk0dlEyaGhibWRsUlhabGJuUlFiSFZuYVc0bktUdGNiblpoY2lCRGJHbGxiblJTWldGamRGSnZiM1JKYm1SbGVDQTlJSEpsY1hWcGNtVW9KeTR2UTJ4cFpXNTBVbVZoWTNSU2IyOTBTVzVrWlhnbktUdGNiblpoY2lCRVpXWmhkV3gwUlhabGJuUlFiSFZuYVc1UGNtUmxjaUE5SUhKbGNYVnBjbVVvSnk0dlJHVm1ZWFZzZEVWMlpXNTBVR3gxWjJsdVQzSmtaWEluS1R0Y2JuWmhjaUJGYm5SbGNreGxZWFpsUlhabGJuUlFiSFZuYVc0Z1BTQnlaWEYxYVhKbEtDY3VMMFZ1ZEdWeVRHVmhkbVZGZG1WdWRGQnNkV2RwYmljcE8xeHVkbUZ5SUVWNFpXTjFkR2x2YmtWdWRtbHliMjV0Wlc1MElEMGdjbVZ4ZFdseVpTZ25abUpxY3k5c2FXSXZSWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblFuS1R0Y2JuWmhjaUJJVkUxTVJFOU5VSEp2Y0dWeWRIbERiMjVtYVdjZ1BTQnlaWEYxYVhKbEtDY3VMMGhVVFV4RVQwMVFjbTl3WlhKMGVVTnZibVpwWnljcE8xeHVkbUZ5SUZKbFlXTjBRbkp2ZDNObGNrTnZiWEJ2Ym1WdWRFMXBlR2x1SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVKeWIzZHpaWEpEYjIxd2IyNWxiblJOYVhocGJpY3BPMXh1ZG1GeUlGSmxZV04wUTI5dGNHOXVaVzUwUW5KdmQzTmxja1Z1ZG1seWIyNXRaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVOdmJYQnZibVZ1ZEVKeWIzZHpaWEpGYm5acGNtOXViV1Z1ZENjcE8xeHVkbUZ5SUZKbFlXTjBSR1ZtWVhWc2RFSmhkR05vYVc1blUzUnlZWFJsWjNrZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFJHVm1ZWFZzZEVKaGRHTm9hVzVuVTNSeVlYUmxaM2tuS1R0Y2JuWmhjaUJTWldGamRFUlBUVU52YlhCdmJtVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JFVDAxRGIyMXdiMjVsYm5RbktUdGNiblpoY2lCU1pXRmpkRVJQVFZSbGVIUkRiMjF3YjI1bGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBSRTlOVkdWNGRFTnZiWEJ2Ym1WdWRDY3BPMXh1ZG1GeUlGSmxZV04wUlhabGJuUk1hWE4wWlc1bGNpQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUkZkbVZ1ZEV4cGMzUmxibVZ5SnlrN1hHNTJZWElnVW1WaFkzUkpibXBsWTNScGIyNGdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBTVzVxWldOMGFXOXVKeWs3WEc1MllYSWdVbVZoWTNSSmJuTjBZVzVqWlVoaGJtUnNaWE1nUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wU1c1emRHRnVZMlZJWVc1a2JHVnpKeWs3WEc1MllYSWdVbVZoWTNSTmIzVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JOYjNWdWRDY3BPMXh1ZG1GeUlGSmxZV04wVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0Z1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNG5LVHRjYm5aaGNpQlRaV3hsWTNSRmRtVnVkRkJzZFdkcGJpQTlJSEpsY1hWcGNtVW9KeTR2VTJWc1pXTjBSWFpsYm5SUWJIVm5hVzRuS1R0Y2JuWmhjaUJUWlhKMlpYSlNaV0ZqZEZKdmIzUkpibVJsZUNBOUlISmxjWFZwY21Vb0p5NHZVMlZ5ZG1WeVVtVmhZM1JTYjI5MFNXNWtaWGduS1R0Y2JuWmhjaUJUYVcxd2JHVkZkbVZ1ZEZCc2RXZHBiaUE5SUhKbGNYVnBjbVVvSnk0dlUybHRjR3hsUlhabGJuUlFiSFZuYVc0bktUdGNiblpoY2lCVFZrZEVUMDFRY205d1pYSjBlVU52Ym1acFp5QTlJSEpsY1hWcGNtVW9KeTR2VTFaSFJFOU5VSEp2Y0dWeWRIbERiMjVtYVdjbktUdGNibHh1ZG1GeUlHRnNjbVZoWkhsSmJtcGxZM1JsWkNBOUlHWmhiSE5sTzF4dVhHNW1kVzVqZEdsdmJpQnBibXBsWTNRb0tTQjdYRzRnSUdsbUlDaGhiSEpsWVdSNVNXNXFaV04wWldRcElIdGNiaUFnSUNBdkx5QlVUMFJQT2lCVWFHbHpJR2x6SUdOMWNuSmxiblJzZVNCMGNuVmxJR0psWTJGMWMyVWdkR2hsYzJVZ2FXNXFaV04wYVc5dWN5QmhjbVVnYzJoaGNtVmtJR0psZEhkbFpXNWNiaUFnSUNBdkx5QjBhR1VnWTJ4cFpXNTBJR0Z1WkNCMGFHVWdjMlZ5ZG1WeUlIQmhZMnRoWjJVdUlGUm9aWGtnYzJodmRXeGtJR0psSUdKMWFXeDBJR2x1WkdWd1pXNWtaVzUwYkhsY2JpQWdJQ0F2THlCaGJtUWdibTkwSUhOb1lYSmxJR0Z1ZVNCcGJtcGxZM1JwYjI0Z2MzUmhkR1V1SUZSb1pXNGdkR2hwY3lCd2NtOWliR1Z0SUhkcGJHd2dZbVVnYzI5c2RtVmtMbHh1SUNBZ0lISmxkSFZ5Ymp0Y2JpQWdmVnh1SUNCaGJISmxZV1I1U1c1cVpXTjBaV1FnUFNCMGNuVmxPMXh1WEc0Z0lGSmxZV04wU1c1cVpXTjBhVzl1TGtWMlpXNTBSVzFwZEhSbGNpNXBibXBsWTNSU1pXRmpkRVYyWlc1MFRHbHpkR1Z1WlhJb1VtVmhZM1JGZG1WdWRFeHBjM1JsYm1WeUtUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXFaV04wSUcxdlpIVnNaWE1nWm05eUlISmxjMjlzZG1sdVp5QkVUMDBnYUdsbGNtRnlZMmg1SUdGdVpDQndiSFZuYVc0Z2IzSmtaWEpwYm1jdVhHNGdJQ0FxTDF4dUlDQlNaV0ZqZEVsdWFtVmpkR2x2Ymk1RmRtVnVkRkJzZFdkcGJraDFZaTVwYm1wbFkzUkZkbVZ1ZEZCc2RXZHBiazl5WkdWeUtFUmxabUYxYkhSRmRtVnVkRkJzZFdkcGJrOXlaR1Z5S1R0Y2JpQWdVbVZoWTNSSmJtcGxZM1JwYjI0dVJYWmxiblJRYkhWbmFXNUlkV0l1YVc1cVpXTjBTVzV6ZEdGdVkyVklZVzVrYkdVb1VtVmhZM1JKYm5OMFlXNWpaVWhoYm1Sc1pYTXBPMXh1SUNCU1pXRmpkRWx1YW1WamRHbHZiaTVGZG1WdWRGQnNkV2RwYmtoMVlpNXBibXBsWTNSTmIzVnVkQ2hTWldGamRFMXZkVzUwS1R0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVTI5dFpTQnBiWEJ2Y25SaGJuUWdaWFpsYm5RZ2NHeDFaMmx1Y3lCcGJtTnNkV1JsWkNCaWVTQmtaV1poZFd4MElDaDNhWFJvYjNWMElHaGhkbWx1WnlCMGJ5QnlaWEYxYVhKbFhHNGdJQ0FxSUhSb1pXMHBMbHh1SUNBZ0tpOWNiaUFnVW1WaFkzUkpibXBsWTNScGIyNHVSWFpsYm5SUWJIVm5hVzVJZFdJdWFXNXFaV04wUlhabGJuUlFiSFZuYVc1elFubE9ZVzFsS0h0Y2JpQWdJQ0JUYVcxd2JHVkZkbVZ1ZEZCc2RXZHBiam9nVTJsdGNHeGxSWFpsYm5SUWJIVm5hVzRzWEc0Z0lDQWdSVzUwWlhKTVpXRjJaVVYyWlc1MFVHeDFaMmx1T2lCRmJuUmxja3hsWVhabFJYWmxiblJRYkhWbmFXNHNYRzRnSUNBZ1EyaGhibWRsUlhabGJuUlFiSFZuYVc0NklFTm9ZVzVuWlVWMlpXNTBVR3gxWjJsdUxGeHVJQ0FnSUZObGJHVmpkRVYyWlc1MFVHeDFaMmx1T2lCVFpXeGxZM1JGZG1WdWRGQnNkV2RwYml4Y2JpQWdJQ0JDWldadmNtVkpibkIxZEVWMlpXNTBVR3gxWjJsdU9pQkNaV1p2Y21WSmJuQjFkRVYyWlc1MFVHeDFaMmx1WEc0Z0lIMHBPMXh1WEc0Z0lGSmxZV04wU1c1cVpXTjBhVzl1TGs1aGRHbDJaVU52YlhCdmJtVnVkQzVwYm1wbFkzUkhaVzVsY21salEyOXRjRzl1Wlc1MFEyeGhjM01vVW1WaFkzUkVUMDFEYjIxd2IyNWxiblFwTzF4dVhHNGdJRkpsWVdOMFNXNXFaV04wYVc5dUxrNWhkR2wyWlVOdmJYQnZibVZ1ZEM1cGJtcGxZM1JVWlhoMFEyOXRjRzl1Wlc1MFEyeGhjM01vVW1WaFkzUkVUMDFVWlhoMFEyOXRjRzl1Wlc1MEtUdGNibHh1SUNCU1pXRmpkRWx1YW1WamRHbHZiaTVEYkdGemN5NXBibXBsWTNSTmFYaHBiaWhTWldGamRFSnliM2R6WlhKRGIyMXdiMjVsYm5STmFYaHBiaWs3WEc1Y2JpQWdVbVZoWTNSSmJtcGxZM1JwYjI0dVJFOU5VSEp2Y0dWeWRIa3VhVzVxWldOMFJFOU5VSEp2Y0dWeWRIbERiMjVtYVdjb1NGUk5URVJQVFZCeWIzQmxjblI1UTI5dVptbG5LVHRjYmlBZ1VtVmhZM1JKYm1wbFkzUnBiMjR1UkU5TlVISnZjR1Z5ZEhrdWFXNXFaV04wUkU5TlVISnZjR1Z5ZEhsRGIyNW1hV2NvVTFaSFJFOU5VSEp2Y0dWeWRIbERiMjVtYVdjcE8xeHVYRzRnSUZKbFlXTjBTVzVxWldOMGFXOXVMa1Z0Y0hSNVEyOXRjRzl1Wlc1MExtbHVhbVZqZEVWdGNIUjVRMjl0Y0c5dVpXNTBLQ2R1YjNOamNtbHdkQ2NwTzF4dVhHNGdJRkpsWVdOMFNXNXFaV04wYVc5dUxsVndaR0YwWlhNdWFXNXFaV04wVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0b1VtVmhZM1JTWldOdmJtTnBiR1ZVY21GdWMyRmpkR2x2YmlrN1hHNGdJRkpsWVdOMFNXNXFaV04wYVc5dUxsVndaR0YwWlhNdWFXNXFaV04wUW1GMFkyaHBibWRUZEhKaGRHVm5lU2hTWldGamRFUmxabUYxYkhSQ1lYUmphR2x1WjFOMGNtRjBaV2Q1S1R0Y2JseHVJQ0JTWldGamRFbHVhbVZqZEdsdmJpNVNiMjkwU1c1a1pYZ3VhVzVxWldOMFEzSmxZWFJsVW1WaFkzUlNiMjkwU1c1a1pYZ29SWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblF1WTJGdVZYTmxSRTlOSUQ4Z1EyeHBaVzUwVW1WaFkzUlNiMjkwU1c1a1pYZ3VZM0psWVhSbFVtVmhZM1JTYjI5MFNXNWtaWGdnT2lCVFpYSjJaWEpTWldGamRGSnZiM1JKYm1SbGVDNWpjbVZoZEdWU1pXRmpkRkp2YjNSSmJtUmxlQ2s3WEc1Y2JpQWdVbVZoWTNSSmJtcGxZM1JwYjI0dVEyOXRjRzl1Wlc1MExtbHVhbVZqZEVWdWRtbHliMjV0Wlc1MEtGSmxZV04wUTI5dGNHOXVaVzUwUW5KdmQzTmxja1Z1ZG1seWIyNXRaVzUwS1R0Y2JseHVJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lIWmhjaUIxY213Z1BTQkZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQzVqWVc1VmMyVkVUMDBnSmlZZ2QybHVaRzkzTG14dlkyRjBhVzl1TG1oeVpXWWdmSHdnSnljN1hHNGdJQ0FnYVdZZ0tDOWJQeVpkY21WaFkzUmZjR1Z5Wmx4Y1lpOHVkR1Z6ZENoMWNtd3BLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1VtVmhZM1JFWldaaGRXeDBVR1Z5WmlBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSRVpXWmhkV3gwVUdWeVppY3BPMXh1SUNBZ0lDQWdVbVZoWTNSRVpXWmhkV3gwVUdWeVppNXpkR0Z5ZENncE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnYVc1cVpXTjBPaUJwYm1wbFkzUmNibjA3SWwxOSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcyA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG5cbnZhciBwZXJmb3JtYW5jZU5vdyA9IHJlcXVpcmUoJ2ZianMvbGliL3BlcmZvcm1hbmNlTm93Jyk7XG5cbmZ1bmN0aW9uIHJvdW5kRmxvYXQodmFsKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKHZhbCAqIDEwMCkgLyAxMDA7XG59XG5cbmZ1bmN0aW9uIGFkZFZhbHVlKG9iaiwga2V5LCB2YWwpIHtcbiAgb2JqW2tleV0gPSAob2JqW2tleV0gfHwgMCkgKyB2YWw7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmID0ge1xuICBfYWxsTWVhc3VyZW1lbnRzOiBbXSwgLy8gbGFzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBjdXJyZW50IG9uZVxuICBfbW91bnRTdGFjazogWzBdLFxuICBfaW5qZWN0ZWQ6IGZhbHNlLFxuXG4gIHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFSZWFjdERlZmF1bHRQZXJmLl9pbmplY3RlZCkge1xuICAgICAgUmVhY3RQZXJmLmluamVjdGlvbi5pbmplY3RNZWFzdXJlKFJlYWN0RGVmYXVsdFBlcmYubWVhc3VyZSk7XG4gICAgfVxuXG4gICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUgPSB0cnVlO1xuICB9LFxuXG4gIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICBSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSA9IGZhbHNlO1xuICB9LFxuXG4gIGdldExhc3RNZWFzdXJlbWVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICB9LFxuXG4gIHByaW50RXhjbHVzaXZlOiBmdW5jdGlvbiAobWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRFeGNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG4gICAgY29uc29sZS50YWJsZShzdW1tYXJ5Lm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ0NvbXBvbmVudCBjbGFzcyBuYW1lJzogaXRlbS5jb21wb25lbnROYW1lLFxuICAgICAgICAnVG90YWwgaW5jbHVzaXZlIHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5pbmNsdXNpdmUpLFxuICAgICAgICAnRXhjbHVzaXZlIG1vdW50IHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5leGNsdXNpdmUpLFxuICAgICAgICAnRXhjbHVzaXZlIHJlbmRlciB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0ucmVuZGVyKSxcbiAgICAgICAgJ01vdW50IHRpbWUgcGVyIGluc3RhbmNlIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uZXhjbHVzaXZlIC8gaXRlbS5jb3VudCksXG4gICAgICAgICdSZW5kZXIgdGltZSBwZXIgaW5zdGFuY2UgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5yZW5kZXIgLyBpdGVtLmNvdW50KSxcbiAgICAgICAgJ0luc3RhbmNlcyc6IGl0ZW0uY291bnRcbiAgICAgIH07XG4gICAgfSkpO1xuICAgIC8vIFRPRE86IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUoKSBkb2VzIG5vdCByZXR1cm4gdGhlIGNvcnJlY3RcbiAgICAvLyBudW1iZXIuXG4gIH0sXG5cbiAgcHJpbnRJbmNsdXNpdmU6IGZ1bmN0aW9uIChtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnT3duZXIgPiBjb21wb25lbnQnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG4gICAgICAgICdJbmNsdXNpdmUgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnRpbWUpLFxuICAgICAgICAnSW5zdGFuY2VzJzogaXRlbS5jb3VudFxuICAgICAgfTtcbiAgICB9KSk7XG4gICAgY29uc29sZS5sb2coJ1RvdGFsIHRpbWU6JywgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpLnRvRml4ZWQoMikgKyAnIG1zJyk7XG4gIH0sXG5cbiAgZ2V0TWVhc3VyZW1lbnRzU3VtbWFyeU1hcDogZnVuY3Rpb24gKG1lYXN1cmVtZW50cykge1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzLCB0cnVlKTtcbiAgICByZXR1cm4gc3VtbWFyeS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1dhc3RlZCB0aW1lIChtcyknOiBpdGVtLnRpbWUsXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuXG4gIHByaW50V2FzdGVkOiBmdW5jdGlvbiAobWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICBjb25zb2xlLnRhYmxlKFJlYWN0RGVmYXVsdFBlcmYuZ2V0TWVhc3VyZW1lbnRzU3VtbWFyeU1hcChtZWFzdXJlbWVudHMpKTtcbiAgICBjb25zb2xlLmxvZygnVG90YWwgdGltZTonLCBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnKTtcbiAgfSxcblxuICBwcmludERPTTogZnVuY3Rpb24gKG1lYXN1cmVtZW50cykge1xuICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gICAgdmFyIHN1bW1hcnkgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0RE9NU3VtbWFyeShtZWFzdXJlbWVudHMpO1xuICAgIGNvbnNvbGUudGFibGUoc3VtbWFyeS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHJlc3VsdFtET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRV0gPSBpdGVtLmlkO1xuICAgICAgcmVzdWx0LnR5cGUgPSBpdGVtLnR5cGU7XG4gICAgICByZXN1bHQuYXJncyA9IEpTT04uc3RyaW5naWZ5KGl0ZW0uYXJncyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZygnVG90YWwgdGltZTonLCBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnKTtcbiAgfSxcblxuICBfcmVjb3JkV3JpdGU6IGZ1bmN0aW9uIChpZCwgZm5OYW1lLCB0b3RhbFRpbWUsIGFyZ3MpIHtcbiAgICAvLyBUT0RPOiB0b3RhbFRpbWUgaXNuJ3QgdGhhdCB1c2VmdWwgc2luY2UgaXQgZG9lc24ndCBjb3VudCBwYWludHMvcmVmbG93c1xuICAgIHZhciB3cml0ZXMgPSBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFdLndyaXRlcztcbiAgICB3cml0ZXNbaWRdID0gd3JpdGVzW2lkXSB8fCBbXTtcbiAgICB3cml0ZXNbaWRdLnB1c2goe1xuICAgICAgdHlwZTogZm5OYW1lLFxuICAgICAgdGltZTogdG90YWxUaW1lLFxuICAgICAgYXJnczogYXJnc1xuICAgIH0pO1xuICB9LFxuXG4gIG1lYXN1cmU6IGZ1bmN0aW9uIChtb2R1bGVOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvdGFsVGltZTtcbiAgICAgIHZhciBydjtcbiAgICAgIHZhciBzdGFydDtcblxuICAgICAgaWYgKGZuTmFtZSA9PT0gJ19yZW5kZXJOZXdSb290Q29tcG9uZW50JyB8fCBmbk5hbWUgPT09ICdmbHVzaEJhdGNoZWRVcGRhdGVzJykge1xuICAgICAgICAvLyBBIFwibWVhc3VyZW1lbnRcIiBpcyBhIHNldCBvZiBtZXRyaWNzIHJlY29yZGVkIGZvciBlYWNoIGZsdXNoLiBXZSB3YW50XG4gICAgICAgIC8vIHRvIGdyb3VwIHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIGZsdXNoIHRvZ2V0aGVyIHNvIHdlIGNhbiBsb29rIGF0IHRoZVxuICAgICAgICAvLyBjb21wb25lbnRzIHRoYXQgcmVuZGVyZWQgYW5kIHRoZSBET00gb3BlcmF0aW9ucyB0aGF0IGFjdHVhbGx5XG4gICAgICAgIC8vIGhhcHBlbmVkIHRvIGRldGVybWluZSB0aGUgYW1vdW50IG9mIFwid2FzdGVkIHdvcmtcIiBwZXJmb3JtZWQuXG4gICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgICBleGNsdXNpdmU6IHt9LFxuICAgICAgICAgIGluY2x1c2l2ZToge30sXG4gICAgICAgICAgcmVuZGVyOiB7fSxcbiAgICAgICAgICBjb3VudHM6IHt9LFxuICAgICAgICAgIHdyaXRlczoge30sXG4gICAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcbiAgICAgICAgICB0b3RhbFRpbWU6IDAsXG4gICAgICAgICAgY3JlYXRlZDoge31cbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFdLnRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdfbW91bnRJbWFnZUludG9Ob2RlJyB8fCBtb2R1bGVOYW1lID09PSAnUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJyB8fCBtb2R1bGVOYW1lID09PSAnUmVhY3RET01JRE9wZXJhdGlvbnMnIHx8IG1vZHVsZU5hbWUgPT09ICdDU1NQcm9wZXJ0eU9wZXJhdGlvbnMnIHx8IG1vZHVsZU5hbWUgPT09ICdET01DaGlsZHJlbk9wZXJhdGlvbnMnIHx8IG1vZHVsZU5hbWUgPT09ICdET01Qcm9wZXJ0eU9wZXJhdGlvbnMnKSB7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ19tb3VudEltYWdlSW50b05vZGUnKSB7XG4gICAgICAgICAgdmFyIG1vdW50SUQgPSBSZWFjdE1vdW50LmdldElEKGFyZ3NbMV0pO1xuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKG1vdW50SUQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzWzBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnKSB7XG4gICAgICAgICAgLy8gc3BlY2lhbCBmb3JtYXRcbiAgICAgICAgICBhcmdzWzBdLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICAgICAgdmFyIHdyaXRlQXJncyA9IHt9O1xuICAgICAgICAgICAgaWYgKHVwZGF0ZS5mcm9tSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLmZyb21JbmRleCA9IHVwZGF0ZS5mcm9tSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLnRvSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLnRvSW5kZXggPSB1cGRhdGUudG9JbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUudGV4dENvbnRlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLnRleHRDb250ZW50ID0gdXBkYXRlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5tYXJrdXBJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MubWFya3VwID0gYXJnc1sxXVt1cGRhdGUubWFya3VwSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUodXBkYXRlLnBhcmVudElELCB1cGRhdGUudHlwZSwgdG90YWxUaW1lLCB3cml0ZUFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGJhc2ljIGZvcm1hdFxuICAgICAgICAgIHZhciBpZCA9IGFyZ3NbMF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlkID0gUmVhY3RNb3VudC5nZXRJRChhcmdzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUoaWQsIGZuTmFtZSwgdG90YWxUaW1lLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSBlbHNlIGlmIChtb2R1bGVOYW1lID09PSAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnICYmIChmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgfHwgZm5OYW1lID09PSAndXBkYXRlQ29tcG9uZW50JyB8fCAvLyBUT0RPOiByZWNlaXZlQ29tcG9uZW50KCk/XG4gICAgICBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JykpIHtcblxuICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSA9PT0gUmVhY3RNb3VudC5Ub3BMZXZlbFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb290Tm9kZUlEID0gZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnID8gYXJnc1swXSA6IHRoaXMuX3Jvb3ROb2RlSUQ7XG4gICAgICAgIHZhciBpc1JlbmRlciA9IGZuTmFtZSA9PT0gJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnO1xuICAgICAgICB2YXIgaXNNb3VudCA9IGZuTmFtZSA9PT0gJ21vdW50Q29tcG9uZW50JztcblxuICAgICAgICB2YXIgbW91bnRTdGFjayA9IFJlYWN0RGVmYXVsdFBlcmYuX21vdW50U3RhY2s7XG4gICAgICAgIHZhciBlbnRyeSA9IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50c1tSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKGlzUmVuZGVyKSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuY291bnRzLCByb290Tm9kZUlELCAxKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01vdW50KSB7XG4gICAgICAgICAgZW50cnkuY3JlYXRlZFtyb290Tm9kZUlEXSA9IHRydWU7XG4gICAgICAgICAgbW91bnRTdGFjay5wdXNoKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgICAgICBydiA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcblxuICAgICAgICBpZiAoaXNSZW5kZXIpIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5yZW5kZXIsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VudCkge1xuICAgICAgICAgIHZhciBzdWJNb3VudFRpbWUgPSBtb3VudFN0YWNrLnBvcCgpO1xuICAgICAgICAgIG1vdW50U3RhY2tbbW91bnRTdGFjay5sZW5ndGggLSAxXSArPSB0b3RhbFRpbWU7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuZXhjbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUgLSBzdWJNb3VudFRpbWUpO1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmluY2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5pbmNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbnRyeS5kaXNwbGF5TmFtZXNbcm9vdE5vZGVJRF0gPSB7XG4gICAgICAgICAgY3VycmVudDogdGhpcy5nZXROYW1lKCksXG4gICAgICAgICAgb3duZXI6IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lciA/IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgOiAnPHJvb3Q+J1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0UGVyZjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG5cbi8vIERvbid0IHRyeSB0byBzYXZlIHVzZXJzIGxlc3MgdGhhbiAxLjJtcyAoYSBudW1iZXIgSSBtYWRlIHVwKVxudmFyIERPTlRfQ0FSRV9USFJFU0hPTEQgPSAxLjI7XG52YXIgRE9NX09QRVJBVElPTl9UWVBFUyA9IHtcbiAgJ19tb3VudEltYWdlSW50b05vZGUnOiAnc2V0IGlubmVySFRNTCcsXG4gIElOU0VSVF9NQVJLVVA6ICdzZXQgaW5uZXJIVE1MJyxcbiAgTU9WRV9FWElTVElORzogJ21vdmUnLFxuICBSRU1PVkVfTk9ERTogJ3JlbW92ZScsXG4gIFNFVF9NQVJLVVA6ICdzZXQgaW5uZXJIVE1MJyxcbiAgVEVYVF9DT05URU5UOiAnc2V0IHRleHRDb250ZW50JyxcbiAgJ3NldFZhbHVlRm9yUHJvcGVydHknOiAndXBkYXRlIGF0dHJpYnV0ZScsXG4gICdzZXRWYWx1ZUZvckF0dHJpYnV0ZSc6ICd1cGRhdGUgYXR0cmlidXRlJyxcbiAgJ2RlbGV0ZVZhbHVlRm9yUHJvcGVydHknOiAncmVtb3ZlIGF0dHJpYnV0ZScsXG4gICdzZXRWYWx1ZUZvclN0eWxlcyc6ICd1cGRhdGUgc3R5bGVzJyxcbiAgJ3JlcGxhY2VOb2RlV2l0aE1hcmt1cCc6ICdyZXBsYWNlJyxcbiAgJ3VwZGF0ZVRleHRDb250ZW50JzogJ3NldCB0ZXh0Q29udGVudCdcbn07XG5cbmZ1bmN0aW9uIGdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpIHtcbiAgLy8gVE9ETzogcmV0dXJuIG51bWJlciBvZiBET00gb3BzPyBjb3VsZCBiZSBtaXNsZWFkaW5nLlxuICAvLyBUT0RPOiBtZWFzdXJlIGRyb3BwZWQgZnJhbWVzIGFmdGVyIHJlY29uY2lsZT9cbiAgLy8gVE9ETzogbG9nIHRvdGFsIHRpbWUgb2YgZWFjaCByZWNvbmNpbGUgYW5kIHRoZSB0b3AtbGV2ZWwgY29tcG9uZW50XG4gIC8vIGNsYXNzIHRoYXQgdHJpZ2dlcmVkIGl0LlxuICB2YXIgdG90YWxUaW1lID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdG90YWxUaW1lICs9IG1lYXN1cmVtZW50LnRvdGFsVGltZTtcbiAgfVxuICByZXR1cm4gdG90YWxUaW1lO1xufVxuXG5mdW5jdGlvbiBnZXRET01TdW1tYXJ5KG1lYXN1cmVtZW50cykge1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgbWVhc3VyZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG1lYXN1cmVtZW50KSB7XG4gICAgT2JqZWN0LmtleXMobWVhc3VyZW1lbnQud3JpdGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgbWVhc3VyZW1lbnQud3JpdGVzW2lkXS5mb3JFYWNoKGZ1bmN0aW9uICh3cml0ZSkge1xuICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgdHlwZTogRE9NX09QRVJBVElPTl9UWVBFU1t3cml0ZS50eXBlXSB8fCB3cml0ZS50eXBlLFxuICAgICAgICAgIGFyZ3M6IHdyaXRlLmFyZ3NcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBpdGVtcztcbn1cblxuZnVuY3Rpb24gZ2V0RXhjbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSB7fTtcbiAgdmFyIGRpc3BsYXlOYW1lO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oe30sIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSwgbWVhc3VyZW1lbnQuaW5jbHVzaXZlKTtcblxuICAgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgICAgZGlzcGxheU5hbWUgPSBtZWFzdXJlbWVudC5kaXNwbGF5TmFtZXNbaWRdLmN1cnJlbnQ7XG5cbiAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdID0gY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0gfHwge1xuICAgICAgICBjb21wb25lbnROYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgICAgaW5jbHVzaXZlOiAwLFxuICAgICAgICBleGNsdXNpdmU6IDAsXG4gICAgICAgIHJlbmRlcjogMCxcbiAgICAgICAgY291bnQ6IDBcbiAgICAgIH07XG4gICAgICBpZiAobWVhc3VyZW1lbnQucmVuZGVyW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5yZW5kZXIgKz0gbWVhc3VyZW1lbnQucmVuZGVyW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5leGNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmV4Y2x1c2l2ZSArPSBtZWFzdXJlbWVudC5leGNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uaW5jbHVzaXZlICs9IG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuY291bnRzW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5jb3VudCArPSBtZWFzdXJlbWVudC5jb3VudHNbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE5vdyBtYWtlIGEgc29ydGVkIGFycmF5IHdpdGggdGhlIHJlc3VsdHMuXG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yIChkaXNwbGF5TmFtZSBpbiBjYW5kaWRhdGVzKSB7XG4gICAgaWYgKGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmV4Y2x1c2l2ZSA+PSBET05UX0NBUkVfVEhSRVNIT0xEKSB7XG4gICAgICBhcnIucHVzaChjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSk7XG4gICAgfVxuICB9XG5cbiAgYXJyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5leGNsdXNpdmUgLSBhLmV4Y2x1c2l2ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gZ2V0SW5jbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMsIG9ubHlDbGVhbikge1xuICB2YXIgY2FuZGlkYXRlcyA9IHt9O1xuICB2YXIgaW5jbHVzaXZlS2V5O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oe30sIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSwgbWVhc3VyZW1lbnQuaW5jbHVzaXZlKTtcbiAgICB2YXIgY2xlYW5Db21wb25lbnRzO1xuXG4gICAgaWYgKG9ubHlDbGVhbikge1xuICAgICAgY2xlYW5Db21wb25lbnRzID0gZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyhtZWFzdXJlbWVudCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgICBpZiAob25seUNsZWFuICYmICFjbGVhbkNvbXBvbmVudHNbaWRdKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlzcGxheU5hbWUgPSBtZWFzdXJlbWVudC5kaXNwbGF5TmFtZXNbaWRdO1xuXG4gICAgICAvLyBJbmNsdXNpdmUgdGltZSBpcyBub3QgdXNlZnVsIGZvciBtYW55IGNvbXBvbmVudHMgd2l0aG91dCBrbm93aW5nIHdoZXJlXG4gICAgICAvLyB0aGV5IGFyZSBpbnN0YW50aWF0ZWQuIFNvIHdlIGFnZ3JlZ2F0ZSBpbmNsdXNpdmUgdGltZSB3aXRoIGJvdGggdGhlXG4gICAgICAvLyBvd25lciBhbmQgY3VycmVudCBkaXNwbGF5TmFtZSBhcyB0aGUga2V5LlxuICAgICAgaW5jbHVzaXZlS2V5ID0gZGlzcGxheU5hbWUub3duZXIgKyAnID4gJyArIGRpc3BsYXlOYW1lLmN1cnJlbnQ7XG5cbiAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSA9IGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSB8fCB7XG4gICAgICAgIGNvbXBvbmVudE5hbWU6IGluY2x1c2l2ZUtleSxcbiAgICAgICAgdGltZTogMCxcbiAgICAgICAgY291bnQ6IDBcbiAgICAgIH07XG5cbiAgICAgIGlmIChtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lICs9IG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuY291bnRzW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0uY291bnQgKz0gbWVhc3VyZW1lbnQuY291bnRzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgbWFrZSBhIHNvcnRlZCBhcnJheSB3aXRoIHRoZSByZXN1bHRzLlxuICB2YXIgYXJyID0gW107XG4gIGZvciAoaW5jbHVzaXZlS2V5IGluIGNhbmRpZGF0ZXMpIHtcbiAgICBpZiAoY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLnRpbWUgPj0gRE9OVF9DQVJFX1RIUkVTSE9MRCkge1xuICAgICAgYXJyLnB1c2goY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldKTtcbiAgICB9XG4gIH1cblxuICBhcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLnRpbWUgLSBhLnRpbWU7XG4gIH0pO1xuXG4gIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpIHtcbiAgLy8gRm9yIGEgZ2l2ZW4gcmVjb25jaWxlLCBsb29rIGF0IHdoaWNoIGNvbXBvbmVudHMgZGlkIG5vdCBhY3R1YWxseVxuICAvLyByZW5kZXIgYW55dGhpbmcgdG8gdGhlIERPTSBhbmQgcmV0dXJuIGEgbWFwcGluZyBvZiB0aGVpciBJRCB0b1xuICAvLyB0aGUgYW1vdW50IG9mIHRpbWUgaXQgdG9vayB0byByZW5kZXIgdGhlIGVudGlyZSBzdWJ0cmVlLlxuICB2YXIgY2xlYW5Db21wb25lbnRzID0ge307XG4gIHZhciBkaXJ0eUxlYWZJRHMgPSBPYmplY3Qua2V5cyhtZWFzdXJlbWVudC53cml0ZXMpO1xuICB2YXIgYWxsSURzID0gYXNzaWduKHt9LCBtZWFzdXJlbWVudC5leGNsdXNpdmUsIG1lYXN1cmVtZW50LmluY2x1c2l2ZSk7XG5cbiAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgdmFyIGlzRGlydHkgPSBmYWxzZTtcbiAgICAvLyBGb3IgZWFjaCBjb21wb25lbnQgdGhhdCByZW5kZXJlZCwgc2VlIGlmIGEgY29tcG9uZW50IHRoYXQgdHJpZ2dlcmVkXG4gICAgLy8gYSBET00gb3AgaXMgaW4gaXRzIHN1YnRyZWUuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJ0eUxlYWZJRHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChkaXJ0eUxlYWZJRHNbaV0uaW5kZXhPZihpZCkgPT09IDApIHtcbiAgICAgICAgaXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBjaGVjayBpZiBjb21wb25lbnQgbmV3bHkgY3JlYXRlZFxuICAgIGlmIChtZWFzdXJlbWVudC5jcmVhdGVkW2lkXSkge1xuICAgICAgaXNEaXJ0eSA9IHRydWU7XG4gICAgfVxuICAgIGlmICghaXNEaXJ0eSAmJiBtZWFzdXJlbWVudC5jb3VudHNbaWRdID4gMCkge1xuICAgICAgY2xlYW5Db21wb25lbnRzW2lkXSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGVhbkNvbXBvbmVudHM7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMgPSB7XG4gIGdldEV4Y2x1c2l2ZVN1bW1hcnk6IGdldEV4Y2x1c2l2ZVN1bW1hcnksXG4gIGdldEluY2x1c2l2ZVN1bW1hcnk6IGdldEluY2x1c2l2ZVN1bW1hcnksXG4gIGdldERPTVN1bW1hcnk6IGdldERPTVN1bW1hcnksXG4gIGdldFRvdGFsVGltZTogZ2V0VG90YWxUaW1lXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpczsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RWxlbWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudCB0eXBlLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2xbJ2ZvciddICYmIFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmVsZW1lbnQnKSB8fCAweGVhYzc7XG5cbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAga2V5OiB0cnVlLFxuICByZWY6IHRydWUsXG4gIF9fc2VsZjogdHJ1ZSxcbiAgX19zb3VyY2U6IHRydWVcbn07XG5cbi8qKlxuICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIFJlYWN0IGVsZW1lbnRzLiBUaGlzIGlzIG9ubHkgdXNlZCB0byBtYWtlIHRoaXNcbiAqIHdvcmsgd2l0aCBhIGR5bmFtaWMgaW5zdGFuY2VvZiBjaGVjay4gTm90aGluZyBzaG91bGQgbGl2ZSBvbiB0aGlzIHByb3RvdHlwZS5cbiAqXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7Kn0ga2V5XG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlZlxuICogQHBhcmFtIHsqfSBzZWxmIEEgKnRlbXBvcmFyeSogaGVscGVyIHRvIGRldGVjdCBwbGFjZXMgd2hlcmUgYHRoaXNgIGlzXG4gKiBkaWZmZXJlbnQgZnJvbSB0aGUgYG93bmVyYCB3aGVuIFJlYWN0LmNyZWF0ZUVsZW1lbnQgaXMgY2FsbGVkLCBzbyB0aGF0IHdlXG4gKiBjYW4gd2Fybi4gV2Ugd2FudCB0byBnZXQgcmlkIG9mIG93bmVyIGFuZCByZXBsYWNlIHN0cmluZyBgcmVmYHMgd2l0aCBhcnJvd1xuICogZnVuY3Rpb25zLCBhbmQgYXMgbG9uZyBhcyBgdGhpc2AgYW5kIG93bmVyIGFyZSB0aGUgc2FtZSwgdGhlcmUgd2lsbCBiZSBub1xuICogY2hhbmdlIGluIGJlaGF2aW9yLlxuICogQHBhcmFtIHsqfSBzb3VyY2UgQW4gYW5ub3RhdGlvbiBvYmplY3QgKGFkZGVkIGJ5IGEgdHJhbnNwaWxlciBvciBvdGhlcndpc2UpXG4gKiBpbmRpY2F0aW5nIGZpbGVuYW1lLCBsaW5lIG51bWJlciwgYW5kL29yIG90aGVyIGluZm9ybWF0aW9uLlxuICogQHBhcmFtIHsqfSBvd25lclxuICogQHBhcmFtIHsqfSBwcm9wc1xuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7XG4gIHZhciBlbGVtZW50ID0ge1xuICAgIC8vIFRoaXMgdGFnIGFsbG93IHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcblxuICAgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogcmVmLFxuICAgIHByb3BzOiBwcm9wcyxcblxuICAgIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuXG4gICAgX293bmVyOiBvd25lclxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhlIHZhbGlkYXRpb24gZmxhZyBpcyBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCBpdCBvblxuICAgIC8vIGFuIGV4dGVybmFsIGJhY2tpbmcgc3RvcmUgc28gdGhhdCB3ZSBjYW4gZnJlZXplIHRoZSB3aG9sZSBvYmplY3QuXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLlxuICAgIGVsZW1lbnQuX3N0b3JlID0ge307XG5cbiAgICAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG4gICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIC8vIHNlbGYgYW5kIHNvdXJjZSBhcmUgREVWIG9ubHkgcHJvcGVydGllcy5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NlbGYnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzZWxmXG4gICAgICB9KTtcbiAgICAgIC8vIFR3byBlbGVtZW50cyBjcmVhdGVkIGluIHR3byBkaWZmZXJlbnQgcGxhY2VzIHNob3VsZCBiZSBjb25zaWRlcmVkXG4gICAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHNvdXJjZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgZWxlbWVudC5fc2VsZiA9IHNlbGY7XG4gICAgICBlbGVtZW50Ll9zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIE9iamVjdC5mcmVlemUoZWxlbWVudC5wcm9wcyk7XG4gICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuICB2YXIgcHJvcHMgPSB7fTtcblxuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIHJlZiA9IG51bGw7XG4gIHZhciBzZWxmID0gbnVsbDtcbiAgdmFyIHNvdXJjZSA9IG51bGw7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgcmVmID0gY29uZmlnLnJlZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5yZWY7XG4gICAga2V5ID0gY29uZmlnLmtleSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6ICcnICsgY29uZmlnLmtleTtcbiAgICBzZWxmID0gY29uZmlnLl9fc2VsZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NlbGY7XG4gICAgc291cmNlID0gY29uZmlnLl9fc291cmNlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc291cmNlO1xuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHZhciBmYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgLy8gRXhwb3NlIHRoZSB0eXBlIG9uIHRoZSBmYWN0b3J5IGFuZCB0aGUgcHJvdG90eXBlIHNvIHRoYXQgaXQgY2FuIGJlXG4gIC8vIGVhc2lseSBhY2Nlc3NlZCBvbiBlbGVtZW50cy4gRS5nLiBgPEZvbyAvPi50eXBlID09PSBGb29gLlxuICAvLyBUaGlzIHNob3VsZCBub3QgYmUgbmFtZWQgYGNvbnN0cnVjdG9yYCBzaW5jZSB0aGlzIG1heSBub3QgYmUgdGhlIGZ1bmN0aW9uXG4gIC8vIHRoYXQgY3JlYXRlZCB0aGUgZWxlbWVudCwgYW5kIGl0IG1heSBub3QgZXZlbiBiZSBhIGNvbnN0cnVjdG9yLlxuICAvLyBMZWdhY3kgaG9vayBUT0RPOiBXYXJuIGlmIHRoaXMgaXMgYWNjZXNzZWRcbiAgZmFjdG9yeS50eXBlID0gdHlwZTtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlS2V5ID0gZnVuY3Rpb24gKG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuXG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzID0gZnVuY3Rpb24gKG9sZEVsZW1lbnQsIG5ld1Byb3BzKSB7XG4gIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50KG9sZEVsZW1lbnQudHlwZSwgb2xkRWxlbWVudC5rZXksIG9sZEVsZW1lbnQucmVmLCBvbGRFbGVtZW50Ll9zZWxmLCBvbGRFbGVtZW50Ll9zb3VyY2UsIG9sZEVsZW1lbnQuX293bmVyLCBuZXdQcm9wcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBJZiB0aGUga2V5IG9uIHRoZSBvcmlnaW5hbCBpcyB2YWxpZCwgdGhlbiB0aGUgY2xvbmUgaXMgdmFsaWRcbiAgICBuZXdFbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSBvbGRFbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQ7XG4gIH1cblxuICByZXR1cm4gbmV3RWxlbWVudDtcbn07XG5cblJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgLy8gT3JpZ2luYWwgcHJvcHMgYXJlIGNvcGllZFxuICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIC8vIFNlbGYgaXMgcHJlc2VydmVkIHNpbmNlIHRoZSBvd25lciBpcyBwcmVzZXJ2ZWQuXG4gIHZhciBzZWxmID0gZWxlbWVudC5fc2VsZjtcbiAgLy8gU291cmNlIGlzIHByZXNlcnZlZCBzaW5jZSBjbG9uZUVsZW1lbnQgaXMgdW5saWtlbHkgdG8gYmUgdGFyZ2V0ZWQgYnkgYVxuICAvLyB0cmFuc3BpbGVyLCBhbmQgdGhlIG9yaWdpbmFsIHNvdXJjZSBpcyBwcm9iYWJseSBhIGJldHRlciBpbmRpY2F0b3Igb2YgdGhlXG4gIC8vIHRydWUgb3duZXIuXG4gIHZhciBzb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG5cbiAgLy8gT3duZXIgd2lsbCBiZSBwcmVzZXJ2ZWQsIHVubGVzcyByZWYgaXMgb3ZlcnJpZGRlblxuICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBTaWxlbnRseSBzdGVhbCB0aGUgcmVmIGZyb20gdGhlIHBhcmVudC5cbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgfVxuICAgIGlmIChjb25maWcua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgb3ZlcnJpZGUgZXhpc3RpbmcgcHJvcHNcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQoZWxlbWVudC50eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIGNvbXBvbmVudC5cbiAqIEBmaW5hbFxuICovXG5SZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRmJHVnRaVzUwTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE5DMHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElGSmxZV04wUld4bGJXVnVkRnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVOMWNuSmxiblJQZDI1bGNpY3BPMXh1WEc1MllYSWdZWE56YVdkdUlEMGdjbVZ4ZFdseVpTZ25MaTlQWW1wbFkzUXVZWE56YVdkdUp5azdYRzUyWVhJZ1kyRnVSR1ZtYVc1bFVISnZjR1Z5ZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMk5oYmtSbFptbHVaVkJ5YjNCbGNuUjVKeWs3WEc1Y2JpOHZJRlJvWlNCVGVXMWliMndnZFhObFpDQjBieUIwWVdjZ2RHaGxJRkpsWVdOMFJXeGxiV1Z1ZENCMGVYQmxMaUJKWmlCMGFHVnlaU0JwY3lCdWJ5QnVZWFJwZG1VZ1UzbHRZbTlzWEc0dkx5QnViM0lnY0c5c2VXWnBiR3dzSUhSb1pXNGdZU0J3YkdGcGJpQnVkVzFpWlhJZ2FYTWdkWE5sWkNCbWIzSWdjR1Z5Wm05eWJXRnVZMlV1WEc1MllYSWdVa1ZCUTFSZlJVeEZUVVZPVkY5VVdWQkZJRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQlRlVzFpYjJ4YkoyWnZjaWRkSUNZbUlGTjViV0p2YkZzblptOXlKMTBvSjNKbFlXTjBMbVZzWlcxbGJuUW5LU0I4ZkNBd2VHVmhZemM3WEc1Y2JuWmhjaUJTUlZORlVsWkZSRjlRVWs5UVV5QTlJSHRjYmlBZ2EyVjVPaUIwY25WbExGeHVJQ0J5WldZNklIUnlkV1VzWEc0Z0lGOWZjMlZzWmpvZ2RISjFaU3hjYmlBZ1gxOXpiM1Z5WTJVNklIUnlkV1ZjYm4wN1hHNWNiaThxS2x4dUlDb2dRbUZ6WlNCamIyNXpkSEoxWTNSdmNpQm1iM0lnWVd4c0lGSmxZV04wSUdWc1pXMWxiblJ6TGlCVWFHbHpJR2x6SUc5dWJIa2dkWE5sWkNCMGJ5QnRZV3RsSUhSb2FYTmNiaUFxSUhkdmNtc2dkMmwwYUNCaElHUjVibUZ0YVdNZ2FXNXpkR0Z1WTJWdlppQmphR1ZqYXk0Z1RtOTBhR2x1WnlCemFHOTFiR1FnYkdsMlpTQnZiaUIwYUdseklIQnliM1J2ZEhsd1pTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFI1Y0dWY2JpQXFJRUJ3WVhKaGJTQjdLbjBnYTJWNVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozeHZZbXBsWTNSOUlISmxabHh1SUNvZ1FIQmhjbUZ0SUhzcWZTQnpaV3htSUVFZ0tuUmxiWEJ2Y21GeWVTb2dhR1ZzY0dWeUlIUnZJR1JsZEdWamRDQndiR0ZqWlhNZ2QyaGxjbVVnWUhSb2FYTmdJR2x6WEc0Z0tpQmthV1ptWlhKbGJuUWdabkp2YlNCMGFHVWdZRzkzYm1WeVlDQjNhR1Z1SUZKbFlXTjBMbU55WldGMFpVVnNaVzFsYm5RZ2FYTWdZMkZzYkdWa0xDQnpieUIwYUdGMElIZGxYRzRnS2lCallXNGdkMkZ5Ymk0Z1YyVWdkMkZ1ZENCMGJ5Qm5aWFFnY21sa0lHOW1JRzkzYm1WeUlHRnVaQ0J5WlhCc1lXTmxJSE4wY21sdVp5QmdjbVZtWUhNZ2QybDBhQ0JoY25KdmQxeHVJQ29nWm5WdVkzUnBiMjV6TENCaGJtUWdZWE1nYkc5dVp5QmhjeUJnZEdocGMyQWdZVzVrSUc5M2JtVnlJR0Z5WlNCMGFHVWdjMkZ0WlN3Z2RHaGxjbVVnZDJsc2JDQmlaU0J1YjF4dUlDb2dZMmhoYm1kbElHbHVJR0psYUdGMmFXOXlMbHh1SUNvZ1FIQmhjbUZ0SUhzcWZTQnpiM1Z5WTJVZ1FXNGdZVzV1YjNSaGRHbHZiaUJ2WW1wbFkzUWdLR0ZrWkdWa0lHSjVJR0VnZEhKaGJuTndhV3hsY2lCdmNpQnZkR2hsY25kcGMyVXBYRzRnS2lCcGJtUnBZMkYwYVc1bklHWnBiR1Z1WVcxbExDQnNhVzVsSUc1MWJXSmxjaXdnWVc1a0wyOXlJRzkwYUdWeUlHbHVabTl5YldGMGFXOXVMbHh1SUNvZ1FIQmhjbUZ0SUhzcWZTQnZkMjVsY2x4dUlDb2dRSEJoY21GdElIc3FmU0J3Y205d2MxeHVJQ29nUUdsdWRHVnlibUZzWEc0Z0tpOWNiblpoY2lCU1pXRmpkRVZzWlcxbGJuUWdQU0JtZFc1amRHbHZiaUFvZEhsd1pTd2dhMlY1TENCeVpXWXNJSE5sYkdZc0lITnZkWEpqWlN3Z2IzZHVaWElzSUhCeWIzQnpLU0I3WEc0Z0lIWmhjaUJsYkdWdFpXNTBJRDBnZTF4dUlDQWdJQzh2SUZSb2FYTWdkR0ZuSUdGc2JHOTNJSFZ6SUhSdklIVnVhWEYxWld4NUlHbGtaVzUwYVdaNUlIUm9hWE1nWVhNZ1lTQlNaV0ZqZENCRmJHVnRaVzUwWEc0Z0lDQWdKQ1IwZVhCbGIyWTZJRkpGUVVOVVgwVk1SVTFGVGxSZlZGbFFSU3hjYmx4dUlDQWdJQzh2SUVKMWFXeDBMV2x1SUhCeWIzQmxjblJwWlhNZ2RHaGhkQ0JpWld4dmJtY2diMjRnZEdobElHVnNaVzFsYm5SY2JpQWdJQ0IwZVhCbE9pQjBlWEJsTEZ4dUlDQWdJR3RsZVRvZ2EyVjVMRnh1SUNBZ0lISmxaam9nY21WbUxGeHVJQ0FnSUhCeWIzQnpPaUJ3Y205d2N5eGNibHh1SUNBZ0lDOHZJRkpsWTI5eVpDQjBhR1VnWTI5dGNHOXVaVzUwSUhKbGMzQnZibk5wWW14bElHWnZjaUJqY21WaGRHbHVaeUIwYUdseklHVnNaVzFsYm5RdVhHNGdJQ0FnWDI5M2JtVnlPaUJ2ZDI1bGNseHVJQ0I5TzF4dVhHNGdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0x5OGdWR2hsSUhaaGJHbGtZWFJwYjI0Z1pteGhaeUJwY3lCamRYSnlaVzUwYkhrZ2JYVjBZWFJwZG1VdUlGZGxJSEIxZENCcGRDQnZibHh1SUNBZ0lDOHZJR0Z1SUdWNGRHVnlibUZzSUdKaFkydHBibWNnYzNSdmNtVWdjMjhnZEdoaGRDQjNaU0JqWVc0Z1puSmxaWHBsSUhSb1pTQjNhRzlzWlNCdlltcGxZM1F1WEc0Z0lDQWdMeThnVkdocGN5QmpZVzRnWW1VZ2NtVndiR0ZqWldRZ2QybDBhQ0JoSUZkbFlXdE5ZWEFnYjI1alpTQjBhR1Y1SUdGeVpTQnBiWEJzWlcxbGJuUmxaQ0JwYmx4dUlDQWdJQzh2SUdOdmJXMXZibXg1SUhWelpXUWdaR1YyWld4dmNHMWxiblFnWlc1MmFYSnZibTFsYm5SekxseHVJQ0FnSUdWc1pXMWxiblF1WDNOMGIzSmxJRDBnZTMwN1hHNWNiaUFnSUNBdkx5QlVieUJ0WVd0bElHTnZiWEJoY21sdVp5QlNaV0ZqZEVWc1pXMWxiblJ6SUdWaGMybGxjaUJtYjNJZ2RHVnpkR2x1WnlCd2RYSndiM05sY3l3Z2QyVWdiV0ZyWlZ4dUlDQWdJQzh2SUhSb1pTQjJZV3hwWkdGMGFXOXVJR1pzWVdjZ2JtOXVMV1Z1ZFcxbGNtRmliR1VnS0hkb1pYSmxJSEJ2YzNOcFlteGxMQ0IzYUdsamFDQnphRzkxYkdSY2JpQWdJQ0F2THlCcGJtTnNkV1JsSUdWMlpYSjVJR1Z1ZG1seWIyNXRaVzUwSUhkbElISjFiaUIwWlhOMGN5QnBiaWtzSUhOdklIUm9aU0IwWlhOMElHWnlZVzFsZDI5eWExeHVJQ0FnSUM4dklHbG5ibTl5WlhNZ2FYUXVYRzRnSUNBZ2FXWWdLR05oYmtSbFptbHVaVkJ5YjNCbGNuUjVLU0I3WEc0Z0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pXeGxiV1Z1ZEM1ZmMzUnZjbVVzSUNkMllXeHBaR0YwWldRbkxDQjdYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1poYkhObFhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDOHZJSE5sYkdZZ1lXNWtJSE52ZFhKalpTQmhjbVVnUkVWV0lHOXViSGtnY0hKdmNHVnlkR2xsY3k1Y2JpQWdJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxiR1Z0Wlc1MExDQW5YM05sYkdZbkxDQjdYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUJ6Wld4bVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDOHZJRlIzYnlCbGJHVnRaVzUwY3lCamNtVmhkR1ZrSUdsdUlIUjNieUJrYVdabVpYSmxiblFnY0d4aFkyVnpJSE5vYjNWc1pDQmlaU0JqYjI1emFXUmxjbVZrWEc0Z0lDQWdJQ0F2THlCbGNYVmhiQ0JtYjNJZ2RHVnpkR2x1WnlCd2RYSndiM05sY3lCaGJtUWdkR2hsY21WbWIzSmxJSGRsSUdocFpHVWdhWFFnWm5KdmJTQmxiblZ0WlhKaGRHbHZiaTVjYmlBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGJHVnRaVzUwTENBblgzTnZkWEpqWlNjc0lIdGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJSE52ZFhKalpWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWc1pXMWxiblF1WDNOMGIzSmxMblpoYkdsa1lYUmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdaV3hsYldWdWRDNWZjMlZzWmlBOUlITmxiR1k3WEc0Z0lDQWdJQ0JsYkdWdFpXNTBMbDl6YjNWeVkyVWdQU0J6YjNWeVkyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUU5aWFtVmpkQzVtY21WbGVtVW9aV3hsYldWdWRDNXdjbTl3Y3lrN1hHNGdJQ0FnVDJKcVpXTjBMbVp5WldWNlpTaGxiR1Z0Wlc1MEtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmxiR1Z0Wlc1ME8xeHVmVHRjYmx4dVVtVmhZM1JGYkdWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpQW9kSGx3WlN3Z1kyOXVabWxuTENCamFHbHNaSEpsYmlrZ2UxeHVJQ0IyWVhJZ2NISnZjRTVoYldVN1hHNWNiaUFnTHk4Z1VtVnpaWEoyWldRZ2JtRnRaWE1nWVhKbElHVjRkSEpoWTNSbFpGeHVJQ0IyWVhJZ2NISnZjSE1nUFNCN2ZUdGNibHh1SUNCMllYSWdhMlY1SUQwZ2JuVnNiRHRjYmlBZ2RtRnlJSEpsWmlBOUlHNTFiR3c3WEc0Z0lIWmhjaUJ6Wld4bUlEMGdiblZzYkR0Y2JpQWdkbUZ5SUhOdmRYSmpaU0E5SUc1MWJHdzdYRzVjYmlBZ2FXWWdLR052Ym1acFp5QWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ2NtVm1JRDBnWTI5dVptbG5MbkpsWmlBOVBUMGdkVzVrWldacGJtVmtJRDhnYm5Wc2JDQTZJR052Ym1acFp5NXlaV1k3WEc0Z0lDQWdhMlY1SUQwZ1kyOXVabWxuTG10bGVTQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z2JuVnNiQ0E2SUNjbklDc2dZMjl1Wm1sbkxtdGxlVHRjYmlBZ0lDQnpaV3htSUQwZ1kyOXVabWxuTGw5ZmMyVnNaaUE5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdiblZzYkNBNklHTnZibVpwWnk1ZlgzTmxiR1k3WEc0Z0lDQWdjMjkxY21ObElEMGdZMjl1Wm1sbkxsOWZjMjkxY21ObElEMDlQU0IxYm1SbFptbHVaV1FnUHlCdWRXeHNJRG9nWTI5dVptbG5MbDlmYzI5MWNtTmxPMXh1SUNBZ0lDOHZJRkpsYldGcGJtbHVaeUJ3Y205d1pYSjBhV1Z6SUdGeVpTQmhaR1JsWkNCMGJ5QmhJRzVsZHlCd2NtOXdjeUJ2WW1wbFkzUmNiaUFnSUNCbWIzSWdLSEJ5YjNCT1lXMWxJR2x1SUdOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHTnZibVpwWnk1b1lYTlBkMjVRY205d1pYSjBlU2h3Y205d1RtRnRaU2tnSmlZZ0lWSkZVMFZTVmtWRVgxQlNUMUJUTG1oaGMwOTNibEJ5YjNCbGNuUjVLSEJ5YjNCT1lXMWxLU2tnZTF4dUlDQWdJQ0FnSUNCd2NtOXdjMXR3Y205d1RtRnRaVjBnUFNCamIyNW1hV2RiY0hKdmNFNWhiV1ZkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dklFTm9hV3hrY21WdUlHTmhiaUJpWlNCdGIzSmxJSFJvWVc0Z2IyNWxJR0Z5WjNWdFpXNTBMQ0JoYm1RZ2RHaHZjMlVnWVhKbElIUnlZVzV6Wm1WeWNtVmtJRzl1ZEc5Y2JpQWdMeThnZEdobElHNWxkMng1SUdGc2JHOWpZWFJsWkNCd2NtOXdjeUJ2WW1wbFkzUXVYRzRnSUhaaGNpQmphR2xzWkhKbGJreGxibWQwYUNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0xTQXlPMXh1SUNCcFppQW9ZMmhwYkdSeVpXNU1aVzVuZEdnZ1BUMDlJREVwSUh0Y2JpQWdJQ0J3Y205d2N5NWphR2xzWkhKbGJpQTlJR05vYVd4a2NtVnVPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHTm9hV3hrY21WdVRHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lIWmhjaUJqYUdsc1pFRnljbUY1SUQwZ1FYSnlZWGtvWTJocGJHUnlaVzVNWlc1bmRHZ3BPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZMmhwYkdSeVpXNU1aVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnWTJocGJHUkJjbkpoZVZ0cFhTQTlJR0Z5WjNWdFpXNTBjMXRwSUNzZ01sMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhCeWIzQnpMbU5vYVd4a2NtVnVJRDBnWTJocGJHUkJjbkpoZVR0Y2JpQWdmVnh1WEc0Z0lDOHZJRkpsYzI5c2RtVWdaR1ZtWVhWc2RDQndjbTl3YzF4dUlDQnBaaUFvZEhsd1pTQW1KaUIwZVhCbExtUmxabUYxYkhSUWNtOXdjeWtnZTF4dUlDQWdJSFpoY2lCa1pXWmhkV3gwVUhKdmNITWdQU0IwZVhCbExtUmxabUYxYkhSUWNtOXdjenRjYmlBZ0lDQm1iM0lnS0hCeWIzQk9ZVzFsSUdsdUlHUmxabUYxYkhSUWNtOXdjeWtnZTF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd2NtOXdjMXR3Y205d1RtRnRaVjBnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUhCeWIzQnpXM0J5YjNCT1lXMWxYU0E5SUdSbFptRjFiSFJRY205d2MxdHdjbTl3VG1GdFpWMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlGSmxZV04wUld4bGJXVnVkQ2gwZVhCbExDQnJaWGtzSUhKbFppd2djMlZzWml3Z2MyOTFjbU5sTENCU1pXRmpkRU4xY25KbGJuUlBkMjVsY2k1amRYSnlaVzUwTENCd2NtOXdjeWs3WEc1OU8xeHVYRzVTWldGamRFVnNaVzFsYm5RdVkzSmxZWFJsUm1GamRHOXllU0E5SUdaMWJtTjBhVzl1SUNoMGVYQmxLU0I3WEc0Z0lIWmhjaUJtWVdOMGIzSjVJRDBnVW1WaFkzUkZiR1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblF1WW1sdVpDaHVkV3hzTENCMGVYQmxLVHRjYmlBZ0x5OGdSWGh3YjNObElIUm9aU0IwZVhCbElHOXVJSFJvWlNCbVlXTjBiM0o1SUdGdVpDQjBhR1VnY0hKdmRHOTBlWEJsSUhOdklIUm9ZWFFnYVhRZ1kyRnVJR0psWEc0Z0lDOHZJR1ZoYzJsc2VTQmhZMk5sYzNObFpDQnZiaUJsYkdWdFpXNTBjeTRnUlM1bkxpQmdQRVp2YnlBdlBpNTBlWEJsSUQwOVBTQkdiMjlnTGx4dUlDQXZMeUJVYUdseklITm9iM1ZzWkNCdWIzUWdZbVVnYm1GdFpXUWdZR052Ym5OMGNuVmpkRzl5WUNCemFXNWpaU0IwYUdseklHMWhlU0J1YjNRZ1ltVWdkR2hsSUdaMWJtTjBhVzl1WEc0Z0lDOHZJSFJvWVhRZ1kzSmxZWFJsWkNCMGFHVWdaV3hsYldWdWRDd2dZVzVrSUdsMElHMWhlU0J1YjNRZ1pYWmxiaUJpWlNCaElHTnZibk4wY25WamRHOXlMbHh1SUNBdkx5Qk1aV2RoWTNrZ2FHOXZheUJVVDBSUE9pQlhZWEp1SUdsbUlIUm9hWE1nYVhNZ1lXTmpaWE56WldSY2JpQWdabUZqZEc5eWVTNTBlWEJsSUQwZ2RIbHdaVHRjYmlBZ2NtVjBkWEp1SUdaaFkzUnZjbms3WEc1OU8xeHVYRzVTWldGamRFVnNaVzFsYm5RdVkyeHZibVZCYm1SU1pYQnNZV05sUzJWNUlEMGdablZ1WTNScGIyNGdLRzlzWkVWc1pXMWxiblFzSUc1bGQwdGxlU2tnZTF4dUlDQjJZWElnYm1WM1JXeGxiV1Z1ZENBOUlGSmxZV04wUld4bGJXVnVkQ2h2YkdSRmJHVnRaVzUwTG5SNWNHVXNJRzVsZDB0bGVTd2diMnhrUld4bGJXVnVkQzV5WldZc0lHOXNaRVZzWlcxbGJuUXVYM05sYkdZc0lHOXNaRVZzWlcxbGJuUXVYM052ZFhKalpTd2diMnhrUld4bGJXVnVkQzVmYjNkdVpYSXNJRzlzWkVWc1pXMWxiblF1Y0hKdmNITXBPMXh1WEc0Z0lISmxkSFZ5YmlCdVpYZEZiR1Z0Wlc1ME8xeHVmVHRjYmx4dVVtVmhZM1JGYkdWdFpXNTBMbU5zYjI1bFFXNWtVbVZ3YkdGalpWQnliM0J6SUQwZ1puVnVZM1JwYjI0Z0tHOXNaRVZzWlcxbGJuUXNJRzVsZDFCeWIzQnpLU0I3WEc0Z0lIWmhjaUJ1WlhkRmJHVnRaVzUwSUQwZ1VtVmhZM1JGYkdWdFpXNTBLRzlzWkVWc1pXMWxiblF1ZEhsd1pTd2diMnhrUld4bGJXVnVkQzVyWlhrc0lHOXNaRVZzWlcxbGJuUXVjbVZtTENCdmJHUkZiR1Z0Wlc1MExsOXpaV3htTENCdmJHUkZiR1Z0Wlc1MExsOXpiM1Z5WTJVc0lHOXNaRVZzWlcxbGJuUXVYMjkzYm1WeUxDQnVaWGRRY205d2N5azdYRzVjYmlBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0F2THlCSlppQjBhR1VnYTJWNUlHOXVJSFJvWlNCdmNtbG5hVzVoYkNCcGN5QjJZV3hwWkN3Z2RHaGxiaUIwYUdVZ1kyeHZibVVnYVhNZ2RtRnNhV1JjYmlBZ0lDQnVaWGRGYkdWdFpXNTBMbDl6ZEc5eVpTNTJZV3hwWkdGMFpXUWdQU0J2YkdSRmJHVnRaVzUwTGw5emRHOXlaUzUyWVd4cFpHRjBaV1E3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYm1WM1JXeGxiV1Z1ZER0Y2JuMDdYRzVjYmxKbFlXTjBSV3hsYldWdWRDNWpiRzl1WlVWc1pXMWxiblFnUFNCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZEN3Z1kyOXVabWxuTENCamFHbHNaSEpsYmlrZ2UxeHVJQ0IyWVhJZ2NISnZjRTVoYldVN1hHNWNiaUFnTHk4Z1QzSnBaMmx1WVd3Z2NISnZjSE1nWVhKbElHTnZjR2xsWkZ4dUlDQjJZWElnY0hKdmNITWdQU0JoYzNOcFoyNG9lMzBzSUdWc1pXMWxiblF1Y0hKdmNITXBPMXh1WEc0Z0lDOHZJRkpsYzJWeWRtVmtJRzVoYldWeklHRnlaU0JsZUhSeVlXTjBaV1JjYmlBZ2RtRnlJR3RsZVNBOUlHVnNaVzFsYm5RdWEyVjVPMXh1SUNCMllYSWdjbVZtSUQwZ1pXeGxiV1Z1ZEM1eVpXWTdYRzRnSUM4dklGTmxiR1lnYVhNZ2NISmxjMlZ5ZG1Wa0lITnBibU5sSUhSb1pTQnZkMjVsY2lCcGN5QndjbVZ6WlhKMlpXUXVYRzRnSUhaaGNpQnpaV3htSUQwZ1pXeGxiV1Z1ZEM1ZmMyVnNaanRjYmlBZ0x5OGdVMjkxY21ObElHbHpJSEJ5WlhObGNuWmxaQ0J6YVc1alpTQmpiRzl1WlVWc1pXMWxiblFnYVhNZ2RXNXNhV3RsYkhrZ2RHOGdZbVVnZEdGeVoyVjBaV1FnWW5rZ1lWeHVJQ0F2THlCMGNtRnVjM0JwYkdWeUxDQmhibVFnZEdobElHOXlhV2RwYm1Gc0lITnZkWEpqWlNCcGN5QndjbTlpWVdKc2VTQmhJR0psZEhSbGNpQnBibVJwWTJGMGIzSWdiMllnZEdobFhHNGdJQzh2SUhSeWRXVWdiM2R1WlhJdVhHNGdJSFpoY2lCemIzVnlZMlVnUFNCbGJHVnRaVzUwTGw5emIzVnlZMlU3WEc1Y2JpQWdMeThnVDNkdVpYSWdkMmxzYkNCaVpTQndjbVZ6WlhKMlpXUXNJSFZ1YkdWemN5QnlaV1lnYVhNZ2IzWmxjbkpwWkdSbGJseHVJQ0IyWVhJZ2IzZHVaWElnUFNCbGJHVnRaVzUwTGw5dmQyNWxjanRjYmx4dUlDQnBaaUFvWTI5dVptbG5JQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQnBaaUFvWTI5dVptbG5MbkpsWmlBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0F2THlCVGFXeGxiblJzZVNCemRHVmhiQ0IwYUdVZ2NtVm1JR1p5YjIwZ2RHaGxJSEJoY21WdWRDNWNiaUFnSUNBZ0lISmxaaUE5SUdOdmJtWnBaeTV5WldZN1hHNGdJQ0FnSUNCdmQyNWxjaUE5SUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5TG1OMWNuSmxiblE3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hqYjI1bWFXY3VhMlY1SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJR3RsZVNBOUlDY25JQ3NnWTI5dVptbG5MbXRsZVR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnVW1WdFlXbHVhVzVuSUhCeWIzQmxjblJwWlhNZ2IzWmxjbkpwWkdVZ1pYaHBjM1JwYm1jZ2NISnZjSE5jYmlBZ0lDQm1iM0lnS0hCeWIzQk9ZVzFsSUdsdUlHTnZibVpwWnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLR052Ym1acFp5NW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdUbUZ0WlNrZ0ppWWdJVkpGVTBWU1ZrVkVYMUJTVDFCVExtaGhjMDkzYmxCeWIzQmxjblI1S0hCeWIzQk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQndjbTl3YzF0d2NtOXdUbUZ0WlYwZ1BTQmpiMjVtYVdkYmNISnZjRTVoYldWZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZJRU5vYVd4a2NtVnVJR05oYmlCaVpTQnRiM0psSUhSb1lXNGdiMjVsSUdGeVozVnRaVzUwTENCaGJtUWdkR2h2YzJVZ1lYSmxJSFJ5WVc1elptVnljbVZrSUc5dWRHOWNiaUFnTHk4Z2RHaGxJRzVsZDJ4NUlHRnNiRzlqWVhSbFpDQndjbTl3Y3lCdlltcGxZM1F1WEc0Z0lIWmhjaUJqYUdsc1pISmxia3hsYm1kMGFDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F5TzF4dUlDQnBaaUFvWTJocGJHUnlaVzVNWlc1bmRHZ2dQVDA5SURFcElIdGNiaUFnSUNCd2NtOXdjeTVqYUdsc1pISmxiaUE5SUdOb2FXeGtjbVZ1TzF4dUlDQjlJR1ZzYzJVZ2FXWWdLR05vYVd4a2NtVnVUR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJSFpoY2lCamFHbHNaRUZ5Y21GNUlEMGdRWEp5WVhrb1kyaHBiR1J5Wlc1TVpXNW5kR2dwTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWTJocGJHUnlaVzVNWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1kyaHBiR1JCY25KaGVWdHBYU0E5SUdGeVozVnRaVzUwYzF0cElDc2dNbDA3WEc0Z0lDQWdmVnh1SUNBZ0lIQnliM0J6TG1Ob2FXeGtjbVZ1SUQwZ1kyaHBiR1JCY25KaGVUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQlNaV0ZqZEVWc1pXMWxiblFvWld4bGJXVnVkQzUwZVhCbExDQnJaWGtzSUhKbFppd2djMlZzWml3Z2MyOTFjbU5sTENCdmQyNWxjaXdnY0hKdmNITXBPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkFjR0Z5WVcwZ2V6OXZZbXBsWTNSOUlHOWlhbVZqZEZ4dUlDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQmdiMkpxWldOMFlDQnBjeUJoSUhaaGJHbGtJR052YlhCdmJtVnVkQzVjYmlBcUlFQm1hVzVoYkZ4dUlDb3ZYRzVTWldGamRFVnNaVzFsYm5RdWFYTldZV3hwWkVWc1pXMWxiblFnUFNCbWRXNWpkR2x2YmlBb2IySnFaV04wS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ2IySnFaV04wSUQwOVBTQW5iMkpxWldOMEp5QW1KaUJ2WW1wbFkzUWdJVDA5SUc1MWJHd2dKaVlnYjJKcVpXTjBMaVFrZEhsd1pXOW1JRDA5UFNCU1JVRkRWRjlGVEVWTlJVNVVYMVJaVUVVN1hHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBSV3hsYldWdWREc2lYWDA9IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVsZW1lbnRWYWxpZGF0b3JcbiAqL1xuXG4vKipcbiAqIFJlYWN0RWxlbWVudFZhbGlkYXRvciBwcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIGEgZWxlbWVudCBmYWN0b3J5XG4gKiB3aGljaCB2YWxpZGF0ZXMgdGhlIHByb3BzIHBhc3NlZCB0byB0aGUgZWxlbWVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICogdXNlZCBvbmx5IGluIERFViBhbmQgY291bGQgYmUgcmVwbGFjZWQgYnkgYSBzdGF0aWMgdHlwZSBjaGVja2VyIGZvciBsYW5ndWFnZXNcbiAqIHRoYXQgc3VwcG9ydCBpdC5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMnKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcblxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9jYW5EZWZpbmVQcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgdmFyIG5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlcmUncyBubyBrZXkgZXhwbGljaXRseSBzZXQgb24gZHluYW1pYyBhcnJheXMgb2YgY2hpbGRyZW4gb3JcbiAqIG9iamVjdCBrZXlzIGFyZSBub3QgdmFsaWQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgdHJhY2sgb2YgY2hpbGRyZW4gYmV0d2VlblxuICogdXBkYXRlcy5cbiAqL1xudmFyIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHt9O1xuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG5cbi8qKlxuICogV2FybiBpZiB0aGUgZWxlbWVudCBkb2Vzbid0IGhhdmUgYW4gZXhwbGljaXQga2V5IGFzc2lnbmVkIHRvIGl0LlxuICogVGhpcyBlbGVtZW50IGlzIGluIGFuIGFycmF5LiBUaGUgYXJyYXkgY291bGQgZ3JvdyBhbmQgc2hyaW5rIG9yIGJlXG4gKiByZW9yZGVyZWQuIEFsbCBjaGlsZHJlbiB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcmUgcmVxdWlyZWQgdG9cbiAqIGhhdmUgYSBcImtleVwiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuXG4gIHZhciBhZGRlbmRhID0gZ2V0QWRkZW5kYUZvcktleVVzZSgndW5pcXVlS2V5JywgZWxlbWVudCwgcGFyZW50VHlwZSk7XG4gIGlmIChhZGRlbmRhID09PSBudWxsKSB7XG4gICAgLy8gd2UgYWxyZWFkeSBzaG93ZWQgdGhlIHdhcm5pbmdcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nICsgJyVzJXMlcycsIGFkZGVuZGEucGFyZW50T3JPd25lciB8fCAnJywgYWRkZW5kYS5jaGlsZE93bmVyIHx8ICcnLCBhZGRlbmRhLnVybCB8fCAnJykgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogU2hhcmVkIHdhcm5pbmcgYW5kIG1vbml0b3JpbmcgY29kZSBmb3IgdGhlIGtleSB3YXJuaW5ncy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlVHlwZSBBIGtleSB1c2VkIGZvciBkZS1kdXBpbmcgd2FybmluZ3MuXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBDb21wb25lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqIEByZXR1cm5zIHs/b2JqZWN0fSBBIHNldCBvZiBhZGRlbmRhIHRvIHVzZSBpbiB0aGUgd2FybmluZyBtZXNzYWdlLCBvciBudWxsXG4gKiBpZiB0aGUgd2FybmluZyBoYXMgYWxyZWFkeSBiZWVuIHNob3duIGJlZm9yZSAoYW5kIHNob3VsZG4ndCBiZSBzaG93biBhZ2FpbikuXG4gKi9cbmZ1bmN0aW9uIGdldEFkZGVuZGFGb3JLZXlVc2UobWVzc2FnZVR5cGUsIGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgdmFyIGFkZGVuZHVtID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG4gIGlmICghYWRkZW5kdW0pIHtcbiAgICB2YXIgcGFyZW50TmFtZSA9IHR5cGVvZiBwYXJlbnRUeXBlID09PSAnc3RyaW5nJyA/IHBhcmVudFR5cGUgOiBwYXJlbnRUeXBlLmRpc3BsYXlOYW1lIHx8IHBhcmVudFR5cGUubmFtZTtcbiAgICBpZiAocGFyZW50TmFtZSkge1xuICAgICAgYWRkZW5kdW0gPSAnIENoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPCcgKyBwYXJlbnROYW1lICsgJz4uJztcbiAgICB9XG4gIH1cblxuICB2YXIgbWVtb2l6ZXIgPSBvd25lckhhc0tleVVzZVdhcm5pbmdbbWVzc2FnZVR5cGVdIHx8IChvd25lckhhc0tleVVzZVdhcm5pbmdbbWVzc2FnZVR5cGVdID0ge30pO1xuICBpZiAobWVtb2l6ZXJbYWRkZW5kdW1dKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbWVtb2l6ZXJbYWRkZW5kdW1dID0gdHJ1ZTtcblxuICB2YXIgYWRkZW5kYSA9IHtcbiAgICBwYXJlbnRPck93bmVyOiBhZGRlbmR1bSxcbiAgICB1cmw6ICcgU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciBtb3JlIGluZm9ybWF0aW9uLicsXG4gICAgY2hpbGRPd25lcjogbnVsbFxuICB9O1xuXG4gIC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gIC8vIHByb3BlcnR5LCBpdCBtYXkgYmUgdGhlIGNyZWF0b3Igb2YgdGhlIGNoaWxkIHRoYXQncyByZXNwb25zaWJsZSBmb3JcbiAgLy8gYXNzaWduaW5nIGl0IGEga2V5LlxuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIC8vIEdpdmUgdGhlIGNvbXBvbmVudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGlzIGNoaWxkLlxuICAgIGFkZGVuZGEuY2hpbGRPd25lciA9ICcgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gJyArIGVsZW1lbnQuX293bmVyLmdldE5hbWUoKSArICcuJztcbiAgfVxuXG4gIHJldHVybiBhZGRlbmRhO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGVsZW1lbnQgZWl0aGVyIGlzIHBhc3NlZCBpbiBhIHN0YXRpYyBsb2NhdGlvbiwgaW4gYW5cbiAqIGFycmF5IHdpdGggYW4gZXhwbGljaXQga2V5cyBwcm9wZXJ0eSBkZWZpbmVkLCBvciBpbiBhbiBvYmplY3QgbGl0ZXJhbFxuICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBub2RlJ3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMobm9kZSwgcGFyZW50VHlwZSkge1xuICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuICAgIC8vIEVudHJ5IGl0ZXJhdG9ycyBwcm92aWRlIGltcGxpY2l0IGtleXMuXG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBub2RlLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3BzIGFyZSB2YWxpZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcFR5cGVzIE1hcCBvZiBwcm9wIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKGNvbXBvbmVudE5hbWUsIHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICB2YXIgZXJyb3I7XG4gICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgISh0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICsgJ1JlYWN0LlByb3BUeXBlcy4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgIH1cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFlcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIEVycm9yLCAnJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgJyArICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gJyArICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICsgJ2NyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgJyArICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHByb3BOYW1lLCB0eXBlb2YgZXJyb3IpIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgdmFyIGFkZGVuZHVtID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGFuIGVsZW1lbnQsIHZhbGlkYXRlIHRoYXQgaXRzIHByb3BzIGZvbGxvdyB0aGUgcHJvcFR5cGVzIGRlZmluaXRpb24sXG4gKiBwcm92aWRlZCBieSB0aGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KSB7XG4gIHZhciBjb21wb25lbnRDbGFzcyA9IGVsZW1lbnQudHlwZTtcbiAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmFtZSA9IGNvbXBvbmVudENsYXNzLmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudENsYXNzLm5hbWU7XG4gIGlmIChjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMpIHtcbiAgICBjaGVja1Byb3BUeXBlcyhuYW1lLCBjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgJyArICdkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuJykgOiB1bmRlZmluZWQ7XG4gIH1cbn1cblxudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHtcblxuICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbiAodHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgdmFyIHZhbGlkVHlwZSA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAvLyBXZSB3YXJuIGluIHRoaXMgY2FzZSBidXQgZG9uJ3QgdGhyb3cuIFdlIGV4cGVjdCB0aGUgZWxlbWVudCBjcmVhdGlvbiB0b1xuICAgIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodmFsaWRUeXBlLCAnUmVhY3QuY3JlYXRlRWxlbWVudDogdHlwZSBzaG91bGQgbm90IGJlIG51bGwsIHVuZGVmaW5lZCwgYm9vbGVhbiwgb3IgJyArICdudW1iZXIuIEl0IHNob3VsZCBiZSBhIHN0cmluZyAoZm9yIERPTSBlbGVtZW50cykgb3IgYSBSZWFjdENsYXNzICcgKyAnKGZvciBjb21wb3NpdGUgY29tcG9uZW50cykuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSkgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyBUaGUgcmVzdWx0IGNhbiBiZSBudWxsaXNoIGlmIGEgbW9jayBvciBhIGN1c3RvbSBmdW5jdGlvbiBpcyB1c2VkLlxuICAgIC8vIFRPRE86IERyb3AgdGhpcyB3aGVuIHRoZXNlIGFyZSBubyBsb25nZXIgYWxsb3dlZCBhcyB0aGUgdHlwZSBhcmd1bWVudC5cbiAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyBTa2lwIGtleSB3YXJuaW5nIGlmIHRoZSB0eXBlIGlzbid0IHZhbGlkIHNpbmNlIG91ciBrZXkgdmFsaWRhdGlvbiBsb2dpY1xuICAgIC8vIGRvZXNuJ3QgZXhwZWN0IGEgbm9uLXN0cmluZy9mdW5jdGlvbiB0eXBlIGFuZCBjYW4gdGhyb3cgY29uZnVzaW5nIGVycm9ycy5cbiAgICAvLyBXZSBkb24ndCB3YW50IGV4Y2VwdGlvbiBiZWhhdmlvciB0byBkaWZmZXIgYmV0d2VlbiBkZXYgYW5kIHByb2QuXG4gICAgLy8gKFJlbmRlcmluZyB3aWxsIHRocm93IHdpdGggYSBoZWxwZnVsIG1lc3NhZ2UgYW5kIGFzIHNvb24gYXMgdGhlIHR5cGUgaXNcbiAgICAvLyBmaXhlZCwgdGhlIGtleSB3YXJuaW5ncyB3aWxsIGFwcGVhci4pXG4gICAgaWYgKHZhbGlkVHlwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCB0eXBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcblxuICAgIHJldHVybiBlbGVtZW50O1xuICB9LFxuXG4gIGNyZWF0ZUZhY3Rvcnk6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIHZhbGlkYXRlZEZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsIHR5cGUpO1xuICAgIC8vIExlZ2FjeSBob29rIFRPRE86IFdhcm4gaWYgdGhpcyBpcyBhY2Nlc3NlZFxuICAgIHZhbGlkYXRlZEZhY3RvcnkudHlwZSA9IHR5cGU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWxpZGF0ZWRGYWN0b3J5LCAndHlwZScsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgJyArICdiZWZvcmUgcGFzc2luZyBpdCB0byBjcmVhdGVGYWN0b3J5LicpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge1xuICAgICAgICAgICAgICB2YWx1ZTogdHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0ZWRGYWN0b3J5O1xuICB9LFxuXG4gIGNsb25lRWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gICAgfVxuICAgIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpO1xuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JGYkdWdFpXNTBWbUZzYVdSaGRHOXlMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREUwTFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnVW1WaFkzUkZiR1Z0Wlc1MFZtRnNhV1JoZEc5eVhHNGdLaTljYmx4dUx5b3FYRzRnS2lCU1pXRmpkRVZzWlcxbGJuUldZV3hwWkdGMGIzSWdjSEp2ZG1sa1pYTWdZU0IzY21Gd2NHVnlJR0Z5YjNWdVpDQmhJR1ZzWlcxbGJuUWdabUZqZEc5eWVWeHVJQ29nZDJocFkyZ2dkbUZzYVdSaGRHVnpJSFJvWlNCd2NtOXdjeUJ3WVhOelpXUWdkRzhnZEdobElHVnNaVzFsYm5RdUlGUm9hWE1nYVhNZ2FXNTBaVzVrWldRZ2RHOGdZbVZjYmlBcUlIVnpaV1FnYjI1c2VTQnBiaUJFUlZZZ1lXNWtJR052ZFd4a0lHSmxJSEpsY0d4aFkyVmtJR0o1SUdFZ2MzUmhkR2xqSUhSNWNHVWdZMmhsWTJ0bGNpQm1iM0lnYkdGdVozVmhaMlZ6WEc0Z0tpQjBhR0YwSUhOMWNIQnZjblFnYVhRdVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdVbVZoWTNSRmJHVnRaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVWc1pXMWxiblFuS1R0Y2JuWmhjaUJTWldGamRGQnliM0JVZVhCbFRHOWpZWFJwYjI1eklEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRGQnliM0JVZVhCbFRHOWpZWFJwYjI1ekp5azdYRzUyWVhJZ1VtVmhZM1JRY205d1ZIbHdaVXh2WTJGMGFXOXVUbUZ0WlhNZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFVISnZjRlI1Y0dWTWIyTmhkR2x2Yms1aGJXVnpKeWs3WEc1MllYSWdVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5SnlrN1hHNWNiblpoY2lCallXNUVaV1pwYm1WUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb0p5NHZZMkZ1UkdWbWFXNWxVSEp2Y0dWeWRIa25LVHRjYm5aaGNpQm5aWFJKZEdWeVlYUnZja1p1SUQwZ2NtVnhkV2x5WlNnbkxpOW5aWFJKZEdWeVlYUnZja1p1SnlrN1hHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNnblptSnFjeTlzYVdJdmFXNTJZWEpwWVc1MEp5azdYRzUyWVhJZ2QyRnlibWx1WnlBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwzZGhjbTVwYm1jbktUdGNibHh1Wm5WdVkzUnBiMjRnWjJWMFJHVmpiR0Z5WVhScGIyNUZjbkp2Y2tGa1pHVnVaSFZ0S0NrZ2UxeHVJQ0JwWmlBb1VtVmhZM1JEZFhKeVpXNTBUM2R1WlhJdVkzVnljbVZ1ZENrZ2UxeHVJQ0FnSUhaaGNpQnVZVzFsSUQwZ1VtVmhZM1JEZFhKeVpXNTBUM2R1WlhJdVkzVnljbVZ1ZEM1blpYUk9ZVzFsS0NrN1hHNGdJQ0FnYVdZZ0tHNWhiV1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuSUVOb1pXTnJJSFJvWlNCeVpXNWtaWElnYldWMGFHOWtJRzltSUdBbklDc2dibUZ0WlNBcklDZGdMaWM3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQW5KenRjYm4xY2JseHVMeW9xWEc0Z0tpQlhZWEp1SUdsbUlIUm9aWEpsSjNNZ2JtOGdhMlY1SUdWNGNHeHBZMmwwYkhrZ2MyVjBJRzl1SUdSNWJtRnRhV01nWVhKeVlYbHpJRzltSUdOb2FXeGtjbVZ1SUc5eVhHNGdLaUJ2WW1wbFkzUWdhMlY1Y3lCaGNtVWdibTkwSUhaaGJHbGtMaUJVYUdseklHRnNiRzkzY3lCMWN5QjBieUJyWldWd0lIUnlZV05ySUc5bUlHTm9hV3hrY21WdUlHSmxkSGRsWlc1Y2JpQXFJSFZ3WkdGMFpYTXVYRzRnS2k5Y2JuWmhjaUJ2ZDI1bGNraGhjMHRsZVZWelpWZGhjbTVwYm1jZ1BTQjdmVHRjYmx4dWRtRnlJR3h2WjJkbFpGUjVjR1ZHWVdsc2RYSmxjeUE5SUh0OU8xeHVYRzR2S2lwY2JpQXFJRmRoY200Z2FXWWdkR2hsSUdWc1pXMWxiblFnWkc5bGMyNG5kQ0JvWVhabElHRnVJR1Y0Y0d4cFkybDBJR3RsZVNCaGMzTnBaMjVsWkNCMGJ5QnBkQzVjYmlBcUlGUm9hWE1nWld4bGJXVnVkQ0JwY3lCcGJpQmhiaUJoY25KaGVTNGdWR2hsSUdGeWNtRjVJR052ZFd4a0lHZHliM2NnWVc1a0lITm9jbWx1YXlCdmNpQmlaVnh1SUNvZ2NtVnZjbVJsY21Wa0xpQkJiR3dnWTJocGJHUnlaVzRnZEdoaGRDQm9ZWFpsYmlkMElHRnNjbVZoWkhrZ1ltVmxiaUIyWVd4cFpHRjBaV1FnWVhKbElISmxjWFZwY21Wa0lIUnZYRzRnS2lCb1lYWmxJR0VnWENKclpYbGNJaUJ3Y205d1pYSjBlU0JoYzNOcFoyNWxaQ0IwYnlCcGRDNWNiaUFxWEc0Z0tpQkFhVzUwWlhKdVlXeGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUkZiR1Z0Wlc1MGZTQmxiR1Z0Wlc1MElFVnNaVzFsYm5RZ2RHaGhkQ0J5WlhGMWFYSmxjeUJoSUd0bGVTNWNiaUFxSUVCd1lYSmhiU0I3S24wZ2NHRnlaVzUwVkhsd1pTQmxiR1Z0Wlc1MEozTWdjR0Z5Wlc1MEozTWdkSGx3WlM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZGZUhCc2FXTnBkRXRsZVNobGJHVnRaVzUwTENCd1lYSmxiblJVZVhCbEtTQjdYRzRnSUdsbUlDZ2haV3hsYldWdWRDNWZjM1J2Y21VZ2ZId2daV3hsYldWdWRDNWZjM1J2Y21VdWRtRnNhV1JoZEdWa0lIeDhJR1ZzWlcxbGJuUXVhMlY1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JpQWdaV3hsYldWdWRDNWZjM1J2Y21VdWRtRnNhV1JoZEdWa0lEMGdkSEoxWlR0Y2JseHVJQ0IyWVhJZ1lXUmtaVzVrWVNBOUlHZGxkRUZrWkdWdVpHRkdiM0pMWlhsVmMyVW9KM1Z1YVhGMVpVdGxlU2NzSUdWc1pXMWxiblFzSUhCaGNtVnVkRlI1Y0dVcE8xeHVJQ0JwWmlBb1lXUmtaVzVrWVNBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUM4dklIZGxJR0ZzY21WaFpIa2djMmh2ZDJWa0lIUm9aU0IzWVhKdWFXNW5YRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzRnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktHWmhiSE5sTENBblJXRmphQ0JqYUdsc1pDQnBiaUJoYmlCaGNuSmhlU0J2Y2lCcGRHVnlZWFJ2Y2lCemFHOTFiR1FnYUdGMlpTQmhJSFZ1YVhGMVpTQmNJbXRsZVZ3aUlIQnliM0F1SnlBcklDY2xjeVZ6SlhNbkxDQmhaR1JsYm1SaExuQmhjbVZ1ZEU5eVQzZHVaWElnZkh3Z0p5Y3NJR0ZrWkdWdVpHRXVZMmhwYkdSUGQyNWxjaUI4ZkNBbkp5d2dZV1JrWlc1a1lTNTFjbXdnZkh3Z0p5Y3BJRG9nZFc1a1pXWnBibVZrTzF4dWZWeHVYRzR2S2lwY2JpQXFJRk5vWVhKbFpDQjNZWEp1YVc1bklHRnVaQ0J0YjI1cGRHOXlhVzVuSUdOdlpHVWdabTl5SUhSb1pTQnJaWGtnZDJGeWJtbHVaM011WEc0Z0tseHVJQ29nUUdsdWRHVnlibUZzWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JXVnpjMkZuWlZSNWNHVWdRU0JyWlhrZ2RYTmxaQ0JtYjNJZ1pHVXRaSFZ3YVc1bklIZGhjbTVwYm1kekxseHVJQ29nUUhCaGNtRnRJSHRTWldGamRFVnNaVzFsYm5SOUlHVnNaVzFsYm5RZ1EyOXRjRzl1Wlc1MElIUm9ZWFFnY21WeGRXbHlaWE1nWVNCclpYa3VYRzRnS2lCQWNHRnlZVzBnZXlwOUlIQmhjbVZ1ZEZSNWNHVWdaV3hsYldWdWRDZHpJSEJoY21WdWRDZHpJSFI1Y0dVdVhHNGdLaUJBY21WMGRYSnVjeUI3UDI5aWFtVmpkSDBnUVNCelpYUWdiMllnWVdSa1pXNWtZU0IwYnlCMWMyVWdhVzRnZEdobElIZGhjbTVwYm1jZ2JXVnpjMkZuWlN3Z2IzSWdiblZzYkZ4dUlDb2dhV1lnZEdobElIZGhjbTVwYm1jZ2FHRnpJR0ZzY21WaFpIa2dZbVZsYmlCemFHOTNiaUJpWldadmNtVWdLR0Z1WkNCemFHOTFiR1J1SjNRZ1ltVWdjMmh2ZDI0Z1lXZGhhVzRwTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJuWlhSQlpHUmxibVJoUm05eVMyVjVWWE5sS0cxbGMzTmhaMlZVZVhCbExDQmxiR1Z0Wlc1MExDQndZWEpsYm5SVWVYQmxLU0I3WEc0Z0lIWmhjaUJoWkdSbGJtUjFiU0E5SUdkbGRFUmxZMnhoY21GMGFXOXVSWEp5YjNKQlpHUmxibVIxYlNncE8xeHVJQ0JwWmlBb0lXRmtaR1Z1WkhWdEtTQjdYRzRnSUNBZ2RtRnlJSEJoY21WdWRFNWhiV1VnUFNCMGVYQmxiMllnY0dGeVpXNTBWSGx3WlNBOVBUMGdKM04wY21sdVp5Y2dQeUJ3WVhKbGJuUlVlWEJsSURvZ2NHRnlaVzUwVkhsd1pTNWthWE53YkdGNVRtRnRaU0I4ZkNCd1lYSmxiblJVZVhCbExtNWhiV1U3WEc0Z0lDQWdhV1lnS0hCaGNtVnVkRTVoYldVcElIdGNiaUFnSUNBZ0lHRmtaR1Z1WkhWdElEMGdKeUJEYUdWamF5QjBhR1VnZEc5d0xXeGxkbVZzSUhKbGJtUmxjaUJqWVd4c0lIVnphVzVuSUR3bklDc2djR0Z5Wlc1MFRtRnRaU0FySUNjK0xpYzdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUcxbGJXOXBlbVZ5SUQwZ2IzZHVaWEpJWVhOTFpYbFZjMlZYWVhKdWFXNW5XMjFsYzNOaFoyVlVlWEJsWFNCOGZDQW9iM2R1WlhKSVlYTkxaWGxWYzJWWFlYSnVhVzVuVzIxbGMzTmhaMlZVZVhCbFhTQTlJSHQ5S1R0Y2JpQWdhV1lnS0cxbGJXOXBlbVZ5VzJGa1pHVnVaSFZ0WFNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5WEc0Z0lHMWxiVzlwZW1WeVcyRmtaR1Z1WkhWdFhTQTlJSFJ5ZFdVN1hHNWNiaUFnZG1GeUlHRmtaR1Z1WkdFZ1BTQjdYRzRnSUNBZ2NHRnlaVzUwVDNKUGQyNWxjam9nWVdSa1pXNWtkVzBzWEc0Z0lDQWdkWEpzT2lBbklGTmxaU0JvZEhSd2N6b3ZMMlppTG0xbEwzSmxZV04wTFhkaGNtNXBibWN0YTJWNWN5Qm1iM0lnYlc5eVpTQnBibVp2Y20xaGRHbHZiaTRuTEZ4dUlDQWdJR05vYVd4a1QzZHVaWEk2SUc1MWJHeGNiaUFnZlR0Y2JseHVJQ0F2THlCVmMzVmhiR3g1SUhSb1pTQmpkWEp5Wlc1MElHOTNibVZ5SUdseklIUm9aU0J2Wm1abGJtUmxjaXdnWW5WMElHbG1JR2wwSUdGalkyVndkSE1nWTJocGJHUnlaVzRnWVhNZ1lWeHVJQ0F2THlCd2NtOXdaWEowZVN3Z2FYUWdiV0Y1SUdKbElIUm9aU0JqY21WaGRHOXlJRzltSUhSb1pTQmphR2xzWkNCMGFHRjBKM01nY21WemNHOXVjMmxpYkdVZ1ptOXlYRzRnSUM4dklHRnpjMmxuYm1sdVp5QnBkQ0JoSUd0bGVTNWNiaUFnYVdZZ0tHVnNaVzFsYm5RZ0ppWWdaV3hsYldWdWRDNWZiM2R1WlhJZ0ppWWdaV3hsYldWdWRDNWZiM2R1WlhJZ0lUMDlJRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlMbU4xY25KbGJuUXBJSHRjYmlBZ0lDQXZMeUJIYVhabElIUm9aU0JqYjIxd2IyNWxiblFnZEdoaGRDQnZjbWxuYVc1aGJHeDVJR055WldGMFpXUWdkR2hwY3lCamFHbHNaQzVjYmlBZ0lDQmhaR1JsYm1SaExtTm9hV3hrVDNkdVpYSWdQU0FuSUVsMElIZGhjeUJ3WVhOelpXUWdZU0JqYUdsc1pDQm1jbTl0SUNjZ0t5QmxiR1Z0Wlc1MExsOXZkMjVsY2k1blpYUk9ZVzFsS0NrZ0t5QW5MaWM3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWVdSa1pXNWtZVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkZibk4xY21VZ2RHaGhkQ0JsZG1WeWVTQmxiR1Z0Wlc1MElHVnBkR2hsY2lCcGN5QndZWE56WldRZ2FXNGdZU0J6ZEdGMGFXTWdiRzlqWVhScGIyNHNJR2x1SUdGdVhHNGdLaUJoY25KaGVTQjNhWFJvSUdGdUlHVjRjR3hwWTJsMElHdGxlWE1nY0hKdmNHVnlkSGtnWkdWbWFXNWxaQ3dnYjNJZ2FXNGdZVzRnYjJKcVpXTjBJR3hwZEdWeVlXeGNiaUFxSUhkcGRHZ2dkbUZzYVdRZ2EyVjVJSEJ5YjNCbGNuUjVMbHh1SUNwY2JpQXFJRUJwYm5SbGNtNWhiRnh1SUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRTV2WkdWOUlHNXZaR1VnVTNSaGRHbGpZV3hzZVNCd1lYTnpaV1FnWTJocGJHUWdiMllnWVc1NUlIUjVjR1V1WEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSEJoY21WdWRGUjVjR1VnYm05a1pTZHpJSEJoY21WdWRDZHpJSFI1Y0dVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhaaGJHbGtZWFJsUTJocGJHUkxaWGx6S0c1dlpHVXNJSEJoY21WdWRGUjVjR1VwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ1YjJSbElDRTlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJSEpsZEhWeWJqdGNiaUFnZlZ4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaHViMlJsS1NrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JtOWtaUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR05vYVd4a0lEMGdibTlrWlZ0cFhUdGNiaUFnSUNBZ0lHbG1JQ2hTWldGamRFVnNaVzFsYm5RdWFYTldZV3hwWkVWc1pXMWxiblFvWTJocGJHUXBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGJHbGtZWFJsUlhod2JHbGphWFJMWlhrb1kyaHBiR1FzSUhCaGNtVnVkRlI1Y0dVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2hTWldGamRFVnNaVzFsYm5RdWFYTldZV3hwWkVWc1pXMWxiblFvYm05a1pTa3BJSHRjYmlBZ0lDQXZMeUJVYUdseklHVnNaVzFsYm5RZ2QyRnpJSEJoYzNObFpDQnBiaUJoSUhaaGJHbGtJR3h2WTJGMGFXOXVMbHh1SUNBZ0lHbG1JQ2h1YjJSbExsOXpkRzl5WlNrZ2UxeHVJQ0FnSUNBZ2JtOWtaUzVmYzNSdmNtVXVkbUZzYVdSaGRHVmtJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvYm05a1pTa2dlMXh1SUNBZ0lIWmhjaUJwZEdWeVlYUnZja1p1SUQwZ1oyVjBTWFJsY21GMGIzSkdiaWh1YjJSbEtUdGNiaUFnSUNBdkx5QkZiblJ5ZVNCcGRHVnlZWFJ2Y25NZ2NISnZkbWxrWlNCcGJYQnNhV05wZENCclpYbHpMbHh1SUNBZ0lHbG1JQ2hwZEdWeVlYUnZja1p1S1NCN1hHNGdJQ0FnSUNCcFppQW9hWFJsY21GMGIzSkdiaUFoUFQwZ2JtOWtaUzVsYm5SeWFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBkR1Z5WVhSdmNpQTlJR2wwWlhKaGRHOXlSbTR1WTJGc2JDaHViMlJsS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE4wWlhBN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNnaEtITjBaWEFnUFNCcGRHVnlZWFJ2Y2k1dVpYaDBLQ2twTG1SdmJtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9VbVZoWTNSRmJHVnRaVzUwTG1selZtRnNhV1JGYkdWdFpXNTBLSE4wWlhBdWRtRnNkV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4cFpHRjBaVVY0Y0d4cFkybDBTMlY1S0hOMFpYQXVkbUZzZFdVc0lIQmhjbVZ1ZEZSNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFRnpjMlZ5ZENCMGFHRjBJSFJvWlNCd2NtOXdjeUJoY21VZ2RtRnNhV1JjYmlBcVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMjl0Y0c5dVpXNTBUbUZ0WlNCT1lXMWxJRzltSUhSb1pTQmpiMjF3YjI1bGJuUWdabTl5SUdWeWNtOXlJRzFsYzNOaFoyVnpMbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCeWIzQlVlWEJsY3lCTllYQWdiMllnY0hKdmNDQnVZVzFsSUhSdklHRWdVbVZoWTNSUWNtOXdWSGx3WlZ4dUlDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlIQnliM0J6WEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHOWpZWFJwYjI0Z1pTNW5MaUJjSW5CeWIzQmNJaXdnWENKamIyNTBaWGgwWENJc0lGd2lZMmhwYkdRZ1kyOXVkR1Y0ZEZ3aVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQmphR1ZqYTFCeWIzQlVlWEJsY3loamIyMXdiMjVsYm5ST1lXMWxMQ0J3Y205d1ZIbHdaWE1zSUhCeWIzQnpMQ0JzYjJOaGRHbHZiaWtnZTF4dUlDQm1iM0lnS0haaGNpQndjbTl3VG1GdFpTQnBiaUJ3Y205d1ZIbHdaWE1wSUh0Y2JpQWdJQ0JwWmlBb2NISnZjRlI1Y0dWekxtaGhjMDkzYmxCeWIzQmxjblI1S0hCeWIzQk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ2RtRnlJR1Z5Y205eU8xeHVJQ0FnSUNBZ0x5OGdVSEp2Y0NCMGVYQmxJSFpoYkdsa1lYUnBiMjRnYldGNUlIUm9jbTkzTGlCSmJpQmpZWE5sSUhSb1pYa2daRzhzSUhkbElHUnZiaWQwSUhkaGJuUWdkRzljYmlBZ0lDQWdJQzh2SUdaaGFXd2dkR2hsSUhKbGJtUmxjaUJ3YUdGelpTQjNhR1Z5WlNCcGRDQmthV1J1SjNRZ1ptRnBiQ0JpWldadmNtVXVJRk52SUhkbElHeHZaeUJwZEM1Y2JpQWdJQ0FnSUM4dklFRm1kR1Z5SUhSb1pYTmxJR2hoZG1VZ1ltVmxiaUJqYkdWaGJtVmtJSFZ3TENCM1pTZHNiQ0JzWlhRZ2RHaGxiU0IwYUhKdmR5NWNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUM4dklGUm9hWE1nYVhNZ2FXNTBaVzUwYVc5dVlXeHNlU0JoYmlCcGJuWmhjbWxoYm5RZ2RHaGhkQ0JuWlhSeklHTmhkV2RvZEM0Z1NYUW5jeUIwYUdVZ2MyRnRaVnh1SUNBZ0lDQWdJQ0F2THlCaVpXaGhkbWx2Y2lCaGN5QjNhWFJvYjNWMElIUm9hWE1nYzNSaGRHVnRaVzUwSUdWNFkyVndkQ0IzYVhSb0lHRWdZbVYwZEdWeUlHMWxjM05oWjJVdVhHNGdJQ0FnSUNBZ0lDRW9kSGx3Wlc5bUlIQnliM0JVZVhCbGMxdHdjbTl3VG1GdFpWMGdQVDA5SUNkbWRXNWpkR2x2YmljcElEOGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUdsdWRtRnlhV0Z1ZENobVlXeHpaU3dnSnlWek9pQWxjeUIwZVhCbElHQWxjMkFnYVhNZ2FXNTJZV3hwWkRzZ2FYUWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVMQ0IxYzNWaGJHeDVJR1p5YjIwZ0p5QXJJQ2RTWldGamRDNVFjbTl3Vkhsd1pYTXVKeXdnWTI5dGNHOXVaVzUwVG1GdFpTQjhmQ0FuVW1WaFkzUWdZMnhoYzNNbkxDQlNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjVPWVcxbGMxdHNiMk5oZEdsdmJsMHNJSEJ5YjNCT1lXMWxLU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2NISnZjRlI1Y0dWelczQnliM0JPWVcxbFhTaHdjbTl3Y3l3Z2NISnZjRTVoYldVc0lHTnZiWEJ2Ym1WdWRFNWhiV1VzSUd4dlkyRjBhVzl1S1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWNEtTQjdYRzRnSUNBZ0lDQWdJR1Z5Y205eUlEMGdaWGc3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1WnlnaFpYSnliM0lnZkh3Z1pYSnliM0lnYVc1emRHRnVZMlZ2WmlCRmNuSnZjaXdnSnlWek9pQjBlWEJsSUhOd1pXTnBabWxqWVhScGIyNGdiMllnSlhNZ1lDVnpZQ0JwY3lCcGJuWmhiR2xrT3lCMGFHVWdkSGx3WlNCamFHVmphMlZ5SUNjZ0t5QW5ablZ1WTNScGIyNGdiWFZ6ZENCeVpYUjFjbTRnWUc1MWJHeGdJRzl5SUdGdUlHQkZjbkp2Y21BZ1luVjBJSEpsZEhWeWJtVmtJR0VnSlhNdUlDY2dLeUFuV1c5MUlHMWhlU0JvWVhabElHWnZjbWR2ZEhSbGJpQjBieUJ3WVhOeklHRnVJR0Z5WjNWdFpXNTBJSFJ2SUhSb1pTQjBlWEJsSUdOb1pXTnJaWElnSnlBcklDZGpjbVZoZEc5eUlDaGhjbkpoZVU5bUxDQnBibk4wWVc1alpVOW1MQ0J2WW1wbFkzUlBaaXdnYjI1bFQyWXNJRzl1WlU5bVZIbHdaU3dnWVc1a0lDY2dLeUFuYzJoaGNHVWdZV3hzSUhKbGNYVnBjbVVnWVc0Z1lYSm5kVzFsYm5RcExpY3NJR052YlhCdmJtVnVkRTVoYldVZ2ZId2dKMUpsWVdOMElHTnNZWE56Snl3Z1VtVmhZM1JRY205d1ZIbHdaVXh2WTJGMGFXOXVUbUZ0WlhOYmJHOWpZWFJwYjI1ZExDQndjbTl3VG1GdFpTd2dkSGx3Wlc5bUlHVnljbTl5S1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lHbG1JQ2hsY25KdmNpQnBibk4wWVc1alpXOW1JRVZ5Y205eUlDWW1JQ0VvWlhKeWIzSXViV1Z6YzJGblpTQnBiaUJzYjJkblpXUlVlWEJsUm1GcGJIVnlaWE1wS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRTl1YkhrZ2JXOXVhWFJ2Y2lCMGFHbHpJR1poYVd4MWNtVWdiMjVqWlNCaVpXTmhkWE5sSUhSb1pYSmxJSFJsYm1SeklIUnZJR0psSUdFZ2JHOTBJRzltSUhSb1pWeHVJQ0FnSUNBZ0lDQXZMeUJ6WVcxbElHVnljbTl5TGx4dUlDQWdJQ0FnSUNCc2IyZG5aV1JVZVhCbFJtRnBiSFZ5WlhOYlpYSnliM0l1YldWemMyRm5aVjBnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQmhaR1JsYm1SMWJTQTlJR2RsZEVSbFkyeGhjbUYwYVc5dVJYSnliM0pCWkdSbGJtUjFiU2dwTzF4dUlDQWdJQ0FnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5aG1ZV3h6WlN3Z0owWmhhV3hsWkNCd2NtOXdWSGx3WlRvZ0pYTWxjeWNzSUdWeWNtOXlMbTFsYzNOaFoyVXNJR0ZrWkdWdVpIVnRLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCSGFYWmxiaUJoYmlCbGJHVnRaVzUwTENCMllXeHBaR0YwWlNCMGFHRjBJR2wwY3lCd2NtOXdjeUJtYjJ4c2IzY2dkR2hsSUhCeWIzQlVlWEJsY3lCa1pXWnBibWwwYVc5dUxGeHVJQ29nY0hKdmRtbGtaV1FnWW5rZ2RHaGxJSFI1Y0dVdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRVZzWlcxbGJuUjlJR1ZzWlcxbGJuUmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2RtRnNhV1JoZEdWUWNtOXdWSGx3WlhNb1pXeGxiV1Z1ZENrZ2UxeHVJQ0IyWVhJZ1kyOXRjRzl1Wlc1MFEyeGhjM01nUFNCbGJHVnRaVzUwTG5SNWNHVTdYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyOXRjRzl1Wlc1MFEyeGhjM01nSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmlBZ2RtRnlJRzVoYldVZ1BTQmpiMjF3YjI1bGJuUkRiR0Z6Y3k1a2FYTndiR0Y1VG1GdFpTQjhmQ0JqYjIxd2IyNWxiblJEYkdGemN5NXVZVzFsTzF4dUlDQnBaaUFvWTI5dGNHOXVaVzUwUTJ4aGMzTXVjSEp2Y0ZSNWNHVnpLU0I3WEc0Z0lDQWdZMmhsWTJ0UWNtOXdWSGx3WlhNb2JtRnRaU3dnWTI5dGNHOXVaVzUwUTJ4aGMzTXVjSEp2Y0ZSNWNHVnpMQ0JsYkdWdFpXNTBMbkJ5YjNCekxDQlNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjV6TG5CeWIzQXBPMXh1SUNCOVhHNGdJR2xtSUNoMGVYQmxiMllnWTI5dGNHOXVaVzUwUTJ4aGMzTXVaMlYwUkdWbVlYVnNkRkJ5YjNCeklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb1kyOXRjRzl1Wlc1MFEyeGhjM011WjJWMFJHVm1ZWFZzZEZCeWIzQnpMbWx6VW1WaFkzUkRiR0Z6YzBGd2NISnZkbVZrTENBbloyVjBSR1ZtWVhWc2RGQnliM0J6SUdseklHOXViSGtnZFhObFpDQnZiaUJqYkdGemMybGpJRkpsWVdOMExtTnlaV0YwWlVOc1lYTnpJQ2NnS3lBblpHVm1hVzVwZEdsdmJuTXVJRlZ6WlNCaElITjBZWFJwWXlCd2NtOXdaWEowZVNCdVlXMWxaQ0JnWkdWbVlYVnNkRkJ5YjNCellDQnBibk4wWldGa0xpY3BJRG9nZFc1a1pXWnBibVZrTzF4dUlDQjlYRzU5WEc1Y2JuWmhjaUJTWldGamRFVnNaVzFsYm5SV1lXeHBaR0YwYjNJZ1BTQjdYRzVjYmlBZ1kzSmxZWFJsUld4bGJXVnVkRG9nWm5WdVkzUnBiMjRnS0hSNWNHVXNJSEJ5YjNCekxDQmphR2xzWkhKbGJpa2dlMXh1SUNBZ0lIWmhjaUIyWVd4cFpGUjVjR1VnUFNCMGVYQmxiMllnZEhsd1pTQTlQVDBnSjNOMGNtbHVaeWNnZkh3Z2RIbHdaVzltSUhSNWNHVWdQVDA5SUNkbWRXNWpkR2x2YmljN1hHNGdJQ0FnTHk4Z1YyVWdkMkZ5YmlCcGJpQjBhR2x6SUdOaGMyVWdZblYwSUdSdmJpZDBJSFJvY205M0xpQlhaU0JsZUhCbFkzUWdkR2hsSUdWc1pXMWxiblFnWTNKbFlYUnBiMjRnZEc5Y2JpQWdJQ0F2THlCemRXTmpaV1ZrSUdGdVpDQjBhR1Z5WlNCM2FXeHNJR3hwYTJWc2VTQmlaU0JsY25KdmNuTWdhVzRnY21WdVpHVnlMbHh1SUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LSFpoYkdsa1ZIbHdaU3dnSjFKbFlXTjBMbU55WldGMFpVVnNaVzFsYm5RNklIUjVjR1VnYzJodmRXeGtJRzV2ZENCaVpTQnVkV3hzTENCMWJtUmxabWx1WldRc0lHSnZiMnhsWVc0c0lHOXlJQ2NnS3lBbmJuVnRZbVZ5TGlCSmRDQnphRzkxYkdRZ1ltVWdZU0J6ZEhKcGJtY2dLR1p2Y2lCRVQwMGdaV3hsYldWdWRITXBJRzl5SUdFZ1VtVmhZM1JEYkdGemN5QW5JQ3NnSnlobWIzSWdZMjl0Y0c5emFYUmxJR052YlhCdmJtVnVkSE1wTGlWekp5d2daMlYwUkdWamJHRnlZWFJwYjI1RmNuSnZja0ZrWkdWdVpIVnRLQ2twSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ2RtRnlJR1ZzWlcxbGJuUWdQU0JTWldGamRFVnNaVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVYRzRnSUNBZ0x5OGdWR2hsSUhKbGMzVnNkQ0JqWVc0Z1ltVWdiblZzYkdsemFDQnBaaUJoSUcxdlkyc2diM0lnWVNCamRYTjBiMjBnWm5WdVkzUnBiMjRnYVhNZ2RYTmxaQzVjYmlBZ0lDQXZMeUJVVDBSUE9pQkVjbTl3SUhSb2FYTWdkMmhsYmlCMGFHVnpaU0JoY21VZ2JtOGdiRzl1WjJWeUlHRnNiRzkzWldRZ1lYTWdkR2hsSUhSNWNHVWdZWEpuZFcxbGJuUXVYRzRnSUNBZ2FXWWdLR1ZzWlcxbGJuUWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHVnNaVzFsYm5RN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1UydHBjQ0JyWlhrZ2QyRnlibWx1WnlCcFppQjBhR1VnZEhsd1pTQnBjMjRuZENCMllXeHBaQ0J6YVc1alpTQnZkWElnYTJWNUlIWmhiR2xrWVhScGIyNGdiRzluYVdOY2JpQWdJQ0F2THlCa2IyVnpiaWQwSUdWNGNHVmpkQ0JoSUc1dmJpMXpkSEpwYm1jdlpuVnVZM1JwYjI0Z2RIbHdaU0JoYm1RZ1kyRnVJSFJvY205M0lHTnZibVoxYzJsdVp5Qmxjbkp2Y25NdVhHNGdJQ0FnTHk4Z1YyVWdaRzl1SjNRZ2QyRnVkQ0JsZUdObGNIUnBiMjRnWW1Wb1lYWnBiM0lnZEc4Z1pHbG1abVZ5SUdKbGRIZGxaVzRnWkdWMklHRnVaQ0J3Y205a0xseHVJQ0FnSUM4dklDaFNaVzVrWlhKcGJtY2dkMmxzYkNCMGFISnZkeUIzYVhSb0lHRWdhR1ZzY0daMWJDQnRaWE56WVdkbElHRnVaQ0JoY3lCemIyOXVJR0Z6SUhSb1pTQjBlWEJsSUdselhHNGdJQ0FnTHk4Z1ptbDRaV1FzSUhSb1pTQnJaWGtnZDJGeWJtbHVaM01nZDJsc2JDQmhjSEJsWVhJdUtWeHVJQ0FnSUdsbUlDaDJZV3hwWkZSNWNHVXBJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeU95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoYkdsa1lYUmxRMmhwYkdSTFpYbHpLR0Z5WjNWdFpXNTBjMXRwWFN3Z2RIbHdaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZzYVdSaGRHVlFjbTl3Vkhsd1pYTW9aV3hsYldWdWRDazdYRzVjYmlBZ0lDQnlaWFIxY200Z1pXeGxiV1Z1ZER0Y2JpQWdmU3hjYmx4dUlDQmpjbVZoZEdWR1lXTjBiM0o1T2lCbWRXNWpkR2x2YmlBb2RIbHdaU2tnZTF4dUlDQWdJSFpoY2lCMllXeHBaR0YwWldSR1lXTjBiM0o1SUQwZ1VtVmhZM1JGYkdWdFpXNTBWbUZzYVdSaGRHOXlMbU55WldGMFpVVnNaVzFsYm5RdVltbHVaQ2h1ZFd4c0xDQjBlWEJsS1R0Y2JpQWdJQ0F2THlCTVpXZGhZM2tnYUc5dmF5QlVUMFJQT2lCWFlYSnVJR2xtSUhSb2FYTWdhWE1nWVdOalpYTnpaV1JjYmlBZ0lDQjJZV3hwWkdGMFpXUkdZV04wYjNKNUxuUjVjR1VnUFNCMGVYQmxPMXh1WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lHbG1JQ2hqWVc1RVpXWnBibVZRY205d1pYSjBlU2tnZTF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kbUZzYVdSaGRHVmtSbUZqZEc5eWVTd2dKM1I1Y0dVbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1WnlobVlXeHpaU3dnSjBaaFkzUnZjbmt1ZEhsd1pTQnBjeUJrWlhCeVpXTmhkR1ZrTGlCQlkyTmxjM01nZEdobElHTnNZWE56SUdScGNtVmpkR3g1SUNjZ0t5QW5ZbVZtYjNKbElIQmhjM05wYm1jZ2FYUWdkRzhnWTNKbFlYUmxSbUZqZEc5eWVTNG5LU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMGFHbHpMQ0FuZEhsd1pTY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklIUjVjR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZG1Gc2FXUmhkR1ZrUm1GamRHOXllVHRjYmlBZ2ZTeGNibHh1SUNCamJHOXVaVVZzWlcxbGJuUTZJR1oxYm1OMGFXOXVJQ2hsYkdWdFpXNTBMQ0J3Y205d2N5d2dZMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQjJZWElnYm1WM1JXeGxiV1Z1ZENBOUlGSmxZV04wUld4bGJXVnVkQzVqYkc5dVpVVnNaVzFsYm5RdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTWpzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnNhV1JoZEdWRGFHbHNaRXRsZVhNb1lYSm5kVzFsYm5SelcybGRMQ0J1WlhkRmJHVnRaVzUwTG5SNWNHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCMllXeHBaR0YwWlZCeWIzQlVlWEJsY3lodVpYZEZiR1Z0Wlc1MEtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM1JXeGxiV1Z1ZER0Y2JpQWdmVnh1WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkpsWVdOMFJXeGxiV1Z1ZEZaaGJHbGtZWFJ2Y2pzaVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbXB0eUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9SZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnknKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG5cbnZhciBwbGFjZWhvbGRlckVsZW1lbnQ7XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uID0ge1xuICBpbmplY3RFbXB0eUNvbXBvbmVudDogZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgIHBsYWNlaG9sZGVyRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKCkge1xuICBSZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnkucmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQodGhpcy5fcm9vdE5vZGVJRCk7XG59XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gZnVuY3Rpb24gKGluc3RhbnRpYXRlKSB7XG4gIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gaW5zdGFudGlhdGUocGxhY2Vob2xkZXJFbGVtZW50KTtcbn07XG5hc3NpZ24oUmVhY3RFbXB0eUNvbXBvbmVudC5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZWxlbWVudCkge30sXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUocmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQsIHRoaXMpO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG4gICAgcmV0dXJuIFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gIH0sXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHt9LFxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KTtcbiAgICBSZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnkuZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gIH1cbn0pO1xuXG5SZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbiA9IFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbXB0eUNvbXBvbmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHRoZSBSZWFjdCBJRHMgb2YgdGhlIGNvbXBvbmVudHMgdGhhdCByZW5kZXJlZCB0b1xuLy8gYG51bGxgIChpbiByZWFsaXR5IGEgcGxhY2Vob2xkZXIgc3VjaCBhcyBgbm9zY3JpcHRgKVxudmFyIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeSA9IHt9O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDb21wb25lbnQncyBgX3Jvb3ROb2RlSURgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkIHRvIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGlzTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIHJldHVybiAhIW51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF07XG59XG5cbi8qKlxuICogTWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCdzIGBfcm9vdE5vZGVJRGAuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF0gPSB0cnVlO1xufVxuXG4vKipcbiAqIFVubWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsOiBpdCByZW5kZXJzIHRvIHNvbWV0aGluZyBub3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqL1xuZnVuY3Rpb24gZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRChpZCkge1xuICBkZWxldGUgbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5W2lkXTtcbn1cblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeSA9IHtcbiAgaXNOdWxsQ29tcG9uZW50SUQ6IGlzTnVsbENvbXBvbmVudElELFxuICByZWdpc3Rlck51bGxDb21wb25lbnRJRDogcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQsXG4gIGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQ6IGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SURcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5OyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFcnJvclV0aWxzXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhdWdodEVycm9yID0gbnVsbDtcblxuLyoqXG4gKiBDYWxsIGEgZnVuY3Rpb24gd2hpbGUgZ3VhcmRpbmcgYWdhaW5zdCBlcnJvcnMgdGhhdCBoYXBwZW5zIHdpdGhpbiBpdC5cbiAqXG4gKiBAcGFyYW0gez9TdHJpbmd9IG5hbWUgb2YgdGhlIGd1YXJkIHRvIHVzZSBmb3IgbG9nZ2luZyBvciBkZWJ1Z2dpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZVxuICogQHBhcmFtIHsqfSBhIEZpcnN0IGFyZ3VtZW50XG4gKiBAcGFyYW0geyp9IGIgU2Vjb25kIGFyZ3VtZW50XG4gKi9cbmZ1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFjayhuYW1lLCBmdW5jLCBhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZ1bmMoYSwgYik7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICBpZiAoY2F1Z2h0RXJyb3IgPT09IG51bGwpIHtcbiAgICAgIGNhdWdodEVycm9yID0geDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG52YXIgUmVhY3RFcnJvclV0aWxzID0ge1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2s6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcblxuICAvKipcbiAgICogSW52b2tlZCBieSBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZSBzbyB0aGF0IGFueSBlcnJvcnMgdGhyb3duIGJ5IHRoZSBldmVudFxuICAgKiBoYW5kbGVyIGFyZSBzdXJlIHRvIGJlIHJldGhyb3duIGJ5IHJldGhyb3dDYXVnaHRFcnJvci5cbiAgICovXG4gIGludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaDogaW52b2tlR3VhcmRlZENhbGxiYWNrLFxuXG4gIC8qKlxuICAgKiBEdXJpbmcgZXhlY3V0aW9uIG9mIGd1YXJkZWQgZnVuY3Rpb25zIHdlIHdpbGwgY2FwdHVyZSB0aGUgZmlyc3QgZXJyb3Igd2hpY2hcbiAgICogd2Ugd2lsbCByZXRocm93IHRvIGJlIGhhbmRsZWQgYnkgdGhlIHRvcCBsZXZlbCBlcnJvciBoYW5kbGVyLlxuICAgKi9cbiAgcmV0aHJvd0NhdWdodEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhdWdodEVycm9yKSB7XG4gICAgICB2YXIgZXJyb3IgPSBjYXVnaHRFcnJvcjtcbiAgICAgIGNhdWdodEVycm9yID0gbnVsbDtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLyoqXG4gICAqIFRvIGhlbHAgZGV2ZWxvcG1lbnQgd2UgY2FuIGdldCBiZXR0ZXIgZGV2dG9vbHMgaW50ZWdyYXRpb24gYnkgc2ltdWxhdGluZyBhXG4gICAqIHJlYWwgYnJvd3NlciBldmVudC5cbiAgICovXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRpc3BhdGNoRXZlbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZmFrZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdyZWFjdCcpO1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiAobmFtZSwgZnVuYywgYSwgYikge1xuICAgICAgdmFyIGJvdW5kRnVuYyA9IGZ1bmMuYmluZChudWxsLCBhLCBiKTtcbiAgICAgIHZhciBldnRUeXBlID0gJ3JlYWN0LScgKyBuYW1lO1xuICAgICAgZmFrZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBib3VuZEZ1bmMsIGZhbHNlKTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0RXZlbnQoZXZ0VHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgIGZha2VOb2RlLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgIGZha2VOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgYm91bmRGdW5jLCBmYWxzZSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlscztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRmNuSnZjbFYwYVd4ekxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1VtVmhZM1JGY25KdmNsVjBhV3h6WEc0Z0tpQkFkSGx3WldOb1pXTnJjMXh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUdOaGRXZG9kRVZ5Y205eUlEMGdiblZzYkR0Y2JseHVMeW9xWEc0Z0tpQkRZV3hzSUdFZ1puVnVZM1JwYjI0Z2QyaHBiR1VnWjNWaGNtUnBibWNnWVdkaGFXNXpkQ0JsY25KdmNuTWdkR2hoZENCb1lYQndaVzV6SUhkcGRHaHBiaUJwZEM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZXo5VGRISnBibWQ5SUc1aGJXVWdiMllnZEdobElHZDFZWEprSUhSdklIVnpaU0JtYjNJZ2JHOW5aMmx1WnlCdmNpQmtaV0oxWjJkcGJtZGNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHbHVkbTlyWlZ4dUlDb2dRSEJoY21GdElIc3FmU0JoSUVacGNuTjBJR0Z5WjNWdFpXNTBYRzRnS2lCQWNHRnlZVzBnZXlwOUlHSWdVMlZqYjI1a0lHRnlaM1Z0Wlc1MFhHNGdLaTljYm1aMWJtTjBhVzl1SUdsdWRtOXJaVWQxWVhKa1pXUkRZV3hzWW1GamF5aHVZVzFsTENCbWRXNWpMQ0JoTENCaUtTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTW9ZU3dnWWlrN1hHNGdJSDBnWTJGMFkyZ2dLSGdwSUh0Y2JpQWdJQ0JwWmlBb1kyRjFaMmgwUlhKeWIzSWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR05oZFdkb2RFVnljbTl5SUQwZ2VEdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ2ZWeHVmVnh1WEc1MllYSWdVbVZoWTNSRmNuSnZjbFYwYVd4eklEMGdlMXh1SUNCcGJuWnZhMlZIZFdGeVpHVmtRMkZzYkdKaFkyczZJR2x1ZG05clpVZDFZWEprWldSRFlXeHNZbUZqYXl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1MmIydGxaQ0JpZVNCU1pXRmpkRlJsYzNSVmRHbHNjeTVUYVcxMWJHRjBaU0J6YnlCMGFHRjBJR0Z1ZVNCbGNuSnZjbk1nZEdoeWIzZHVJR0o1SUhSb1pTQmxkbVZ1ZEZ4dUlDQWdLaUJvWVc1a2JHVnlJR0Z5WlNCemRYSmxJSFJ2SUdKbElISmxkR2h5YjNkdUlHSjVJSEpsZEdoeWIzZERZWFZuYUhSRmNuSnZjaTVjYmlBZ0lDb3ZYRzRnSUdsdWRtOXJaVWQxWVhKa1pXUkRZV3hzWW1GamExZHBkR2hEWVhSamFEb2dhVzUyYjJ0bFIzVmhjbVJsWkVOaGJHeGlZV05yTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJFZFhKcGJtY2daWGhsWTNWMGFXOXVJRzltSUdkMVlYSmtaV1FnWm5WdVkzUnBiMjV6SUhkbElIZHBiR3dnWTJGd2RIVnlaU0IwYUdVZ1ptbHljM1FnWlhKeWIzSWdkMmhwWTJoY2JpQWdJQ29nZDJVZ2QybHNiQ0J5WlhSb2NtOTNJSFJ2SUdKbElHaGhibVJzWldRZ1lua2dkR2hsSUhSdmNDQnNaWFpsYkNCbGNuSnZjaUJvWVc1a2JHVnlMbHh1SUNBZ0tpOWNiaUFnY21WMGFISnZkME5oZFdkb2RFVnljbTl5T2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2FXWWdLR05oZFdkb2RFVnljbTl5S1NCN1hHNGdJQ0FnSUNCMllYSWdaWEp5YjNJZ1BTQmpZWFZuYUhSRmNuSnZjanRjYmlBZ0lDQWdJR05oZFdkb2RFVnljbTl5SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSFJvY205M0lHVnljbTl5TzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dWFXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdMeW9xWEc0Z0lDQXFJRlJ2SUdobGJIQWdaR1YyWld4dmNHMWxiblFnZDJVZ1kyRnVJR2RsZENCaVpYUjBaWElnWkdWMmRHOXZiSE1nYVc1MFpXZHlZWFJwYjI0Z1lua2djMmx0ZFd4aGRHbHVaeUJoWEc0Z0lDQXFJSEpsWVd3Z1luSnZkM05sY2lCbGRtVnVkQzVjYmlBZ0lDb3ZYRzRnSUdsbUlDaDBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCMGVYQmxiMllnZDJsdVpHOTNMbVJwYzNCaGRHTm9SWFpsYm5RZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2RIbHdaVzltSUdSdlkzVnRaVzUwSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCMGVYQmxiMllnWkc5amRXMWxiblF1WTNKbFlYUmxSWFpsYm5RZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IyWVhJZ1ptRnJaVTV2WkdVZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkeVpXRmpkQ2NwTzF4dUlDQWdJRkpsWVdOMFJYSnliM0pWZEdsc2N5NXBiblp2YTJWSGRXRnlaR1ZrUTJGc2JHSmhZMnNnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU3dnWm5WdVl5d2dZU3dnWWlrZ2UxeHVJQ0FnSUNBZ2RtRnlJR0p2ZFc1a1JuVnVZeUE5SUdaMWJtTXVZbWx1WkNodWRXeHNMQ0JoTENCaUtUdGNiaUFnSUNBZ0lIWmhjaUJsZG5SVWVYQmxJRDBnSjNKbFlXTjBMU2NnS3lCdVlXMWxPMXh1SUNBZ0lDQWdabUZyWlU1dlpHVXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGxkblJVZVhCbExDQmliM1Z1WkVaMWJtTXNJR1poYkhObEtUdGNiaUFnSUNBZ0lIWmhjaUJsZG5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmRtVnVkQ2duUlhabGJuUW5LVHRjYmlBZ0lDQWdJR1YyZEM1cGJtbDBSWFpsYm5Rb1pYWjBWSGx3WlN3Z1ptRnNjMlVzSUdaaGJITmxLVHRjYmlBZ0lDQWdJR1poYTJWT2IyUmxMbVJwYzNCaGRHTm9SWFpsYm5Rb1pYWjBLVHRjYmlBZ0lDQWdJR1poYTJWT2IyUmxMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvWlhaMFZIbHdaU3dnWW05MWJtUkdkVzVqTENCbVlXeHpaU2s3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBSWEp5YjNKVmRHbHNjenNpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEV2ZW50RW1pdHRlck1peGluXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cykge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50cyk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbn1cblxudmFyIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIFN0cmVhbXMgYSBmaXJlZCB0b3AtbGV2ZWwgZXZlbnQgdG8gYEV2ZW50UGx1Z2luSHViYCB3aGVyZSBwbHVnaW5zIGhhdmUgdGhlXG4gICAqIG9wcG9ydHVuaXR5IHRvIGNyZWF0ZSBgUmVhY3RFdmVudGBzIHRvIGJlIGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBlbnZpcm9ubWVudCBldmVudC5cbiAgICovXG4gIGhhbmRsZVRvcExldmVsOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50cyA9IEV2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRFbWl0dGVyTWl4aW47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnZmJqcy9saWIvRXZlbnRMaXN0ZW5lcicpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZUhhbmRsZXMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xudmFyIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24nKTtcblxudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSA9IDExO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBwYXJlbnQgUmVhY3QgY29tcG9uZW50IG9mIGBub2RlYC5cbiAqXG4gKiBAcGFyYW0geyp9IG5vZGVcbiAqIEByZXR1cm4gez9ET01FdmVudFRhcmdldH0gUGFyZW50IGNvbnRhaW5lciwgb3IgYG51bGxgIGlmIHRoZSBzcGVjaWZpZWQgbm9kZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBub3QgbmVzdGVkLlxuICovXG5mdW5jdGlvbiBmaW5kUGFyZW50KG5vZGUpIHtcbiAgLy8gVE9ETzogSXQgbWF5IGJlIGEgZ29vZCBpZGVhIHRvIGNhY2hlIHRoaXMgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBET01cbiAgLy8gdHJhdmVyc2FsLCBidXQgY2FjaGluZyBpcyBkaWZmaWN1bHQgdG8gZG8gY29ycmVjdGx5IHdpdGhvdXQgdXNpbmcgYVxuICAvLyBtdXRhdGlvbiBvYnNlcnZlciB0byBsaXN0ZW4gZm9yIGFsbCBET00gY2hhbmdlcy5cbiAgdmFyIG5vZGVJRCA9IFJlYWN0TW91bnQuZ2V0SUQobm9kZSk7XG4gIHZhciByb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQobm9kZUlEKTtcbiAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQocm9vdElEKTtcbiAgdmFyIHBhcmVudCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShjb250YWluZXIpO1xuICByZXR1cm4gcGFyZW50O1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGFuY2VzdG9yIGhpZXJhcmNoeSBpbiB0b3AgbGV2ZWwgY2FsbGJhY2tcbmZ1bmN0aW9uIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHRoaXMudG9wTGV2ZWxUeXBlID0gdG9wTGV2ZWxUeXBlO1xuICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gIHRoaXMuYW5jZXN0b3JzID0gW107XG59XG5hc3NpZ24oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnByb3RvdHlwZSwge1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuYW5jZXN0b3JzLmxlbmd0aCA9IDA7XG4gIH1cbn0pO1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZywgUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbEltcGwoYm9va0tlZXBpbmcpIHtcbiAgLy8gVE9ETzogUmUtZW5hYmxlIGV2ZW50LnBhdGggaGFuZGxpbmdcbiAgLy9cbiAgLy8gaWYgKGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LnBhdGggJiYgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQucGF0aC5sZW5ndGggPiAxKSB7XG4gIC8vICAgLy8gTmV3IGJyb3dzZXJzIGhhdmUgYSBwYXRoIGF0dHJpYnV0ZSBvbiBuYXRpdmUgZXZlbnRzXG4gIC8vICAgaGFuZGxlVG9wTGV2ZWxXaXRoUGF0aChib29rS2VlcGluZyk7XG4gIC8vIH0gZWxzZSB7XG4gIC8vICAgLy8gTGVnYWN5IGJyb3dzZXJzIGRvbid0IGhhdmUgYSBwYXRoIGF0dHJpYnV0ZSBvbiBuYXRpdmUgZXZlbnRzXG4gIC8vICAgaGFuZGxlVG9wTGV2ZWxXaXRob3V0UGF0aChib29rS2VlcGluZyk7XG4gIC8vIH1cblxuICB2b2lkIGhhbmRsZVRvcExldmVsV2l0aFBhdGg7IC8vIHRlbXBvcmFyaWx5IHVudXNlZFxuICBoYW5kbGVUb3BMZXZlbFdpdGhvdXRQYXRoKGJvb2tLZWVwaW5nKTtcbn1cblxuLy8gTGVnYWN5IGJyb3dzZXJzIGRvbid0IGhhdmUgYSBwYXRoIGF0dHJpYnV0ZSBvbiBuYXRpdmUgZXZlbnRzXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbFdpdGhvdXRQYXRoKGJvb2tLZWVwaW5nKSB7XG4gIHZhciB0b3BMZXZlbFRhcmdldCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCkpIHx8IHdpbmRvdztcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdG9wTGV2ZWxUYXJnZXQ7XG4gIHdoaWxlIChhbmNlc3Rvcikge1xuICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICBhbmNlc3RvciA9IGZpbmRQYXJlbnQoYW5jZXN0b3IpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29rS2VlcGluZy5hbmNlc3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICB0b3BMZXZlbFRhcmdldCA9IGJvb2tLZWVwaW5nLmFuY2VzdG9yc1tpXTtcbiAgICB2YXIgdG9wTGV2ZWxUYXJnZXRJRCA9IFJlYWN0TW91bnQuZ2V0SUQodG9wTGV2ZWxUYXJnZXQpIHx8ICcnO1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwoYm9va0tlZXBpbmcudG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KSk7XG4gIH1cbn1cblxuLy8gTmV3IGJyb3dzZXJzIGhhdmUgYSBwYXRoIGF0dHJpYnV0ZSBvbiBuYXRpdmUgZXZlbnRzXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbFdpdGhQYXRoKGJvb2tLZWVwaW5nKSB7XG4gIHZhciBwYXRoID0gYm9va0tlZXBpbmcubmF0aXZlRXZlbnQucGF0aDtcbiAgdmFyIGN1cnJlbnROYXRpdmVUYXJnZXQgPSBwYXRoWzBdO1xuICB2YXIgZXZlbnRzRmlyZWQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY3VycmVudFBhdGhFbGVtZW50ID0gcGF0aFtpXTtcbiAgICBpZiAoY3VycmVudFBhdGhFbGVtZW50Lm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUpIHtcbiAgICAgIGN1cnJlbnROYXRpdmVUYXJnZXQgPSBwYXRoW2kgKyAxXTtcbiAgICB9XG4gICAgLy8gVE9ETzogc2xvd1xuICAgIHZhciByZWFjdFBhcmVudCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShjdXJyZW50UGF0aEVsZW1lbnQpO1xuICAgIGlmIChyZWFjdFBhcmVudCA9PT0gY3VycmVudFBhdGhFbGVtZW50KSB7XG4gICAgICB2YXIgY3VycmVudFBhdGhFbGVtZW50SUQgPSBSZWFjdE1vdW50LmdldElEKGN1cnJlbnRQYXRoRWxlbWVudCk7XG4gICAgICB2YXIgbmV3Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGN1cnJlbnRQYXRoRWxlbWVudElEKTtcbiAgICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGN1cnJlbnRQYXRoRWxlbWVudCk7XG5cbiAgICAgIHZhciB0b3BMZXZlbFRhcmdldElEID0gUmVhY3RNb3VudC5nZXRJRChjdXJyZW50UGF0aEVsZW1lbnQpIHx8ICcnO1xuICAgICAgZXZlbnRzRmlyZWQrKztcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwoYm9va0tlZXBpbmcudG9wTGV2ZWxUeXBlLCBjdXJyZW50UGF0aEVsZW1lbnQsIHRvcExldmVsVGFyZ2V0SUQsIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LCBjdXJyZW50TmF0aXZlVGFyZ2V0KTtcblxuICAgICAgLy8gSnVtcCB0byB0aGUgcm9vdCBvZiB0aGlzIFJlYWN0IHJlbmRlciB0cmVlXG4gICAgICB3aGlsZSAoY3VycmVudFBhdGhFbGVtZW50SUQgIT09IG5ld1Jvb3RJRCkge1xuICAgICAgICBpKys7XG4gICAgICAgIGN1cnJlbnRQYXRoRWxlbWVudCA9IHBhdGhbaV07XG4gICAgICAgIGN1cnJlbnRQYXRoRWxlbWVudElEID0gUmVhY3RNb3VudC5nZXRJRChjdXJyZW50UGF0aEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZXZlbnRzRmlyZWQgPT09IDApIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSwgd2luZG93LCAnJywgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2Nyb2xsVmFsdWVNb25pdG9yKGNiKSB7XG4gIHZhciBzY3JvbGxQb3NpdGlvbiA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHdpbmRvdyk7XG4gIGNiKHNjcm9sbFBvc2l0aW9uKTtcbn1cblxudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHtcbiAgX2VuYWJsZWQ6IHRydWUsXG4gIF9oYW5kbGVUb3BMZXZlbDogbnVsbCxcblxuICBXSU5ET1dfSEFORExFOiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyB3aW5kb3cgOiBudWxsLFxuXG4gIHNldEhhbmRsZVRvcExldmVsOiBmdW5jdGlvbiAoaGFuZGxlVG9wTGV2ZWwpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsID0gaGFuZGxlVG9wTGV2ZWw7XG4gIH0sXG5cbiAgc2V0RW5hYmxlZDogZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG4gIH0sXG5cbiAgaXNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZDtcbiAgfSxcblxuICAvKipcbiAgICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7P29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHZhciBlbGVtZW50ID0gaGFuZGxlO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyLmxpc3RlbihlbGVtZW50LCBoYW5kbGVyQmFzZU5hbWUsIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIGEgdG9wLWxldmVsIGV2ZW50IGJ5IHVzaW5nIGV2ZW50IGNhcHR1cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7P29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5jYXB0dXJlKGVsZW1lbnQsIGhhbmRsZXJCYXNlTmFtZSwgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpKTtcbiAgfSxcblxuICBtb25pdG9yU2Nyb2xsVmFsdWU6IGZ1bmN0aW9uIChyZWZyZXNoKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gc2Nyb2xsVmFsdWVNb25pdG9yLmJpbmQobnVsbCwgcmVmcmVzaCk7XG4gICAgRXZlbnRMaXN0ZW5lci5saXN0ZW4od2luZG93LCAnc2Nyb2xsJywgY2FsbGJhY2spO1xuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKCFSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYm9va0tlZXBpbmcgPSBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcuZ2V0UG9vbGVkKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICAgIHRyeSB7XG4gICAgICAvLyBFdmVudCBxdWV1ZSBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIHNhbWUgY3ljbGUgYWxsb3dzXG4gICAgICAvLyBgcHJldmVudERlZmF1bHRgLlxuICAgICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGhhbmRsZVRvcExldmVsSW1wbCwgYm9va0tlZXBpbmcpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucmVsZWFzZShib29rS2VlcGluZyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRMaXN0ZW5lcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbmplY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5IdWInKTtcbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoJy4vUmVhY3RDbGFzcycpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RW1wdHlDb21wb25lbnQnKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdE5hdGl2ZUNvbXBvbmVudCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG52YXIgUmVhY3RSb290SW5kZXggPSByZXF1aXJlKCcuL1JlYWN0Um9vdEluZGV4Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIFJlYWN0SW5qZWN0aW9uID0ge1xuICBDb21wb25lbnQ6IFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuaW5qZWN0aW9uLFxuICBDbGFzczogUmVhY3RDbGFzcy5pbmplY3Rpb24sXG4gIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG4gIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbixcbiAgRXZlbnRFbWl0dGVyOiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaW5qZWN0aW9uLFxuICBOYXRpdmVDb21wb25lbnQ6IFJlYWN0TmF0aXZlQ29tcG9uZW50LmluamVjdGlvbixcbiAgUGVyZjogUmVhY3RQZXJmLmluamVjdGlvbixcbiAgUm9vdEluZGV4OiBSZWFjdFJvb3RJbmRleC5pbmplY3Rpb24sXG4gIFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5pbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbmplY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5wdXRTZWxlY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3Rpb24nKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2NvbnRhaW5zTm9kZScpO1xudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2ZvY3VzTm9kZScpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG5cbmZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBjb250YWluc05vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cblxuLyoqXG4gKiBAUmVhY3RJbnB1dFNlbGVjdGlvbjogUmVhY3QgaW5wdXQgc2VsZWN0aW9uIG1vZHVsZS4gQmFzZWQgb24gU2VsZWN0aW9uLmpzLFxuICogYnV0IG1vZGlmaWVkIHRvIGJlIHN1aXRhYmxlIGZvciByZWFjdCBhbmQgaGFzIGEgY291cGxlIG9mIGJ1ZyBmaXhlcyAoZG9lc24ndFxuICogYXNzdW1lIGJ1dHRvbnMgaGF2ZSByYW5nZSBzZWxlY3Rpb25zIGFsbG93ZWQpLlxuICogSW5wdXQgc2VsZWN0aW9uIG1vZHVsZSBmb3IgUmVhY3QuXG4gKi9cbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0ge1xuXG4gIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogZnVuY3Rpb24gKGVsZW0pIHtcbiAgICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBub2RlTmFtZSAmJiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAndGV4dCcgfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScgfHwgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyk7XG4gIH0sXG5cbiAgZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICAgIHNlbGVjdGlvblJhbmdlOiBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhmb2N1c2VkRWxlbSkgPyBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihmb2N1c2VkRWxlbSkgOiBudWxsXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHJlc3RvcmVTZWxlY3Rpb246IElmIGFueSBzZWxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIHBvdGVudGlhbGx5IGxvc3QsXG4gICAqIHJlc3RvcmUgaXQuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcGVyZm9ybWluZyBvcGVyYXRpb25zIHRoYXQgY291bGQgcmVtb3ZlIGRvbVxuICAgKiBub2RlcyBhbmQgcGxhY2UgdGhlbSBiYWNrIGluLCByZXN1bHRpbmcgaW4gZm9jdXMgYmVpbmcgbG9zdC5cbiAgICovXG4gIHJlc3RvcmVTZWxlY3Rpb246IGZ1bmN0aW9uIChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSB7XG4gICAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIHZhciBwcmlvckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbTtcbiAgICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG4gICAgaWYgKGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmIGlzSW5Eb2N1bWVudChwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgaWYgKFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKHByaW9yRm9jdXNlZEVsZW0pKSB7XG4gICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKHByaW9yRm9jdXNlZEVsZW0sIHByaW9yU2VsZWN0aW9uUmFuZ2UpO1xuICAgICAgfVxuICAgICAgZm9jdXNOb2RlKHByaW9yRm9jdXNlZEVsZW0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGdldFNlbGVjdGlvbjogR2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIGZvY3VzZWQgdGV4dGFyZWEsIGlucHV0IG9yXG4gICAqIGNvbnRlbnRFZGl0YWJsZSBub2RlLlxuICAgKiAtQGlucHV0OiBMb29rIHVwIHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dFxuICAgKiAtQHJldHVybiB7c3RhcnQ6IHNlbGVjdGlvblN0YXJ0LCBlbmQ6IHNlbGVjdGlvbkVuZH1cbiAgICovXG4gIGdldFNlbGVjdGlvbjogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIHNlbGVjdGlvbjtcblxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICAvLyBNb2Rlcm4gYnJvd3NlciB3aXRoIGlucHV0IG9yIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICBzdGFydDogaW5wdXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIGVuZDogaW5wdXQuc2VsZWN0aW9uRW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIChpbnB1dC5ub2RlTmFtZSAmJiBpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSkge1xuICAgICAgLy8gSUU4IGlucHV0LlxuICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAvLyBUaGVyZSBjYW4gb25seSBiZSBvbmUgc2VsZWN0aW9uIHBlciBkb2N1bWVudCBpbiBJRSwgc28gaXQgbXVzdFxuICAgICAgLy8gYmUgaW4gb3VyIGVsZW1lbnQuXG4gICAgICBpZiAocmFuZ2UucGFyZW50RWxlbWVudCgpID09PSBpbnB1dCkge1xuICAgICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgICAgc3RhcnQ6IC1yYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpLFxuICAgICAgICAgIGVuZDogLXJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQgZWRpdGFibGUgb3Igb2xkIElFIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0gUmVhY3RET01TZWxlY3Rpb24uZ2V0T2Zmc2V0cyhpbnB1dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHNldFNlbGVjdGlvbjogU2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIHRleHRhcmVhIG9yIGlucHV0IGFuZCBmb2N1c2VzXG4gICAqIHRoZSBpbnB1dC5cbiAgICogLUBpbnB1dCAgICAgU2V0IHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dCBvciB0ZXh0YXJlYVxuICAgKiAtQG9mZnNldHMgICBPYmplY3Qgb2Ygc2FtZSBmb3JtIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSBnZXQqXG4gICAqL1xuICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChpbnB1dCwgb2Zmc2V0cykge1xuICAgIHZhciBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgdmFyIGVuZCA9IG9mZnNldHMuZW5kO1xuICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgKGlucHV0Lm5vZGVOYW1lICYmIGlucHV0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBzdGFydCk7XG4gICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RET01TZWxlY3Rpb24uc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5wdXRTZWxlY3Rpb247IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEluc3RhbmNlSGFuZGxlc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoJy4vUmVhY3RSb290SW5kZXgnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgU0VQQVJBVE9SID0gJy4nO1xudmFyIFNFUEFSQVRPUl9MRU5HVEggPSBTRVBBUkFUT1IubGVuZ3RoO1xuXG4vKipcbiAqIE1heGltdW0gZGVwdGggb2YgdHJhdmVyc2FscyBiZWZvcmUgd2UgY29uc2lkZXIgdGhlIHBvc3NpYmlsaXR5IG9mIGEgYmFkIElELlxuICovXG52YXIgTUFYX1RSRUVfREVQVEggPSAxMDAwMDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgRE9NIElEIHByZWZpeCB0byB1c2Ugd2hlbiBtb3VudGluZyBSZWFjdCBjb21wb25lbnRzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBBIHVuaXF1ZSBpbnRlZ2VyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFJlYWN0IHJvb3QgSUQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290SURTdHJpbmcoaW5kZXgpIHtcbiAgcmV0dXJuIFNFUEFSQVRPUiArIGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBjaGFyYWN0ZXIgaW4gdGhlIHN1cHBsaWVkIElEIGlzIGEgc2VwYXJhdG9yIG9yIHRoZSBlbmQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QgRE9NIElELlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IG9mIHRoZSBjaGFyYWN0ZXIgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjaGFyYWN0ZXIgaXMgYSBzZXBhcmF0b3Igb3IgZW5kIG9mIHRoZSBJRC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzQm91bmRhcnkoaWQsIGluZGV4KSB7XG4gIHJldHVybiBpZC5jaGFyQXQoaW5kZXgpID09PSBTRVBBUkFUT1IgfHwgaW5kZXggPT09IGlkLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHN1cHBsaWVkIHN0cmluZyBpcyBhIHZhbGlkIFJlYWN0IERPTSBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQSBSZWFjdCBET00gSUQsIG1heWJlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3RyaW5nIGlzIGEgdmFsaWQgUmVhY3QgRE9NIElELlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZElEKGlkKSB7XG4gIHJldHVybiBpZCA9PT0gJycgfHwgaWQuY2hhckF0KDApID09PSBTRVBBUkFUT1IgJiYgaWQuY2hhckF0KGlkLmxlbmd0aCAtIDEpICE9PSBTRVBBUkFUT1I7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBmaXJzdCBJRCBpcyBhbiBhbmNlc3RvciBvZiBvciBlcXVhbCB0byB0aGUgc2Vjb25kIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbmNlc3RvcklEXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVzY2VuZGFudElEXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBhbmNlc3RvcklEYCBpcyBhbiBhbmNlc3RvciBvZiBgZGVzY2VuZGFudElEYC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc0FuY2VzdG9ySURPZihhbmNlc3RvcklELCBkZXNjZW5kYW50SUQpIHtcbiAgcmV0dXJuIGRlc2NlbmRhbnRJRC5pbmRleE9mKGFuY2VzdG9ySUQpID09PSAwICYmIGlzQm91bmRhcnkoZGVzY2VuZGFudElELCBhbmNlc3RvcklELmxlbmd0aCk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgcGFyZW50IElEIG9mIHRoZSBzdXBwbGllZCBSZWFjdCBET00gSUQsIGBpZGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGEgY29tcG9uZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgcGFyZW50LCBvciBhbiBlbXB0eSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnRJRChpZCkge1xuICByZXR1cm4gaWQgPyBpZC5zdWJzdHIoMCwgaWQubGFzdEluZGV4T2YoU0VQQVJBVE9SKSkgOiAnJztcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IERPTSBJRCBvbiB0aGUgdHJlZSBwYXRoIGZyb20gdGhlIHN1cHBsaWVkIGBhbmNlc3RvcklEYCB0byB0aGVcbiAqIHN1cHBsaWVkIGBkZXN0aW5hdGlvbklEYC4gSWYgdGhleSBhcmUgZXF1YWwsIHRoZSBJRCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYW5jZXN0b3JJRCBJRCBvZiBhbiBhbmNlc3RvciBub2RlIG9mIGBkZXN0aW5hdGlvbklEYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXN0aW5hdGlvbklEIElEIG9mIHRoZSBkZXN0aW5hdGlvbiBub2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBOZXh0IElEIG9uIHRoZSBwYXRoIGZyb20gYGFuY2VzdG9ySURgIHRvIGBkZXN0aW5hdGlvbklEYC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldE5leHREZXNjZW5kYW50SUQoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkge1xuICAhKGlzVmFsaWRJRChhbmNlc3RvcklEKSAmJiBpc1ZhbGlkSUQoZGVzdGluYXRpb25JRCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldE5leHREZXNjZW5kYW50SUQoJXMsICVzKTogUmVjZWl2ZWQgYW4gaW52YWxpZCBSZWFjdCBET00gSUQuJywgYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAhaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0TmV4dERlc2NlbmRhbnRJRCguLi4pOiBSZWFjdCBoYXMgbWFkZSBhbiBpbnZhbGlkIGFzc3VtcHRpb24gYWJvdXQgJyArICd0aGUgRE9NIGhpZXJhcmNoeS4gRXhwZWN0ZWQgYCVzYCB0byBiZSBhbiBhbmNlc3RvciBvZiBgJXNgLicsIGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKGFuY2VzdG9ySUQgPT09IGRlc3RpbmF0aW9uSUQpIHtcbiAgICByZXR1cm4gYW5jZXN0b3JJRDtcbiAgfVxuICAvLyBTa2lwIG92ZXIgdGhlIGFuY2VzdG9yIGFuZCB0aGUgaW1tZWRpYXRlIHNlcGFyYXRvci4gVHJhdmVyc2UgdW50aWwgd2UgaGl0XG4gIC8vIGFub3RoZXIgc2VwYXJhdG9yIG9yIHdlIHJlYWNoIHRoZSBlbmQgb2YgYGRlc3RpbmF0aW9uSURgLlxuICB2YXIgc3RhcnQgPSBhbmNlc3RvcklELmxlbmd0aCArIFNFUEFSQVRPUl9MRU5HVEg7XG4gIHZhciBpO1xuICBmb3IgKGkgPSBzdGFydDsgaSA8IGRlc3RpbmF0aW9uSUQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXNCb3VuZGFyeShkZXN0aW5hdGlvbklELCBpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvbklELnN1YnN0cigwLCBpKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCBvZiB0d28gSURzLlxuICpcbiAqIFVzaW5nIHRoaXMgSUQgc2NoZW1lLCB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQgaXMgdGhlIGxvbmdlc3QgY29tbW9uXG4gKiBwcmVmaXggb2YgdGhlIHR3byBJRHMgdGhhdCBpbW1lZGlhdGVseSBwcmVjZWRlZCBhIFwibWFya2VyXCIgaW4gYm90aCBzdHJpbmdzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbmVJRFxuICogQHBhcmFtIHtzdHJpbmd9IHR3b0lEXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElELCBvciB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vbmUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQob25lSUQsIHR3b0lEKSB7XG4gIHZhciBtaW5MZW5ndGggPSBNYXRoLm1pbihvbmVJRC5sZW5ndGgsIHR3b0lELmxlbmd0aCk7XG4gIGlmIChtaW5MZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGxhc3RDb21tb25NYXJrZXJJbmRleCA9IDA7XG4gIC8vIFVzZSBgPD1gIHRvIHRyYXZlcnNlIHVudGlsIHRoZSBcIkVPTFwiIG9mIHRoZSBzaG9ydGVyIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbWluTGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXNCb3VuZGFyeShvbmVJRCwgaSkgJiYgaXNCb3VuZGFyeSh0d29JRCwgaSkpIHtcbiAgICAgIGxhc3RDb21tb25NYXJrZXJJbmRleCA9IGk7XG4gICAgfSBlbHNlIGlmIChvbmVJRC5jaGFyQXQoaSkgIT09IHR3b0lELmNoYXJBdChpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBsb25nZXN0Q29tbW9uSUQgPSBvbmVJRC5zdWJzdHIoMCwgbGFzdENvbW1vbk1hcmtlckluZGV4KTtcbiAgIWlzVmFsaWRJRChsb25nZXN0Q29tbW9uSUQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCglcywgJXMpOiBFeHBlY3RlZCBhIHZhbGlkIFJlYWN0IERPTSBJRDogJXMnLCBvbmVJRCwgdHdvSUQsIGxvbmdlc3RDb21tb25JRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbG9uZ2VzdENvbW1vbklEO1xufVxuXG4vKipcbiAqIFRyYXZlcnNlcyB0aGUgcGFyZW50IHBhdGggYmV0d2VlbiB0d28gSURzIChlaXRoZXIgdXAgb3IgZG93bikuIFRoZSBJRHMgbXVzdFxuICogbm90IGJlIHRoZSBzYW1lLCBhbmQgdGhlcmUgbXVzdCBleGlzdCBhIHBhcmVudCBwYXRoIGJldHdlZW4gdGhlbS4gSWYgdGhlXG4gKiBjYWxsYmFjayByZXR1cm5zIGBmYWxzZWAsIHRyYXZlcnNhbCBpcyBzdG9wcGVkLlxuICpcbiAqIEBwYXJhbSB7P3N0cmluZ30gc3RhcnQgSUQgYXQgd2hpY2ggdG8gc3RhcnQgdHJhdmVyc2FsLlxuICogQHBhcmFtIHs/c3RyaW5nfSBzdG9wIElEIGF0IHdoaWNoIHRvIGVuZCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2UgZWFjaCBJRCB3aXRoLlxuICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gc2tpcEZpcnN0IFdoZXRoZXIgb3Igbm90IHRvIHNraXAgdGhlIGZpcnN0IG5vZGUuXG4gKiBAcGFyYW0gez9ib29sZWFufSBza2lwTGFzdCBXaGV0aGVyIG9yIG5vdCB0byBza2lwIHRoZSBsYXN0IG5vZGUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZVBhcmVudFBhdGgoc3RhcnQsIHN0b3AsIGNiLCBhcmcsIHNraXBGaXJzdCwgc2tpcExhc3QpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAnJztcbiAgc3RvcCA9IHN0b3AgfHwgJyc7XG4gICEoc3RhcnQgIT09IHN0b3ApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RyYXZlcnNlUGFyZW50UGF0aCguLi4pOiBDYW5ub3QgdHJhdmVyc2UgZnJvbSBhbmQgdG8gdGhlIHNhbWUgSUQsIGAlc2AuJywgc3RhcnQpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgdmFyIHRyYXZlcnNlVXAgPSBpc0FuY2VzdG9ySURPZihzdG9wLCBzdGFydCk7XG4gICEodHJhdmVyc2VVcCB8fCBpc0FuY2VzdG9ySURPZihzdGFydCwgc3RvcCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RyYXZlcnNlUGFyZW50UGF0aCglcywgJXMsIC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIHR3byBJRHMgdGhhdCBkbyAnICsgJ25vdCBoYXZlIGEgcGFyZW50IHBhdGguJywgc3RhcnQsIHN0b3ApIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgLy8gVHJhdmVyc2UgZnJvbSBgc3RhcnRgIHRvIGBzdG9wYCBvbmUgZGVwdGggYXQgYSB0aW1lLlxuICB2YXIgZGVwdGggPSAwO1xuICB2YXIgdHJhdmVyc2UgPSB0cmF2ZXJzZVVwID8gZ2V0UGFyZW50SUQgOiBnZXROZXh0RGVzY2VuZGFudElEO1xuICBmb3IgKHZhciBpZCA9IHN0YXJ0OzsgLyogdW50aWwgYnJlYWsgKi9pZCA9IHRyYXZlcnNlKGlkLCBzdG9wKSkge1xuICAgIHZhciByZXQ7XG4gICAgaWYgKCghc2tpcEZpcnN0IHx8IGlkICE9PSBzdGFydCkgJiYgKCFza2lwTGFzdCB8fCBpZCAhPT0gc3RvcCkpIHtcbiAgICAgIHJldCA9IGNiKGlkLCB0cmF2ZXJzZVVwLCBhcmcpO1xuICAgIH1cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCBpZCA9PT0gc3RvcCkge1xuICAgICAgLy8gT25seSBicmVhayAvL2FmdGVyLy8gdmlzaXRpbmcgYHN0b3BgLlxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICEoZGVwdGgrKyA8IE1BWF9UUkVFX0RFUFRIKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0cmF2ZXJzZVBhcmVudFBhdGgoJXMsICVzLCAuLi4pOiBEZXRlY3RlZCBhbiBpbmZpbml0ZSBsb29wIHdoaWxlICcgKyAndHJhdmVyc2luZyB0aGUgUmVhY3QgRE9NIElEIHRyZWUuIFRoaXMgbWF5IGJlIGR1ZSB0byBtYWxmb3JtZWQgSURzOiAlcycsIHN0YXJ0LCBzdG9wLCBpZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogTWFuYWdlcyB0aGUgSURzIGFzc2lnbmVkIHRvIERPTSByZXByZXNlbnRhdGlvbnMgb2YgUmVhY3QgY29tcG9uZW50cy4gVGhpc1xuICogdXNlcyBhIHNwZWNpZmljIHNjaGVtZSBpbiBvcmRlciB0byB0cmF2ZXJzZSB0aGUgRE9NIGVmZmljaWVudGx5IChlLmcuIGluXG4gKiBvcmRlciB0byBzaW11bGF0ZSBldmVudHMpLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBSZWFjdCByb290IElEXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWFjdCByb290IElELlxuICAgKi9cbiAgY3JlYXRlUmVhY3RSb290SUQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0UmVhY3RSb290SURTdHJpbmcoUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXgoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBSZWFjdCBJRCBieSBqb2luaW5nIGEgcm9vdCBJRCB3aXRoIGEgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBSb290IElEIG9mIGEgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBjb21wb25lbnQncyBuYW1lIChhcyBmbGF0dGVuZWQgY2hpbGRyZW4pLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVhY3QgSUQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY3JlYXRlUmVhY3RJRDogZnVuY3Rpb24gKHJvb3RJRCwgbmFtZSkge1xuICAgIHJldHVybiByb290SUQgKyBuYW1lO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBET00gSUQgb2YgdGhlIFJlYWN0IGNvbXBvbmVudCB0aGF0IGlzIHRoZSByb290IG9mIHRoZSB0cmVlIHRoYXRcbiAgICogY29udGFpbnMgdGhlIFJlYWN0IGNvbXBvbmVudCB3aXRoIHRoZSBzdXBwbGllZCBET00gSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBET00gSUQgb2YgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IERPTSBJRCBvZiB0aGUgUmVhY3QgY29tcG9uZW50IHRoYXQgaXMgdGhlIHJvb3QuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZiAoaWQgJiYgaWQuY2hhckF0KDApID09PSBTRVBBUkFUT1IgJiYgaWQubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIGluZGV4ID0gaWQuaW5kZXhPZihTRVBBUkFUT1IsIDEpO1xuICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpZC5zdWJzdHIoMCwgaW5kZXgpIDogaWQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdGhlIElEIGhpZXJhcmNoeSBhbmQgaW52b2tlcyB0aGUgc3VwcGxpZWQgYGNiYCBvbiBhbnkgSURzIHRoYXRcbiAgICogc2hvdWxkIHdvdWxkIHJlY2VpdmUgYSBgbW91c2VFbnRlcmAgb3IgYG1vdXNlTGVhdmVgIGV2ZW50LlxuICAgKlxuICAgKiBOT1RFOiBEb2VzIG5vdCBpbnZva2UgdGhlIGNhbGxiYWNrIG9uIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBiZWNhdXNlXG4gICAqIG5vdGhpbmcgXCJlbnRlcmVkXCIgb3IgXCJsZWZ0XCIgdGhhdCBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGVhdmVJRCBJRCBiZWluZyBsZWZ0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZW50ZXJJRCBJRCBiZWluZyBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2Ugb24gZWFjaCBlbnRlcmVkL2xlZnQgSUQuXG4gICAqIEBwYXJhbSB7Kn0gdXBBcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIG9uIGxlZnQgSURzLlxuICAgKiBAcGFyYW0geyp9IGRvd25BcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIG9uIGVudGVyZWQgSURzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlRW50ZXJMZWF2ZTogZnVuY3Rpb24gKGxlYXZlSUQsIGVudGVySUQsIGNiLCB1cEFyZywgZG93bkFyZykge1xuICAgIHZhciBhbmNlc3RvcklEID0gZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKGxlYXZlSUQsIGVudGVySUQpO1xuICAgIGlmIChhbmNlc3RvcklEICE9PSBsZWF2ZUlEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgobGVhdmVJRCwgYW5jZXN0b3JJRCwgY2IsIHVwQXJnLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChhbmNlc3RvcklEICE9PSBlbnRlcklEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgoYW5jZXN0b3JJRCwgZW50ZXJJRCwgY2IsIGRvd25BcmcsIHRydWUsIGZhbHNlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNpbXVsYXRlcyB0aGUgdHJhdmVyc2FsIG9mIGEgdHdvLXBoYXNlLCBjYXB0dXJlL2J1YmJsZSBldmVudCBkaXNwYXRjaC5cbiAgICpcbiAgICogTk9URTogVGhpcyB0cmF2ZXJzYWwgaGFwcGVucyBvbiBJRHMgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIHRhcmdldCBub2RlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gYXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZVR3b1BoYXNlOiBmdW5jdGlvbiAodGFyZ2V0SUQsIGNiLCBhcmcpIHtcbiAgICBpZiAodGFyZ2V0SUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aCgnJywgdGFyZ2V0SUQsIGNiLCBhcmcsIHRydWUsIGZhbHNlKTtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aCh0YXJnZXRJRCwgJycsIGNiLCBhcmcsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgYHRyYXZlcnNlVHdvUGhhc2VgIGJ1dCBza2lwcyB0aGUgYHRhcmdldElEYC5cbiAgICovXG4gIHRyYXZlcnNlVHdvUGhhc2VTa2lwVGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0SUQsIGNiLCBhcmcpIHtcbiAgICBpZiAodGFyZ2V0SUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aCgnJywgdGFyZ2V0SUQsIGNiLCBhcmcsIHRydWUsIHRydWUpO1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKHRhcmdldElELCAnJywgY2IsIGFyZywgdHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZSBhIG5vZGUgSUQsIGNhbGxpbmcgdGhlIHN1cHBsaWVkIGBjYmAgZm9yIGVhY2ggYW5jZXN0b3IgSUQuIEZvclxuICAgKiBleGFtcGxlLCBwYXNzaW5nIGAuMC4kcm93LTAuMWAgd291bGQgcmVzdWx0IGluIGBjYmAgZ2V0dGluZyBjYWxsZWRcbiAgICogd2l0aCBgLjBgLCBgLjAuJHJvdy0wYCwgYW5kIGAuMC4kcm93LTAuMWAuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgdHJhdmVyc2FsIGhhcHBlbnMgb24gSURzIHdpdGhvdXQgdG91Y2hpbmcgdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldElEIElEIG9mIHRoZSB0YXJnZXQgbm9kZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IGFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGguXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhdmVyc2VBbmNlc3RvcnM6IGZ1bmN0aW9uICh0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIHRyYXZlcnNlUGFyZW50UGF0aCgnJywgdGFyZ2V0SUQsIGNiLCBhcmcsIHRydWUsIGZhbHNlKTtcbiAgfSxcblxuICBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQ6IGdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE5leHREZXNjZW5kYW50SUQ6IGdldE5leHREZXNjZW5kYW50SUQsXG5cbiAgaXNBbmNlc3RvcklET2Y6IGlzQW5jZXN0b3JJRE9mLFxuXG4gIFNFUEFSQVRPUjogU0VQQVJBVE9SXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnN0YW5jZUhhbmRsZXM7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkpibk4wWVc1alpVaGhibVJzWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCU1pXRmpkRWx1YzNSaGJtTmxTR0Z1Wkd4bGMxeHVJQ29nUUhSNWNHVmphR1ZqYTNNZ2MzUmhkR2xqTFc5dWJIbGNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJTWldGamRGSnZiM1JKYm1SbGVDQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUlNiMjkwU1c1a1pYZ25LVHRjYmx4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDJsdWRtRnlhV0Z1ZENjcE8xeHVYRzUyWVhJZ1UwVlFRVkpCVkU5U0lEMGdKeTRuTzF4dWRtRnlJRk5GVUVGU1FWUlBVbDlNUlU1SFZFZ2dQU0JUUlZCQlVrRlVUMUl1YkdWdVozUm9PMXh1WEc0dktpcGNiaUFxSUUxaGVHbHRkVzBnWkdWd2RHZ2diMllnZEhKaGRtVnljMkZzY3lCaVpXWnZjbVVnZDJVZ1kyOXVjMmxrWlhJZ2RHaGxJSEJ2YzNOcFltbHNhWFI1SUc5bUlHRWdZbUZrSUVsRUxseHVJQ292WEc1MllYSWdUVUZZWDFSU1JVVmZSRVZRVkVnZ1BTQXhNREF3TUR0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdSRTlOSUVsRUlIQnlaV1pwZUNCMGJ5QjFjMlVnZDJobGJpQnRiM1Z1ZEdsdVp5QlNaV0ZqZENCamIyMXdiMjVsYm5SekxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCcGJtUmxlQ0JCSUhWdWFYRjFaU0JwYm5SbFoyVnlYRzRnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUZKbFlXTjBJSEp2YjNRZ1NVUXVYRzRnS2lCQWFXNTBaWEp1WVd4Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFVtVmhZM1JTYjI5MFNVUlRkSEpwYm1jb2FXNWtaWGdwSUh0Y2JpQWdjbVYwZFhKdUlGTkZVRUZTUVZSUFVpQXJJR2x1WkdWNExuUnZVM1J5YVc1bktETTJLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdZU0JqYUdGeVlXTjBaWElnYVc0Z2RHaGxJSE4xY0hCc2FXVmtJRWxFSUdseklHRWdjMlZ3WVhKaGRHOXlJRzl5SUhSb1pTQmxibVF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2xrSUVFZ1VtVmhZM1FnUkU5TklFbEVMbHh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdsdVpHVjRJRWx1WkdWNElHOW1JSFJvWlNCamFHRnlZV04wWlhJZ2RHOGdZMmhsWTJzdVhHNGdLaUJBY21WMGRYSnVJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JSFJvWlNCamFHRnlZV04wWlhJZ2FYTWdZU0J6WlhCaGNtRjBiM0lnYjNJZ1pXNWtJRzltSUhSb1pTQkpSQzVjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdselFtOTFibVJoY25rb2FXUXNJR2x1WkdWNEtTQjdYRzRnSUhKbGRIVnliaUJwWkM1amFHRnlRWFFvYVc1a1pYZ3BJRDA5UFNCVFJWQkJVa0ZVVDFJZ2ZId2dhVzVrWlhnZ1BUMDlJR2xrTG14bGJtZDBhRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdkR2hsSUhOMWNIQnNhV1ZrSUhOMGNtbHVaeUJwY3lCaElIWmhiR2xrSUZKbFlXTjBJRVJQVFNCSlJDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2FXUWdRU0JTWldGamRDQkVUMDBnU1VRc0lHMWhlV0psTGx4dUlDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQjBhR1VnYzNSeWFXNW5JR2x6SUdFZ2RtRnNhV1FnVW1WaFkzUWdSRTlOSUVsRUxseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5XWVd4cFpFbEVLR2xrS1NCN1hHNGdJSEpsZEhWeWJpQnBaQ0E5UFQwZ0p5Y2dmSHdnYVdRdVkyaGhja0YwS0RBcElEMDlQU0JUUlZCQlVrRlVUMUlnSmlZZ2FXUXVZMmhoY2tGMEtHbGtMbXhsYm1kMGFDQXRJREVwSUNFOVBTQlRSVkJCVWtGVVQxSTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnR6SUdsbUlIUm9aU0JtYVhKemRDQkpSQ0JwY3lCaGJpQmhibU5sYzNSdmNpQnZaaUJ2Y2lCbGNYVmhiQ0IwYnlCMGFHVWdjMlZqYjI1a0lFbEVMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibU5sYzNSdmNrbEVYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWkdWelkyVnVaR0Z1ZEVsRVhHNGdLaUJBY21WMGRYSnVJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JR0JoYm1ObGMzUnZja2xFWUNCcGN5QmhiaUJoYm1ObGMzUnZjaUJ2WmlCZ1pHVnpZMlZ1WkdGdWRFbEVZQzVjYmlBcUlFQnBiblJsY201aGJGeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMwRnVZMlZ6ZEc5eVNVUlBaaWhoYm1ObGMzUnZja2xFTENCa1pYTmpaVzVrWVc1MFNVUXBJSHRjYmlBZ2NtVjBkWEp1SUdSbGMyTmxibVJoYm5SSlJDNXBibVJsZUU5bUtHRnVZMlZ6ZEc5eVNVUXBJRDA5UFNBd0lDWW1JR2x6UW05MWJtUmhjbmtvWkdWelkyVnVaR0Z1ZEVsRUxDQmhibU5sYzNSdmNrbEVMbXhsYm1kMGFDazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1IyVjBjeUIwYUdVZ2NHRnlaVzUwSUVsRUlHOW1JSFJvWlNCemRYQndiR2xsWkNCU1pXRmpkQ0JFVDAwZ1NVUXNJR0JwWkdBdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdsa0lFbEVJRzltSUdFZ1kyOXRjRzl1Wlc1MExseHVJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JKUkNCdlppQjBhR1VnY0dGeVpXNTBMQ0J2Y2lCaGJpQmxiWEIwZVNCemRISnBibWN1WEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUlFZWEpsYm5SSlJDaHBaQ2tnZTF4dUlDQnlaWFIxY200Z2FXUWdQeUJwWkM1emRXSnpkSElvTUN3Z2FXUXViR0Z6ZEVsdVpHVjRUMllvVTBWUVFWSkJWRTlTS1NrZ09pQW5KenRjYm4xY2JseHVMeW9xWEc0Z0tpQkhaWFJ6SUhSb1pTQnVaWGgwSUVSUFRTQkpSQ0J2YmlCMGFHVWdkSEpsWlNCd1lYUm9JR1p5YjIwZ2RHaGxJSE4xY0hCc2FXVmtJR0JoYm1ObGMzUnZja2xFWUNCMGJ5QjBhR1ZjYmlBcUlITjFjSEJzYVdWa0lHQmtaWE4wYVc1aGRHbHZia2xFWUM0Z1NXWWdkR2hsZVNCaGNtVWdaWEYxWVd3c0lIUm9aU0JKUkNCcGN5QnlaWFIxY201bFpDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1lXNWpaWE4wYjNKSlJDQkpSQ0J2WmlCaGJpQmhibU5sYzNSdmNpQnViMlJsSUc5bUlHQmtaWE4wYVc1aGRHbHZia2xFWUM1Y2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmtaWE4wYVc1aGRHbHZia2xFSUVsRUlHOW1JSFJvWlNCa1pYTjBhVzVoZEdsdmJpQnViMlJsTGx4dUlDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQk9aWGgwSUVsRUlHOXVJSFJvWlNCd1lYUm9JR1p5YjIwZ1lHRnVZMlZ6ZEc5eVNVUmdJSFJ2SUdCa1pYTjBhVzVoZEdsdmJrbEVZQzVjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdkbGRFNWxlSFJFWlhOalpXNWtZVzUwU1VRb1lXNWpaWE4wYjNKSlJDd2daR1Z6ZEdsdVlYUnBiMjVKUkNrZ2UxeHVJQ0FoS0dselZtRnNhV1JKUkNoaGJtTmxjM1J2Y2tsRUtTQW1KaUJwYzFaaGJHbGtTVVFvWkdWemRHbHVZWFJwYjI1SlJDa3BJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oyZGxkRTVsZUhSRVpYTmpaVzVrWVc1MFNVUW9KWE1zSUNWektUb2dVbVZqWldsMlpXUWdZVzRnYVc1MllXeHBaQ0JTWldGamRDQkVUMDBnU1VRdUp5d2dZVzVqWlhOMGIzSkpSQ3dnWkdWemRHbHVZWFJwYjI1SlJDa2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWhhWE5CYm1ObGMzUnZja2xFVDJZb1lXNWpaWE4wYjNKSlJDd2daR1Z6ZEdsdVlYUnBiMjVKUkNrZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuWjJWMFRtVjRkRVJsYzJObGJtUmhiblJKUkNndUxpNHBPaUJTWldGamRDQm9ZWE1nYldGa1pTQmhiaUJwYm5aaGJHbGtJR0Z6YzNWdGNIUnBiMjRnWVdKdmRYUWdKeUFySUNkMGFHVWdSRTlOSUdocFpYSmhjbU5vZVM0Z1JYaHdaV04wWldRZ1lDVnpZQ0IwYnlCaVpTQmhiaUJoYm1ObGMzUnZjaUJ2WmlCZ0pYTmdMaWNzSUdGdVkyVnpkRzl5U1VRc0lHUmxjM1JwYm1GMGFXOXVTVVFwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnYVdZZ0tHRnVZMlZ6ZEc5eVNVUWdQVDA5SUdSbGMzUnBibUYwYVc5dVNVUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1lXNWpaWE4wYjNKSlJEdGNiaUFnZlZ4dUlDQXZMeUJUYTJsd0lHOTJaWElnZEdobElHRnVZMlZ6ZEc5eUlHRnVaQ0IwYUdVZ2FXMXRaV1JwWVhSbElITmxjR0Z5WVhSdmNpNGdWSEpoZG1WeWMyVWdkVzUwYVd3Z2QyVWdhR2wwWEc0Z0lDOHZJR0Z1YjNSb1pYSWdjMlZ3WVhKaGRHOXlJRzl5SUhkbElISmxZV05vSUhSb1pTQmxibVFnYjJZZ1lHUmxjM1JwYm1GMGFXOXVTVVJnTGx4dUlDQjJZWElnYzNSaGNuUWdQU0JoYm1ObGMzUnZja2xFTG14bGJtZDBhQ0FySUZORlVFRlNRVlJQVWw5TVJVNUhWRWc3WEc0Z0lIWmhjaUJwTzF4dUlDQm1iM0lnS0drZ1BTQnpkR0Z5ZERzZ2FTQThJR1JsYzNScGJtRjBhVzl1U1VRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvYVhOQ2IzVnVaR0Z5ZVNoa1pYTjBhVzVoZEdsdmJrbEVMQ0JwS1NrZ2UxeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmtaWE4wYVc1aGRHbHZia2xFTG5OMVluTjBjaWd3TENCcEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCSFpYUnpJSFJvWlNCdVpXRnlaWE4wSUdOdmJXMXZiaUJoYm1ObGMzUnZjaUJKUkNCdlppQjBkMjhnU1VSekxseHVJQ3BjYmlBcUlGVnphVzVuSUhSb2FYTWdTVVFnYzJOb1pXMWxMQ0IwYUdVZ2JtVmhjbVZ6ZENCamIyMXRiMjRnWVc1alpYTjBiM0lnU1VRZ2FYTWdkR2hsSUd4dmJtZGxjM1FnWTI5dGJXOXVYRzRnS2lCd2NtVm1hWGdnYjJZZ2RHaGxJSFIzYnlCSlJITWdkR2hoZENCcGJXMWxaR2xoZEdWc2VTQndjbVZqWldSbFpDQmhJRndpYldGeWEyVnlYQ0lnYVc0Z1ltOTBhQ0J6ZEhKcGJtZHpMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnZibVZKUkZ4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUjNiMGxFWEc0Z0tpQkFjbVYwZFhKdUlIdHpkSEpwYm1kOUlFNWxZWEpsYzNRZ1kyOXRiVzl1SUdGdVkyVnpkRzl5SUVsRUxDQnZjaUIwYUdVZ1pXMXdkSGtnYzNSeWFXNW5JR2xtSUc1dmJtVXVYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJuWlhSR2FYSnpkRU52YlcxdmJrRnVZMlZ6ZEc5eVNVUW9iMjVsU1VRc0lIUjNiMGxFS1NCN1hHNGdJSFpoY2lCdGFXNU1aVzVuZEdnZ1BTQk5ZWFJvTG0xcGJpaHZibVZKUkM1c1pXNW5kR2dzSUhSM2IwbEVMbXhsYm1kMGFDazdYRzRnSUdsbUlDaHRhVzVNWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNCeVpYUjFjbTRnSnljN1hHNGdJSDFjYmlBZ2RtRnlJR3hoYzNSRGIyMXRiMjVOWVhKclpYSkpibVJsZUNBOUlEQTdYRzRnSUM4dklGVnpaU0JnUEQxZ0lIUnZJSFJ5WVhabGNuTmxJSFZ1ZEdsc0lIUm9aU0JjSWtWUFRGd2lJRzltSUhSb1pTQnphRzl5ZEdWeUlITjBjbWx1Wnk1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQRDBnYldsdVRHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvYVhOQ2IzVnVaR0Z5ZVNodmJtVkpSQ3dnYVNrZ0ppWWdhWE5DYjNWdVpHRnllU2gwZDI5SlJDd2dhU2twSUh0Y2JpQWdJQ0FnSUd4aGMzUkRiMjF0YjI1TllYSnJaWEpKYm1SbGVDQTlJR2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h2Ym1WSlJDNWphR0Z5UVhRb2FTa2dJVDA5SUhSM2IwbEVMbU5vWVhKQmRDaHBLU2tnZTF4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIWmhjaUJzYjI1blpYTjBRMjl0Ylc5dVNVUWdQU0J2Ym1WSlJDNXpkV0p6ZEhJb01Dd2diR0Z6ZEVOdmJXMXZiazFoY210bGNrbHVaR1Y0S1R0Y2JpQWdJV2x6Vm1Gc2FXUkpSQ2hzYjI1blpYTjBRMjl0Ylc5dVNVUXBJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oyZGxkRVpwY25OMFEyOXRiVzl1UVc1alpYTjBiM0pKUkNnbGN5d2dKWE1wT2lCRmVIQmxZM1JsWkNCaElIWmhiR2xrSUZKbFlXTjBJRVJQVFNCSlJEb2dKWE1uTENCdmJtVkpSQ3dnZEhkdlNVUXNJR3h2Ym1kbGMzUkRiMjF0YjI1SlJDa2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQnlaWFIxY200Z2JHOXVaMlZ6ZEVOdmJXMXZia2xFTzF4dWZWeHVYRzR2S2lwY2JpQXFJRlJ5WVhabGNuTmxjeUIwYUdVZ2NHRnlaVzUwSUhCaGRHZ2dZbVYwZDJWbGJpQjBkMjhnU1VSeklDaGxhWFJvWlhJZ2RYQWdiM0lnWkc5M2Jpa3VJRlJvWlNCSlJITWdiWFZ6ZEZ4dUlDb2dibTkwSUdKbElIUm9aU0J6WVcxbExDQmhibVFnZEdobGNtVWdiWFZ6ZENCbGVHbHpkQ0JoSUhCaGNtVnVkQ0J3WVhSb0lHSmxkSGRsWlc0Z2RHaGxiUzRnU1dZZ2RHaGxYRzRnS2lCallXeHNZbUZqYXlCeVpYUjFjbTV6SUdCbVlXeHpaV0FzSUhSeVlYWmxjbk5oYkNCcGN5QnpkRzl3Y0dWa0xseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1AzTjBjbWx1WjMwZ2MzUmhjblFnU1VRZ1lYUWdkMmhwWTJnZ2RHOGdjM1JoY25RZ2RISmhkbVZ5YzJGc0xseHVJQ29nUUhCaGNtRnRJSHMvYzNSeWFXNW5mU0J6ZEc5d0lFbEVJR0YwSUhkb2FXTm9JSFJ2SUdWdVpDQjBjbUYyWlhKellXd3VYRzRnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCallpQkRZV3hzWW1GamF5QjBieUJwYm5admEyVWdaV0ZqYUNCSlJDQjNhWFJvTGx4dUlDb2dRSEJoY21GdElIc3FmU0JoY21jZ1FYSm5kVzFsYm5RZ2RHOGdhVzUyYjJ0bElIUm9aU0JqWVd4c1ltRmpheUIzYVhSb0xseHVJQ29nUUhCaGNtRnRJSHMvWW05dmJHVmhibjBnYzJ0cGNFWnBjbk4wSUZkb1pYUm9aWElnYjNJZ2JtOTBJSFJ2SUhOcmFYQWdkR2hsSUdacGNuTjBJRzV2WkdVdVhHNGdLaUJBY0dGeVlXMGdlejlpYjI5c1pXRnVmU0J6YTJsd1RHRnpkQ0JYYUdWMGFHVnlJRzl5SUc1dmRDQjBieUJ6YTJsd0lIUm9aU0JzWVhOMElHNXZaR1V1WEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ292WEc1bWRXNWpkR2x2YmlCMGNtRjJaWEp6WlZCaGNtVnVkRkJoZEdnb2MzUmhjblFzSUhOMGIzQXNJR05pTENCaGNtY3NJSE5yYVhCR2FYSnpkQ3dnYzJ0cGNFeGhjM1FwSUh0Y2JpQWdjM1JoY25RZ1BTQnpkR0Z5ZENCOGZDQW5KenRjYmlBZ2MzUnZjQ0E5SUhOMGIzQWdmSHdnSnljN1hHNGdJQ0VvYzNSaGNuUWdJVDA5SUhOMGIzQXBJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0ozUnlZWFpsY25ObFVHRnlaVzUwVUdGMGFDZ3VMaTRwT2lCRFlXNXViM1FnZEhKaGRtVnljMlVnWm5KdmJTQmhibVFnZEc4Z2RHaGxJSE5oYldVZ1NVUXNJR0FsYzJBdUp5d2djM1JoY25RcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ2RtRnlJSFJ5WVhabGNuTmxWWEFnUFNCcGMwRnVZMlZ6ZEc5eVNVUlBaaWh6ZEc5d0xDQnpkR0Z5ZENrN1hHNGdJQ0VvZEhKaGRtVnljMlZWY0NCOGZDQnBjMEZ1WTJWemRHOXlTVVJQWmloemRHRnlkQ3dnYzNSdmNDa3BJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0ozUnlZWFpsY25ObFVHRnlaVzUwVUdGMGFDZ2xjeXdnSlhNc0lDNHVMaWs2SUVOaGJtNXZkQ0IwY21GMlpYSnpaU0JtY205dElIUjNieUJKUkhNZ2RHaGhkQ0JrYnlBbklDc2dKMjV2ZENCb1lYWmxJR0VnY0dGeVpXNTBJSEJoZEdndUp5d2djM1JoY25Rc0lITjBiM0FwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnTHk4Z1ZISmhkbVZ5YzJVZ1puSnZiU0JnYzNSaGNuUmdJSFJ2SUdCemRHOXdZQ0J2Ym1VZ1pHVndkR2dnWVhRZ1lTQjBhVzFsTGx4dUlDQjJZWElnWkdWd2RHZ2dQU0F3TzF4dUlDQjJZWElnZEhKaGRtVnljMlVnUFNCMGNtRjJaWEp6WlZWd0lEOGdaMlYwVUdGeVpXNTBTVVFnT2lCblpYUk9aWGgwUkdWelkyVnVaR0Z1ZEVsRU8xeHVJQ0JtYjNJZ0tIWmhjaUJwWkNBOUlITjBZWEowT3pzZ0x5b2dkVzUwYVd3Z1luSmxZV3NnS2k5cFpDQTlJSFJ5WVhabGNuTmxLR2xrTENCemRHOXdLU2tnZTF4dUlDQWdJSFpoY2lCeVpYUTdYRzRnSUNBZ2FXWWdLQ2doYzJ0cGNFWnBjbk4wSUh4OElHbGtJQ0U5UFNCemRHRnlkQ2tnSmlZZ0tDRnphMmx3VEdGemRDQjhmQ0JwWkNBaFBUMGdjM1J2Y0NrcElIdGNiaUFnSUNBZ0lISmxkQ0E5SUdOaUtHbGtMQ0IwY21GMlpYSnpaVlZ3TENCaGNtY3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jbVYwSUQwOVBTQm1ZV3h6WlNCOGZDQnBaQ0E5UFQwZ2MzUnZjQ2tnZTF4dUlDQWdJQ0FnTHk4Z1QyNXNlU0JpY21WaGF5QXZMMkZtZEdWeUx5OGdkbWx6YVhScGJtY2dZSE4wYjNCZ0xseHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1SUNBZ0lDRW9aR1Z3ZEdnckt5QThJRTFCV0Y5VVVrVkZYMFJGVUZSSUtTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkMGNtRjJaWEp6WlZCaGNtVnVkRkJoZEdnb0pYTXNJQ1Z6TENBdUxpNHBPaUJFWlhSbFkzUmxaQ0JoYmlCcGJtWnBibWwwWlNCc2IyOXdJSGRvYVd4bElDY2dLeUFuZEhKaGRtVnljMmx1WnlCMGFHVWdVbVZoWTNRZ1JFOU5JRWxFSUhSeVpXVXVJRlJvYVhNZ2JXRjVJR0psSUdSMVpTQjBieUJ0WVd4bWIzSnRaV1FnU1VSek9pQWxjeWNzSUhOMFlYSjBMQ0J6ZEc5d0xDQnBaQ2tnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dUV0Z1WVdkbGN5QjBhR1VnU1VSeklHRnpjMmxuYm1Wa0lIUnZJRVJQVFNCeVpYQnlaWE5sYm5SaGRHbHZibk1nYjJZZ1VtVmhZM1FnWTI5dGNHOXVaVzUwY3k0Z1ZHaHBjMXh1SUNvZ2RYTmxjeUJoSUhOd1pXTnBabWxqSUhOamFHVnRaU0JwYmlCdmNtUmxjaUIwYnlCMGNtRjJaWEp6WlNCMGFHVWdSRTlOSUdWbVptbGphV1Z1ZEd4NUlDaGxMbWN1SUdsdVhHNGdLaUJ2Y21SbGNpQjBieUJ6YVcxMWJHRjBaU0JsZG1WdWRITXBMbHh1SUNwY2JpQXFJRUJwYm5SbGNtNWhiRnh1SUNvdlhHNTJZWElnVW1WaFkzUkpibk4wWVc1alpVaGhibVJzWlhNZ1BTQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnZibk4wY25WamRITWdZU0JTWldGamRDQnliMjkwSUVsRVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTNOMGNtbHVaMzBnUVNCU1pXRmpkQ0J5YjI5MElFbEVMbHh1SUNBZ0tpOWNiaUFnWTNKbFlYUmxVbVZoWTNSU2IyOTBTVVE2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCeVpYUjFjbTRnWjJWMFVtVmhZM1JTYjI5MFNVUlRkSEpwYm1jb1VtVmhZM1JTYjI5MFNXNWtaWGd1WTNKbFlYUmxVbVZoWTNSU2IyOTBTVzVrWlhnb0tTazdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOdmJuTjBjblZqZEhNZ1lTQlNaV0ZqZENCSlJDQmllU0JxYjJsdWFXNW5JR0VnY205dmRDQkpSQ0IzYVhSb0lHRWdibUZ0WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISnZiM1JKUkNCU2IyOTBJRWxFSUc5bUlHRWdjR0Z5Wlc1MElHTnZiWEJ2Ym1WdWRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVWdRU0JqYjIxd2IyNWxiblFuY3lCdVlXMWxJQ2hoY3lCbWJHRjBkR1Z1WldRZ1kyaHBiR1J5Wlc0cExseHVJQ0FnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUVFZ1VtVmhZM1FnU1VRdVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ1kzSmxZWFJsVW1WaFkzUkpSRG9nWm5WdVkzUnBiMjRnS0hKdmIzUkpSQ3dnYm1GdFpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCeWIyOTBTVVFnS3lCdVlXMWxPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSFpYUnpJSFJvWlNCRVQwMGdTVVFnYjJZZ2RHaGxJRkpsWVdOMElHTnZiWEJ2Ym1WdWRDQjBhR0YwSUdseklIUm9aU0J5YjI5MElHOW1JSFJvWlNCMGNtVmxJSFJvWVhSY2JpQWdJQ29nWTI5dWRHRnBibk1nZEdobElGSmxZV04wSUdOdmJYQnZibVZ1ZENCM2FYUm9JSFJvWlNCemRYQndiR2xsWkNCRVQwMGdTVVF1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQkVUMDBnU1VRZ2IyWWdZU0JTWldGamRDQmpiMjF3YjI1bGJuUXVYRzRnSUNBcUlFQnlaWFIxY200Z2V6OXpkSEpwYm1kOUlFUlBUU0JKUkNCdlppQjBhR1VnVW1WaFkzUWdZMjl0Y0c5dVpXNTBJSFJvWVhRZ2FYTWdkR2hsSUhKdmIzUXVYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdaMlYwVW1WaFkzUlNiMjkwU1VSR2NtOXRUbTlrWlVsRU9pQm1kVzVqZEdsdmJpQW9hV1FwSUh0Y2JpQWdJQ0JwWmlBb2FXUWdKaVlnYVdRdVkyaGhja0YwS0RBcElEMDlQU0JUUlZCQlVrRlVUMUlnSmlZZ2FXUXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnZG1GeUlHbHVaR1Y0SUQwZ2FXUXVhVzVrWlhoUFppaFRSVkJCVWtGVVQxSXNJREVwTzF4dUlDQWdJQ0FnY21WMGRYSnVJR2x1WkdWNElENGdMVEVnUHlCcFpDNXpkV0p6ZEhJb01Dd2dhVzVrWlhncElEb2dhV1E3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWNtRjJaWEp6WlhNZ2RHaGxJRWxFSUdocFpYSmhjbU5vZVNCaGJtUWdhVzUyYjJ0bGN5QjBhR1VnYzNWd2NHeHBaV1FnWUdOaVlDQnZiaUJoYm5rZ1NVUnpJSFJvWVhSY2JpQWdJQ29nYzJodmRXeGtJSGR2ZFd4a0lISmxZMlZwZG1VZ1lTQmdiVzkxYzJWRmJuUmxjbUFnYjNJZ1lHMXZkWE5sVEdWaGRtVmdJR1YyWlc1MExseHVJQ0FnS2x4dUlDQWdLaUJPVDFSRk9pQkViMlZ6SUc1dmRDQnBiblp2YTJVZ2RHaGxJR05oYkd4aVlXTnJJRzl1SUhSb1pTQnVaV0Z5WlhOMElHTnZiVzF2YmlCaGJtTmxjM1J2Y2lCaVpXTmhkWE5sWEc0Z0lDQXFJRzV2ZEdocGJtY2dYQ0psYm5SbGNtVmtYQ0lnYjNJZ1hDSnNaV1owWENJZ2RHaGhkQ0JsYkdWdFpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYkdWaGRtVkpSQ0JKUkNCaVpXbHVaeUJzWldaMExseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWlc1MFpYSkpSQ0JKUkNCaVpXbHVaeUJsYm5SbGNtVmtMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQmpZaUJEWVd4c1ltRmpheUIwYnlCcGJuWnZhMlVnYjI0Z1pXRmphQ0JsYm5SbGNtVmtMMnhsWm5RZ1NVUXVYRzRnSUNBcUlFQndZWEpoYlNCN0tuMGdkWEJCY21jZ1FYSm5kVzFsYm5RZ2RHOGdhVzUyYjJ0bElIUm9aU0JqWVd4c1ltRmpheUIzYVhSb0lHOXVJR3hsWm5RZ1NVUnpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJR1J2ZDI1QmNtY2dRWEpuZFcxbGJuUWdkRzhnYVc1MmIydGxJSFJvWlNCallXeHNZbUZqYXlCM2FYUm9JRzl1SUdWdWRHVnlaV1FnU1VSekxseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lIUnlZWFpsY25ObFJXNTBaWEpNWldGMlpUb2dablZ1WTNScGIyNGdLR3hsWVhabFNVUXNJR1Z1ZEdWeVNVUXNJR05pTENCMWNFRnlaeXdnWkc5M2JrRnlaeWtnZTF4dUlDQWdJSFpoY2lCaGJtTmxjM1J2Y2tsRUlEMGdaMlYwUm1seWMzUkRiMjF0YjI1QmJtTmxjM1J2Y2tsRUtHeGxZWFpsU1VRc0lHVnVkR1Z5U1VRcE8xeHVJQ0FnSUdsbUlDaGhibU5sYzNSdmNrbEVJQ0U5UFNCc1pXRjJaVWxFS1NCN1hHNGdJQ0FnSUNCMGNtRjJaWEp6WlZCaGNtVnVkRkJoZEdnb2JHVmhkbVZKUkN3Z1lXNWpaWE4wYjNKSlJDd2dZMklzSUhWd1FYSm5MQ0JtWVd4elpTd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoaGJtTmxjM1J2Y2tsRUlDRTlQU0JsYm5SbGNrbEVLU0I3WEc0Z0lDQWdJQ0IwY21GMlpYSnpaVkJoY21WdWRGQmhkR2dvWVc1alpYTjBiM0pKUkN3Z1pXNTBaWEpKUkN3Z1kySXNJR1J2ZDI1QmNtY3NJSFJ5ZFdVc0lHWmhiSE5sS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTnBiWFZzWVhSbGN5QjBhR1VnZEhKaGRtVnljMkZzSUc5bUlHRWdkSGR2TFhCb1lYTmxMQ0JqWVhCMGRYSmxMMkoxWW1Kc1pTQmxkbVZ1ZENCa2FYTndZWFJqYUM1Y2JpQWdJQ3BjYmlBZ0lDb2dUazlVUlRvZ1ZHaHBjeUIwY21GMlpYSnpZV3dnYUdGd2NHVnVjeUJ2YmlCSlJITWdkMmwwYUc5MWRDQjBiM1ZqYUdsdVp5QjBhR1VnUkU5TkxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkR0Z5WjJWMFNVUWdTVVFnYjJZZ2RHaGxJSFJoY21kbGRDQnViMlJsTGx4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JqWWlCRFlXeHNZbUZqYXlCMGJ5QnBiblp2YTJVdVhHNGdJQ0FxSUVCd1lYSmhiU0I3S24wZ1lYSm5JRUZ5WjNWdFpXNTBJSFJ2SUdsdWRtOXJaU0IwYUdVZ1kyRnNiR0poWTJzZ2QybDBhQzVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0IwY21GMlpYSnpaVlIzYjFCb1lYTmxPaUJtZFc1amRHbHZiaUFvZEdGeVoyVjBTVVFzSUdOaUxDQmhjbWNwSUh0Y2JpQWdJQ0JwWmlBb2RHRnlaMlYwU1VRcElIdGNiaUFnSUNBZ0lIUnlZWFpsY25ObFVHRnlaVzUwVUdGMGFDZ25KeXdnZEdGeVoyVjBTVVFzSUdOaUxDQmhjbWNzSUhSeWRXVXNJR1poYkhObEtUdGNiaUFnSUNBZ0lIUnlZWFpsY25ObFVHRnlaVzUwVUdGMGFDaDBZWEpuWlhSSlJDd2dKeWNzSUdOaUxDQmhjbWNzSUdaaGJITmxMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5oYldVZ1lYTWdZSFJ5WVhabGNuTmxWSGR2VUdoaGMyVmdJR0oxZENCemEybHdjeUIwYUdVZ1lIUmhjbWRsZEVsRVlDNWNiaUFnSUNvdlhHNGdJSFJ5WVhabGNuTmxWSGR2VUdoaGMyVlRhMmx3VkdGeVoyVjBPaUJtZFc1amRHbHZiaUFvZEdGeVoyVjBTVVFzSUdOaUxDQmhjbWNwSUh0Y2JpQWdJQ0JwWmlBb2RHRnlaMlYwU1VRcElIdGNiaUFnSUNBZ0lIUnlZWFpsY25ObFVHRnlaVzUwVUdGMGFDZ25KeXdnZEdGeVoyVjBTVVFzSUdOaUxDQmhjbWNzSUhSeWRXVXNJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ2RISmhkbVZ5YzJWUVlYSmxiblJRWVhSb0tIUmhjbWRsZEVsRUxDQW5KeXdnWTJJc0lHRnlaeXdnZEhKMVpTd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVjbUYyWlhKelpTQmhJRzV2WkdVZ1NVUXNJR05oYkd4cGJtY2dkR2hsSUhOMWNIQnNhV1ZrSUdCalltQWdabTl5SUdWaFkyZ2dZVzVqWlhOMGIzSWdTVVF1SUVadmNseHVJQ0FnS2lCbGVHRnRjR3hsTENCd1lYTnphVzVuSUdBdU1DNGtjbTkzTFRBdU1XQWdkMjkxYkdRZ2NtVnpkV3gwSUdsdUlHQmpZbUFnWjJWMGRHbHVaeUJqWVd4c1pXUmNiaUFnSUNvZ2QybDBhQ0JnTGpCZ0xDQmdMakF1SkhKdmR5MHdZQ3dnWVc1a0lHQXVNQzRrY205M0xUQXVNV0F1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUZSb2FYTWdkSEpoZG1WeWMyRnNJR2hoY0hCbGJuTWdiMjRnU1VSeklIZHBkR2h2ZFhRZ2RHOTFZMmhwYm1jZ2RHaGxJRVJQVFM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUmhjbWRsZEVsRUlFbEVJRzltSUhSb1pTQjBZWEpuWlhRZ2JtOWtaUzVjYmlBZ0lDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdZMklnUTJGc2JHSmhZMnNnZEc4Z2FXNTJiMnRsTGx4dUlDQWdLaUJBY0dGeVlXMGdleXA5SUdGeVp5QkJjbWQxYldWdWRDQjBieUJwYm5admEyVWdkR2hsSUdOaGJHeGlZV05ySUhkcGRHZ3VYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdkSEpoZG1WeWMyVkJibU5sYzNSdmNuTTZJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUkpSQ3dnWTJJc0lHRnlaeWtnZTF4dUlDQWdJSFJ5WVhabGNuTmxVR0Z5Wlc1MFVHRjBhQ2duSnl3Z2RHRnlaMlYwU1VRc0lHTmlMQ0JoY21jc0lIUnlkV1VzSUdaaGJITmxLVHRjYmlBZ2ZTeGNibHh1SUNCblpYUkdhWEp6ZEVOdmJXMXZia0Z1WTJWemRHOXlTVVE2SUdkbGRFWnBjbk4wUTI5dGJXOXVRVzVqWlhOMGIzSkpSQ3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSWGh3YjNObFpDQm1iM0lnZFc1cGRDQjBaWE4wYVc1bkxseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gyZGxkRTVsZUhSRVpYTmpaVzVrWVc1MFNVUTZJR2RsZEU1bGVIUkVaWE5qWlc1a1lXNTBTVVFzWEc1Y2JpQWdhWE5CYm1ObGMzUnZja2xFVDJZNklHbHpRVzVqWlhOMGIzSkpSRTltTEZ4dVhHNGdJRk5GVUVGU1FWUlBVam9nVTBWUVFWSkJWRTlTWEc1Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFkzUkpibk4wWVc1alpVaGhibVJzWlhNN0lsMTkiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZU1hcFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgUmVhY3RJbnN0YW5jZU1hcGAgbWFpbnRhaW5zIGEgbWFwcGluZyBmcm9tIGEgcHVibGljIGZhY2luZyBzdGF0ZWZ1bFxuICogaW5zdGFuY2UgKGtleSkgYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAodmFsdWUpLiBUaGlzIGFsbG93cyBwdWJsaWNcbiAqIG1ldGhvZHMgdG8gYWNjZXB0IHRoZSB1c2VyIGZhY2luZyBpbnN0YW5jZSBhcyBhbiBhcmd1bWVudCBhbmQgbWFwIHRoZW0gYmFja1xuICogdG8gaW50ZXJuYWwgbWV0aG9kcy5cbiAqL1xuXG4vLyBUT0RPOiBSZXBsYWNlIHRoaXMgd2l0aCBFUzY6IHZhciBSZWFjdEluc3RhbmNlTWFwID0gbmV3IE1hcCgpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSB7XG5cbiAgLyoqXG4gICAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgYGRlbGV0ZWAgYnV0IHdlJ2QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWx3YXlzXG4gICAqIHRyYW5zZm9ybSB0aGVzZSB0byBzdHJpbmdzIGZvciBJRSBzdXBwb3J0LiBXaGVuIHRoaXMgdHJhbnNmb3JtIGlzIGZ1bGx5XG4gICAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlO1xuICB9LFxuXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAhPT0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHZhbHVlO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnN0YW5jZU1hcDsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SXNvbW9ycGhpY1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRyZW4nKTtcbnZhciBSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnQnKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZSgnLi9SZWFjdENsYXNzJyk7XG52YXIgUmVhY3RET01GYWN0b3JpZXMgPSByZXF1aXJlKCcuL1JlYWN0RE9NRmFjdG9yaWVzJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFZhbGlkYXRvcicpO1xudmFyIFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlcycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKCcuL29ubHlDaGlsZCcpO1xuXG52YXIgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50O1xudmFyIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeTtcbnZhciBjbG9uZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQ7XG4gIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbiAgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNsb25lRWxlbWVudDtcbn1cblxudmFyIFJlYWN0ID0ge1xuXG4gIC8vIE1vZGVyblxuXG4gIENoaWxkcmVuOiB7XG4gICAgbWFwOiBSZWFjdENoaWxkcmVuLm1hcCxcbiAgICBmb3JFYWNoOiBSZWFjdENoaWxkcmVuLmZvckVhY2gsXG4gICAgY291bnQ6IFJlYWN0Q2hpbGRyZW4uY291bnQsXG4gICAgdG9BcnJheTogUmVhY3RDaGlsZHJlbi50b0FycmF5LFxuICAgIG9ubHk6IG9ubHlDaGlsZFxuICB9LFxuXG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnQsXG5cbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgY2xvbmVFbGVtZW50OiBjbG9uZUVsZW1lbnQsXG4gIGlzVmFsaWRFbGVtZW50OiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQsXG5cbiAgLy8gQ2xhc3NpY1xuXG4gIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gIGNyZWF0ZUNsYXNzOiBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzLFxuICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5LFxuICBjcmVhdGVNaXhpbjogZnVuY3Rpb24gKG1peGluKSB7XG4gICAgLy8gQ3VycmVudGx5IGEgbm9vcC4gV2lsbCBiZSB1c2VkIHRvIHZhbGlkYXRlIGFuZCB0cmFjZSBtaXhpbnMuXG4gICAgcmV0dXJuIG1peGluO1xuICB9LFxuXG4gIC8vIFRoaXMgbG9va3MgRE9NIHNwZWNpZmljIGJ1dCB0aGVzZSBhcmUgYWN0dWFsbHkgaXNvbW9ycGhpYyBoZWxwZXJzXG4gIC8vIHNpbmNlIHRoZXkgYXJlIGp1c3QgZ2VuZXJhdGluZyBET00gc3RyaW5ncy5cbiAgRE9NOiBSZWFjdERPTUZhY3RvcmllcyxcblxuICB2ZXJzaW9uOiBSZWFjdFZlcnNpb24sXG5cbiAgLy8gSG9vayBmb3IgSlNYIHNwcmVhZCwgZG9uJ3QgdXNlIHRoaXMgZm9yIGFueXRoaW5nIGVsc2UuXG4gIF9fc3ByZWFkOiBhc3NpZ25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkpjMjl0YjNKd2FHbGpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnVW1WaFkzUkpjMjl0YjNKd2FHbGpYRzRnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnVW1WaFkzUkRhR2xzWkhKbGJpQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUkRhR2xzWkhKbGJpY3BPMXh1ZG1GeUlGSmxZV04wUTI5dGNHOXVaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVOdmJYQnZibVZ1ZENjcE8xeHVkbUZ5SUZKbFlXTjBRMnhoYzNNZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFEyeGhjM01uS1R0Y2JuWmhjaUJTWldGamRFUlBUVVpoWTNSdmNtbGxjeUE5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JFVDAxR1lXTjBiM0pwWlhNbktUdGNiblpoY2lCU1pXRmpkRVZzWlcxbGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBSV3hsYldWdWRDY3BPMXh1ZG1GeUlGSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjaUE5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JGYkdWdFpXNTBWbUZzYVdSaGRHOXlKeWs3WEc1MllYSWdVbVZoWTNSUWNtOXdWSGx3WlhNZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFVISnZjRlI1Y0dWekp5azdYRzUyWVhJZ1VtVmhZM1JXWlhKemFXOXVJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRlpsY25OcGIyNG5LVHRjYmx4dWRtRnlJR0Z6YzJsbmJpQTlJSEpsY1hWcGNtVW9KeTR2VDJKcVpXTjBMbUZ6YzJsbmJpY3BPMXh1ZG1GeUlHOXViSGxEYUdsc1pDQTlJSEpsY1hWcGNtVW9KeTR2YjI1c2VVTm9hV3hrSnlrN1hHNWNiblpoY2lCamNtVmhkR1ZGYkdWdFpXNTBJRDBnVW1WaFkzUkZiR1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblE3WEc1MllYSWdZM0psWVhSbFJtRmpkRzl5ZVNBOUlGSmxZV04wUld4bGJXVnVkQzVqY21WaGRHVkdZV04wYjNKNU8xeHVkbUZ5SUdOc2IyNWxSV3hsYldWdWRDQTlJRkpsWVdOMFJXeGxiV1Z1ZEM1amJHOXVaVVZzWlcxbGJuUTdYRzVjYm1sbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lHTnlaV0YwWlVWc1pXMWxiblFnUFNCU1pXRmpkRVZzWlcxbGJuUldZV3hwWkdGMGIzSXVZM0psWVhSbFJXeGxiV1Z1ZER0Y2JpQWdZM0psWVhSbFJtRmpkRzl5ZVNBOUlGSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjaTVqY21WaGRHVkdZV04wYjNKNU8xeHVJQ0JqYkc5dVpVVnNaVzFsYm5RZ1BTQlNaV0ZqZEVWc1pXMWxiblJXWVd4cFpHRjBiM0l1WTJ4dmJtVkZiR1Z0Wlc1ME8xeHVmVnh1WEc1MllYSWdVbVZoWTNRZ1BTQjdYRzVjYmlBZ0x5OGdUVzlrWlhKdVhHNWNiaUFnUTJocGJHUnlaVzQ2SUh0Y2JpQWdJQ0J0WVhBNklGSmxZV04wUTJocGJHUnlaVzR1YldGd0xGeHVJQ0FnSUdadmNrVmhZMmc2SUZKbFlXTjBRMmhwYkdSeVpXNHVabTl5UldGamFDeGNiaUFnSUNCamIzVnVkRG9nVW1WaFkzUkRhR2xzWkhKbGJpNWpiM1Z1ZEN4Y2JpQWdJQ0IwYjBGeWNtRjVPaUJTWldGamRFTm9hV3hrY21WdUxuUnZRWEp5WVhrc1hHNGdJQ0FnYjI1c2VUb2diMjVzZVVOb2FXeGtYRzRnSUgwc1hHNWNiaUFnUTI5dGNHOXVaVzUwT2lCU1pXRmpkRU52YlhCdmJtVnVkQ3hjYmx4dUlDQmpjbVZoZEdWRmJHVnRaVzUwT2lCamNtVmhkR1ZGYkdWdFpXNTBMRnh1SUNCamJHOXVaVVZzWlcxbGJuUTZJR05zYjI1bFJXeGxiV1Z1ZEN4Y2JpQWdhWE5XWVd4cFpFVnNaVzFsYm5RNklGSmxZV04wUld4bGJXVnVkQzVwYzFaaGJHbGtSV3hsYldWdWRDeGNibHh1SUNBdkx5QkRiR0Z6YzJsalhHNWNiaUFnVUhKdmNGUjVjR1Z6T2lCU1pXRmpkRkJ5YjNCVWVYQmxjeXhjYmlBZ1kzSmxZWFJsUTJ4aGMzTTZJRkpsWVdOMFEyeGhjM011WTNKbFlYUmxRMnhoYzNNc1hHNGdJR055WldGMFpVWmhZM1J2Y25rNklHTnlaV0YwWlVaaFkzUnZjbmtzWEc0Z0lHTnlaV0YwWlUxcGVHbHVPaUJtZFc1amRHbHZiaUFvYldsNGFXNHBJSHRjYmlBZ0lDQXZMeUJEZFhKeVpXNTBiSGtnWVNCdWIyOXdMaUJYYVd4c0lHSmxJSFZ6WldRZ2RHOGdkbUZzYVdSaGRHVWdZVzVrSUhSeVlXTmxJRzFwZUdsdWN5NWNiaUFnSUNCeVpYUjFjbTRnYldsNGFXNDdYRzRnSUgwc1hHNWNiaUFnTHk4Z1ZHaHBjeUJzYjI5cmN5QkVUMDBnYzNCbFkybG1hV01nWW5WMElIUm9aWE5sSUdGeVpTQmhZM1IxWVd4c2VTQnBjMjl0YjNKd2FHbGpJR2hsYkhCbGNuTmNiaUFnTHk4Z2MybHVZMlVnZEdobGVTQmhjbVVnYW5WemRDQm5aVzVsY21GMGFXNW5JRVJQVFNCemRISnBibWR6TGx4dUlDQkVUMDA2SUZKbFlXTjBSRTlOUm1GamRHOXlhV1Z6TEZ4dVhHNGdJSFpsY25OcGIyNDZJRkpsWVdOMFZtVnljMmx2Yml4Y2JseHVJQ0F2THlCSWIyOXJJR1p2Y2lCS1UxZ2djM0J5WldGa0xDQmtiMjRuZENCMWMyVWdkR2hwY3lCbWIzSWdZVzU1ZEdocGJtY2daV3h6WlM1Y2JpQWdYMTl6Y0hKbFlXUTZJR0Z6YzJsbmJseHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRHNpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE1hcmt1cENoZWNrc3VtXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWRsZXIzMiA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xuXG52YXIgVEFHX0VORCA9IC9cXC8/Pi87XG5cbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0ge1xuICBDSEVDS1NVTV9BVFRSX05BTUU6ICdkYXRhLXJlYWN0LWNoZWNrc3VtJyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgc3RyaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZyB3aXRoIGNoZWNrc3VtIGF0dHJpYnV0ZSBhdHRhY2hlZFxuICAgKi9cbiAgYWRkQ2hlY2tzdW1Ub01hcmt1cDogZnVuY3Rpb24gKG1hcmt1cCkge1xuICAgIHZhciBjaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcblxuICAgIC8vIEFkZCBjaGVja3N1bSAoaGFuZGxlIGJvdGggcGFyZW50IHRhZ3MgYW5kIHNlbGYtY2xvc2luZyB0YWdzKVxuICAgIHJldHVybiBtYXJrdXAucmVwbGFjZShUQUdfRU5ELCAnICcgKyBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSArICc9XCInICsgY2hlY2tzdW0gKyAnXCIkJicpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIHRvIHVzZVxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgcm9vdCBSZWFjdCBlbGVtZW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCB0aGUgbWFya3VwIGlzIHRoZSBzYW1lXG4gICAqL1xuICBjYW5SZXVzZU1hcmt1cDogZnVuY3Rpb24gKG1hcmt1cCwgZWxlbWVudCkge1xuICAgIHZhciBleGlzdGluZ0NoZWNrc3VtID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuICAgIGV4aXN0aW5nQ2hlY2tzdW0gPSBleGlzdGluZ0NoZWNrc3VtICYmIHBhcnNlSW50KGV4aXN0aW5nQ2hlY2tzdW0sIDEwKTtcbiAgICB2YXIgbWFya3VwQ2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG4gICAgcmV0dXJuIG1hcmt1cENoZWNrc3VtID09PSBleGlzdGluZ0NoZWNrc3VtO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TWFya3VwQ2hlY2tzdW07IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE1vdW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RET01GZWF0dXJlRmxhZ3MnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeSA9IHJlcXVpcmUoJy4vUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5Jyk7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VIYW5kbGVzJyk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKCcuL1JlYWN0TWFya3VwQ2hlY2tzdW0nKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVRdWV1ZScpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvY29udGFpbnNOb2RlJyk7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50Jyk7XG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gcmVxdWlyZSgnLi92YWxpZGF0ZURPTU5lc3RpbmcnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG52YXIgbm9kZUNhY2hlID0ge307XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFID0gMTE7XG5cbnZhciBvd25lckRvY3VtZW50Q29udGV4dEtleSA9ICdfX1JlYWN0TW91bnRfb3duZXJEb2N1bWVudCQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5cbi8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLiAqL1xudmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcblxuLyoqIE1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byBgY29udGFpbmVyYCBub2Rlcy4gKi9cbnZhciBjb250YWluZXJzQnlSZWFjdFJvb3RJRCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvKiogX19ERVZfXy1vbmx5IG1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byByb290IGVsZW1lbnRzLiAqL1xuICB2YXIgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRCA9IHt9O1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGJyZWFkdGgtZmlyc3Qgc2VhcmNoIHN0YXRlIGluIGZpbmRDb21wb25lbnRSb290LlxudmFyIGZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSA9IFtdO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gKiB0aGF0J3Mgbm90IGNvbW1vbiBiZXR3ZWVuIHRoZSB0d28gZ2l2ZW4gc3RyaW5ncy5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBpbmRleCBvZiB0aGUgY2hhcmFjdGVyIHdoZXJlIHRoZSBzdHJpbmdzIGRpdmVyZ2VcbiAqL1xuZnVuY3Rpb24gZmlyc3REaWZmZXJlbmNlSW5kZXgoc3RyaW5nMSwgc3RyaW5nMikge1xuICB2YXIgbWluTGVuID0gTWF0aC5taW4oc3RyaW5nMS5sZW5ndGgsIHN0cmluZzIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW5MZW47IGkrKykge1xuICAgIGlmIChzdHJpbmcxLmNoYXJBdChpKSAhPT0gc3RyaW5nMi5jaGFyQXQoaSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyaW5nMS5sZW5ndGggPT09IHN0cmluZzIubGVuZ3RoID8gLTEgOiBtaW5MZW47XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTURvY3VtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpblxuICogYSBSZWFjdCBjb21wb25lbnRcbiAqIEByZXR1cm4gez8qfSBET00gZWxlbWVudCB0aGF0IG1heSBoYXZlIHRoZSByZWFjdFJvb3QgSUQsIG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluIGEgUmVhY3QgY29tcG9uZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gQSBcInJlYWN0Um9vdFwiIElELCBpZiBhIFJlYWN0IGNvbXBvbmVudCBpcyByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKSB7XG4gIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICByZXR1cm4gcm9vdEVsZW1lbnQgJiYgUmVhY3RNb3VudC5nZXRJRChyb290RWxlbWVudCk7XG59XG5cbi8qKlxuICogQWNjZXNzaW5nIG5vZGVbQVRUUl9OQU1FXSBvciBjYWxsaW5nIGdldEF0dHJpYnV0ZShBVFRSX05BTUUpIG9uIGEgZm9ybVxuICogZWxlbWVudCBjYW4gcmV0dXJuIGl0cyBjb250cm9sIHdob3NlIG5hbWUgb3IgSUQgZXF1YWxzIEFUVFJfTkFNRS4gQWxsXG4gKiBET00gbm9kZXMgc3VwcG9ydCBgZ2V0QXR0cmlidXRlTm9kZWAgYnV0IHRoaXMgY2FuIGFsc28gZ2V0IGNhbGxlZCBvblxuICogb3RoZXIgb2JqZWN0cyBzbyBqdXN0IHJldHVybiAnJyBpZiB3ZSdyZSBnaXZlbiBzb21ldGhpbmcgb3RoZXIgdGhhbiBhXG4gKiBET00gbm9kZSAoc3VjaCBhcyB3aW5kb3cpLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR8RE9NV2luZG93fERPTURvY3VtZW50fERPTVRleHROb2RlfSBub2RlIERPTSBub2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgc3VwcGxpZWQgYGRvbU5vZGVgLlxuICovXG5mdW5jdGlvbiBnZXRJRChub2RlKSB7XG4gIHZhciBpZCA9IGludGVybmFsR2V0SUQobm9kZSk7XG4gIGlmIChpZCkge1xuICAgIGlmIChub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICB2YXIgY2FjaGVkID0gbm9kZUNhY2hlW2lkXTtcbiAgICAgIGlmIChjYWNoZWQgIT09IG5vZGUpIHtcbiAgICAgICAgISFpc1ZhbGlkKGNhY2hlZCwgaWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0TW91bnQ6IFR3byB2YWxpZCBidXQgdW5lcXVhbCBub2RlcyB3aXRoIHRoZSBzYW1lIGAlc2A6ICVzJywgQVRUUl9OQU1FLCBpZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsR2V0SUQobm9kZSkge1xuICAvLyBJZiBub2RlIGlzIHNvbWV0aGluZyBsaWtlIGEgd2luZG93LCBkb2N1bWVudCwgb3IgdGV4dCBub2RlLCBub25lIG9mXG4gIC8vIHdoaWNoIHN1cHBvcnQgYXR0cmlidXRlcyBvciBhIC5nZXRBdHRyaWJ1dGUgbWV0aG9kLCBncmFjZWZ1bGx5IHJldHVyblxuICAvLyB0aGUgZW1wdHkgc3RyaW5nLCBhcyBpZiB0aGUgYXR0cmlidXRlIHdlcmUgbWlzc2luZy5cbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSB8fCAnJztcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBSZWFjdC1zcGVjaWZpYyBJRCBvZiB0aGUgZ2l2ZW4gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgVGhlIERPTSBub2RlIHdob3NlIElEIHdpbGwgYmUgc2V0LlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB2YWx1ZSBvZiB0aGUgSUQgYXR0cmlidXRlLlxuICovXG5mdW5jdGlvbiBzZXRJRChub2RlLCBpZCkge1xuICB2YXIgb2xkSUQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICBpZiAob2xkSUQgIT09IGlkKSB7XG4gICAgZGVsZXRlIG5vZGVDYWNoZVtvbGRJRF07XG4gIH1cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoQVRUUl9OQU1FLCBpZCk7XG4gIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIFJlYWN0LWdlbmVyYXRlZCBET00gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QtZ2VuZXJhdGVkIERPTSBJRC5cbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IERPTSBub2RlIHdpdGggdGhlIHN1cHBsZWQgYGlkYC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXROb2RlKGlkKSB7XG4gIGlmICghbm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSB8fCAhaXNWYWxpZChub2RlQ2FjaGVbaWRdLCBpZCkpIHtcbiAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVDYWNoZVtpZF07XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgcHVibGljIFJlYWN0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7Kn0gaW5zdGFuY2UgQSBwdWJsaWMgUmVhY3QgaW5zdGFuY2UuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxlZCBgaWRgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdGFuY2UpLl9yb290Tm9kZUlEO1xuICBpZiAoUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5LmlzTnVsbENvbXBvbmVudElEKGlkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICghbm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSB8fCAhaXNWYWxpZChub2RlQ2FjaGVbaWRdLCBpZCkpIHtcbiAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVDYWNoZVtpZF07XG59XG5cbi8qKlxuICogQSBub2RlIGlzIFwidmFsaWRcIiBpZiBpdCBpcyBjb250YWluZWQgYnkgYSBjdXJyZW50bHkgbW91bnRlZCBjb250YWluZXIuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IHRoZSBub2RlIGRvZXMgbm90IGhhdmUgdG8gYmUgY29udGFpbmVkIGJ5IGEgZG9jdW1lbnQgaW5cbiAqIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgdmFsaWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRWxlbWVudH0gbm9kZSBUaGUgY2FuZGlkYXRlIERPTSBub2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBleHBlY3RlZCBJRCBvZiB0aGUgbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5vZGUgaXMgY29udGFpbmVkIGJ5IGEgbW91bnRlZCBjb250YWluZXIuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWQobm9kZSwgaWQpIHtcbiAgaWYgKG5vZGUpIHtcbiAgICAhKGludGVybmFsR2V0SUQobm9kZSkgPT09IGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdE1vdW50OiBVbmV4cGVjdGVkIG1vZGlmaWNhdGlvbiBvZiBgJXNgJywgQVRUUl9OQU1FKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChpZCk7XG4gICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluc05vZGUoY29udGFpbmVyLCBub2RlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENhdXNlcyB0aGUgY2FjaGUgdG8gZm9yZ2V0IGFib3V0IG9uZSBSZWFjdC1zcGVjaWZpYyBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIHRvIGZvcmdldC5cbiAqL1xuZnVuY3Rpb24gcHVyZ2VJRChpZCkge1xuICBkZWxldGUgbm9kZUNhY2hlW2lkXTtcbn1cblxudmFyIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuZnVuY3Rpb24gZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwoYW5jZXN0b3JJRCkge1xuICB2YXIgYW5jZXN0b3IgPSBub2RlQ2FjaGVbYW5jZXN0b3JJRF07XG4gIGlmIChhbmNlc3RvciAmJiBpc1ZhbGlkKGFuY2VzdG9yLCBhbmNlc3RvcklEKSkge1xuICAgIGRlZXBlc3ROb2RlU29GYXIgPSBhbmNlc3RvcjtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIG5vZGUgaXNuJ3QgcG9wdWxhdGVkIGluIHRoZSBjYWNoZSwgc28gcHJlc3VtYWJseSBub25lIG9mIGl0c1xuICAgIC8vIGRlc2NlbmRhbnRzIGFyZS4gQnJlYWsgb3V0IG9mIHRoZSBsb29wLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZGVlcGVzdCBjYWNoZWQgbm9kZSB3aG9zZSBJRCBpcyBhIHByZWZpeCBvZiBgdGFyZ2V0SURgLlxuICovXG5mdW5jdGlvbiBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yKHRhcmdldElEKSB7XG4gIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuICBSZWFjdEluc3RhbmNlSGFuZGxlcy50cmF2ZXJzZUFuY2VzdG9ycyh0YXJnZXRJRCwgZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwpO1xuXG4gIHZhciBmb3VuZE5vZGUgPSBkZWVwZXN0Tm9kZVNvRmFyO1xuICBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbiAgcmV0dXJuIGZvdW5kTm9kZTtcbn1cblxuLyoqXG4gKiBNb3VudHMgdGhpcyBjb21wb25lbnQgYW5kIGluc2VydHMgaXQgaW50byB0aGUgRE9NLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudEluc3RhbmNlIFRoZSBpbnN0YW5jZSB0byBtb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuICovXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudEludG9Ob2RlKGNvbXBvbmVudEluc3RhbmNlLCByb290SUQsIGNvbnRhaW5lciwgdHJhbnNhY3Rpb24sIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KSB7XG4gIGlmIChSZWFjdERPTUZlYXR1cmVGbGFncy51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgY29udGV4dCA9IGFzc2lnbih7fSwgY29udGV4dCk7XG4gICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgICAgY29udGV4dFtvd25lckRvY3VtZW50Q29udGV4dEtleV0gPSBjb250YWluZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHRbb3duZXJEb2N1bWVudENvbnRleHRLZXldID0gY29udGFpbmVyLm93bmVyRG9jdW1lbnQ7XG4gICAgfVxuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbnRleHQgPT09IGVtcHR5T2JqZWN0KSB7XG4gICAgICBjb250ZXh0ID0ge307XG4gICAgfVxuICAgIHZhciB0YWcgPSBjb250YWluZXIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb250ZXh0W3ZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5XSA9IHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvKG51bGwsIHRhZywgbnVsbCk7XG4gIH1cbiAgdmFyIG1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gIGNvbXBvbmVudEluc3RhbmNlLl9yZW5kZXJlZENvbXBvbmVudC5fdG9wTGV2ZWxXcmFwcGVyID0gY29tcG9uZW50SW5zdGFuY2U7XG4gIFJlYWN0TW91bnQuX21vdW50SW1hZ2VJbnRvTm9kZShtYXJrdXAsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIHRyYW5zYWN0aW9uKTtcbn1cblxuLyoqXG4gKiBCYXRjaGVkIG1vdW50LlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudEluc3RhbmNlIFRoZSBpbnN0YW5jZSB0byBtb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuICovXG5mdW5jdGlvbiBiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZShjb21wb25lbnRJbnN0YW5jZSwgcm9vdElELCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KSB7XG4gIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZChcbiAgLyogZm9yY2VIVE1MICovc2hvdWxkUmV1c2VNYXJrdXApO1xuICB0cmFuc2FjdGlvbi5wZXJmb3JtKG1vdW50Q29tcG9uZW50SW50b05vZGUsIG51bGwsIGNvbXBvbmVudEluc3RhbmNlLCByb290SUQsIGNvbnRhaW5lciwgdHJhbnNhY3Rpb24sIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KTtcbiAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG59XG5cbi8qKlxuICogVW5tb3VudHMgYSBjb21wb25lbnQgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgRE9NLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGluc3RhbmNlIFJlYWN0IGNvbXBvbmVudCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHVubW91bnQgZnJvbS5cbiAqIEBmaW5hbFxuICogQGludGVybmFsXG4gKiBAc2VlIHtSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGV9XG4gKi9cbmZ1bmN0aW9uIHVubW91bnRDb21wb25lbnRGcm9tTm9kZShpbnN0YW5jZSwgY29udGFpbmVyKSB7XG4gIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KGluc3RhbmNlKTtcblxuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgY29udGFpbmVyID0gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VtcHR5aW5nLWEtbm9kZVxuICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgfVxufVxuXG4vKipcbiAqIFRydWUgaWYgdGhlIHN1cHBsaWVkIERPTSBub2RlIGhhcyBhIGRpcmVjdCBSZWFjdC1yZW5kZXJlZCBjaGlsZCB0aGF0IGlzXG4gKiBub3QgYSBSZWFjdCByb290IGVsZW1lbnQuIFVzZWZ1bCBmb3Igd2FybmluZyBpbiBgcmVuZGVyYCxcbiAqIGB1bm1vdW50Q29tcG9uZW50QXROb2RlYCwgZXRjLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBlbGVtZW50IGNvbnRhaW5zIGEgZGlyZWN0IGNoaWxkIHRoYXQgd2FzXG4gKiByZW5kZXJlZCBieSBSZWFjdCBidXQgaXMgbm90IGEgcm9vdCBlbGVtZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhc05vblJvb3RSZWFjdENoaWxkKG5vZGUpIHtcbiAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQobm9kZSk7XG4gIHJldHVybiByZWFjdFJvb3RJRCA/IHJlYWN0Um9vdElEICE9PSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQocmVhY3RSb290SUQpIDogZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgKGRlZXBlc3QpIGFuY2VzdG9yIG9mIGEgbm9kZSB3aGljaCBpcyByZW5kZXJlZCBieSB0aGlzIGNvcHlcbiAqIG9mIFJlYWN0LlxuICovXG5mdW5jdGlvbiBmaW5kRmlyc3RSZWFjdERPTUltcGwobm9kZSkge1xuICAvLyBUaGlzIG5vZGUgbWlnaHQgYmUgZnJvbSBhbm90aGVyIFJlYWN0IGluc3RhbmNlLCBzbyB3ZSBtYWtlIHN1cmUgbm90IHRvXG4gIC8vIGV4YW1pbmUgdGhlIG5vZGUgY2FjaGUgaGVyZVxuICBmb3IgKDsgbm9kZSAmJiBub2RlLnBhcmVudE5vZGUgIT09IG5vZGU7IG5vZGUgPSBub2RlLnBhcmVudE5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgLy8gTm90IGEgRE9NRWxlbWVudCwgdGhlcmVmb3JlIG5vdCBhIFJlYWN0IGNvbXBvbmVudFxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub2RlSUQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICAgIGlmICghbm9kZUlEKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKG5vZGVJRCk7XG5cbiAgICAvLyBJZiBjb250YWluZXJzQnlSZWFjdFJvb3RJRCBjb250YWlucyB0aGUgY29udGFpbmVyIHdlIGZpbmQgYnkgY3Jhd2xpbmcgdXBcbiAgICAvLyB0aGUgdHJlZSwgd2Uga25vdyB0aGF0IHRoaXMgaW5zdGFuY2Ugb2YgUmVhY3QgcmVuZGVyZWQgdGhlIG5vZGUuXG4gICAgLy8gbmIuIGlzVmFsaWQncyBzdHJhdGVneSAod2l0aCBjb250YWluc05vZGUpIGRvZXMgbm90IHdvcmsgYmVjYXVzZSByZW5kZXJcbiAgICAvLyB0cmVlcyBtYXkgYmUgbmVzdGVkIGFuZCB3ZSBkb24ndCB3YW50IGEgZmFsc2UgcG9zaXRpdmUgaW4gdGhhdCBjYXNlLlxuICAgIHZhciBjdXJyZW50ID0gbm9kZTtcbiAgICB2YXIgbGFzdElEO1xuICAgIGRvIHtcbiAgICAgIGxhc3RJRCA9IGludGVybmFsR2V0SUQoY3VycmVudCk7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgICAgICAvLyBUaGUgcGFzc2VkLWluIG5vZGUgaGFzIGJlZW4gZGV0YWNoZWQgZnJvbSB0aGUgY29udGFpbmVyIGl0IHdhc1xuICAgICAgICAvLyBvcmlnaW5hbGx5IHJlbmRlcmVkIGludG8uXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGxhc3RJRCAhPT0gcmVhY3RSb290SUQpO1xuXG4gICAgaWYgKGN1cnJlbnQgPT09IGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFRlbXBvcmFyeSAoPykgaGFjayBzbyB0aGF0IHdlIGNhbiBzdG9yZSBhbGwgdG9wLWxldmVsIHBlbmRpbmcgdXBkYXRlcyBvblxuICogY29tcG9zaXRlcyBpbnN0ZWFkIG9mIGhhdmluZyB0byB3b3JyeSBhYm91dCBkaWZmZXJlbnQgdHlwZXMgb2YgY29tcG9uZW50c1xuICogaGVyZS5cbiAqL1xudmFyIFRvcExldmVsV3JhcHBlciA9IGZ1bmN0aW9uICgpIHt9O1xuVG9wTGV2ZWxXcmFwcGVyLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUb3BMZXZlbFdyYXBwZXIuZGlzcGxheU5hbWUgPSAnVG9wTGV2ZWxXcmFwcGVyJztcbn1cblRvcExldmVsV3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyB0aGlzLnByb3BzIGlzIGFjdHVhbGx5IGEgUmVhY3RFbGVtZW50XG4gIHJldHVybiB0aGlzLnByb3BzO1xufTtcblxuLyoqXG4gKiBNb3VudGluZyBpcyB0aGUgcHJvY2VzcyBvZiBpbml0aWFsaXppbmcgYSBSZWFjdCBjb21wb25lbnQgYnkgY3JlYXRpbmcgaXRzXG4gKiByZXByZXNlbnRhdGl2ZSBET00gZWxlbWVudHMgYW5kIGluc2VydGluZyB0aGVtIGludG8gYSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAqIEFueSBwcmlvciBjb250ZW50IGluc2lkZSBgY29udGFpbmVyYCBpcyBkZXN0cm95ZWQgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogICBSZWFjdE1vdW50LnJlbmRlcihcbiAqICAgICBjb21wb25lbnQsXG4gKiAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpXG4gKiAgICk7XG4gKlxuICogICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+ICAgICAgICAgICAgICAgICAgIDwtLSBTdXBwbGllZCBgY29udGFpbmVyYC5cbiAqICAgICA8ZGl2IGRhdGEtcmVhY3RpZD1cIi4zXCI+ICAgICAgICAgICAgICA8LS0gUmVuZGVyZWQgcmVhY3RSb290IG9mIFJlYWN0XG4gKiAgICAgICAvLyAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICpcbiAqIEluc2lkZSBvZiBgY29udGFpbmVyYCwgdGhlIGZpcnN0IGVsZW1lbnQgcmVuZGVyZWQgaXMgdGhlIFwicmVhY3RSb290XCIuXG4gKi9cbnZhciBSZWFjdE1vdW50ID0ge1xuXG4gIFRvcExldmVsV3JhcHBlcjogVG9wTGV2ZWxXcmFwcGVyLFxuXG4gIC8qKiBFeHBvc2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMgKiovXG4gIF9pbnN0YW5jZXNCeVJlYWN0Um9vdElEOiBpbnN0YW5jZXNCeVJlYWN0Um9vdElELFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgaG9vayBwcm92aWRlZCB0byBzdXBwb3J0IHJlbmRlcmluZyBSZWFjdCBjb21wb25lbnRzIHdoaWxlXG4gICAqIGVuc3VyaW5nIHRoYXQgdGhlIGFwcGFyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiBpdHMgYGNvbnRhaW5lcmAgZG9lcyBub3RcbiAgICogY2hhbmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBUaGUgYGNvbnRhaW5lcmAgYmVpbmcgcmVuZGVyZWQgaW50by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVuZGVyQ2FsbGJhY2sgVGhpcyBtdXN0IGJlIGNhbGxlZCBvbmNlIHRvIGRvIHRoZSByZW5kZXIuXG4gICAqL1xuICBzY3JvbGxNb25pdG9yOiBmdW5jdGlvbiAoY29udGFpbmVyLCByZW5kZXJDYWxsYmFjaykge1xuICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRha2UgYSBjb21wb25lbnQgdGhhdCdzIGFscmVhZHkgbW91bnRlZCBpbnRvIHRoZSBET00gYW5kIHJlcGxhY2UgaXRzIHByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IHByZXZDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIGFscmVhZHkgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqL1xuICBfdXBkYXRlUm9vdENvbXBvbmVudDogZnVuY3Rpb24gKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgUmVhY3RNb3VudC5zY3JvbGxNb25pdG9yKGNvbnRhaW5lciwgZnVuY3Rpb24gKCkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRWxlbWVudEludGVybmFsKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50KTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKHByZXZDb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXSA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2Q29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNvbXBvbmVudCBpbnRvIHRoZSBpbnN0YW5jZSBtYXAgYW5kIHN0YXJ0cyBzY3JvbGwgdmFsdWVcbiAgICogbW9uaXRvcmluZ1xuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcmVhY3RSb290IElEIHByZWZpeFxuICAgKi9cbiAgX3JlZ2lzdGVyQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dENvbXBvbmVudCwgY29udGFpbmVyKSB7XG4gICAgIShjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnX3JlZ2lzdGVyQ29tcG9uZW50KC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO1xuXG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5yZWdpc3RlckNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gbmV4dENvbXBvbmVudDtcbiAgICByZXR1cm4gcmVhY3RSb290SUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIG5ldyBjb21wb25lbnQgaW50byB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgZWxlbWVudCB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgaWYgd2Ugc2hvdWxkIHNraXAgdGhlIG1hcmt1cCBpbnNlcnRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnRcbiAgICovXG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpIHtcbiAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLCAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICsgJ29mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSAnICsgJ3JlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAlcy4nLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCwgbnVsbCk7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5fcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIGNvbnRhaW5lcik7XG5cbiAgICAvLyBUaGUgaW5pdGlhbCByZW5kZXIgaXMgc3luY2hyb25vdXMgYnV0IGFueSB1cGRhdGVzIHRoYXQgaGFwcGVuIGR1cmluZ1xuICAgIC8vIHJlbmRlcmluZywgaW4gY29tcG9uZW50V2lsbE1vdW50IG9yIGNvbXBvbmVudERpZE1vdW50LCB3aWxsIGJlIGJhdGNoZWRcbiAgICAvLyBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgYmF0Y2hpbmcgc3RyYXRlZ3kuXG5cbiAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUsIGNvbXBvbmVudEluc3RhbmNlLCByZWFjdFJvb3RJRCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gUmVjb3JkIHRoZSByb290IGVsZW1lbnQgaW4gY2FzZSBpdCBsYXRlciBnZXRzIHRyYW5zcGxhbnRlZC5cbiAgICAgIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudEluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgUmVhY3QgY29tcG9uZW50IGludG8gdGhlIERPTSBpbiB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIElmIHRoZSBSZWFjdCBjb21wb25lbnQgd2FzIHByZXZpb3VzbHkgcmVuZGVyZWQgaW50byBgY29udGFpbmVyYCwgdGhpcyB3aWxsXG4gICAqIHBlcmZvcm0gYW4gdXBkYXRlIG9uIGl0IGFuZCBvbmx5IG11dGF0ZSB0aGUgRE9NIGFzIG5lY2Vzc2FyeSB0byByZWZsZWN0IHRoZVxuICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBwYXJlbnRDb21wb25lbnQgVGhlIGNvbmNlcHR1YWwgcGFyZW50IG9mIHRoaXMgcmVuZGVyIHRyZWUuXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBDb21wb25lbnQgZWxlbWVudCB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdHJpZ2dlcmVkIG9uIGNvbXBsZXRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IENvbXBvbmVudCBpbnN0YW5jZSByZW5kZXJlZCBpbiBgY29udGFpbmVyYC5cbiAgICovXG4gIHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOiBmdW5jdGlvbiAocGFyZW50Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICEocGFyZW50Q29tcG9uZW50ICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncGFyZW50Q29tcG9uZW50IG11c3QgYmUgYSB2YWxpZCBSZWFjdCBDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICB9LFxuXG4gIF9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogZnVuY3Rpb24gKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTS5yZW5kZXIoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lcycsIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ3N0cmluZycgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhbiBlbGVtZW50IHN0cmluZywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgKyAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOiB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdmdW5jdGlvbicgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhIGNvbXBvbmVudCBjbGFzcywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgKyAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOlxuICAgIC8vIENoZWNrIGlmIGl0IHF1YWNrcyBsaWtlIGFuIGVsZW1lbnRcbiAgICBuZXh0RWxlbWVudCAhPSBudWxsICYmIG5leHRFbGVtZW50LnByb3BzICE9PSB1bmRlZmluZWQgPyAnIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgJyArICdjb3BpZXMgb2YgUmVhY3QuJyA6ICcnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVyIHx8ICFjb250YWluZXIudGFnTmFtZSB8fCBjb250YWluZXIudGFnTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnQk9EWScsICdyZW5kZXIoKTogUmVuZGVyaW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgaW50byBkb2N1bWVudC5ib2R5IGlzICcgKyAnZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgJyArICdzY3JpcHRzIGFuZCBicm93c2VyIGV4dGVuc2lvbnMuIFRoaXMgbWF5IGxlYWQgdG8gc3VidGxlICcgKyAncmVjb25jaWxpYXRpb24gaXNzdWVzLiBUcnkgcmVuZGVyaW5nIGludG8gYSBjb250YWluZXIgZWxlbWVudCBjcmVhdGVkICcgKyAnZm9yIHlvdXIgYXBwLicpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIG5leHRXcmFwcGVkRWxlbWVudCA9IG5ldyBSZWFjdEVsZW1lbnQoVG9wTGV2ZWxXcmFwcGVyLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBuZXh0RWxlbWVudCk7XG5cbiAgICB2YXIgcHJldkNvbXBvbmVudCA9IGluc3RhbmNlc0J5UmVhY3RSb290SURbZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKV07XG5cbiAgICBpZiAocHJldkNvbXBvbmVudCkge1xuICAgICAgdmFyIHByZXZXcmFwcGVkRWxlbWVudCA9IHByZXZDb21wb25lbnQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldldyYXBwZWRFbGVtZW50LnByb3BzO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgdmFyIHB1YmxpY0luc3QgPSBwcmV2Q29tcG9uZW50Ll9yZW5kZXJlZENvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICAgICB2YXIgdXBkYXRlZENhbGxiYWNrID0gY2FsbGJhY2sgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxiYWNrLmNhbGwocHVibGljSW5zdCk7XG4gICAgICAgIH07XG4gICAgICAgIFJlYWN0TW91bnQuX3VwZGF0ZVJvb3RDb21wb25lbnQocHJldkNvbXBvbmVudCwgbmV4dFdyYXBwZWRFbGVtZW50LCBjb250YWluZXIsIHVwZGF0ZWRDYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBwdWJsaWNJbnN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlYWN0Um9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB2YXIgY29udGFpbmVySGFzUmVhY3RNYXJrdXAgPSByZWFjdFJvb3RFbGVtZW50ICYmICEhaW50ZXJuYWxHZXRJRChyZWFjdFJvb3RFbGVtZW50KTtcbiAgICB2YXIgY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSBoYXNOb25Sb290UmVhY3RDaGlsZChjb250YWluZXIpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCwgJ3JlbmRlciguLi4pOiBSZXBsYWNpbmcgUmVhY3QtcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIG5ldyByb290ICcgKyAnY29tcG9uZW50LiBJZiB5b3UgaW50ZW5kZWQgdG8gdXBkYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsICcgKyAneW91IHNob3VsZCBpbnN0ZWFkIGhhdmUgdGhlIGV4aXN0aW5nIGNoaWxkcmVuIHVwZGF0ZSB0aGVpciBzdGF0ZSAnICsgJ2FuZCByZW5kZXIgdGhlIG5ldyBjb21wb25lbnRzIGluc3RlYWQgb2YgY2FsbGluZyBSZWFjdERPTS5yZW5kZXIuJykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICghY29udGFpbmVySGFzUmVhY3RNYXJrdXAgfHwgcmVhY3RSb290RWxlbWVudC5uZXh0U2libGluZykge1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnRTaWJsaW5nID0gcmVhY3RSb290RWxlbWVudDtcbiAgICAgICAgd2hpbGUgKHJvb3RFbGVtZW50U2libGluZykge1xuICAgICAgICAgIGlmIChpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50U2libGluZykpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAncmVuZGVyKCk6IFRhcmdldCBub2RlIGhhcyBtYXJrdXAgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCB0aGVyZSAnICsgJ2FyZSB1bnJlbGF0ZWQgbm9kZXMgYXMgd2VsbC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSAnICsgJ3doaXRlLXNwYWNlIGluc2VydGVkIGFyb3VuZCBzZXJ2ZXItcmVuZGVyZWQgbWFya3VwLicpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJvb3RFbGVtZW50U2libGluZyA9IHJvb3RFbGVtZW50U2libGluZy5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaG91bGRSZXVzZU1hcmt1cCA9IGNvbnRhaW5lckhhc1JlYWN0TWFya3VwICYmICFwcmV2Q29tcG9uZW50ICYmICFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZDtcbiAgICB2YXIgY29tcG9uZW50ID0gUmVhY3RNb3VudC5fcmVuZGVyTmV3Um9vdENvbXBvbmVudChuZXh0V3JhcHBlZEVsZW1lbnQsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIHBhcmVudENvbXBvbmVudCAhPSBudWxsID8gcGFyZW50Q29tcG9uZW50Ll9yZWFjdEludGVybmFsSW5zdGFuY2UuX3Byb2Nlc3NDaGlsZENvbnRleHQocGFyZW50Q29tcG9uZW50Ll9yZWFjdEludGVybmFsSW5zdGFuY2UuX2NvbnRleHQpIDogZW1wdHlPYmplY3QpLl9yZW5kZXJlZENvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2suY2FsbChjb21wb25lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgUmVhY3QgY29tcG9uZW50IGludG8gdGhlIERPTSBpbiB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIElmIHRoZSBSZWFjdCBjb21wb25lbnQgd2FzIHByZXZpb3VzbHkgcmVuZGVyZWQgaW50byBgY29udGFpbmVyYCwgdGhpcyB3aWxsXG4gICAqIHBlcmZvcm0gYW4gdXBkYXRlIG9uIGl0IGFuZCBvbmx5IG11dGF0ZSB0aGUgRE9NIGFzIG5lY2Vzc2FyeSB0byByZWZsZWN0IHRoZVxuICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgQ29tcG9uZW50IGVsZW1lbnQgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gYGNvbnRhaW5lcmAuXG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBSZWFjdE1vdW50Ll9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihudWxsLCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNvbnRhaW5lciBub2RlIGludG8gd2hpY2ggUmVhY3QgY29tcG9uZW50cyB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKiBUaGlzIGFsc28gY3JlYXRlcyB0aGUgXCJyZWFjdFJvb3RcIiBJRCB0aGF0IHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIGVsZW1lbnRcbiAgICogcmVuZGVyZWQgd2l0aGluLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZWdpc3RlciBhcyBhIGNvbnRhaW5lci5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgXCJyZWFjdFJvb3RcIiBJRCBvZiBlbGVtZW50cyByZW5kZXJlZCB3aXRoaW4uXG4gICAqL1xuICByZWdpc3RlckNvbnRhaW5lcjogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIHZhciByZWFjdFJvb3RJRCA9IGdldFJlYWN0Um9vdElEKGNvbnRhaW5lcik7XG4gICAgaWYgKHJlYWN0Um9vdElEKSB7XG4gICAgICAvLyBJZiBvbmUgZXhpc3RzLCBtYWtlIHN1cmUgaXQgaXMgYSB2YWxpZCBcInJlYWN0Um9vdFwiIElELlxuICAgICAgcmVhY3RSb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQocmVhY3RSb290SUQpO1xuICAgIH1cbiAgICBpZiAoIXJlYWN0Um9vdElEKSB7XG4gICAgICAvLyBObyB2YWxpZCBcInJlYWN0Um9vdFwiIElEIGZvdW5kLCBjcmVhdGUgb25lLlxuICAgICAgcmVhY3RSb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIH1cbiAgICBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gPSBjb250YWluZXI7XG4gICAgcmV0dXJuIHJlYWN0Um9vdElEO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVbm1vdW50cyBhbmQgZGVzdHJveXMgdGhlIFJlYWN0IGNvbXBvbmVudCByZW5kZXJlZCBpbiB0aGUgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IGNvbnRhaW5pbmcgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYSBjb21wb25lbnQgd2FzIGZvdW5kIGluIGFuZCB1bm1vdW50ZWQgZnJvbVxuICAgKiAgICAgICAgICAgICAgICAgICBgY29udGFpbmVyYFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAgIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS4gKFN0cmljdGx5IHNwZWFraW5nLCB1bm1vdW50aW5nIHdvbid0IGNhdXNlIGFcbiAgICAvLyByZW5kZXIgYnV0IHdlIHN0aWxsIGRvbid0IGV4cGVjdCB0byBiZSBpbiBhIHJlbmRlciBjYWxsIGhlcmUuKVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCwgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICsgJ29mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgJyArICdpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAlcy4nLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuXG4gICAgIShjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciByZWFjdFJvb3RJRCA9IGdldFJlYWN0Um9vdElEKGNvbnRhaW5lcik7XG4gICAgdmFyIGNvbXBvbmVudCA9IGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAvLyBDaGVjayBpZiB0aGUgbm9kZSBiZWluZyB1bm1vdW50ZWQgd2FzIHJlbmRlcmVkIGJ5IFJlYWN0LCBidXQgaXNuJ3QgYVxuICAgICAgLy8gcm9vdCBub2RlLlxuICAgICAgdmFyIGNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkID0gaGFzTm9uUm9vdFJlYWN0Q2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnRhaW5lciBpdHNlbGYgaXMgYSBSZWFjdCByb290IG5vZGUuXG4gICAgICB2YXIgY29udGFpbmVySUQgPSBpbnRlcm5hbEdldElEKGNvbnRhaW5lcik7XG4gICAgICB2YXIgaXNDb250YWluZXJSZWFjdFJvb3QgPSBjb250YWluZXJJRCAmJiBjb250YWluZXJJRCA9PT0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGNvbnRhaW5lcklEKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBUaGUgbm9kZSB5b3VcXCdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgJyArICd3YXMgcmVuZGVyZWQgYnkgUmVhY3QgYW5kIGlzIG5vdCBhIHRvcC1sZXZlbCBjb250YWluZXIuICVzJywgaXNDb250YWluZXJSZWFjdFJvb3QgPyAnWW91IG1heSBoYXZlIGFjY2lkZW50YWxseSBwYXNzZWQgaW4gYSBSZWFjdCByb290IG5vZGUgaW5zdGVhZCAnICsgJ29mIGl0cyBjb250YWluZXIuJyA6ICdJbnN0ZWFkLCBoYXZlIHRoZSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZSBpdHMgc3RhdGUgYW5kICcgKyAncmVyZW5kZXIgaW4gb3JkZXIgdG8gcmVtb3ZlIHRoaXMgY29tcG9uZW50LicpIDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyh1bm1vdW50Q29tcG9uZW50RnJvbU5vZGUsIGNvbXBvbmVudCwgY29udGFpbmVyKTtcbiAgICBkZWxldGUgaW5zdGFuY2VzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgZGVsZXRlIGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZGVsZXRlIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogRmluZHMgdGhlIGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIFJlYWN0IGNvbXBvbmVudCB0byB3aGljaCB0aGVcbiAgICogc3VwcGxpZWQgRE9NIGBpZGAgYmVsb25ncy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiBhbiBlbGVtZW50IHJlbmRlcmVkIGJ5IGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgYGlkYC5cbiAgICovXG4gIGZpbmRSZWFjdENvbnRhaW5lckZvcklEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgcmVhY3RSb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQoaWQpO1xuICAgIHZhciBjb250YWluZXIgPSBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgICBpZiAocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKFxuICAgICAgICAvLyBDYWxsIGludGVybmFsR2V0SUQgaGVyZSBiZWNhdXNlIGdldElEIGNhbGxzIGlzVmFsaWQgd2hpY2ggY2FsbHNcbiAgICAgICAgLy8gZmluZFJlYWN0Q29udGFpbmVyRm9ySUQgKHRoaXMgZnVuY3Rpb24pLlxuICAgICAgICBpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50KSA9PT0gcmVhY3RSb290SUQsICdSZWFjdE1vdW50OiBSb290IGVsZW1lbnQgSUQgZGlmZmVyZWQgZnJvbSByZWFjdFJvb3RJRC4nKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGNvbnRhaW5lckNoaWxkID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChjb250YWluZXJDaGlsZCAmJiByZWFjdFJvb3RJRCA9PT0gaW50ZXJuYWxHZXRJRChjb250YWluZXJDaGlsZCkpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgY29udGFpbmVyIGhhcyBhIG5ldyBjaGlsZCB3aXRoIHRoZSBzYW1lIElEIGFzIHRoZSBvbGRcbiAgICAgICAgICAvLyByb290IGVsZW1lbnQsIHRoZW4gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gaXNcbiAgICAgICAgICAvLyBqdXN0IHN0YWxlIGFuZCBuZWVkcyB0byBiZSB1cGRhdGVkLiBUaGUgY2FzZSB0aGF0IGRlc2VydmVzIGFcbiAgICAgICAgICAvLyB3YXJuaW5nIGlzIHdoZW4gdGhlIGNvbnRhaW5lciBpcyBlbXB0eS5cbiAgICAgICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IGNvbnRhaW5lckNoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RNb3VudDogUm9vdCBlbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBpdHMgb3JpZ2luYWwgJyArICdjb250YWluZXIuIE5ldyBjb250YWluZXI6ICVzJywgcm9vdEVsZW1lbnQucGFyZW50Tm9kZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbiBlbGVtZW50IHJlbmRlcmVkIGJ5IFJlYWN0IHdpdGggdGhlIHN1cHBsaWVkIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgYSBET00gbm9kZSBpbiB0aGUgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSBSb290IERPTSBub2RlIG9mIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICAqL1xuICBmaW5kUmVhY3ROb2RlQnlJRDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIHJlYWN0Um9vdCA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuICAgIHJldHVybiBSZWFjdE1vdW50LmZpbmRDb21wb25lbnRSb290KHJlYWN0Um9vdCwgaWQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdXAgdGhlIGFuY2VzdG9ycyBvZiB0aGUgc3VwcGxpZWQgbm9kZSB0byBmaW5kIGEgbm9kZSB0aGF0IGlzIGFcbiAgICogRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgUmVhY3QgY29tcG9uZW50IHJlbmRlcmVkIGJ5IHRoaXMgY29weSBvZiBSZWFjdC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBub2RlXG4gICAqIEByZXR1cm4gez9ET01FdmVudFRhcmdldH1cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRGaXJzdFJlYWN0RE9NOiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBmaW5kRmlyc3RSZWFjdERPTUltcGwobm9kZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGEgbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgIGluc2lkZSBvZiB0aGUgc3VwcGxpZWRcbiAgICogYGFuY2VzdG9yTm9kZWAuICBFeHBsb2l0cyB0aGUgSUQgbmFtaW5nIHNjaGVtZSB0byBwZXJmb3JtIHRoZSBzZWFyY2hcbiAgICogcXVpY2tseS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gYW5jZXN0b3JOb2RlIFNlYXJjaCBmcm9tIHRoaXMgcm9vdC5cbiAgICogQHBhcmFybSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge0RPTUV2ZW50VGFyZ2V0fSBET00gbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGZpbmRDb21wb25lbnRSb290OiBmdW5jdGlvbiAoYW5jZXN0b3JOb2RlLCB0YXJnZXRJRCkge1xuICAgIHZhciBmaXJzdENoaWxkcmVuID0gZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5O1xuICAgIHZhciBjaGlsZEluZGV4ID0gMDtcblxuICAgIHZhciBkZWVwZXN0QW5jZXN0b3IgPSBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yKHRhcmdldElEKSB8fCBhbmNlc3Rvck5vZGU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IG9uIHRoZSBuZXh0IGxpbmU7IGdpdmUgYW4gZWFybHkgd2FybmluZ1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGVlcGVzdEFuY2VzdG9yICE9IG51bGwsICdSZWFjdCBjYW5cXCd0IGZpbmQgdGhlIHJvb3QgY29tcG9uZW50IG5vZGUgZm9yIGRhdGEtcmVhY3RpZCB2YWx1ZSAnICsgJ2Alc2AuIElmIHlvdVxcJ3JlIHNlZWluZyB0aGlzIG1lc3NhZ2UsIGl0IHByb2JhYmx5IG1lYW5zIHRoYXQgJyArICd5b3VcXCd2ZSBsb2FkZWQgdHdvIGNvcGllcyBvZiBSZWFjdCBvbiB0aGUgcGFnZS4gQXQgdGhpcyB0aW1lLCBvbmx5ICcgKyAnYSBzaW5nbGUgY29weSBvZiBSZWFjdCBjYW4gYmUgbG9hZGVkIGF0IGEgdGltZS4nLCB0YXJnZXRJRCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZmlyc3RDaGlsZHJlblswXSA9IGRlZXBlc3RBbmNlc3Rvci5maXJzdENoaWxkO1xuICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gMTtcblxuICAgIHdoaWxlIChjaGlsZEluZGV4IDwgZmlyc3RDaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHZhciBjaGlsZCA9IGZpcnN0Q2hpbGRyZW5bY2hpbGRJbmRleCsrXTtcbiAgICAgIHZhciB0YXJnZXRDaGlsZDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZElEID0gUmVhY3RNb3VudC5nZXRJRChjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZElEKSB7XG4gICAgICAgICAgLy8gRXZlbiBpZiB3ZSBmaW5kIHRoZSBub2RlIHdlJ3JlIGxvb2tpbmcgZm9yLCB3ZSBmaW5pc2ggbG9vcGluZ1xuICAgICAgICAgIC8vIHRocm91Z2ggaXRzIHNpYmxpbmdzIHRvIGVuc3VyZSB0aGV5J3JlIGNhY2hlZCBzbyB0aGF0IHdlIGRvbid0IGhhdmVcbiAgICAgICAgICAvLyB0byByZXZpc2l0IHRoaXMgbm9kZSBhZ2Fpbi4gT3RoZXJ3aXNlLCB3ZSBtYWtlIG5eMiBjYWxscyB0byBnZXRJRFxuICAgICAgICAgIC8vIHdoZW4gdmlzaXRpbmcgdGhlIG1hbnkgY2hpbGRyZW4gb2YgYSBzaW5nbGUgbm9kZSBpbiBvcmRlci5cblxuICAgICAgICAgIGlmICh0YXJnZXRJRCA9PT0gY2hpbGRJRCkge1xuICAgICAgICAgICAgdGFyZ2V0Q2hpbGQgPSBjaGlsZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKFJlYWN0SW5zdGFuY2VIYW5kbGVzLmlzQW5jZXN0b3JJRE9mKGNoaWxkSUQsIHRhcmdldElEKSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgZmluZCBhIGNoaWxkIHdob3NlIElEIGlzIGFuIGFuY2VzdG9yIG9mIHRoZSBnaXZlbiBJRCxcbiAgICAgICAgICAgIC8vIHRoZW4gd2UgY2FuIGJlIHN1cmUgdGhhdCB3ZSBvbmx5IHdhbnQgdG8gc2VhcmNoIHRoZSBzdWJ0cmVlXG4gICAgICAgICAgICAvLyByb290ZWQgYXQgdGhpcyBjaGlsZCwgc28gd2UgY2FuIHRocm93IG91dCB0aGUgcmVzdCBvZiB0aGVcbiAgICAgICAgICAgIC8vIHNlYXJjaCBzdGF0ZS5cbiAgICAgICAgICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gY2hpbGRJbmRleCA9IDA7XG4gICAgICAgICAgICBmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoaXMgY2hpbGQgaGFkIG5vIElELCB0aGVuIHRoZXJlJ3MgYSBjaGFuY2UgdGhhdCBpdCB3YXNcbiAgICAgICAgICAvLyBpbmplY3RlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBicm93c2VyLCBhcyB3aGVuIGEgYDx0YWJsZT5gXG4gICAgICAgICAgLy8gZWxlbWVudCBzcHJvdXRzIGFuIGV4dHJhIGA8dGJvZHk+YCBjaGlsZCBhcyBhIHNpZGUgZWZmZWN0IG9mXG4gICAgICAgICAgLy8gYC5pbm5lckhUTUxgIHBhcnNpbmcuIE9wdGltaXN0aWNhbGx5IGNvbnRpbnVlIGRvd24gdGhpc1xuICAgICAgICAgIC8vIGJyYW5jaCwgYnV0IG5vdCBiZWZvcmUgZXhhbWluaW5nIHRoZSBvdGhlciBzaWJsaW5ncy5cbiAgICAgICAgICBmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Q2hpbGQpIHtcbiAgICAgICAgLy8gRW1wdHlpbmcgZmlyc3RDaGlsZHJlbi9maW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXkgaXNcbiAgICAgICAgLy8gbm90IG5lY2Vzc2FyeSBmb3IgY29ycmVjdG5lc3MsIGJ1dCBpdCBoZWxwcyB0aGUgR0MgcmVjbGFpbVxuICAgICAgICAvLyBhbnkgbm9kZXMgdGhhdCB3ZXJlIGxlZnQgYXQgdGhlIGVuZCBvZiB0aGUgc2VhcmNoLlxuICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENoaWxkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gMDtcblxuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdmaW5kQ29tcG9uZW50Um9vdCguLi4sICVzKTogVW5hYmxlIHRvIGZpbmQgZWxlbWVudC4gVGhpcyBwcm9iYWJseSAnICsgJ21lYW5zIHRoZSBET00gd2FzIHVuZXhwZWN0ZWRseSBtdXRhdGVkIChlLmcuLCBieSB0aGUgYnJvd3NlciksICcgKyAndXN1YWxseSBkdWUgdG8gZm9yZ2V0dGluZyBhIDx0Ym9keT4gd2hlbiB1c2luZyB0YWJsZXMsIG5lc3RpbmcgdGFncyAnICsgJ2xpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyBpbiBhbiA8c3ZnPiAnICsgJ3BhcmVudC4gJyArICdUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgd2l0aCBSZWFjdCBJRCBgJXNgLicsIHRhcmdldElELCBSZWFjdE1vdW50LmdldElEKGFuY2VzdG9yTm9kZSkpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgfSxcblxuICBfbW91bnRJbWFnZUludG9Ob2RlOiBmdW5jdGlvbiAobWFya3VwLCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCB0cmFuc2FjdGlvbikge1xuICAgICEoY29udGFpbmVyICYmIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21vdW50Q29tcG9uZW50SW50b05vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgdmFsaWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKHNob3VsZFJldXNlTWFya3VwKSB7XG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICAgIGlmIChSZWFjdE1hcmt1cENoZWNrc3VtLmNhblJldXNlTWFya3VwKG1hcmt1cCwgcm9vdEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaGVja3N1bSA9IHJvb3RFbGVtZW50LmdldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG4gICAgICAgIHJvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG5cbiAgICAgICAgdmFyIHJvb3RNYXJrdXAgPSByb290RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgIHJvb3RFbGVtZW50LnNldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSwgY2hlY2tzdW0pO1xuXG4gICAgICAgIHZhciBub3JtYWxpemVkTWFya3VwID0gbWFya3VwO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIC8vIGJlY2F1c2Ugcm9vdE1hcmt1cCBpcyByZXRyaWV2ZWQgZnJvbSB0aGUgRE9NLCB2YXJpb3VzIG5vcm1hbGl6YXRpb25zXG4gICAgICAgICAgLy8gd2lsbCBoYXZlIG9jY3VycmVkIHdoaWNoIHdpbGwgbm90IGJlIHByZXNlbnQgaW4gYG1hcmt1cGAuIEhlcmUsXG4gICAgICAgICAgLy8gaW5zZXJ0IG1hcmt1cCBpbnRvIGEgPGRpdj4gb3IgPGlmcmFtZT4gZGVwZW5kaW5nIG9uIHRoZSBjb250YWluZXJcbiAgICAgICAgICAvLyB0eXBlIHRvIHBlcmZvcm0gdGhlIHNhbWUgbm9ybWFsaXphdGlvbnMgYmVmb3JlIGNvbXBhcmluZy5cbiAgICAgICAgICB2YXIgbm9ybWFsaXplcjtcbiAgICAgICAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSkge1xuICAgICAgICAgICAgbm9ybWFsaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgbm9ybWFsaXplci5pbm5lckhUTUwgPSBtYXJrdXA7XG4gICAgICAgICAgICBub3JtYWxpemVkTWFya3VwID0gbm9ybWFsaXplci5pbm5lckhUTUw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9ybWFsaXplcik7XG4gICAgICAgICAgICBub3JtYWxpemVyLmNvbnRlbnREb2N1bWVudC53cml0ZShtYXJrdXApO1xuICAgICAgICAgICAgbm9ybWFsaXplZE1hcmt1cCA9IG5vcm1hbGl6ZXIuY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG5vcm1hbGl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaWZmSW5kZXggPSBmaXJzdERpZmZlcmVuY2VJbmRleChub3JtYWxpemVkTWFya3VwLCByb290TWFya3VwKTtcbiAgICAgICAgdmFyIGRpZmZlcmVuY2UgPSAnIChjbGllbnQpICcgKyBub3JtYWxpemVkTWFya3VwLnN1YnN0cmluZyhkaWZmSW5kZXggLSAyMCwgZGlmZkluZGV4ICsgMjApICsgJ1xcbiAoc2VydmVyKSAnICsgcm9vdE1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4IC0gMjAsIGRpZmZJbmRleCArIDIwKTtcblxuICAgICAgICAhKGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnWW91XFwncmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCB0byB0aGUgZG9jdW1lbnQgdXNpbmcgJyArICdzZXJ2ZXIgcmVuZGVyaW5nIGJ1dCB0aGUgY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgdXN1YWxseSAnICsgJ21lYW5zIHlvdSByZW5kZXJlZCBhIGRpZmZlcmVudCBjb21wb25lbnQgdHlwZSBvciBwcm9wcyBvbiAnICsgJ3RoZSBjbGllbnQgZnJvbSB0aGUgb25lIG9uIHRoZSBzZXJ2ZXIsIG9yIHlvdXIgcmVuZGVyKCkgJyArICdtZXRob2RzIGFyZSBpbXB1cmUuIFJlYWN0IGNhbm5vdCBoYW5kbGUgdGhpcyBjYXNlIGR1ZSB0byAnICsgJ2Nyb3NzLWJyb3dzZXIgcXVpcmtzIGJ5IHJlbmRlcmluZyBhdCB0aGUgZG9jdW1lbnQgcm9vdC4gWW91ICcgKyAnc2hvdWxkIGxvb2sgZm9yIGVudmlyb25tZW50IGRlcGVuZGVudCBjb2RlIGluIHlvdXIgY29tcG9uZW50cyAnICsgJ2FuZCBlbnN1cmUgdGhlIHByb3BzIGFyZSB0aGUgc2FtZSBjbGllbnQgYW5kIHNlcnZlciBzaWRlOlxcbiVzJywgZGlmZmVyZW5jZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdCBhdHRlbXB0ZWQgdG8gcmV1c2UgbWFya3VwIGluIGEgY29udGFpbmVyIGJ1dCB0aGUgJyArICdjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyBnZW5lcmFsbHkgbWVhbnMgdGhhdCB5b3UgYXJlICcgKyAndXNpbmcgc2VydmVyIHJlbmRlcmluZyBhbmQgdGhlIG1hcmt1cCBnZW5lcmF0ZWQgb24gdGhlICcgKyAnc2VydmVyIHdhcyBub3Qgd2hhdCB0aGUgY2xpZW50IHdhcyBleHBlY3RpbmcuIFJlYWN0IGluamVjdGVkICcgKyAnbmV3IG1hcmt1cCB0byBjb21wZW5zYXRlIHdoaWNoIHdvcmtzIGJ1dCB5b3UgaGF2ZSBsb3N0IG1hbnkgJyArICdvZiB0aGUgYmVuZWZpdHMgb2Ygc2VydmVyIHJlbmRlcmluZy4gSW5zdGVhZCwgZmlndXJlIG91dCAnICsgJ3doeSB0aGUgbWFya3VwIGJlaW5nIGdlbmVyYXRlZCBpcyBkaWZmZXJlbnQgb24gdGhlIGNsaWVudCAnICsgJ29yIHNlcnZlcjpcXG4lcycsIGRpZmZlcmVuY2UpIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJ1dCAnICsgJ3lvdSBkaWRuXFwndCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gV2UgY2FuXFwndCBkbyB0aGlzICcgKyAnd2l0aG91dCB1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGR1ZSB0byBjcm9zcy1icm93c2VyIHF1aXJrcy4gJyArICdTZWUgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgd2hpbGUgKGNvbnRhaW5lci5sYXN0Q2hpbGQpIHtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1hcmt1cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElubmVySFRNTChjb250YWluZXIsIG1hcmt1cCk7XG4gICAgfVxuICB9LFxuXG4gIG93bmVyRG9jdW1lbnRDb250ZXh0S2V5OiBvd25lckRvY3VtZW50Q29udGV4dEtleSxcblxuICAvKipcbiAgICogUmVhY3QgSUQgdXRpbGl0aWVzLlxuICAgKi9cblxuICBnZXRSZWFjdFJvb3RJRDogZ2V0UmVhY3RSb290SUQsXG5cbiAgZ2V0SUQ6IGdldElELFxuXG4gIHNldElEOiBzZXRJRCxcblxuICBnZXROb2RlOiBnZXROb2RlLFxuXG4gIGdldE5vZGVGcm9tSW5zdGFuY2U6IGdldE5vZGVGcm9tSW5zdGFuY2UsXG5cbiAgaXNWYWxpZDogaXNWYWxpZCxcblxuICBwdXJnZUlEOiBwdXJnZUlEXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RNb3VudCwgJ1JlYWN0TW91bnQnLCB7XG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQnLFxuICBfbW91bnRJbWFnZUludG9Ob2RlOiAnX21vdW50SW1hZ2VJbnRvTm9kZSdcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUk5iM1Z1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQlNaV0ZqZEUxdmRXNTBYRzRnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnUkU5TlVISnZjR1Z5ZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMFJQVFZCeWIzQmxjblI1SnlrN1hHNTJZWElnVW1WaFkzUkNjbTkzYzJWeVJYWmxiblJGYldsMGRHVnlJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRUp5YjNkelpYSkZkbVZ1ZEVWdGFYUjBaWEluS1R0Y2JuWmhjaUJTWldGamRFTjFjbkpsYm5SUGQyNWxjaUE5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JEZFhKeVpXNTBUM2R1WlhJbktUdGNiblpoY2lCU1pXRmpkRVJQVFVabFlYUjFjbVZHYkdGbmN5QTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUkVUMDFHWldGMGRYSmxSbXhoWjNNbktUdGNiblpoY2lCU1pXRmpkRVZzWlcxbGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBSV3hsYldWdWRDY3BPMXh1ZG1GeUlGSmxZV04wUlcxd2RIbERiMjF3YjI1bGJuUlNaV2RwYzNSeWVTQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZEZKbFoybHpkSEo1SnlrN1hHNTJZWElnVW1WaFkzUkpibk4wWVc1alpVaGhibVJzWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6SnlrN1hHNTJZWElnVW1WaFkzUkpibk4wWVc1alpVMWhjQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JKYm5OMFlXNWpaVTFoY0NjcE8xeHVkbUZ5SUZKbFlXTjBUV0Z5YTNWd1EyaGxZMnR6ZFcwZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFRXRnlhM1Z3UTJobFkydHpkVzBuS1R0Y2JuWmhjaUJTWldGamRGQmxjbVlnUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wVUdWeVppY3BPMXh1ZG1GeUlGSmxZV04wVW1WamIyNWphV3hsY2lBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSU1pXTnZibU5wYkdWeUp5azdYRzUyWVhJZ1VtVmhZM1JWY0dSaGRHVlJkV1YxWlNBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSVmNHUmhkR1ZSZFdWMVpTY3BPMXh1ZG1GeUlGSmxZV04wVlhCa1lYUmxjeUE5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JWY0dSaGRHVnpKeWs3WEc1Y2JuWmhjaUJoYzNOcFoyNGdQU0J5WlhGMWFYSmxLQ2N1TDA5aWFtVmpkQzVoYzNOcFoyNG5LVHRjYm5aaGNpQmxiWEIwZVU5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDJWdGNIUjVUMkpxWldOMEp5azdYRzUyWVhJZ1kyOXVkR0ZwYm5OT2IyUmxJRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2WTI5dWRHRnBibk5PYjJSbEp5azdYRzUyWVhJZ2FXNXpkR0Z1ZEdsaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZENBOUlISmxjWFZwY21Vb0p5NHZhVzV6ZEdGdWRHbGhkR1ZTWldGamRFTnZiWEJ2Ym1WdWRDY3BPMXh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMmx1ZG1GeWFXRnVkQ2NwTzF4dWRtRnlJSE5sZEVsdWJtVnlTRlJOVENBOUlISmxjWFZwY21Vb0p5NHZjMlYwU1c1dVpYSklWRTFNSnlrN1hHNTJZWElnYzJodmRXeGtWWEJrWVhSbFVtVmhZM1JEYjIxd2IyNWxiblFnUFNCeVpYRjFhWEpsS0NjdUwzTm9iM1ZzWkZWd1pHRjBaVkpsWVdOMFEyOXRjRzl1Wlc1MEp5azdYRzUyWVhJZ2RtRnNhV1JoZEdWRVQwMU9aWE4wYVc1bklEMGdjbVZ4ZFdseVpTZ25MaTkyWVd4cFpHRjBaVVJQVFU1bGMzUnBibWNuS1R0Y2JuWmhjaUIzWVhKdWFXNW5JRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2ZDJGeWJtbHVaeWNwTzF4dVhHNTJZWElnUVZSVVVsOU9RVTFGSUQwZ1JFOU5VSEp2Y0dWeWRIa3VTVVJmUVZSVVVrbENWVlJGWDA1QlRVVTdYRzUyWVhJZ2JtOWtaVU5oWTJobElEMGdlMzA3WEc1Y2JuWmhjaUJGVEVWTlJVNVVYMDVQUkVWZlZGbFFSU0E5SURFN1hHNTJZWElnUkU5RFgwNVBSRVZmVkZsUVJTQTlJRGs3WEc1MllYSWdSRTlEVlUxRlRsUmZSbEpCUjAxRlRsUmZUazlFUlY5VVdWQkZJRDBnTVRFN1hHNWNiblpoY2lCdmQyNWxja1J2WTNWdFpXNTBRMjl1ZEdWNGRFdGxlU0E5SUNkZlgxSmxZV04wVFc5MWJuUmZiM2R1WlhKRWIyTjFiV1Z1ZENRbklDc2dUV0YwYUM1eVlXNWtiMjBvS1M1MGIxTjBjbWx1Wnlnek5pa3VjMnhwWTJVb01pazdYRzVjYmk4cUtpQk5ZWEJ3YVc1bklHWnliMjBnY21WaFkzUlNiMjkwU1VRZ2RHOGdVbVZoWTNRZ1kyOXRjRzl1Wlc1MElHbHVjM1JoYm1ObExpQXFMMXh1ZG1GeUlHbHVjM1JoYm1ObGMwSjVVbVZoWTNSU2IyOTBTVVFnUFNCN2ZUdGNibHh1THlvcUlFMWhjSEJwYm1jZ1puSnZiU0J5WldGamRGSnZiM1JKUkNCMGJ5QmdZMjl1ZEdGcGJtVnlZQ0J1YjJSbGN5NGdLaTljYm5aaGNpQmpiMjUwWVdsdVpYSnpRbmxTWldGamRGSnZiM1JKUkNBOUlIdDlPMXh1WEc1cFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQXZLaW9nWDE5RVJWWmZYeTF2Ym14NUlHMWhjSEJwYm1jZ1puSnZiU0J5WldGamRGSnZiM1JKUkNCMGJ5QnliMjkwSUdWc1pXMWxiblJ6TGlBcUwxeHVJQ0IyWVhJZ2NtOXZkRVZzWlcxbGJuUnpRbmxTWldGamRGSnZiM1JKUkNBOUlIdDlPMXh1ZlZ4dVhHNHZMeUJWYzJWa0lIUnZJSE4wYjNKbElHSnlaV0ZrZEdndFptbHljM1FnYzJWaGNtTm9JSE4wWVhSbElHbHVJR1pwYm1SRGIyMXdiMjVsYm5SU2IyOTBMbHh1ZG1GeUlHWnBibVJEYjIxd2IyNWxiblJTYjI5MFVtVjFjMkZpYkdWQmNuSmhlU0E5SUZ0ZE8xeHVYRzR2S2lwY2JpQXFJRVpwYm1SeklIUm9aU0JwYm1SbGVDQnZaaUIwYUdVZ1ptbHljM1FnWTJoaGNtRmpkR1Z5WEc0Z0tpQjBhR0YwSjNNZ2JtOTBJR052YlcxdmJpQmlaWFIzWldWdUlIUm9aU0IwZDI4Z1oybDJaVzRnYzNSeWFXNW5jeTVjYmlBcVhHNGdLaUJBY21WMGRYSnVJSHR1ZFcxaVpYSjlJSFJvWlNCcGJtUmxlQ0J2WmlCMGFHVWdZMmhoY21GamRHVnlJSGRvWlhKbElIUm9aU0J6ZEhKcGJtZHpJR1JwZG1WeVoyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1ptbHljM1JFYVdabVpYSmxibU5sU1c1a1pYZ29jM1J5YVc1bk1Td2djM1J5YVc1bk1pa2dlMXh1SUNCMllYSWdiV2x1VEdWdUlEMGdUV0YwYUM1dGFXNG9jM1J5YVc1bk1TNXNaVzVuZEdnc0lITjBjbWx1WnpJdWJHVnVaM1JvS1R0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J0YVc1TVpXNDdJR2tyS3lrZ2UxeHVJQ0FnSUdsbUlDaHpkSEpwYm1jeExtTm9ZWEpCZENocEtTQWhQVDBnYzNSeWFXNW5NaTVqYUdGeVFYUW9hU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjM1J5YVc1bk1TNXNaVzVuZEdnZ1BUMDlJSE4wY21sdVp6SXViR1Z1WjNSb0lEOGdMVEVnT2lCdGFXNU1aVzQ3WEc1OVhHNWNiaThxS2x4dUlDb2dRSEJoY21GdElIdEVUMDFGYkdWdFpXNTBmRVJQVFVSdlkzVnRaVzUwZlNCamIyNTBZV2x1WlhJZ1JFOU5JR1ZzWlcxbGJuUWdkR2hoZENCdFlYa2dZMjl1ZEdGcGJseHVJQ29nWVNCU1pXRmpkQ0JqYjIxd2IyNWxiblJjYmlBcUlFQnlaWFIxY200Z2V6OHFmU0JFVDAwZ1pXeGxiV1Z1ZENCMGFHRjBJRzFoZVNCb1lYWmxJSFJvWlNCeVpXRmpkRkp2YjNRZ1NVUXNJRzl5SUc1MWJHd3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlHZGxkRkpsWVdOMFVtOXZkRVZzWlcxbGJuUkpia052Ym5SaGFXNWxjaWhqYjI1MFlXbHVaWElwSUh0Y2JpQWdhV1lnS0NGamIyNTBZV2x1WlhJcElIdGNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnZlZ4dVhHNGdJR2xtSUNoamIyNTBZV2x1WlhJdWJtOWtaVlI1Y0dVZ1BUMDlJRVJQUTE5T1QwUkZYMVJaVUVVcElIdGNiaUFnSUNCeVpYUjFjbTRnWTI5dWRHRnBibVZ5TG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMjl1ZEdGcGJtVnlMbVpwY25OMFEyaHBiR1E3WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQWNHRnlZVzBnZTBSUFRVVnNaVzFsYm5SOUlHTnZiblJoYVc1bGNpQkVUMDBnWld4bGJXVnVkQ0IwYUdGMElHMWhlU0JqYjI1MFlXbHVJR0VnVW1WaFkzUWdZMjl0Y0c5dVpXNTBMbHh1SUNvZ1FISmxkSFZ5YmlCN1AzTjBjbWx1WjMwZ1FTQmNJbkpsWVdOMFVtOXZkRndpSUVsRUxDQnBaaUJoSUZKbFlXTjBJR052YlhCdmJtVnVkQ0JwY3lCeVpXNWtaWEpsWkM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFVtVmhZM1JTYjI5MFNVUW9ZMjl1ZEdGcGJtVnlLU0I3WEc0Z0lIWmhjaUJ5YjI5MFJXeGxiV1Z1ZENBOUlHZGxkRkpsWVdOMFVtOXZkRVZzWlcxbGJuUkpia052Ym5SaGFXNWxjaWhqYjI1MFlXbHVaWElwTzF4dUlDQnlaWFIxY200Z2NtOXZkRVZzWlcxbGJuUWdKaVlnVW1WaFkzUk5iM1Z1ZEM1blpYUkpSQ2h5YjI5MFJXeGxiV1Z1ZENrN1hHNTlYRzVjYmk4cUtseHVJQ29nUVdOalpYTnphVzVuSUc1dlpHVmJRVlJVVWw5T1FVMUZYU0J2Y2lCallXeHNhVzVuSUdkbGRFRjBkSEpwWW5WMFpTaEJWRlJTWDA1QlRVVXBJRzl1SUdFZ1ptOXliVnh1SUNvZ1pXeGxiV1Z1ZENCallXNGdjbVYwZFhKdUlHbDBjeUJqYjI1MGNtOXNJSGRvYjNObElHNWhiV1VnYjNJZ1NVUWdaWEYxWVd4eklFRlVWRkpmVGtGTlJTNGdRV3hzWEc0Z0tpQkVUMDBnYm05a1pYTWdjM1Z3Y0c5eWRDQmdaMlYwUVhSMGNtbGlkWFJsVG05a1pXQWdZblYwSUhSb2FYTWdZMkZ1SUdGc2MyOGdaMlYwSUdOaGJHeGxaQ0J2Ymx4dUlDb2diM1JvWlhJZ2IySnFaV04wY3lCemJ5QnFkWE4wSUhKbGRIVnliaUFuSnlCcFppQjNaU2R5WlNCbmFYWmxiaUJ6YjIxbGRHaHBibWNnYjNSb1pYSWdkR2hoYmlCaFhHNGdLaUJFVDAwZ2JtOWtaU0FvYzNWamFDQmhjeUIzYVc1a2IzY3BMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdQMFJQVFVWc1pXMWxiblI4UkU5TlYybHVaRzkzZkVSUFRVUnZZM1Z0Wlc1MGZFUlBUVlJsZUhST2IyUmxmU0J1YjJSbElFUlBUU0J1YjJSbExseHVJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JKUkNCdlppQjBhR1VnYzNWd2NHeHBaV1FnWUdSdmJVNXZaR1ZnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJuWlhSSlJDaHViMlJsS1NCN1hHNGdJSFpoY2lCcFpDQTlJR2x1ZEdWeWJtRnNSMlYwU1VRb2JtOWtaU2s3WEc0Z0lHbG1JQ2hwWkNrZ2UxeHVJQ0FnSUdsbUlDaHViMlJsUTJGamFHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2FXUXBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kyRmphR1ZrSUQwZ2JtOWtaVU5oWTJobFcybGtYVHRjYmlBZ0lDQWdJR2xtSUNoallXTm9aV1FnSVQwOUlHNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lTRnBjMVpoYkdsa0tHTmhZMmhsWkN3Z2FXUXBJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oxSmxZV04wVFc5MWJuUTZJRlIzYnlCMllXeHBaQ0JpZFhRZ2RXNWxjWFZoYkNCdWIyUmxjeUIzYVhSb0lIUm9aU0J6WVcxbElHQWxjMkE2SUNWekp5d2dRVlJVVWw5T1FVMUZMQ0JwWkNrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1WEc0Z0lDQWdJQ0FnSUc1dlpHVkRZV05vWlZ0cFpGMGdQU0J1YjJSbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J1YjJSbFEyRmphR1ZiYVdSZElEMGdibTlrWlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYVdRN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdsdWRHVnlibUZzUjJWMFNVUW9ibTlrWlNrZ2UxeHVJQ0F2THlCSlppQnViMlJsSUdseklITnZiV1YwYUdsdVp5QnNhV3RsSUdFZ2QybHVaRzkzTENCa2IyTjFiV1Z1ZEN3Z2IzSWdkR1Y0ZENCdWIyUmxMQ0J1YjI1bElHOW1YRzRnSUM4dklIZG9hV05vSUhOMWNIQnZjblFnWVhSMGNtbGlkWFJsY3lCdmNpQmhJQzVuWlhSQmRIUnlhV0oxZEdVZ2JXVjBhRzlrTENCbmNtRmpaV1oxYkd4NUlISmxkSFZ5Ymx4dUlDQXZMeUIwYUdVZ1pXMXdkSGtnYzNSeWFXNW5MQ0JoY3lCcFppQjBhR1VnWVhSMGNtbGlkWFJsSUhkbGNtVWdiV2x6YzJsdVp5NWNiaUFnY21WMGRYSnVJRzV2WkdVZ0ppWWdibTlrWlM1blpYUkJkSFJ5YVdKMWRHVWdKaVlnYm05a1pTNW5aWFJCZEhSeWFXSjFkR1VvUVZSVVVsOU9RVTFGS1NCOGZDQW5KenRjYm4xY2JseHVMeW9xWEc0Z0tpQlRaWFJ6SUhSb1pTQlNaV0ZqZEMxemNHVmphV1pwWXlCSlJDQnZaaUIwYUdVZ1oybDJaVzRnYm05a1pTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwUlBUVVZzWlcxbGJuUjlJRzV2WkdVZ1ZHaGxJRVJQVFNCdWIyUmxJSGRvYjNObElFbEVJSGRwYkd3Z1ltVWdjMlYwTGx4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHbGtJRlJvWlNCMllXeDFaU0J2WmlCMGFHVWdTVVFnWVhSMGNtbGlkWFJsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ6WlhSSlJDaHViMlJsTENCcFpDa2dlMXh1SUNCMllYSWdiMnhrU1VRZ1BTQnBiblJsY201aGJFZGxkRWxFS0c1dlpHVXBPMXh1SUNCcFppQW9iMnhrU1VRZ0lUMDlJR2xrS1NCN1hHNGdJQ0FnWkdWc1pYUmxJRzV2WkdWRFlXTm9aVnR2YkdSSlJGMDdYRzRnSUgxY2JpQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9RVlJVVWw5T1FVMUZMQ0JwWkNrN1hHNGdJRzV2WkdWRFlXTm9aVnRwWkYwZ1BTQnViMlJsTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVpwYm1SeklIUm9aU0J1YjJSbElIZHBkR2dnZEdobElITjFjSEJzYVdWa0lGSmxZV04wTFdkbGJtVnlZWFJsWkNCRVQwMGdTVVF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2xrSUVFZ1VtVmhZM1F0WjJWdVpYSmhkR1ZrSUVSUFRTQkpSQzVjYmlBcUlFQnlaWFIxY200Z2UwUlBUVVZzWlcxbGJuUjlJRVJQVFNCdWIyUmxJSGRwZEdnZ2RHaGxJSE4xY0hCc1pXUWdZR2xrWUM1Y2JpQXFJRUJwYm5SbGNtNWhiRnh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJPYjJSbEtHbGtLU0I3WEc0Z0lHbG1JQ2doYm05a1pVTmhZMmhsTG1oaGMwOTNibEJ5YjNCbGNuUjVLR2xrS1NCOGZDQWhhWE5XWVd4cFpDaHViMlJsUTJGamFHVmJhV1JkTENCcFpDa3BJSHRjYmlBZ0lDQnViMlJsUTJGamFHVmJhV1JkSUQwZ1VtVmhZM1JOYjNWdWRDNW1hVzVrVW1WaFkzUk9iMlJsUW5sSlJDaHBaQ2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzV2WkdWRFlXTm9aVnRwWkYwN1hHNTlYRzVjYmk4cUtseHVJQ29nUm1sdVpITWdkR2hsSUc1dlpHVWdkMmwwYUNCMGFHVWdjM1Z3Y0d4cFpXUWdjSFZpYkdsaklGSmxZV04wSUdsdWMzUmhibU5sTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3S24wZ2FXNXpkR0Z1WTJVZ1FTQndkV0pzYVdNZ1VtVmhZM1FnYVc1emRHRnVZMlV1WEc0Z0tpQkFjbVYwZFhKdUlIcy9SRTlOUld4bGJXVnVkSDBnUkU5TklHNXZaR1VnZDJsMGFDQjBhR1VnYzNWd2NHeGxaQ0JnYVdSZ0xseHVJQ29nUUdsdWRHVnlibUZzWEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEU1dlpHVkdjbTl0U1c1emRHRnVZMlVvYVc1emRHRnVZMlVwSUh0Y2JpQWdkbUZ5SUdsa0lEMGdVbVZoWTNSSmJuTjBZVzVqWlUxaGNDNW5aWFFvYVc1emRHRnVZMlVwTGw5eWIyOTBUbTlrWlVsRU8xeHVJQ0JwWmlBb1VtVmhZM1JGYlhCMGVVTnZiWEJ2Ym1WdWRGSmxaMmx6ZEhKNUxtbHpUblZzYkVOdmJYQnZibVZ1ZEVsRUtHbGtLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzRnSUdsbUlDZ2hibTlrWlVOaFkyaGxMbWhoYzA5M2JsQnliM0JsY25SNUtHbGtLU0I4ZkNBaGFYTldZV3hwWkNodWIyUmxRMkZqYUdWYmFXUmRMQ0JwWkNrcElIdGNiaUFnSUNCdWIyUmxRMkZqYUdWYmFXUmRJRDBnVW1WaFkzUk5iM1Z1ZEM1bWFXNWtVbVZoWTNST2IyUmxRbmxKUkNocFpDazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHNXZaR1ZEWVdOb1pWdHBaRjA3WEc1OVhHNWNiaThxS2x4dUlDb2dRU0J1YjJSbElHbHpJRndpZG1Gc2FXUmNJaUJwWmlCcGRDQnBjeUJqYjI1MFlXbHVaV1FnWW5rZ1lTQmpkWEp5Wlc1MGJIa2diVzkxYm5SbFpDQmpiMjUwWVdsdVpYSXVYRzRnS2x4dUlDb2dWR2hwY3lCdFpXRnVjeUIwYUdGMElIUm9aU0J1YjJSbElHUnZaWE1nYm05MElHaGhkbVVnZEc4Z1ltVWdZMjl1ZEdGcGJtVmtJR0o1SUdFZ1pHOWpkVzFsYm5RZ2FXNWNiaUFxSUc5eVpHVnlJSFJ2SUdKbElHTnZibk5wWkdWeVpXUWdkbUZzYVdRdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUhzL1JFOU5SV3hsYldWdWRIMGdibTlrWlNCVWFHVWdZMkZ1Wkdsa1lYUmxJRVJQVFNCdWIyUmxMbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdsa0lGUm9aU0JsZUhCbFkzUmxaQ0JKUkNCdlppQjBhR1VnYm05a1pTNWNiaUFxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUZkb1pYUm9aWElnZEdobElHNXZaR1VnYVhNZ1kyOXVkR0ZwYm1Wa0lHSjVJR0VnYlc5MWJuUmxaQ0JqYjI1MFlXbHVaWEl1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x6Vm1Gc2FXUW9ibTlrWlN3Z2FXUXBJSHRjYmlBZ2FXWWdLRzV2WkdVcElIdGNiaUFnSUNBaEtHbHVkR1Z5Ym1Gc1IyVjBTVVFvYm05a1pTa2dQVDA5SUdsa0tTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkU1pXRmpkRTF2ZFc1ME9pQlZibVY0Y0dWamRHVmtJRzF2WkdsbWFXTmhkR2x2YmlCdlppQmdKWE5nSnl3Z1FWUlVVbDlPUVUxRktTQTZJR2x1ZG1GeWFXRnVkQ2htWVd4elpTa2dPaUIxYm1SbFptbHVaV1E3WEc1Y2JpQWdJQ0IyWVhJZ1kyOXVkR0ZwYm1WeUlEMGdVbVZoWTNSTmIzVnVkQzVtYVc1a1VtVmhZM1JEYjI1MFlXbHVaWEpHYjNKSlJDaHBaQ2s3WEc0Z0lDQWdhV1lnS0dOdmJuUmhhVzVsY2lBbUppQmpiMjUwWVdsdWMwNXZaR1VvWTI5dWRHRnBibVZ5TENCdWIyUmxLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTmhkWE5sY3lCMGFHVWdZMkZqYUdVZ2RHOGdabTl5WjJWMElHRmliM1YwSUc5dVpTQlNaV0ZqZEMxemNHVmphV1pwWXlCSlJDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2FXUWdWR2hsSUVsRUlIUnZJR1p2Y21kbGRDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NIVnlaMlZKUkNocFpDa2dlMXh1SUNCa1pXeGxkR1VnYm05a1pVTmhZMmhsVzJsa1hUdGNibjFjYmx4dWRtRnlJR1JsWlhCbGMzUk9iMlJsVTI5R1lYSWdQU0J1ZFd4c08xeHVablZ1WTNScGIyNGdabWx1WkVSbFpYQmxjM1JEWVdOb1pXUkJibU5sYzNSdmNrbHRjR3dvWVc1alpYTjBiM0pKUkNrZ2UxeHVJQ0IyWVhJZ1lXNWpaWE4wYjNJZ1BTQnViMlJsUTJGamFHVmJZVzVqWlhOMGIzSkpSRjA3WEc0Z0lHbG1JQ2hoYm1ObGMzUnZjaUFtSmlCcGMxWmhiR2xrS0dGdVkyVnpkRzl5TENCaGJtTmxjM1J2Y2tsRUtTa2dlMXh1SUNBZ0lHUmxaWEJsYzNST2IyUmxVMjlHWVhJZ1BTQmhibU5sYzNSdmNqdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJVYUdseklHNXZaR1VnYVhOdUozUWdjRzl3ZFd4aGRHVmtJR2x1SUhSb1pTQmpZV05vWlN3Z2MyOGdjSEpsYzNWdFlXSnNlU0J1YjI1bElHOW1JR2wwYzF4dUlDQWdJQzh2SUdSbGMyTmxibVJoYm5SeklHRnlaUzRnUW5KbFlXc2diM1YwSUc5bUlIUm9aU0JzYjI5d0xseHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJpQjBhR1VnWkdWbGNHVnpkQ0JqWVdOb1pXUWdibTlrWlNCM2FHOXpaU0JKUkNCcGN5QmhJSEJ5WldacGVDQnZaaUJnZEdGeVoyVjBTVVJnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJtYVc1a1JHVmxjR1Z6ZEVOaFkyaGxaRUZ1WTJWemRHOXlLSFJoY21kbGRFbEVLU0I3WEc0Z0lHUmxaWEJsYzNST2IyUmxVMjlHWVhJZ1BTQnVkV3hzTzF4dUlDQlNaV0ZqZEVsdWMzUmhibU5sU0dGdVpHeGxjeTUwY21GMlpYSnpaVUZ1WTJWemRHOXljeWgwWVhKblpYUkpSQ3dnWm1sdVpFUmxaWEJsYzNSRFlXTm9aV1JCYm1ObGMzUnZja2x0Y0d3cE8xeHVYRzRnSUhaaGNpQm1iM1Z1WkU1dlpHVWdQU0JrWldWd1pYTjBUbTlrWlZOdlJtRnlPMXh1SUNCa1pXVndaWE4wVG05a1pWTnZSbUZ5SUQwZ2JuVnNiRHRjYmlBZ2NtVjBkWEp1SUdadmRXNWtUbTlrWlR0Y2JuMWNibHh1THlvcVhHNGdLaUJOYjNWdWRITWdkR2hwY3lCamIyMXdiMjVsYm5RZ1lXNWtJR2x1YzJWeWRITWdhWFFnYVc1MGJ5QjBhR1VnUkU5TkxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1VtVmhZM1JEYjIxd2IyNWxiblI5SUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sSUZSb1pTQnBibk4wWVc1alpTQjBieUJ0YjNWdWRDNWNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J5YjI5MFNVUWdSRTlOSUVsRUlHOW1JSFJvWlNCeWIyOTBJRzV2WkdVdVhHNGdLaUJBY0dGeVlXMGdlMFJQVFVWc1pXMWxiblI5SUdOdmJuUmhhVzVsY2lCRVQwMGdaV3hsYldWdWRDQjBieUJ0YjNWdWRDQnBiblJ2TGx4dUlDb2dRSEJoY21GdElIdFNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dWZTQjBjbUZ1YzJGamRHbHZibHh1SUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCemFHOTFiR1JTWlhWelpVMWhjbXQxY0NCSlppQjBjblZsTENCa2J5QnViM1FnYVc1elpYSjBJRzFoY210MWNGeHVJQ292WEc1bWRXNWpkR2x2YmlCdGIzVnVkRU52YlhCdmJtVnVkRWx1ZEc5T2IyUmxLR052YlhCdmJtVnVkRWx1YzNSaGJtTmxMQ0J5YjI5MFNVUXNJR052Ym5SaGFXNWxjaXdnZEhKaGJuTmhZM1JwYjI0c0lITm9iM1ZzWkZKbGRYTmxUV0Z5YTNWd0xDQmpiMjUwWlhoMEtTQjdYRzRnSUdsbUlDaFNaV0ZqZEVSUFRVWmxZWFIxY21WR2JHRm5jeTUxYzJWRGNtVmhkR1ZGYkdWdFpXNTBLU0I3WEc0Z0lDQWdZMjl1ZEdWNGRDQTlJR0Z6YzJsbmJpaDdmU3dnWTI5dWRHVjRkQ2s3WEc0Z0lDQWdhV1lnS0dOdmJuUmhhVzVsY2k1dWIyUmxWSGx3WlNBOVBUMGdSRTlEWDA1UFJFVmZWRmxRUlNrZ2UxeHVJQ0FnSUNBZ1kyOXVkR1Y0ZEZ0dmQyNWxja1J2WTNWdFpXNTBRMjl1ZEdWNGRFdGxlVjBnUFNCamIyNTBZV2x1WlhJN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR052Ym5SbGVIUmJiM2R1WlhKRWIyTjFiV1Z1ZEVOdmJuUmxlSFJMWlhsZElEMGdZMjl1ZEdGcGJtVnlMbTkzYm1WeVJHOWpkVzFsYm5RN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdhV1lnS0dOdmJuUmxlSFFnUFQwOUlHVnRjSFI1VDJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0JqYjI1MFpYaDBJRDBnZTMwN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCMFlXY2dQU0JqYjI1MFlXbHVaWEl1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tUdGNiaUFnSUNCamIyNTBaWGgwVzNaaGJHbGtZWFJsUkU5TlRtVnpkR2x1Wnk1aGJtTmxjM1J2Y2tsdVptOURiMjUwWlhoMFMyVjVYU0E5SUhaaGJHbGtZWFJsUkU5TlRtVnpkR2x1Wnk1MWNHUmhkR1ZrUVc1alpYTjBiM0pKYm1adktHNTFiR3dzSUhSaFp5d2diblZzYkNrN1hHNGdJSDFjYmlBZ2RtRnlJRzFoY210MWNDQTlJRkpsWVdOMFVtVmpiMjVqYVd4bGNpNXRiM1Z1ZEVOdmJYQnZibVZ1ZENoamIyMXdiMjVsYm5SSmJuTjBZVzVqWlN3Z2NtOXZkRWxFTENCMGNtRnVjMkZqZEdsdmJpd2dZMjl1ZEdWNGRDazdYRzRnSUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTGw5eVpXNWtaWEpsWkVOdmJYQnZibVZ1ZEM1ZmRHOXdUR1YyWld4WGNtRndjR1Z5SUQwZ1kyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVN1hHNGdJRkpsWVdOMFRXOTFiblF1WDIxdmRXNTBTVzFoWjJWSmJuUnZUbTlrWlNodFlYSnJkWEFzSUdOdmJuUmhhVzVsY2l3Z2MyaHZkV3hrVW1WMWMyVk5ZWEpyZFhBc0lIUnlZVzV6WVdOMGFXOXVLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkNZWFJqYUdWa0lHMXZkVzUwTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUkRiMjF3YjI1bGJuUjlJR052YlhCdmJtVnVkRWx1YzNSaGJtTmxJRlJvWlNCcGJuTjBZVzVqWlNCMGJ5QnRiM1Z1ZEM1Y2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnliMjkwU1VRZ1JFOU5JRWxFSUc5bUlIUm9aU0J5YjI5MElHNXZaR1V1WEc0Z0tpQkFjR0Z5WVcwZ2UwUlBUVVZzWlcxbGJuUjlJR052Ym5SaGFXNWxjaUJFVDAwZ1pXeGxiV1Z1ZENCMGJ5QnRiM1Z1ZENCcGJuUnZMbHh1SUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCemFHOTFiR1JTWlhWelpVMWhjbXQxY0NCSlppQjBjblZsTENCa2J5QnViM1FnYVc1elpYSjBJRzFoY210MWNGeHVJQ292WEc1bWRXNWpkR2x2YmlCaVlYUmphR1ZrVFc5MWJuUkRiMjF3YjI1bGJuUkpiblJ2VG05a1pTaGpiMjF3YjI1bGJuUkpibk4wWVc1alpTd2djbTl2ZEVsRUxDQmpiMjUwWVdsdVpYSXNJSE5vYjNWc1pGSmxkWE5sVFdGeWEzVndMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lIWmhjaUIwY21GdWMyRmpkR2x2YmlBOUlGSmxZV04wVlhCa1lYUmxjeTVTWldGamRGSmxZMjl1WTJsc1pWUnlZVzV6WVdOMGFXOXVMbWRsZEZCdmIyeGxaQ2hjYmlBZ0x5b2dabTl5WTJWSVZFMU1JQ292YzJodmRXeGtVbVYxYzJWTllYSnJkWEFwTzF4dUlDQjBjbUZ1YzJGamRHbHZiaTV3WlhKbWIzSnRLRzF2ZFc1MFEyOXRjRzl1Wlc1MFNXNTBiMDV2WkdVc0lHNTFiR3dzSUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTENCeWIyOTBTVVFzSUdOdmJuUmhhVzVsY2l3Z2RISmhibk5oWTNScGIyNHNJSE5vYjNWc1pGSmxkWE5sVFdGeWEzVndMQ0JqYjI1MFpYaDBLVHRjYmlBZ1VtVmhZM1JWY0dSaGRHVnpMbEpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNHVjbVZzWldGelpTaDBjbUZ1YzJGamRHbHZiaWs3WEc1OVhHNWNiaThxS2x4dUlDb2dWVzV0YjNWdWRITWdZU0JqYjIxd2IyNWxiblFnWVc1a0lISmxiVzkyWlhNZ2FYUWdabkp2YlNCMGFHVWdSRTlOTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUkRiMjF3YjI1bGJuUjlJR2x1YzNSaGJtTmxJRkpsWVdOMElHTnZiWEJ2Ym1WdWRDQnBibk4wWVc1alpTNWNiaUFxSUVCd1lYSmhiU0I3UkU5TlJXeGxiV1Z1ZEgwZ1kyOXVkR0ZwYm1WeUlFUlBUU0JsYkdWdFpXNTBJSFJ2SUhWdWJXOTFiblFnWm5KdmJTNWNiaUFxSUVCbWFXNWhiRnh1SUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdLaUJBYzJWbElIdFNaV0ZqZEUxdmRXNTBMblZ1Ylc5MWJuUkRiMjF3YjI1bGJuUkJkRTV2WkdWOVhHNGdLaTljYm1aMWJtTjBhVzl1SUhWdWJXOTFiblJEYjIxd2IyNWxiblJHY205dFRtOWtaU2hwYm5OMFlXNWpaU3dnWTI5dWRHRnBibVZ5S1NCN1hHNGdJRkpsWVdOMFVtVmpiMjVqYVd4bGNpNTFibTF2ZFc1MFEyOXRjRzl1Wlc1MEtHbHVjM1JoYm1ObEtUdGNibHh1SUNCcFppQW9ZMjl1ZEdGcGJtVnlMbTV2WkdWVWVYQmxJRDA5UFNCRVQwTmZUazlFUlY5VVdWQkZLU0I3WEc0Z0lDQWdZMjl1ZEdGcGJtVnlJRDBnWTI5dWRHRnBibVZ5TG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYmlBZ2ZWeHVYRzRnSUM4dklHaDBkSEE2THk5cWMzQmxjbVl1WTI5dEwyVnRjSFI1YVc1bkxXRXRibTlrWlZ4dUlDQjNhR2xzWlNBb1kyOXVkR0ZwYm1WeUxteGhjM1JEYUdsc1pDa2dlMXh1SUNBZ0lHTnZiblJoYVc1bGNpNXlaVzF2ZG1WRGFHbHNaQ2hqYjI1MFlXbHVaWEl1YkdGemRFTm9hV3hrS1R0Y2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGUnlkV1VnYVdZZ2RHaGxJSE4xY0hCc2FXVmtJRVJQVFNCdWIyUmxJR2hoY3lCaElHUnBjbVZqZENCU1pXRmpkQzF5Wlc1a1pYSmxaQ0JqYUdsc1pDQjBhR0YwSUdselhHNGdLaUJ1YjNRZ1lTQlNaV0ZqZENCeWIyOTBJR1ZzWlcxbGJuUXVJRlZ6WldaMWJDQm1iM0lnZDJGeWJtbHVaeUJwYmlCZ2NtVnVaR1Z5WUN4Y2JpQXFJR0IxYm0xdmRXNTBRMjl0Y0c5dVpXNTBRWFJPYjJSbFlDd2daWFJqTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3UDBSUFRVVnNaVzFsYm5SOUlHNXZaR1VnVkdobElHTmhibVJwWkdGMFpTQkVUMDBnYm05a1pTNWNiaUFxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZEdobElFUlBUU0JsYkdWdFpXNTBJR052Ym5SaGFXNXpJR0VnWkdseVpXTjBJR05vYVd4a0lIUm9ZWFFnZDJGelhHNGdLaUJ5Wlc1a1pYSmxaQ0JpZVNCU1pXRmpkQ0JpZFhRZ2FYTWdibTkwSUdFZ2NtOXZkQ0JsYkdWdFpXNTBMbHh1SUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdLaTljYm1aMWJtTjBhVzl1SUdoaGMwNXZibEp2YjNSU1pXRmpkRU5vYVd4a0tHNXZaR1VwSUh0Y2JpQWdkbUZ5SUhKbFlXTjBVbTl2ZEVsRUlEMGdaMlYwVW1WaFkzUlNiMjkwU1VRb2JtOWtaU2s3WEc0Z0lISmxkSFZ5YmlCeVpXRmpkRkp2YjNSSlJDQS9JSEpsWVdOMFVtOXZkRWxFSUNFOVBTQlNaV0ZqZEVsdWMzUmhibU5sU0dGdVpHeGxjeTVuWlhSU1pXRmpkRkp2YjNSSlJFWnliMjFPYjJSbFNVUW9jbVZoWTNSU2IyOTBTVVFwSURvZ1ptRnNjMlU3WEc1OVhHNWNiaThxS2x4dUlDb2dVbVYwZFhKdWN5QjBhR1VnWm1seWMzUWdLR1JsWlhCbGMzUXBJR0Z1WTJWemRHOXlJRzltSUdFZ2JtOWtaU0IzYUdsamFDQnBjeUJ5Wlc1a1pYSmxaQ0JpZVNCMGFHbHpJR052Y0hsY2JpQXFJRzltSUZKbFlXTjBMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm1hVzVrUm1seWMzUlNaV0ZqZEVSUFRVbHRjR3dvYm05a1pTa2dlMXh1SUNBdkx5QlVhR2x6SUc1dlpHVWdiV2xuYUhRZ1ltVWdabkp2YlNCaGJtOTBhR1Z5SUZKbFlXTjBJR2x1YzNSaGJtTmxMQ0J6YnlCM1pTQnRZV3RsSUhOMWNtVWdibTkwSUhSdlhHNGdJQzh2SUdWNFlXMXBibVVnZEdobElHNXZaR1VnWTJGamFHVWdhR1Z5WlZ4dUlDQm1iM0lnS0RzZ2JtOWtaU0FtSmlCdWIyUmxMbkJoY21WdWRFNXZaR1VnSVQwOUlHNXZaR1U3SUc1dlpHVWdQU0J1YjJSbExuQmhjbVZ1ZEU1dlpHVXBJSHRjYmlBZ0lDQnBaaUFvYm05a1pTNXViMlJsVkhsd1pTQWhQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0x5OGdUbTkwSUdFZ1JFOU5SV3hsYldWdWRDd2dkR2hsY21WbWIzSmxJRzV2ZENCaElGSmxZV04wSUdOdmJYQnZibVZ1ZEZ4dUlDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJ1YjJSbFNVUWdQU0JwYm5SbGNtNWhiRWRsZEVsRUtHNXZaR1VwTzF4dUlDQWdJR2xtSUNnaGJtOWtaVWxFS1NCN1hHNGdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUhKbFlXTjBVbTl2ZEVsRUlEMGdVbVZoWTNSSmJuTjBZVzVqWlVoaGJtUnNaWE11WjJWMFVtVmhZM1JTYjI5MFNVUkdjbTl0VG05a1pVbEVLRzV2WkdWSlJDazdYRzVjYmlBZ0lDQXZMeUJKWmlCamIyNTBZV2x1WlhKelFubFNaV0ZqZEZKdmIzUkpSQ0JqYjI1MFlXbHVjeUIwYUdVZ1kyOXVkR0ZwYm1WeUlIZGxJR1pwYm1RZ1lua2dZM0poZDJ4cGJtY2dkWEJjYmlBZ0lDQXZMeUIwYUdVZ2RISmxaU3dnZDJVZ2EyNXZkeUIwYUdGMElIUm9hWE1nYVc1emRHRnVZMlVnYjJZZ1VtVmhZM1FnY21WdVpHVnlaV1FnZEdobElHNXZaR1V1WEc0Z0lDQWdMeThnYm1JdUlHbHpWbUZzYVdRbmN5QnpkSEpoZEdWbmVTQW9kMmwwYUNCamIyNTBZV2x1YzA1dlpHVXBJR1J2WlhNZ2JtOTBJSGR2Y21zZ1ltVmpZWFZ6WlNCeVpXNWtaWEpjYmlBZ0lDQXZMeUIwY21WbGN5QnRZWGtnWW1VZ2JtVnpkR1ZrSUdGdVpDQjNaU0JrYjI0bmRDQjNZVzUwSUdFZ1ptRnNjMlVnY0c5emFYUnBkbVVnYVc0Z2RHaGhkQ0JqWVhObExseHVJQ0FnSUhaaGNpQmpkWEp5Wlc1MElEMGdibTlrWlR0Y2JpQWdJQ0IyWVhJZ2JHRnpkRWxFTzF4dUlDQWdJR1J2SUh0Y2JpQWdJQ0FnSUd4aGMzUkpSQ0E5SUdsdWRHVnlibUZzUjJWMFNVUW9ZM1Z5Y21WdWRDazdYRzRnSUNBZ0lDQmpkWEp5Wlc1MElEMGdZM1Z5Y21WdWRDNXdZWEpsYm5ST2IyUmxPMXh1SUNBZ0lDQWdhV1lnS0dOMWNuSmxiblFnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlVhR1VnY0dGemMyVmtMV2x1SUc1dlpHVWdhR0Z6SUdKbFpXNGdaR1YwWVdOb1pXUWdabkp2YlNCMGFHVWdZMjl1ZEdGcGJtVnlJR2wwSUhkaGMxeHVJQ0FnSUNBZ0lDQXZMeUJ2Y21sbmFXNWhiR3g1SUhKbGJtUmxjbVZrSUdsdWRHOHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnZDJocGJHVWdLR3hoYzNSSlJDQWhQVDBnY21WaFkzUlNiMjkwU1VRcE8xeHVYRzRnSUNBZ2FXWWdLR04xY25KbGJuUWdQVDA5SUdOdmJuUmhhVzVsY25OQ2VWSmxZV04wVW05dmRFbEVXM0psWVdOMFVtOXZkRWxFWFNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1dlpHVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdWRXeHNPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGUmxiWEJ2Y21GeWVTQW9QeWtnYUdGamF5QnpieUIwYUdGMElIZGxJR05oYmlCemRHOXlaU0JoYkd3Z2RHOXdMV3hsZG1Wc0lIQmxibVJwYm1jZ2RYQmtZWFJsY3lCdmJseHVJQ29nWTI5dGNHOXphWFJsY3lCcGJuTjBaV0ZrSUc5bUlHaGhkbWx1WnlCMGJ5QjNiM0p5ZVNCaFltOTFkQ0JrYVdabVpYSmxiblFnZEhsd1pYTWdiMllnWTI5dGNHOXVaVzUwYzF4dUlDb2dhR1Z5WlM1Y2JpQXFMMXh1ZG1GeUlGUnZjRXhsZG1Wc1YzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUlDZ3BJSHQ5TzF4dVZHOXdUR1YyWld4WGNtRndjR1Z5TG5CeWIzUnZkSGx3WlM1cGMxSmxZV04wUTI5dGNHOXVaVzUwSUQwZ2UzMDdYRzVwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNCVWIzQk1aWFpsYkZkeVlYQndaWEl1WkdsemNHeGhlVTVoYldVZ1BTQW5WRzl3VEdWMlpXeFhjbUZ3Y0dWeUp6dGNibjFjYmxSdmNFeGxkbVZzVjNKaGNIQmxjaTV3Y205MGIzUjVjR1V1Y21WdVpHVnlJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0F2THlCMGFHbHpMbkJ5YjNCeklHbHpJR0ZqZEhWaGJHeDVJR0VnVW1WaFkzUkZiR1Z0Wlc1MFhHNGdJSEpsZEhWeWJpQjBhR2x6TG5CeWIzQnpPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQk5iM1Z1ZEdsdVp5QnBjeUIwYUdVZ2NISnZZMlZ6Y3lCdlppQnBibWwwYVdGc2FYcHBibWNnWVNCU1pXRmpkQ0JqYjIxd2IyNWxiblFnWW5rZ1kzSmxZWFJwYm1jZ2FYUnpYRzRnS2lCeVpYQnlaWE5sYm5SaGRHbDJaU0JFVDAwZ1pXeGxiV1Z1ZEhNZ1lXNWtJR2x1YzJWeWRHbHVaeUIwYUdWdElHbHVkRzhnWVNCemRYQndiR2xsWkNCZ1kyOXVkR0ZwYm1WeVlDNWNiaUFxSUVGdWVTQndjbWx2Y2lCamIyNTBaVzUwSUdsdWMybGtaU0JnWTI5dWRHRnBibVZ5WUNCcGN5QmtaWE4wY205NVpXUWdhVzRnZEdobElIQnliMk5sYzNNdVhHNGdLbHh1SUNvZ0lDQlNaV0ZqZEUxdmRXNTBMbkpsYm1SbGNpaGNiaUFxSUNBZ0lDQmpiMjF3YjI1bGJuUXNYRzRnS2lBZ0lDQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyTnZiblJoYVc1bGNpY3BYRzRnS2lBZ0lDazdYRzRnS2x4dUlDb2dJQ0E4WkdsMklHbGtQVndpWTI5dWRHRnBibVZ5WENJK0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3RMU0JUZFhCd2JHbGxaQ0JnWTI5dWRHRnBibVZ5WUM1Y2JpQXFJQ0FnSUNBOFpHbDJJR1JoZEdFdGNtVmhZM1JwWkQxY0lpNHpYQ0krSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMUzBnVW1WdVpHVnlaV1FnY21WaFkzUlNiMjkwSUc5bUlGSmxZV04wWEc0Z0tpQWdJQ0FnSUNBdkx5QXVMaTRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjF3YjI1bGJuUXVYRzRnS2lBZ0lDQWdQQzlrYVhZK1hHNGdLaUFnSUR3dlpHbDJQbHh1SUNwY2JpQXFJRWx1YzJsa1pTQnZaaUJnWTI5dWRHRnBibVZ5WUN3Z2RHaGxJR1pwY25OMElHVnNaVzFsYm5RZ2NtVnVaR1Z5WldRZ2FYTWdkR2hsSUZ3aWNtVmhZM1JTYjI5MFhDSXVYRzRnS2k5Y2JuWmhjaUJTWldGamRFMXZkVzUwSUQwZ2UxeHVYRzRnSUZSdmNFeGxkbVZzVjNKaGNIQmxjam9nVkc5d1RHVjJaV3hYY21Gd2NHVnlMRnh1WEc0Z0lDOHFLaUJGZUhCdmMyVmtJR1p2Y2lCa1pXSjFaMmRwYm1jZ2NIVnljRzl6WlhNZ0tpb3ZYRzRnSUY5cGJuTjBZVzVqWlhOQ2VWSmxZV04wVW05dmRFbEVPaUJwYm5OMFlXNWpaWE5DZVZKbFlXTjBVbTl2ZEVsRUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHbHpJR2x6SUdFZ2FHOXZheUJ3Y205MmFXUmxaQ0IwYnlCemRYQndiM0owSUhKbGJtUmxjbWx1WnlCU1pXRmpkQ0JqYjIxd2IyNWxiblJ6SUhkb2FXeGxYRzRnSUNBcUlHVnVjM1Z5YVc1bklIUm9ZWFFnZEdobElHRndjR0Z5Wlc1MElITmpjbTlzYkNCd2IzTnBkR2x2YmlCdlppQnBkSE1nWUdOdmJuUmhhVzVsY21BZ1pHOWxjeUJ1YjNSY2JpQWdJQ29nWTJoaGJtZGxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBSUFRVVnNaVzFsYm5SOUlHTnZiblJoYVc1bGNpQlVhR1VnWUdOdmJuUmhhVzVsY21BZ1ltVnBibWNnY21WdVpHVnlaV1FnYVc1MGJ5NWNiaUFnSUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ2NtVnVaR1Z5UTJGc2JHSmhZMnNnVkdocGN5QnRkWE4wSUdKbElHTmhiR3hsWkNCdmJtTmxJSFJ2SUdSdklIUm9aU0J5Wlc1a1pYSXVYRzRnSUNBcUwxeHVJQ0J6WTNKdmJHeE5iMjVwZEc5eU9pQm1kVzVqZEdsdmJpQW9ZMjl1ZEdGcGJtVnlMQ0J5Wlc1a1pYSkRZV3hzWW1GamF5a2dlMXh1SUNBZ0lISmxibVJsY2tOaGJHeGlZV05yS0NrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJoYTJVZ1lTQmpiMjF3YjI1bGJuUWdkR2hoZENkeklHRnNjbVZoWkhrZ2JXOTFiblJsWkNCcGJuUnZJSFJvWlNCRVQwMGdZVzVrSUhKbGNHeGhZMlVnYVhSeklIQnliM0J6WEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRGIyMXdiMjVsYm5SOUlIQnlaWFpEYjIxd2IyNWxiblFnWTI5dGNHOXVaVzUwSUdsdWMzUmhibU5sSUdGc2NtVmhaSGtnYVc0Z2RHaGxJRVJQVFZ4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFJXeGxiV1Z1ZEgwZ2JtVjRkRVZzWlcxbGJuUWdZMjl0Y0c5dVpXNTBJR2x1YzNSaGJtTmxJSFJ2SUhKbGJtUmxjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwUlBUVVZzWlcxbGJuUjlJR052Ym5SaGFXNWxjaUJqYjI1MFlXbHVaWElnZEc4Z2NtVnVaR1Z5SUdsdWRHOWNiaUFnSUNvZ1FIQmhjbUZ0SUhzL1puVnVZM1JwYjI1OUlHTmhiR3hpWVdOcklHWjFibU4wYVc5dUlIUnlhV2RuWlhKbFpDQnZiaUJqYjIxd2JHVjBhVzl1WEc0Z0lDQXFMMXh1SUNCZmRYQmtZWFJsVW05dmRFTnZiWEJ2Ym1WdWREb2dablZ1WTNScGIyNGdLSEJ5WlhaRGIyMXdiMjVsYm5Rc0lHNWxlSFJGYkdWdFpXNTBMQ0JqYjI1MFlXbHVaWElzSUdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnVW1WaFkzUk5iM1Z1ZEM1elkzSnZiR3hOYjI1cGRHOXlLR052Ym5SaGFXNWxjaXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ1VtVmhZM1JWY0dSaGRHVlJkV1YxWlM1bGJuRjFaWFZsUld4bGJXVnVkRWx1ZEdWeWJtRnNLSEJ5WlhaRGIyMXdiMjVsYm5Rc0lHNWxlSFJGYkdWdFpXNTBLVHRjYmlBZ0lDQWdJR2xtSUNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ0lDQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbExtVnVjWFZsZFdWRFlXeHNZbUZqYTBsdWRHVnlibUZzS0hCeVpYWkRiMjF3YjI1bGJuUXNJR05oYkd4aVlXTnJLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQXZMeUJTWldOdmNtUWdkR2hsSUhKdmIzUWdaV3hsYldWdWRDQnBiaUJqWVhObElHbDBJR3hoZEdWeUlHZGxkSE1nZEhKaGJuTndiR0Z1ZEdWa0xseHVJQ0FnSUNBZ2NtOXZkRVZzWlcxbGJuUnpRbmxTWldGamRGSnZiM1JKUkZ0blpYUlNaV0ZqZEZKdmIzUkpSQ2hqYjI1MFlXbHVaWElwWFNBOUlHZGxkRkpsWVdOMFVtOXZkRVZzWlcxbGJuUkpia052Ym5SaGFXNWxjaWhqYjI1MFlXbHVaWElwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQndjbVYyUTI5dGNHOXVaVzUwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaV2RwYzNSbGNpQmhJR052YlhCdmJtVnVkQ0JwYm5SdklIUm9aU0JwYm5OMFlXNWpaU0J0WVhBZ1lXNWtJSE4wWVhKMGN5QnpZM0p2Ykd3Z2RtRnNkV1ZjYmlBZ0lDb2diVzl1YVhSdmNtbHVaMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTI5dGNHOXVaVzUwZlNCdVpYaDBRMjl0Y0c5dVpXNTBJR052YlhCdmJtVnVkQ0JwYm5OMFlXNWpaU0IwYnlCeVpXNWtaWEpjYmlBZ0lDb2dRSEJoY21GdElIdEVUMDFGYkdWdFpXNTBmU0JqYjI1MFlXbHVaWElnWTI5dWRHRnBibVZ5SUhSdklISmxibVJsY2lCcGJuUnZYRzRnSUNBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ2NtVmhZM1JTYjI5MElFbEVJSEJ5WldacGVGeHVJQ0FnS2k5Y2JpQWdYM0psWjJsemRHVnlRMjl0Y0c5dVpXNTBPaUJtZFc1amRHbHZiaUFvYm1WNGRFTnZiWEJ2Ym1WdWRDd2dZMjl1ZEdGcGJtVnlLU0I3WEc0Z0lDQWdJU2hqYjI1MFlXbHVaWElnSmlZZ0tHTnZiblJoYVc1bGNpNXViMlJsVkhsd1pTQTlQVDBnUlV4RlRVVk9WRjlPVDBSRlgxUlpVRVVnZkh3Z1kyOXVkR0ZwYm1WeUxtNXZaR1ZVZVhCbElEMDlQU0JFVDBOZlRrOUVSVjlVV1ZCRklIeDhJR052Ym5SaGFXNWxjaTV1YjJSbFZIbHdaU0E5UFQwZ1JFOURWVTFGVGxSZlJsSkJSMDFGVGxSZlRrOUVSVjlVV1ZCRktTa2dQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBblgzSmxaMmx6ZEdWeVEyOXRjRzl1Wlc1MEtDNHVMaWs2SUZSaGNtZGxkQ0JqYjI1MFlXbHVaWElnYVhNZ2JtOTBJR0VnUkU5TklHVnNaVzFsYm5RdUp5a2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dVhHNGdJQ0FnVW1WaFkzUkNjbTkzYzJWeVJYWmxiblJGYldsMGRHVnlMbVZ1YzNWeVpWTmpjbTlzYkZaaGJIVmxUVzl1YVhSdmNtbHVaeWdwTzF4dVhHNGdJQ0FnZG1GeUlISmxZV04wVW05dmRFbEVJRDBnVW1WaFkzUk5iM1Z1ZEM1eVpXZHBjM1JsY2tOdmJuUmhhVzVsY2loamIyNTBZV2x1WlhJcE8xeHVJQ0FnSUdsdWMzUmhibU5sYzBKNVVtVmhZM1JTYjI5MFNVUmJjbVZoWTNSU2IyOTBTVVJkSUQwZ2JtVjRkRU52YlhCdmJtVnVkRHRjYmlBZ0lDQnlaWFIxY200Z2NtVmhZM1JTYjI5MFNVUTdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGJtUmxjaUJoSUc1bGR5QmpiMjF3YjI1bGJuUWdhVzUwYnlCMGFHVWdSRTlOTGx4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFJXeGxiV1Z1ZEgwZ2JtVjRkRVZzWlcxbGJuUWdaV3hsYldWdWRDQjBieUJ5Wlc1a1pYSmNiaUFnSUNvZ1FIQmhjbUZ0SUh0RVQwMUZiR1Z0Wlc1MGZTQmpiMjUwWVdsdVpYSWdZMjl1ZEdGcGJtVnlJSFJ2SUhKbGJtUmxjaUJwYm5SdlhHNGdJQ0FxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnYzJodmRXeGtVbVYxYzJWTllYSnJkWEFnYVdZZ2QyVWdjMmh2ZFd4a0lITnJhWEFnZEdobElHMWhjbXQxY0NCcGJuTmxjblJwYjI1Y2JpQWdJQ29nUUhKbGRIVnliaUI3VW1WaFkzUkRiMjF3YjI1bGJuUjlJRzVsZUhSRGIyMXdiMjVsYm5SY2JpQWdJQ292WEc0Z0lGOXlaVzVrWlhKT1pYZFNiMjkwUTI5dGNHOXVaVzUwT2lCbWRXNWpkR2x2YmlBb2JtVjRkRVZzWlcxbGJuUXNJR052Ym5SaGFXNWxjaXdnYzJodmRXeGtVbVYxYzJWTllYSnJkWEFzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0F2THlCV1lYSnBiM1Z6SUhCaGNuUnpJRzltSUc5MWNpQmpiMlJsSUNoemRXTm9JR0Z6SUZKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBKM05jYmlBZ0lDQXZMeUJmY21WdVpHVnlWbUZzYVdSaGRHVmtRMjl0Y0c5dVpXNTBLU0JoYzNOMWJXVWdkR2hoZENCallXeHNjeUIwYnlCeVpXNWtaWElnWVhKbGJpZDBJRzVsYzNSbFpEdGNiaUFnSUNBdkx5QjJaWEpwWm5rZ2RHaGhkQ0IwYUdGMEozTWdkR2hsSUdOaGMyVXVYRzRnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29VbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXVZM1Z5Y21WdWRDQTlQU0J1ZFd4c0xDQW5YM0psYm1SbGNrNWxkMUp2YjNSRGIyMXdiMjVsYm5Rb0tUb2dVbVZ1WkdWeUlHMWxkR2h2WkhNZ2MyaHZkV3hrSUdKbElHRWdjSFZ5WlNCbWRXNWpkR2x2YmlBbklDc2dKMjltSUhCeWIzQnpJR0Z1WkNCemRHRjBaVHNnZEhKcFoyZGxjbWx1WnlCdVpYTjBaV1FnWTI5dGNHOXVaVzUwSUhWd1pHRjBaWE1nWm5KdmJTQW5JQ3NnSjNKbGJtUmxjaUJwY3lCdWIzUWdZV3hzYjNkbFpDNGdTV1lnYm1WalpYTnpZWEo1TENCMGNtbG5aMlZ5SUc1bGMzUmxaQ0IxY0dSaGRHVnpJR2x1SUNjZ0t5QW5ZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxMaUJEYUdWamF5QjBhR1VnY21WdVpHVnlJRzFsZEdodlpDQnZaaUFsY3k0bkxDQlNaV0ZqZEVOMWNuSmxiblJQZDI1bGNpNWpkWEp5Wlc1MElDWW1JRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlMbU4xY25KbGJuUXVaMlYwVG1GdFpTZ3BJSHg4SUNkU1pXRmpkRU52YlhCdmMybDBaVU52YlhCdmJtVnVkQ2NwSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ2RtRnlJR052YlhCdmJtVnVkRWx1YzNSaGJtTmxJRDBnYVc1emRHRnVkR2xoZEdWU1pXRmpkRU52YlhCdmJtVnVkQ2h1WlhoMFJXeGxiV1Z1ZEN3Z2JuVnNiQ2s3WEc0Z0lDQWdkbUZ5SUhKbFlXTjBVbTl2ZEVsRUlEMGdVbVZoWTNSTmIzVnVkQzVmY21WbmFYTjBaWEpEYjIxd2IyNWxiblFvWTI5dGNHOXVaVzUwU1c1emRHRnVZMlVzSUdOdmJuUmhhVzVsY2lrN1hHNWNiaUFnSUNBdkx5QlVhR1VnYVc1cGRHbGhiQ0J5Wlc1a1pYSWdhWE1nYzNsdVkyaHliMjV2ZFhNZ1luVjBJR0Z1ZVNCMWNHUmhkR1Z6SUhSb1lYUWdhR0Z3Y0dWdUlHUjFjbWx1WjF4dUlDQWdJQzh2SUhKbGJtUmxjbWx1Wnl3Z2FXNGdZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBJRzl5SUdOdmJYQnZibVZ1ZEVScFpFMXZkVzUwTENCM2FXeHNJR0psSUdKaGRHTm9aV1JjYmlBZ0lDQXZMeUJoWTJOdmNtUnBibWNnZEc4Z2RHaGxJR04xY25KbGJuUWdZbUYwWTJocGJtY2djM1J5WVhSbFoza3VYRzVjYmlBZ0lDQlNaV0ZqZEZWd1pHRjBaWE11WW1GMFkyaGxaRlZ3WkdGMFpYTW9ZbUYwWTJobFpFMXZkVzUwUTI5dGNHOXVaVzUwU1c1MGIwNXZaR1VzSUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTENCeVpXRmpkRkp2YjNSSlJDd2dZMjl1ZEdGcGJtVnlMQ0J6YUc5MWJHUlNaWFZ6WlUxaGNtdDFjQ3dnWTI5dWRHVjRkQ2s3WEc1Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdMeThnVW1WamIzSmtJSFJvWlNCeWIyOTBJR1ZzWlcxbGJuUWdhVzRnWTJGelpTQnBkQ0JzWVhSbGNpQm5aWFJ6SUhSeVlXNXpjR3hoYm5SbFpDNWNiaUFnSUNBZ0lISnZiM1JGYkdWdFpXNTBjMEo1VW1WaFkzUlNiMjkwU1VSYmNtVmhZM1JTYjI5MFNVUmRJRDBnWjJWMFVtVmhZM1JTYjI5MFJXeGxiV1Z1ZEVsdVEyOXVkR0ZwYm1WeUtHTnZiblJoYVc1bGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaVzVrWlhKeklHRWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MElHbHVkRzhnZEdobElFUlBUU0JwYmlCMGFHVWdjM1Z3Y0d4cFpXUWdZR052Ym5SaGFXNWxjbUF1WEc0Z0lDQXFYRzRnSUNBcUlFbG1JSFJvWlNCU1pXRmpkQ0JqYjIxd2IyNWxiblFnZDJGeklIQnlaWFpwYjNWemJIa2djbVZ1WkdWeVpXUWdhVzUwYnlCZ1kyOXVkR0ZwYm1WeVlDd2dkR2hwY3lCM2FXeHNYRzRnSUNBcUlIQmxjbVp2Y20wZ1lXNGdkWEJrWVhSbElHOXVJR2wwSUdGdVpDQnZibXg1SUcxMWRHRjBaU0IwYUdVZ1JFOU5JR0Z6SUc1bFkyVnpjMkZ5ZVNCMGJ5QnlaV1pzWldOMElIUm9aVnh1SUNBZ0tpQnNZWFJsYzNRZ1VtVmhZM1FnWTI5dGNHOXVaVzUwTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTI5dGNHOXVaVzUwZlNCd1lYSmxiblJEYjIxd2IyNWxiblFnVkdobElHTnZibU5sY0hSMVlXd2djR0Z5Wlc1MElHOW1JSFJvYVhNZ2NtVnVaR1Z5SUhSeVpXVXVYRzRnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JGYkdWdFpXNTBmU0J1WlhoMFJXeGxiV1Z1ZENCRGIyMXdiMjVsYm5RZ1pXeGxiV1Z1ZENCMGJ5QnlaVzVrWlhJdVhHNGdJQ0FxSUVCd1lYSmhiU0I3UkU5TlJXeGxiV1Z1ZEgwZ1kyOXVkR0ZwYm1WeUlFUlBUU0JsYkdWdFpXNTBJSFJ2SUhKbGJtUmxjaUJwYm5SdkxseHVJQ0FnS2lCQWNHRnlZVzBnZXo5bWRXNWpkR2x2Ym4wZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI0Z2RISnBaMmRsY21Wa0lHOXVJR052YlhCc1pYUnBiMjVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVbVZoWTNSRGIyMXdiMjVsYm5SOUlFTnZiWEJ2Ym1WdWRDQnBibk4wWVc1alpTQnlaVzVrWlhKbFpDQnBiaUJnWTI5dWRHRnBibVZ5WUM1Y2JpQWdJQ292WEc0Z0lISmxibVJsY2xOMVluUnlaV1ZKYm5SdlEyOXVkR0ZwYm1WeU9pQm1kVzVqZEdsdmJpQW9jR0Z5Wlc1MFEyOXRjRzl1Wlc1MExDQnVaWGgwUld4bGJXVnVkQ3dnWTI5dWRHRnBibVZ5TENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNFb2NHRnlaVzUwUTI5dGNHOXVaVzUwSUNFOUlHNTFiR3dnSmlZZ2NHRnlaVzUwUTI5dGNHOXVaVzUwTGw5eVpXRmpkRWx1ZEdWeWJtRnNTVzV6ZEdGdVkyVWdJVDBnYm5Wc2JDa2dQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBbmNHRnlaVzUwUTI5dGNHOXVaVzUwSUcxMWMzUWdZbVVnWVNCMllXeHBaQ0JTWldGamRDQkRiMjF3YjI1bGJuUW5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnY21WMGRYSnVJRkpsWVdOMFRXOTFiblF1WDNKbGJtUmxjbE4xWW5SeVpXVkpiblJ2UTI5dWRHRnBibVZ5S0hCaGNtVnVkRU52YlhCdmJtVnVkQ3dnYm1WNGRFVnNaVzFsYm5Rc0lHTnZiblJoYVc1bGNpd2dZMkZzYkdKaFkyc3BPMXh1SUNCOUxGeHVYRzRnSUY5eVpXNWtaWEpUZFdKMGNtVmxTVzUwYjBOdmJuUmhhVzVsY2pvZ1puVnVZM1JwYjI0Z0tIQmhjbVZ1ZEVOdmJYQnZibVZ1ZEN3Z2JtVjRkRVZzWlcxbGJuUXNJR052Ym5SaGFXNWxjaXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0FoVW1WaFkzUkZiR1Z0Wlc1MExtbHpWbUZzYVdSRmJHVnRaVzUwS0c1bGVIUkZiR1Z0Wlc1MEtTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkU1pXRmpkRVJQVFM1eVpXNWtaWElvS1RvZ1NXNTJZV3hwWkNCamIyMXdiMjVsYm5RZ1pXeGxiV1Z1ZEM0bGN5Y3NJSFI1Y0dWdlppQnVaWGgwUld4bGJXVnVkQ0E5UFQwZ0ozTjBjbWx1WnljZ1B5QW5JRWx1YzNSbFlXUWdiMllnY0dGemMybHVaeUJoYmlCbGJHVnRaVzUwSUhOMGNtbHVaeXdnYldGclpTQnpkWEpsSUhSdklHbHVjM1JoYm5ScFlYUmxJQ2NnS3lBbmFYUWdZbmtnY0dGemMybHVaeUJwZENCMGJ5QlNaV0ZqZEM1amNtVmhkR1ZGYkdWdFpXNTBMaWNnT2lCMGVYQmxiMllnYm1WNGRFVnNaVzFsYm5RZ1BUMDlJQ2RtZFc1amRHbHZiaWNnUHlBbklFbHVjM1JsWVdRZ2IyWWdjR0Z6YzJsdVp5QmhJR052YlhCdmJtVnVkQ0JqYkdGemN5d2diV0ZyWlNCemRYSmxJSFJ2SUdsdWMzUmhiblJwWVhSbElDY2dLeUFuYVhRZ1lua2djR0Z6YzJsdVp5QnBkQ0IwYnlCU1pXRmpkQzVqY21WaGRHVkZiR1Z0Wlc1MExpY2dPbHh1SUNBZ0lDOHZJRU5vWldOcklHbG1JR2wwSUhGMVlXTnJjeUJzYVd0bElHRnVJR1ZzWlcxbGJuUmNiaUFnSUNCdVpYaDBSV3hsYldWdWRDQWhQU0J1ZFd4c0lDWW1JRzVsZUhSRmJHVnRaVzUwTG5CeWIzQnpJQ0U5UFNCMWJtUmxabWx1WldRZ1B5QW5JRlJvYVhNZ2JXRjVJR0psSUdOaGRYTmxaQ0JpZVNCMWJtbHVkR1Z1ZEdsdmJtRnNiSGtnYkc5aFpHbHVaeUIwZDI4Z2FXNWtaWEJsYm1SbGJuUWdKeUFySUNkamIzQnBaWE1nYjJZZ1VtVmhZM1F1SnlBNklDY25LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5Z2hZMjl1ZEdGcGJtVnlJSHg4SUNGamIyNTBZV2x1WlhJdWRHRm5UbUZ0WlNCOGZDQmpiMjUwWVdsdVpYSXVkR0ZuVG1GdFpTNTBiMVZ3Y0dWeVEyRnpaU2dwSUNFOVBTQW5RazlFV1Njc0lDZHlaVzVrWlhJb0tUb2dVbVZ1WkdWeWFXNW5JR052YlhCdmJtVnVkSE1nWkdseVpXTjBiSGtnYVc1MGJ5QmtiMk4xYldWdWRDNWliMlI1SUdseklDY2dLeUFuWkdselkyOTFjbUZuWldRc0lITnBibU5sSUdsMGN5QmphR2xzWkhKbGJpQmhjbVVnYjJaMFpXNGdiV0Z1YVhCMWJHRjBaV1FnWW5rZ2RHaHBjbVF0Y0dGeWRIa2dKeUFySUNkelkzSnBjSFJ6SUdGdVpDQmljbTkzYzJWeUlHVjRkR1Z1YzJsdmJuTXVJRlJvYVhNZ2JXRjVJR3hsWVdRZ2RHOGdjM1ZpZEd4bElDY2dLeUFuY21WamIyNWphV3hwWVhScGIyNGdhWE56ZFdWekxpQlVjbmtnY21WdVpHVnlhVzVuSUdsdWRHOGdZU0JqYjI1MFlXbHVaWElnWld4bGJXVnVkQ0JqY21WaGRHVmtJQ2NnS3lBblptOXlJSGx2ZFhJZ1lYQndMaWNwSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ2RtRnlJRzVsZUhSWGNtRndjR1ZrUld4bGJXVnVkQ0E5SUc1bGR5QlNaV0ZqZEVWc1pXMWxiblFvVkc5d1RHVjJaV3hYY21Gd2NHVnlMQ0J1ZFd4c0xDQnVkV3hzTENCdWRXeHNMQ0J1ZFd4c0xDQnVkV3hzTENCdVpYaDBSV3hsYldWdWRDazdYRzVjYmlBZ0lDQjJZWElnY0hKbGRrTnZiWEJ2Ym1WdWRDQTlJR2x1YzNSaGJtTmxjMEo1VW1WaFkzUlNiMjkwU1VSYloyVjBVbVZoWTNSU2IyOTBTVVFvWTI5dWRHRnBibVZ5S1YwN1hHNWNiaUFnSUNCcFppQW9jSEpsZGtOdmJYQnZibVZ1ZENrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEJ5WlhaWGNtRndjR1ZrUld4bGJXVnVkQ0E5SUhCeVpYWkRiMjF3YjI1bGJuUXVYMk4xY25KbGJuUkZiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ2RtRnlJSEJ5WlhaRmJHVnRaVzUwSUQwZ2NISmxkbGR5WVhCd1pXUkZiR1Z0Wlc1MExuQnliM0J6TzF4dUlDQWdJQ0FnYVdZZ0tITm9iM1ZzWkZWd1pHRjBaVkpsWVdOMFEyOXRjRzl1Wlc1MEtIQnlaWFpGYkdWdFpXNTBMQ0J1WlhoMFJXeGxiV1Z1ZENrcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCMVlteHBZMGx1YzNRZ1BTQndjbVYyUTI5dGNHOXVaVzUwTGw5eVpXNWtaWEpsWkVOdmJYQnZibVZ1ZEM1blpYUlFkV0pzYVdOSmJuTjBZVzVqWlNncE8xeHVJQ0FnSUNBZ0lDQjJZWElnZFhCa1lYUmxaRU5oYkd4aVlXTnJJRDBnWTJGc2JHSmhZMnNnSmlZZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOaGJHeGlZV05yTG1OaGJHd29jSFZpYkdsalNXNXpkQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lGSmxZV04wVFc5MWJuUXVYM1Z3WkdGMFpWSnZiM1JEYjIxd2IyNWxiblFvY0hKbGRrTnZiWEJ2Ym1WdWRDd2dibVY0ZEZkeVlYQndaV1JGYkdWdFpXNTBMQ0JqYjI1MFlXbHVaWElzSUhWd1pHRjBaV1JEWVd4c1ltRmpheWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3ZFdKc2FXTkpibk4wTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnVW1WaFkzUk5iM1Z1ZEM1MWJtMXZkVzUwUTI5dGNHOXVaVzUwUVhST2IyUmxLR052Ym5SaGFXNWxjaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhKbFlXTjBVbTl2ZEVWc1pXMWxiblFnUFNCblpYUlNaV0ZqZEZKdmIzUkZiR1Z0Wlc1MFNXNURiMjUwWVdsdVpYSW9ZMjl1ZEdGcGJtVnlLVHRjYmlBZ0lDQjJZWElnWTI5dWRHRnBibVZ5U0dGelVtVmhZM1JOWVhKcmRYQWdQU0J5WldGamRGSnZiM1JGYkdWdFpXNTBJQ1ltSUNFaGFXNTBaWEp1WVd4SFpYUkpSQ2h5WldGamRGSnZiM1JGYkdWdFpXNTBLVHRjYmlBZ0lDQjJZWElnWTI5dWRHRnBibVZ5U0dGelRtOXVVbTl2ZEZKbFlXTjBRMmhwYkdRZ1BTQm9ZWE5PYjI1U2IyOTBVbVZoWTNSRGFHbHNaQ2hqYjI1MFlXbHVaWElwTzF4dVhHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCM1lYSnVhVzVuS0NGamIyNTBZV2x1WlhKSVlYTk9iMjVTYjI5MFVtVmhZM1JEYUdsc1pDd2dKM0psYm1SbGNpZ3VMaTRwT2lCU1pYQnNZV05wYm1jZ1VtVmhZM1F0Y21WdVpHVnlaV1FnWTJocGJHUnlaVzRnZDJsMGFDQmhJRzVsZHlCeWIyOTBJQ2NnS3lBblkyOXRjRzl1Wlc1MExpQkpaaUI1YjNVZ2FXNTBaVzVrWldRZ2RHOGdkWEJrWVhSbElIUm9aU0JqYUdsc1pISmxiaUJ2WmlCMGFHbHpJRzV2WkdVc0lDY2dLeUFuZVc5MUlITm9iM1ZzWkNCcGJuTjBaV0ZrSUdoaGRtVWdkR2hsSUdWNGFYTjBhVzVuSUdOb2FXeGtjbVZ1SUhWd1pHRjBaU0IwYUdWcGNpQnpkR0YwWlNBbklDc2dKMkZ1WkNCeVpXNWtaWElnZEdobElHNWxkeUJqYjIxd2IyNWxiblJ6SUdsdWMzUmxZV1FnYjJZZ1kyRnNiR2x1WnlCU1pXRmpkRVJQVFM1eVpXNWtaWEl1SnlrZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQWdJR2xtSUNnaFkyOXVkR0ZwYm1WeVNHRnpVbVZoWTNSTllYSnJkWEFnZkh3Z2NtVmhZM1JTYjI5MFJXeGxiV1Z1ZEM1dVpYaDBVMmxpYkdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtOXZkRVZzWlcxbGJuUlRhV0pzYVc1bklEMGdjbVZoWTNSU2IyOTBSV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tISnZiM1JGYkdWdFpXNTBVMmxpYkdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBiblJsY201aGJFZGxkRWxFS0hKdmIzUkZiR1Z0Wlc1MFUybGliR2x1WnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktHWmhiSE5sTENBbmNtVnVaR1Z5S0NrNklGUmhjbWRsZENCdWIyUmxJR2hoY3lCdFlYSnJkWEFnY21WdVpHVnlaV1FnWW5rZ1VtVmhZM1FzSUdKMWRDQjBhR1Z5WlNBbklDc2dKMkZ5WlNCMWJuSmxiR0YwWldRZ2JtOWtaWE1nWVhNZ2QyVnNiQzRnVkdocGN5QnBjeUJ0YjNOMElHTnZiVzF2Ym14NUlHTmhkWE5sWkNCaWVTQW5JQ3NnSjNkb2FYUmxMWE53WVdObElHbHVjMlZ5ZEdWa0lHRnliM1Z1WkNCelpYSjJaWEl0Y21WdVpHVnlaV1FnYldGeWEzVndMaWNwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lISnZiM1JGYkdWdFpXNTBVMmxpYkdsdVp5QTlJSEp2YjNSRmJHVnRaVzUwVTJsaWJHbHVaeTV1WlhoMFUybGliR2x1Wnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnphRzkxYkdSU1pYVnpaVTFoY210MWNDQTlJR052Ym5SaGFXNWxja2hoYzFKbFlXTjBUV0Z5YTNWd0lDWW1JQ0Z3Y21WMlEyOXRjRzl1Wlc1MElDWW1JQ0ZqYjI1MFlXbHVaWEpJWVhOT2IyNVNiMjkwVW1WaFkzUkRhR2xzWkR0Y2JpQWdJQ0IyWVhJZ1kyOXRjRzl1Wlc1MElEMGdVbVZoWTNSTmIzVnVkQzVmY21WdVpHVnlUbVYzVW05dmRFTnZiWEJ2Ym1WdWRDaHVaWGgwVjNKaGNIQmxaRVZzWlcxbGJuUXNJR052Ym5SaGFXNWxjaXdnYzJodmRXeGtVbVYxYzJWTllYSnJkWEFzSUhCaGNtVnVkRU52YlhCdmJtVnVkQ0FoUFNCdWRXeHNJRDhnY0dGeVpXNTBRMjl0Y0c5dVpXNTBMbDl5WldGamRFbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVdVgzQnliMk5sYzNORGFHbHNaRU52Ym5SbGVIUW9jR0Z5Wlc1MFEyOXRjRzl1Wlc1MExsOXlaV0ZqZEVsdWRHVnlibUZzU1c1emRHRnVZMlV1WDJOdmJuUmxlSFFwSURvZ1pXMXdkSGxQWW1wbFkzUXBMbDl5Wlc1a1pYSmxaRU52YlhCdmJtVnVkQzVuWlhSUWRXSnNhV05KYm5OMFlXNWpaU2dwTzF4dUlDQWdJR2xtSUNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ1kyRnNiR0poWTJzdVkyRnNiQ2hqYjIxd2IyNWxiblFwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1kyOXRjRzl1Wlc1ME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlc1a1pYSnpJR0VnVW1WaFkzUWdZMjl0Y0c5dVpXNTBJR2x1ZEc4Z2RHaGxJRVJQVFNCcGJpQjBhR1VnYzNWd2NHeHBaV1FnWUdOdmJuUmhhVzVsY21BdVhHNGdJQ0FxWEc0Z0lDQXFJRWxtSUhSb1pTQlNaV0ZqZENCamIyMXdiMjVsYm5RZ2QyRnpJSEJ5WlhacGIzVnpiSGtnY21WdVpHVnlaV1FnYVc1MGJ5QmdZMjl1ZEdGcGJtVnlZQ3dnZEdocGN5QjNhV3hzWEc0Z0lDQXFJSEJsY21admNtMGdZVzRnZFhCa1lYUmxJRzl1SUdsMElHRnVaQ0J2Ym14NUlHMTFkR0YwWlNCMGFHVWdSRTlOSUdGeklHNWxZMlZ6YzJGeWVTQjBieUJ5Wldac1pXTjBJSFJvWlZ4dUlDQWdLaUJzWVhSbGMzUWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFJXeGxiV1Z1ZEgwZ2JtVjRkRVZzWlcxbGJuUWdRMjl0Y0c5dVpXNTBJR1ZzWlcxbGJuUWdkRzhnY21WdVpHVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwUlBUVVZzWlcxbGJuUjlJR052Ym5SaGFXNWxjaUJFVDAwZ1pXeGxiV1Z1ZENCMGJ5QnlaVzVrWlhJZ2FXNTBieTVjYmlBZ0lDb2dRSEJoY21GdElIcy9ablZ1WTNScGIyNTlJR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVJSFJ5YVdkblpYSmxaQ0J2YmlCamIyMXdiR1YwYVc5dVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFKbFlXTjBRMjl0Y0c5dVpXNTBmU0JEYjIxd2IyNWxiblFnYVc1emRHRnVZMlVnY21WdVpHVnlaV1FnYVc0Z1lHTnZiblJoYVc1bGNtQXVYRzRnSUNBcUwxeHVJQ0J5Wlc1a1pYSTZJR1oxYm1OMGFXOXVJQ2h1WlhoMFJXeGxiV1Z1ZEN3Z1kyOXVkR0ZwYm1WeUxDQmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCU1pXRmpkRTF2ZFc1MExsOXlaVzVrWlhKVGRXSjBjbVZsU1c1MGIwTnZiblJoYVc1bGNpaHVkV3hzTENCdVpYaDBSV3hsYldWdWRDd2dZMjl1ZEdGcGJtVnlMQ0JqWVd4c1ltRmpheWs3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxaMmx6ZEdWeWN5QmhJR052Ym5SaGFXNWxjaUJ1YjJSbElHbHVkRzhnZDJocFkyZ2dVbVZoWTNRZ1kyOXRjRzl1Wlc1MGN5QjNhV3hzSUdKbElISmxibVJsY21Wa0xseHVJQ0FnS2lCVWFHbHpJR0ZzYzI4Z1kzSmxZWFJsY3lCMGFHVWdYQ0p5WldGamRGSnZiM1JjSWlCSlJDQjBhR0YwSUhkcGJHd2dZbVVnWVhOemFXZHVaV1FnZEc4Z2RHaGxJR1ZzWlcxbGJuUmNiaUFnSUNvZ2NtVnVaR1Z5WldRZ2QybDBhR2x1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwUlBUVVZzWlcxbGJuUjlJR052Ym5SaGFXNWxjaUJFVDAwZ1pXeGxiV1Z1ZENCMGJ5QnlaV2RwYzNSbGNpQmhjeUJoSUdOdmJuUmhhVzVsY2k1Y2JpQWdJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JVYUdVZ1hDSnlaV0ZqZEZKdmIzUmNJaUJKUkNCdlppQmxiR1Z0Wlc1MGN5QnlaVzVrWlhKbFpDQjNhWFJvYVc0dVhHNGdJQ0FxTDF4dUlDQnlaV2RwYzNSbGNrTnZiblJoYVc1bGNqb2dablZ1WTNScGIyNGdLR052Ym5SaGFXNWxjaWtnZTF4dUlDQWdJSFpoY2lCeVpXRmpkRkp2YjNSSlJDQTlJR2RsZEZKbFlXTjBVbTl2ZEVsRUtHTnZiblJoYVc1bGNpazdYRzRnSUNBZ2FXWWdLSEpsWVdOMFVtOXZkRWxFS1NCN1hHNGdJQ0FnSUNBdkx5QkpaaUJ2Ym1VZ1pYaHBjM1J6TENCdFlXdGxJSE4xY21VZ2FYUWdhWE1nWVNCMllXeHBaQ0JjSW5KbFlXTjBVbTl2ZEZ3aUlFbEVMbHh1SUNBZ0lDQWdjbVZoWTNSU2IyOTBTVVFnUFNCU1pXRmpkRWx1YzNSaGJtTmxTR0Z1Wkd4bGN5NW5aWFJTWldGamRGSnZiM1JKUkVaeWIyMU9iMlJsU1VRb2NtVmhZM1JTYjI5MFNVUXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JWEpsWVdOMFVtOXZkRWxFS1NCN1hHNGdJQ0FnSUNBdkx5Qk9ieUIyWVd4cFpDQmNJbkpsWVdOMFVtOXZkRndpSUVsRUlHWnZkVzVrTENCamNtVmhkR1VnYjI1bExseHVJQ0FnSUNBZ2NtVmhZM1JTYjI5MFNVUWdQU0JTWldGamRFbHVjM1JoYm1ObFNHRnVaR3hsY3k1amNtVmhkR1ZTWldGamRGSnZiM1JKUkNncE8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1MFlXbHVaWEp6UW5sU1pXRmpkRkp2YjNSSlJGdHlaV0ZqZEZKdmIzUkpSRjBnUFNCamIyNTBZV2x1WlhJN1hHNGdJQ0FnY21WMGRYSnVJSEpsWVdOMFVtOXZkRWxFTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZibTF2ZFc1MGN5QmhibVFnWkdWemRISnZlWE1nZEdobElGSmxZV04wSUdOdmJYQnZibVZ1ZENCeVpXNWtaWEpsWkNCcGJpQjBhR1VnWUdOdmJuUmhhVzVsY21BdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSRTlOUld4bGJXVnVkSDBnWTI5dWRHRnBibVZ5SUVSUFRTQmxiR1Z0Wlc1MElHTnZiblJoYVc1cGJtY2dZU0JTWldGamRDQmpiMjF3YjI1bGJuUXVYRzRnSUNBcUlFQnlaWFIxY200Z2UySnZiMnhsWVc1OUlGUnlkV1VnYVdZZ1lTQmpiMjF3YjI1bGJuUWdkMkZ6SUdadmRXNWtJR2x1SUdGdVpDQjFibTF2ZFc1MFpXUWdabkp2YlZ4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnWTI5dWRHRnBibVZ5WUZ4dUlDQWdLaTljYmlBZ2RXNXRiM1Z1ZEVOdmJYQnZibVZ1ZEVGMFRtOWtaVG9nWm5WdVkzUnBiMjRnS0dOdmJuUmhhVzVsY2lrZ2UxeHVJQ0FnSUM4dklGWmhjbWx2ZFhNZ2NHRnlkSE1nYjJZZ2IzVnlJR052WkdVZ0tITjFZMmdnWVhNZ1VtVmhZM1JEYjIxd2IzTnBkR1ZEYjIxd2IyNWxiblFuYzF4dUlDQWdJQzh2SUY5eVpXNWtaWEpXWVd4cFpHRjBaV1JEYjIxd2IyNWxiblFwSUdGemMzVnRaU0IwYUdGMElHTmhiR3h6SUhSdklISmxibVJsY2lCaGNtVnVKM1FnYm1WemRHVmtPMXh1SUNBZ0lDOHZJSFpsY21sbWVTQjBhR0YwSUhSb1lYUW5jeUIwYUdVZ1kyRnpaUzRnS0ZOMGNtbGpkR3g1SUhOd1pXRnJhVzVuTENCMWJtMXZkVzUwYVc1bklIZHZiaWQwSUdOaGRYTmxJR0ZjYmlBZ0lDQXZMeUJ5Wlc1a1pYSWdZblYwSUhkbElITjBhV3hzSUdSdmJpZDBJR1Y0Y0dWamRDQjBieUJpWlNCcGJpQmhJSEpsYm1SbGNpQmpZV3hzSUdobGNtVXVLVnh1SUNBZ0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUIzWVhKdWFXNW5LRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlMbU4xY25KbGJuUWdQVDBnYm5Wc2JDd2dKM1Z1Ylc5MWJuUkRiMjF3YjI1bGJuUkJkRTV2WkdVb0tUb2dVbVZ1WkdWeUlHMWxkR2h2WkhNZ2MyaHZkV3hrSUdKbElHRWdjSFZ5WlNCbWRXNWpkR2x2YmlBbklDc2dKMjltSUhCeWIzQnpJR0Z1WkNCemRHRjBaVHNnZEhKcFoyZGxjbWx1WnlCdVpYTjBaV1FnWTI5dGNHOXVaVzUwSUhWd1pHRjBaWE1nWm5KdmJTQnlaVzVrWlhJZ0p5QXJJQ2RwY3lCdWIzUWdZV3hzYjNkbFpDNGdTV1lnYm1WalpYTnpZWEo1TENCMGNtbG5aMlZ5SUc1bGMzUmxaQ0IxY0dSaGRHVnpJR2x1SUNjZ0t5QW5ZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxMaUJEYUdWamF5QjBhR1VnY21WdVpHVnlJRzFsZEdodlpDQnZaaUFsY3k0bkxDQlNaV0ZqZEVOMWNuSmxiblJQZDI1bGNpNWpkWEp5Wlc1MElDWW1JRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlMbU4xY25KbGJuUXVaMlYwVG1GdFpTZ3BJSHg4SUNkU1pXRmpkRU52YlhCdmMybDBaVU52YlhCdmJtVnVkQ2NwSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ0lTaGpiMjUwWVdsdVpYSWdKaVlnS0dOdmJuUmhhVzVsY2k1dWIyUmxWSGx3WlNBOVBUMGdSVXhGVFVWT1ZGOU9UMFJGWDFSWlVFVWdmSHdnWTI5dWRHRnBibVZ5TG01dlpHVlVlWEJsSUQwOVBTQkVUME5mVGs5RVJWOVVXVkJGSUh4OElHTnZiblJoYVc1bGNpNXViMlJsVkhsd1pTQTlQVDBnUkU5RFZVMUZUbFJmUmxKQlIwMUZUbFJmVGs5RVJWOVVXVkJGS1NrZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuZFc1dGIzVnVkRU52YlhCdmJtVnVkRUYwVG05a1pTZ3VMaTRwT2lCVVlYSm5aWFFnWTI5dWRHRnBibVZ5SUdseklHNXZkQ0JoSUVSUFRTQmxiR1Z0Wlc1MExpY3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUhaaGNpQnlaV0ZqZEZKdmIzUkpSQ0E5SUdkbGRGSmxZV04wVW05dmRFbEVLR052Ym5SaGFXNWxjaWs3WEc0Z0lDQWdkbUZ5SUdOdmJYQnZibVZ1ZENBOUlHbHVjM1JoYm1ObGMwSjVVbVZoWTNSU2IyOTBTVVJiY21WaFkzUlNiMjkwU1VSZE8xeHVJQ0FnSUdsbUlDZ2hZMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdJQ0F2THlCRGFHVmpheUJwWmlCMGFHVWdibTlrWlNCaVpXbHVaeUIxYm0xdmRXNTBaV1FnZDJGeklISmxibVJsY21Wa0lHSjVJRkpsWVdOMExDQmlkWFFnYVhOdUozUWdZVnh1SUNBZ0lDQWdMeThnY205dmRDQnViMlJsTGx4dUlDQWdJQ0FnZG1GeUlHTnZiblJoYVc1bGNraGhjMDV2YmxKdmIzUlNaV0ZqZEVOb2FXeGtJRDBnYUdGelRtOXVVbTl2ZEZKbFlXTjBRMmhwYkdRb1kyOXVkR0ZwYm1WeUtUdGNibHh1SUNBZ0lDQWdMeThnUTJobFkyc2dhV1lnZEdobElHTnZiblJoYVc1bGNpQnBkSE5sYkdZZ2FYTWdZU0JTWldGamRDQnliMjkwSUc1dlpHVXVYRzRnSUNBZ0lDQjJZWElnWTI5dWRHRnBibVZ5U1VRZ1BTQnBiblJsY201aGJFZGxkRWxFS0dOdmJuUmhhVzVsY2lrN1hHNGdJQ0FnSUNCMllYSWdhWE5EYjI1MFlXbHVaWEpTWldGamRGSnZiM1FnUFNCamIyNTBZV2x1WlhKSlJDQW1KaUJqYjI1MFlXbHVaWEpKUkNBOVBUMGdVbVZoWTNSSmJuTjBZVzVqWlVoaGJtUnNaWE11WjJWMFVtVmhZM1JTYjI5MFNVUkdjbTl0VG05a1pVbEVLR052Ym5SaGFXNWxja2xFS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29JV052Ym5SaGFXNWxja2hoYzA1dmJsSnZiM1JTWldGamRFTm9hV3hrTENBbmRXNXRiM1Z1ZEVOdmJYQnZibVZ1ZEVGMFRtOWtaU2dwT2lCVWFHVWdibTlrWlNCNWIzVmNYQ2R5WlNCaGRIUmxiWEIwYVc1bklIUnZJSFZ1Ylc5MWJuUWdKeUFySUNkM1lYTWdjbVZ1WkdWeVpXUWdZbmtnVW1WaFkzUWdZVzVrSUdseklHNXZkQ0JoSUhSdmNDMXNaWFpsYkNCamIyNTBZV2x1WlhJdUlDVnpKeXdnYVhORGIyNTBZV2x1WlhKU1pXRmpkRkp2YjNRZ1B5QW5XVzkxSUcxaGVTQm9ZWFpsSUdGalkybGtaVzUwWVd4c2VTQndZWE56WldRZ2FXNGdZU0JTWldGamRDQnliMjkwSUc1dlpHVWdhVzV6ZEdWaFpDQW5JQ3NnSjI5bUlHbDBjeUJqYjI1MFlXbHVaWEl1SnlBNklDZEpibk4wWldGa0xDQm9ZWFpsSUhSb1pTQndZWEpsYm5RZ1kyOXRjRzl1Wlc1MElIVndaR0YwWlNCcGRITWdjM1JoZEdVZ1lXNWtJQ2NnS3lBbmNtVnlaVzVrWlhJZ2FXNGdiM0prWlhJZ2RHOGdjbVZ0YjNabElIUm9hWE1nWTI5dGNHOXVaVzUwTGljcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJRkpsWVdOMFZYQmtZWFJsY3k1aVlYUmphR1ZrVlhCa1lYUmxjeWgxYm0xdmRXNTBRMjl0Y0c5dVpXNTBSbkp2YlU1dlpHVXNJR052YlhCdmJtVnVkQ3dnWTI5dWRHRnBibVZ5S1R0Y2JpQWdJQ0JrWld4bGRHVWdhVzV6ZEdGdVkyVnpRbmxTWldGamRGSnZiM1JKUkZ0eVpXRmpkRkp2YjNSSlJGMDdYRzRnSUNBZ1pHVnNaWFJsSUdOdmJuUmhhVzVsY25OQ2VWSmxZV04wVW05dmRFbEVXM0psWVdOMFVtOXZkRWxFWFR0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdaR1ZzWlhSbElISnZiM1JGYkdWdFpXNTBjMEo1VW1WaFkzUlNiMjkwU1VSYmNtVmhZM1JTYjI5MFNVUmRPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUm1sdVpITWdkR2hsSUdOdmJuUmhhVzVsY2lCRVQwMGdaV3hsYldWdWRDQjBhR0YwSUdOdmJuUmhhVzV6SUZKbFlXTjBJR052YlhCdmJtVnVkQ0IwYnlCM2FHbGphQ0IwYUdWY2JpQWdJQ29nYzNWd2NHeHBaV1FnUkU5TklHQnBaR0FnWW1Wc2IyNW5jeTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdsa0lGUm9aU0JKUkNCdlppQmhiaUJsYkdWdFpXNTBJSEpsYm1SbGNtVmtJR0o1SUdFZ1VtVmhZM1FnWTI5dGNHOXVaVzUwTGx4dUlDQWdLaUJBY21WMGRYSnVJSHMvUkU5TlJXeGxiV1Z1ZEgwZ1JFOU5JR1ZzWlcxbGJuUWdkR2hoZENCamIyNTBZV2x1Y3lCMGFHVWdZR2xrWUM1Y2JpQWdJQ292WEc0Z0lHWnBibVJTWldGamRFTnZiblJoYVc1bGNrWnZja2xFT2lCbWRXNWpkR2x2YmlBb2FXUXBJSHRjYmlBZ0lDQjJZWElnY21WaFkzUlNiMjkwU1VRZ1BTQlNaV0ZqZEVsdWMzUmhibU5sU0dGdVpHeGxjeTVuWlhSU1pXRmpkRkp2YjNSSlJFWnliMjFPYjJSbFNVUW9hV1FwTzF4dUlDQWdJSFpoY2lCamIyNTBZV2x1WlhJZ1BTQmpiMjUwWVdsdVpYSnpRbmxTWldGamRGSnZiM1JKUkZ0eVpXRmpkRkp2YjNSSlJGMDdYRzVjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEp2YjNSRmJHVnRaVzUwSUQwZ2NtOXZkRVZzWlcxbGJuUnpRbmxTWldGamRGSnZiM1JKUkZ0eVpXRmpkRkp2YjNSSlJGMDdYRzRnSUNBZ0lDQnBaaUFvY205dmRFVnNaVzFsYm5RZ0ppWWdjbTl2ZEVWc1pXMWxiblF1Y0dGeVpXNTBUbTlrWlNBaFBUMGdZMjl1ZEdGcGJtVnlLU0I3WEc0Z0lDQWdJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktGeHVJQ0FnSUNBZ0lDQXZMeUJEWVd4c0lHbHVkR1Z5Ym1Gc1IyVjBTVVFnYUdWeVpTQmlaV05oZFhObElHZGxkRWxFSUdOaGJHeHpJR2x6Vm1Gc2FXUWdkMmhwWTJnZ1kyRnNiSE5jYmlBZ0lDQWdJQ0FnTHk4Z1ptbHVaRkpsWVdOMFEyOXVkR0ZwYm1WeVJtOXlTVVFnS0hSb2FYTWdablZ1WTNScGIyNHBMbHh1SUNBZ0lDQWdJQ0JwYm5SbGNtNWhiRWRsZEVsRUtISnZiM1JGYkdWdFpXNTBLU0E5UFQwZ2NtVmhZM1JTYjI5MFNVUXNJQ2RTWldGamRFMXZkVzUwT2lCU2IyOTBJR1ZzWlcxbGJuUWdTVVFnWkdsbVptVnlaV1FnWm5KdmJTQnlaV0ZqZEZKdmIzUkpSQzRuS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOdmJuUmhhVzVsY2tOb2FXeGtJRDBnWTI5dWRHRnBibVZ5TG1acGNuTjBRMmhwYkdRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjI1MFlXbHVaWEpEYUdsc1pDQW1KaUJ5WldGamRGSnZiM1JKUkNBOVBUMGdhVzUwWlhKdVlXeEhaWFJKUkNoamIyNTBZV2x1WlhKRGFHbHNaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHVWdZMjl1ZEdGcGJtVnlJR2hoY3lCaElHNWxkeUJqYUdsc1pDQjNhWFJvSUhSb1pTQnpZVzFsSUVsRUlHRnpJSFJvWlNCdmJHUmNiaUFnSUNBZ0lDQWdJQ0F2THlCeWIyOTBJR1ZzWlcxbGJuUXNJSFJvWlc0Z2NtOXZkRVZzWlcxbGJuUnpRbmxTWldGamRGSnZiM1JKUkZ0eVpXRmpkRkp2YjNSSlJGMGdhWE5jYmlBZ0lDQWdJQ0FnSUNBdkx5QnFkWE4wSUhOMFlXeGxJR0Z1WkNCdVpXVmtjeUIwYnlCaVpTQjFjR1JoZEdWa0xpQlVhR1VnWTJGelpTQjBhR0YwSUdSbGMyVnlkbVZ6SUdGY2JpQWdJQ0FnSUNBZ0lDQXZMeUIzWVhKdWFXNW5JR2x6SUhkb1pXNGdkR2hsSUdOdmJuUmhhVzVsY2lCcGN5QmxiWEIwZVM1Y2JpQWdJQ0FnSUNBZ0lDQnliMjkwUld4bGJXVnVkSE5DZVZKbFlXTjBVbTl2ZEVsRVczSmxZV04wVW05dmRFbEVYU0E5SUdOdmJuUmhhVzVsY2tOb2FXeGtPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktHWmhiSE5sTENBblVtVmhZM1JOYjNWdWREb2dVbTl2ZENCbGJHVnRaVzUwSUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1FnWm5KdmJTQnBkSE1nYjNKcFoybHVZV3dnSnlBcklDZGpiMjUwWVdsdVpYSXVJRTVsZHlCamIyNTBZV2x1WlhJNklDVnpKeXdnY205dmRFVnNaVzFsYm5RdWNHRnlaVzUwVG05a1pTa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdZMjl1ZEdGcGJtVnlPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCR2FXNWtjeUJoYmlCbGJHVnRaVzUwSUhKbGJtUmxjbVZrSUdKNUlGSmxZV04wSUhkcGRHZ2dkR2hsSUhOMWNIQnNhV1ZrSUVsRUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnU1VRZ2IyWWdZU0JFVDAwZ2JtOWtaU0JwYmlCMGFHVWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2lCQWNtVjBkWEp1SUh0RVQwMUZiR1Z0Wlc1MGZTQlNiMjkwSUVSUFRTQnViMlJsSUc5bUlIUm9aU0JTWldGamRDQmpiMjF3YjI1bGJuUXVYRzRnSUNBcUwxeHVJQ0JtYVc1a1VtVmhZM1JPYjJSbFFubEpSRG9nWm5WdVkzUnBiMjRnS0dsa0tTQjdYRzRnSUNBZ2RtRnlJSEpsWVdOMFVtOXZkQ0E5SUZKbFlXTjBUVzkxYm5RdVptbHVaRkpsWVdOMFEyOXVkR0ZwYm1WeVJtOXlTVVFvYVdRcE8xeHVJQ0FnSUhKbGRIVnliaUJTWldGamRFMXZkVzUwTG1acGJtUkRiMjF3YjI1bGJuUlNiMjkwS0hKbFlXTjBVbTl2ZEN3Z2FXUXBPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWNtRjJaWEp6WlhNZ2RYQWdkR2hsSUdGdVkyVnpkRzl5Y3lCdlppQjBhR1VnYzNWd2NHeHBaV1FnYm05a1pTQjBieUJtYVc1a0lHRWdibTlrWlNCMGFHRjBJR2x6SUdGY2JpQWdJQ29nUkU5TklISmxjSEpsYzJWdWRHRjBhVzl1SUc5bUlHRWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MElISmxibVJsY21Wa0lHSjVJSFJvYVhNZ1kyOXdlU0J2WmlCU1pXRmpkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUhzcWZTQnViMlJsWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlejlFVDAxRmRtVnVkRlJoY21kbGRIMWNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQm5aWFJHYVhKemRGSmxZV04wUkU5Tk9pQm1kVzVqZEdsdmJpQW9ibTlrWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtYVc1a1JtbHljM1JTWldGamRFUlBUVWx0Y0d3b2JtOWtaU2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWnBibVJ6SUdFZ2JtOWtaU0IzYVhSb0lIUm9aU0J6ZFhCd2JHbGxaQ0JnZEdGeVoyVjBTVVJnSUdsdWMybGtaU0J2WmlCMGFHVWdjM1Z3Y0d4cFpXUmNiaUFnSUNvZ1lHRnVZMlZ6ZEc5eVRtOWtaV0F1SUNCRmVIQnNiMmwwY3lCMGFHVWdTVVFnYm1GdGFXNW5JSE5qYUdWdFpTQjBieUJ3WlhKbWIzSnRJSFJvWlNCelpXRnlZMmhjYmlBZ0lDb2djWFZwWTJ0c2VTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRFVDAxRmRtVnVkRlJoY21kbGRIMGdZVzVqWlhOMGIzSk9iMlJsSUZObFlYSmphQ0JtY205dElIUm9hWE1nY205dmRDNWNiaUFnSUNvZ1FIQmhjbUZ5YlNCN2MzUnlhVzVuZlNCMFlYSm5aWFJKUkNCSlJDQnZaaUIwYUdVZ1JFOU5JSEpsY0hKbGMyVnVkR0YwYVc5dUlHOW1JSFJvWlNCamIyMXdiMjVsYm5RdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBSUFRVVjJaVzUwVkdGeVoyVjBmU0JFVDAwZ2JtOWtaU0IzYVhSb0lIUm9aU0J6ZFhCd2JHbGxaQ0JnZEdGeVoyVjBTVVJnTGx4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUdacGJtUkRiMjF3YjI1bGJuUlNiMjkwT2lCbWRXNWpkR2x2YmlBb1lXNWpaWE4wYjNKT2IyUmxMQ0IwWVhKblpYUkpSQ2tnZTF4dUlDQWdJSFpoY2lCbWFYSnpkRU5vYVd4a2NtVnVJRDBnWm1sdVpFTnZiWEJ2Ym1WdWRGSnZiM1JTWlhWellXSnNaVUZ5Y21GNU8xeHVJQ0FnSUhaaGNpQmphR2xzWkVsdVpHVjRJRDBnTUR0Y2JseHVJQ0FnSUhaaGNpQmtaV1Z3WlhOMFFXNWpaWE4wYjNJZ1BTQm1hVzVrUkdWbGNHVnpkRU5oWTJobFpFRnVZMlZ6ZEc5eUtIUmhjbWRsZEVsRUtTQjhmQ0JoYm1ObGMzUnZjazV2WkdVN1hHNWNiaUFnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJQ0FnTHk4Z1ZHaHBjeUIzYVd4c0lIUm9jbTkzSUc5dUlIUm9aU0J1WlhoMElHeHBibVU3SUdkcGRtVWdZVzRnWldGeWJIa2dkMkZ5Ym1sdVoxeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29aR1ZsY0dWemRFRnVZMlZ6ZEc5eUlDRTlJRzUxYkd3c0lDZFNaV0ZqZENCallXNWNYQ2QwSUdacGJtUWdkR2hsSUhKdmIzUWdZMjl0Y0c5dVpXNTBJRzV2WkdVZ1ptOXlJR1JoZEdFdGNtVmhZM1JwWkNCMllXeDFaU0FuSUNzZ0oyQWxjMkF1SUVsbUlIbHZkVnhjSjNKbElITmxaV2x1WnlCMGFHbHpJRzFsYzNOaFoyVXNJR2wwSUhCeWIySmhZbXg1SUcxbFlXNXpJSFJvWVhRZ0p5QXJJQ2Q1YjNWY1hDZDJaU0JzYjJGa1pXUWdkSGR2SUdOdmNHbGxjeUJ2WmlCU1pXRmpkQ0J2YmlCMGFHVWdjR0ZuWlM0Z1FYUWdkR2hwY3lCMGFXMWxMQ0J2Ym14NUlDY2dLeUFuWVNCemFXNW5iR1VnWTI5d2VTQnZaaUJTWldGamRDQmpZVzRnWW1VZ2JHOWhaR1ZrSUdGMElHRWdkR2x0WlM0bkxDQjBZWEpuWlhSSlJDa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabWx5YzNSRGFHbHNaSEpsYmxzd1hTQTlJR1JsWlhCbGMzUkJibU5sYzNSdmNpNW1hWEp6ZEVOb2FXeGtPMXh1SUNBZ0lHWnBjbk4wUTJocGJHUnlaVzR1YkdWdVozUm9JRDBnTVR0Y2JseHVJQ0FnSUhkb2FXeGxJQ2hqYUdsc1pFbHVaR1Y0SUR3Z1ptbHljM1JEYUdsc1pISmxiaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCamFHbHNaQ0E5SUdacGNuTjBRMmhwYkdSeVpXNWJZMmhwYkdSSmJtUmxlQ3NyWFR0Y2JpQWdJQ0FnSUhaaGNpQjBZWEpuWlhSRGFHbHNaRHRjYmx4dUlDQWdJQ0FnZDJocGJHVWdLR05vYVd4a0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCamFHbHNaRWxFSUQwZ1VtVmhZM1JOYjNWdWRDNW5aWFJKUkNoamFHbHNaQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGphR2xzWkVsRUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JYWmxiaUJwWmlCM1pTQm1hVzVrSUhSb1pTQnViMlJsSUhkbEozSmxJR3h2YjJ0cGJtY2dabTl5TENCM1pTQm1hVzVwYzJnZ2JHOXZjR2x1WjF4dUlDQWdJQ0FnSUNBZ0lDOHZJSFJvY205MVoyZ2dhWFJ6SUhOcFlteHBibWR6SUhSdklHVnVjM1Z5WlNCMGFHVjVKM0psSUdOaFkyaGxaQ0J6YnlCMGFHRjBJSGRsSUdSdmJpZDBJR2hoZG1WY2JpQWdJQ0FnSUNBZ0lDQXZMeUIwYnlCeVpYWnBjMmwwSUhSb2FYTWdibTlrWlNCaFoyRnBiaTRnVDNSb1pYSjNhWE5sTENCM1pTQnRZV3RsSUc1ZU1pQmpZV3hzY3lCMGJ5Qm5aWFJKUkZ4dUlDQWdJQ0FnSUNBZ0lDOHZJSGRvWlc0Z2RtbHphWFJwYm1jZ2RHaGxJRzFoYm5rZ1kyaHBiR1J5Wlc0Z2IyWWdZU0J6YVc1bmJHVWdibTlrWlNCcGJpQnZjbVJsY2k1Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFJKUkNBOVBUMGdZMmhwYkdSSlJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwUTJocGJHUWdQU0JqYUdsc1pEdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0ZKbFlXTjBTVzV6ZEdGdVkyVklZVzVrYkdWekxtbHpRVzVqWlhOMGIzSkpSRTltS0dOb2FXeGtTVVFzSUhSaGNtZGxkRWxFS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdkMlVnWm1sdVpDQmhJR05vYVd4a0lIZG9iM05sSUVsRUlHbHpJR0Z1SUdGdVkyVnpkRzl5SUc5bUlIUm9aU0JuYVhabGJpQkpSQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvWlc0Z2QyVWdZMkZ1SUdKbElITjFjbVVnZEdoaGRDQjNaU0J2Ym14NUlIZGhiblFnZEc4Z2MyVmhjbU5vSUhSb1pTQnpkV0owY21WbFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCeWIyOTBaV1FnWVhRZ2RHaHBjeUJqYUdsc1pDd2djMjhnZDJVZ1kyRnVJSFJvY205M0lHOTFkQ0IwYUdVZ2NtVnpkQ0J2WmlCMGFHVmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmxZWEpqYUNCemRHRjBaUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBjbk4wUTJocGJHUnlaVzR1YkdWdVozUm9JRDBnWTJocGJHUkpibVJsZUNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWFYSnpkRU5vYVd4a2NtVnVMbkIxYzJnb1kyaHBiR1F1Wm1seWMzUkRhR2xzWkNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dklFbG1JSFJvYVhNZ1kyaHBiR1FnYUdGa0lHNXZJRWxFTENCMGFHVnVJSFJvWlhKbEozTWdZU0JqYUdGdVkyVWdkR2hoZENCcGRDQjNZWE5jYmlBZ0lDQWdJQ0FnSUNBdkx5QnBibXBsWTNSbFpDQmhkWFJ2YldGMGFXTmhiR3g1SUdKNUlIUm9aU0JpY205M2MyVnlMQ0JoY3lCM2FHVnVJR0VnWUR4MFlXSnNaVDVnWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdaV3hsYldWdWRDQnpjSEp2ZFhSeklHRnVJR1Y0ZEhKaElHQThkR0p2WkhrK1lDQmphR2xzWkNCaGN5QmhJSE5wWkdVZ1pXWm1aV04wSUc5bVhHNGdJQ0FnSUNBZ0lDQWdMeThnWUM1cGJtNWxja2hVVFV4Z0lIQmhjbk5wYm1jdUlFOXdkR2x0YVhOMGFXTmhiR3g1SUdOdmJuUnBiblZsSUdSdmQyNGdkR2hwYzF4dUlDQWdJQ0FnSUNBZ0lDOHZJR0p5WVc1amFDd2dZblYwSUc1dmRDQmlaV1p2Y21VZ1pYaGhiV2x1YVc1bklIUm9aU0J2ZEdobGNpQnphV0pzYVc1bmN5NWNiaUFnSUNBZ0lDQWdJQ0JtYVhKemRFTm9hV3hrY21WdUxuQjFjMmdvWTJocGJHUXVabWx5YzNSRGFHbHNaQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmphR2xzWkNBOUlHTm9hV3hrTG01bGVIUlRhV0pzYVc1bk8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvZEdGeVoyVjBRMmhwYkdRcElIdGNiaUFnSUNBZ0lDQWdMeThnUlcxd2RIbHBibWNnWm1seWMzUkRhR2xzWkhKbGJpOW1hVzVrUTI5dGNHOXVaVzUwVW05dmRGSmxkWE5oWW14bFFYSnlZWGtnYVhOY2JpQWdJQ0FnSUNBZ0x5OGdibTkwSUc1bFkyVnpjMkZ5ZVNCbWIzSWdZMjl5Y21WamRHNWxjM01zSUdKMWRDQnBkQ0JvWld4d2N5QjBhR1VnUjBNZ2NtVmpiR0ZwYlZ4dUlDQWdJQ0FnSUNBdkx5QmhibmtnYm05a1pYTWdkR2hoZENCM1pYSmxJR3hsWm5RZ1lYUWdkR2hsSUdWdVpDQnZaaUIwYUdVZ2MyVmhjbU5vTGx4dUlDQWdJQ0FnSUNCbWFYSnpkRU5vYVd4a2NtVnVMbXhsYm1kMGFDQTlJREE3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSaGNtZGxkRU5vYVd4a08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdacGNuTjBRMmhwYkdSeVpXNHViR1Z1WjNSb0lEMGdNRHRjYmx4dUlDQWdJQ0ZtWVd4elpTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkbWFXNWtRMjl0Y0c5dVpXNTBVbTl2ZENndUxpNHNJQ1Z6S1RvZ1ZXNWhZbXhsSUhSdklHWnBibVFnWld4bGJXVnVkQzRnVkdocGN5QndjbTlpWVdKc2VTQW5JQ3NnSjIxbFlXNXpJSFJvWlNCRVQwMGdkMkZ6SUhWdVpYaHdaV04wWldSc2VTQnRkWFJoZEdWa0lDaGxMbWN1TENCaWVTQjBhR1VnWW5KdmQzTmxjaWtzSUNjZ0t5QW5kWE4xWVd4c2VTQmtkV1VnZEc4Z1ptOXlaMlYwZEdsdVp5QmhJRHgwWW05a2VUNGdkMmhsYmlCMWMybHVaeUIwWVdKc1pYTXNJRzVsYzNScGJtY2dkR0ZuY3lBbklDc2dKMnhwYTJVZ1BHWnZjbTArTENBOGNENHNJRzl5SUR4aFBpd2diM0lnZFhOcGJtY2dibTl1TFZOV1J5QmxiR1Z0Wlc1MGN5QnBiaUJoYmlBOGMzWm5QaUFuSUNzZ0ozQmhjbVZ1ZEM0Z0p5QXJJQ2RVY25rZ2FXNXpjR1ZqZEdsdVp5QjBhR1VnWTJocGJHUWdibTlrWlhNZ2IyWWdkR2hsSUdWc1pXMWxiblFnZDJsMGFDQlNaV0ZqZENCSlJDQmdKWE5nTGljc0lIUmhjbWRsZEVsRUxDQlNaV0ZqZEUxdmRXNTBMbWRsZEVsRUtHRnVZMlZ6ZEc5eVRtOWtaU2twSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnZlN4Y2JseHVJQ0JmYlc5MWJuUkpiV0ZuWlVsdWRHOU9iMlJsT2lCbWRXNWpkR2x2YmlBb2JXRnlhM1Z3TENCamIyNTBZV2x1WlhJc0lITm9iM1ZzWkZKbGRYTmxUV0Z5YTNWd0xDQjBjbUZ1YzJGamRHbHZiaWtnZTF4dUlDQWdJQ0VvWTI5dWRHRnBibVZ5SUNZbUlDaGpiMjUwWVdsdVpYSXVibTlrWlZSNWNHVWdQVDA5SUVWTVJVMUZUbFJmVGs5RVJWOVVXVkJGSUh4OElHTnZiblJoYVc1bGNpNXViMlJsVkhsd1pTQTlQVDBnUkU5RFgwNVBSRVZmVkZsUVJTQjhmQ0JqYjI1MFlXbHVaWEl1Ym05a1pWUjVjR1VnUFQwOUlFUlBRMVZOUlU1VVgwWlNRVWROUlU1VVgwNVBSRVZmVkZsUVJTa3BJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oyMXZkVzUwUTI5dGNHOXVaVzUwU1c1MGIwNXZaR1VvTGk0dUtUb2dWR0Z5WjJWMElHTnZiblJoYVc1bGNpQnBjeUJ1YjNRZ2RtRnNhV1F1SnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1WEc0Z0lDQWdhV1lnS0hOb2IzVnNaRkpsZFhObFRXRnlhM1Z3S1NCN1hHNGdJQ0FnSUNCMllYSWdjbTl2ZEVWc1pXMWxiblFnUFNCblpYUlNaV0ZqZEZKdmIzUkZiR1Z0Wlc1MFNXNURiMjUwWVdsdVpYSW9ZMjl1ZEdGcGJtVnlLVHRjYmlBZ0lDQWdJR2xtSUNoU1pXRmpkRTFoY210MWNFTm9aV05yYzNWdExtTmhibEpsZFhObFRXRnlhM1Z3S0cxaGNtdDFjQ3dnY205dmRFVnNaVzFsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqYUdWamEzTjFiU0E5SUhKdmIzUkZiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2hTWldGamRFMWhjbXQxY0VOb1pXTnJjM1Z0TGtOSVJVTkxVMVZOWDBGVVZGSmZUa0ZOUlNrN1hHNGdJQ0FnSUNBZ0lISnZiM1JGYkdWdFpXNTBMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaFNaV0ZqZEUxaGNtdDFjRU5vWldOcmMzVnRMa05JUlVOTFUxVk5YMEZVVkZKZlRrRk5SU2s3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEp2YjNSTllYSnJkWEFnUFNCeWIyOTBSV3hsYldWdWRDNXZkWFJsY2toVVRVdzdYRzRnSUNBZ0lDQWdJSEp2YjNSRmJHVnRaVzUwTG5ObGRFRjBkSEpwWW5WMFpTaFNaV0ZqZEUxaGNtdDFjRU5vWldOcmMzVnRMa05JUlVOTFUxVk5YMEZVVkZKZlRrRk5SU3dnWTJobFkydHpkVzBwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ1YjNKdFlXeHBlbVZrVFdGeWEzVndJRDBnYldGeWEzVndPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklHSmxZMkYxYzJVZ2NtOXZkRTFoY210MWNDQnBjeUJ5WlhSeWFXVjJaV1FnWm5KdmJTQjBhR1VnUkU5TkxDQjJZWEpwYjNWeklHNXZjbTFoYkdsNllYUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMmxzYkNCb1lYWmxJRzlqWTNWeWNtVmtJSGRvYVdOb0lIZHBiR3dnYm05MElHSmxJSEJ5WlhObGJuUWdhVzRnWUcxaGNtdDFjR0F1SUVobGNtVXNYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2FXNXpaWEowSUcxaGNtdDFjQ0JwYm5SdklHRWdQR1JwZGo0Z2IzSWdQR2xtY21GdFpUNGdaR1Z3Wlc1a2FXNW5JRzl1SUhSb1pTQmpiMjUwWVdsdVpYSmNiaUFnSUNBZ0lDQWdJQ0F2THlCMGVYQmxJSFJ2SUhCbGNtWnZjbTBnZEdobElITmhiV1VnYm05eWJXRnNhWHBoZEdsdmJuTWdZbVZtYjNKbElHTnZiWEJoY21sdVp5NWNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2JtOXliV0ZzYVhwbGNqdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1kyOXVkR0ZwYm1WeUxtNXZaR1ZVZVhCbElEMDlQU0JGVEVWTlJVNVVYMDVQUkVWZlZGbFFSU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxjaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJXRnNhWHBsY2k1cGJtNWxja2hVVFV3Z1BTQnRZWEpyZFhBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVZrVFdGeWEzVndJRDBnYm05eWJXRnNhWHBsY2k1cGJtNWxja2hVVFV3N1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dmNtMWhiR2w2WlhJZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkcFpuSmhiV1VuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUp2WkhrdVlYQndaVzVrUTJocGJHUW9ibTl5YldGc2FYcGxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVnlMbU52Ym5SbGJuUkViMk4xYldWdWRDNTNjbWwwWlNodFlYSnJkWEFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxaRTFoY210MWNDQTlJRzV2Y20xaGJHbDZaWEl1WTI5dWRHVnVkRVJ2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNXZkWFJsY2toVVRVdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aWIyUjVMbkpsYlc5MlpVTm9hV3hrS0c1dmNtMWhiR2w2WlhJcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJrYVdabVNXNWtaWGdnUFNCbWFYSnpkRVJwWm1abGNtVnVZMlZKYm1SbGVDaHViM0p0WVd4cGVtVmtUV0Z5YTNWd0xDQnliMjkwVFdGeWEzVndLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUnBabVpsY21WdVkyVWdQU0FuSUNoamJHbGxiblFwSUNjZ0t5QnViM0p0WVd4cGVtVmtUV0Z5YTNWd0xuTjFZbk4wY21sdVp5aGthV1ptU1c1a1pYZ2dMU0F5TUN3Z1pHbG1aa2x1WkdWNElDc2dNakFwSUNzZ0oxeGNiaUFvYzJWeWRtVnlLU0FuSUNzZ2NtOXZkRTFoY210MWNDNXpkV0p6ZEhKcGJtY29aR2xtWmtsdVpHVjRJQzBnTWpBc0lHUnBabVpKYm1SbGVDQXJJREl3S1R0Y2JseHVJQ0FnSUNBZ0lDQWhLR052Ym5SaGFXNWxjaTV1YjJSbFZIbHdaU0FoUFQwZ1JFOURYMDVQUkVWZlZGbFFSU2tnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5XVzkxWEZ3bmNtVWdkSEo1YVc1bklIUnZJSEpsYm1SbGNpQmhJR052YlhCdmJtVnVkQ0IwYnlCMGFHVWdaRzlqZFcxbGJuUWdkWE5wYm1jZ0p5QXJJQ2R6WlhKMlpYSWdjbVZ1WkdWeWFXNW5JR0oxZENCMGFHVWdZMmhsWTJ0emRXMGdkMkZ6SUdsdWRtRnNhV1F1SUZSb2FYTWdkWE4xWVd4c2VTQW5JQ3NnSjIxbFlXNXpJSGx2ZFNCeVpXNWtaWEpsWkNCaElHUnBabVpsY21WdWRDQmpiMjF3YjI1bGJuUWdkSGx3WlNCdmNpQndjbTl3Y3lCdmJpQW5JQ3NnSjNSb1pTQmpiR2xsYm5RZ1puSnZiU0IwYUdVZ2IyNWxJRzl1SUhSb1pTQnpaWEoyWlhJc0lHOXlJSGx2ZFhJZ2NtVnVaR1Z5S0NrZ0p5QXJJQ2R0WlhSb2IyUnpJR0Z5WlNCcGJYQjFjbVV1SUZKbFlXTjBJR05oYm01dmRDQm9ZVzVrYkdVZ2RHaHBjeUJqWVhObElHUjFaU0IwYnlBbklDc2dKMk55YjNOekxXSnliM2R6WlhJZ2NYVnBjbXR6SUdKNUlISmxibVJsY21sdVp5QmhkQ0IwYUdVZ1pHOWpkVzFsYm5RZ2NtOXZkQzRnV1c5MUlDY2dLeUFuYzJodmRXeGtJR3h2YjJzZ1ptOXlJR1Z1ZG1seWIyNXRaVzUwSUdSbGNHVnVaR1Z1ZENCamIyUmxJR2x1SUhsdmRYSWdZMjl0Y0c5dVpXNTBjeUFuSUNzZ0oyRnVaQ0JsYm5OMWNtVWdkR2hsSUhCeWIzQnpJR0Z5WlNCMGFHVWdjMkZ0WlNCamJHbGxiblFnWVc1a0lITmxjblpsY2lCemFXUmxPbHhjYmlWekp5d2daR2xtWm1WeVpXNWpaU2tnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb1ptRnNjMlVzSUNkU1pXRmpkQ0JoZEhSbGJYQjBaV1FnZEc4Z2NtVjFjMlVnYldGeWEzVndJR2x1SUdFZ1kyOXVkR0ZwYm1WeUlHSjFkQ0IwYUdVZ0p5QXJJQ2RqYUdWamEzTjFiU0IzWVhNZ2FXNTJZV3hwWkM0Z1ZHaHBjeUJuWlc1bGNtRnNiSGtnYldWaGJuTWdkR2hoZENCNWIzVWdZWEpsSUNjZ0t5QW5kWE5wYm1jZ2MyVnlkbVZ5SUhKbGJtUmxjbWx1WnlCaGJtUWdkR2hsSUcxaGNtdDFjQ0JuWlc1bGNtRjBaV1FnYjI0Z2RHaGxJQ2NnS3lBbmMyVnlkbVZ5SUhkaGN5QnViM1FnZDJoaGRDQjBhR1VnWTJ4cFpXNTBJSGRoY3lCbGVIQmxZM1JwYm1jdUlGSmxZV04wSUdsdWFtVmpkR1ZrSUNjZ0t5QW5ibVYzSUcxaGNtdDFjQ0IwYnlCamIyMXdaVzV6WVhSbElIZG9hV05vSUhkdmNtdHpJR0oxZENCNWIzVWdhR0YyWlNCc2IzTjBJRzFoYm5rZ0p5QXJJQ2R2WmlCMGFHVWdZbVZ1WldacGRITWdiMllnYzJWeWRtVnlJSEpsYm1SbGNtbHVaeTRnU1c1emRHVmhaQ3dnWm1sbmRYSmxJRzkxZENBbklDc2dKM2RvZVNCMGFHVWdiV0Z5YTNWd0lHSmxhVzVuSUdkbGJtVnlZWFJsWkNCcGN5QmthV1ptWlhKbGJuUWdiMjRnZEdobElHTnNhV1Z1ZENBbklDc2dKMjl5SUhObGNuWmxjanBjWEc0bGN5Y3NJR1JwWm1abGNtVnVZMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0lTaGpiMjUwWVdsdVpYSXVibTlrWlZSNWNHVWdJVDA5SUVSUFExOU9UMFJGWDFSWlVFVXBJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oxbHZkVnhjSjNKbElIUnllV2x1WnlCMGJ5QnlaVzVrWlhJZ1lTQmpiMjF3YjI1bGJuUWdkRzhnZEdobElHUnZZM1Z0Wlc1MElHSjFkQ0FuSUNzZ0ozbHZkU0JrYVdSdVhGd25kQ0IxYzJVZ2MyVnlkbVZ5SUhKbGJtUmxjbWx1Wnk0Z1YyVWdZMkZ1WEZ3bmRDQmtieUIwYUdseklDY2dLeUFuZDJsMGFHOTFkQ0IxYzJsdVp5QnpaWEoyWlhJZ2NtVnVaR1Z5YVc1bklHUjFaU0IwYnlCamNtOXpjeTFpY205M2MyVnlJSEYxYVhKcmN5NGdKeUFySUNkVFpXVWdVbVZoWTNSRVQwMVRaWEoyWlhJdWNtVnVaR1Z5Vkc5VGRISnBibWNvS1NCbWIzSWdjMlZ5ZG1WeUlISmxibVJsY21sdVp5NG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNCcFppQW9kSEpoYm5OaFkzUnBiMjR1ZFhObFEzSmxZWFJsUld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnZDJocGJHVWdLR052Ym5SaGFXNWxjaTVzWVhOMFEyaHBiR1FwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeUxuSmxiVzkyWlVOb2FXeGtLR052Ym5SaGFXNWxjaTVzWVhOMFEyaHBiR1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWRHRnBibVZ5TG1Gd2NHVnVaRU5vYVd4a0tHMWhjbXQxY0NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE5sZEVsdWJtVnlTRlJOVENoamIyNTBZV2x1WlhJc0lHMWhjbXQxY0NrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lHOTNibVZ5Ukc5amRXMWxiblJEYjI1MFpYaDBTMlY1T2lCdmQyNWxja1J2WTNWdFpXNTBRMjl1ZEdWNGRFdGxlU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZoWTNRZ1NVUWdkWFJwYkdsMGFXVnpMbHh1SUNBZ0tpOWNibHh1SUNCblpYUlNaV0ZqZEZKdmIzUkpSRG9nWjJWMFVtVmhZM1JTYjI5MFNVUXNYRzVjYmlBZ1oyVjBTVVE2SUdkbGRFbEVMRnh1WEc0Z0lITmxkRWxFT2lCelpYUkpSQ3hjYmx4dUlDQm5aWFJPYjJSbE9pQm5aWFJPYjJSbExGeHVYRzRnSUdkbGRFNXZaR1ZHY205dFNXNXpkR0Z1WTJVNklHZGxkRTV2WkdWR2NtOXRTVzV6ZEdGdVkyVXNYRzVjYmlBZ2FYTldZV3hwWkRvZ2FYTldZV3hwWkN4Y2JseHVJQ0J3ZFhKblpVbEVPaUJ3ZFhKblpVbEVYRzU5TzF4dVhHNVNaV0ZqZEZCbGNtWXViV1ZoYzNWeVpVMWxkR2h2WkhNb1VtVmhZM1JOYjNWdWRDd2dKMUpsWVdOMFRXOTFiblFuTENCN1hHNGdJRjl5Wlc1a1pYSk9aWGRTYjI5MFEyOXRjRzl1Wlc1ME9pQW5YM0psYm1SbGNrNWxkMUp2YjNSRGIyMXdiMjVsYm5RbkxGeHVJQ0JmYlc5MWJuUkpiV0ZuWlVsdWRHOU9iMlJsT2lBblgyMXZkVzUwU1cxaFoyVkpiblJ2VG05a1pTZGNibjBwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGSmxZV04wVFc5MWJuUTdJbDE5IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE11bHRpQ2hpbGRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcycpO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RDaGlsZFJlY29uY2lsZXInKTtcblxudmFyIGZsYXR0ZW5DaGlsZHJlbiA9IHJlcXVpcmUoJy4vZmxhdHRlbkNoaWxkcmVuJyk7XG5cbi8qKlxuICogVXBkYXRpbmcgY2hpbGRyZW4gb2YgYSBjb21wb25lbnQgbWF5IHRyaWdnZXIgcmVjdXJzaXZlIHVwZGF0ZXMuIFRoZSBkZXB0aCBpc1xuICogdXNlZCB0byBiYXRjaCByZWN1cnNpdmUgdXBkYXRlcyB0byByZW5kZXIgbWFya3VwIG1vcmUgZWZmaWNpZW50bHkuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciB1cGRhdGVEZXB0aCA9IDA7XG5cbi8qKlxuICogUXVldWUgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0cy5cbiAqXG4gKiBFYWNoIG9iamVjdCBoYXMgYSBgdHlwZWAgcHJvcGVydHkgdGhhdCBpcyBpbiBgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNgLlxuICpcbiAqIEB0eXBlIHthcnJheTxvYmplY3Q+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZVF1ZXVlID0gW107XG5cbi8qKlxuICogUXVldWUgb2YgbWFya3VwIHRvIGJlIHJlbmRlcmVkLlxuICpcbiAqIEB0eXBlIHthcnJheTxzdHJpbmc+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIG1hcmt1cFF1ZXVlID0gW107XG5cbi8qKlxuICogRW5xdWV1ZXMgbWFya3VwIHRvIGJlIHJlbmRlcmVkIGFuZCBpbnNlcnRlZCBhdCBhIHN1cHBsaWVkIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVJbnNlcnRNYXJrdXAocGFyZW50SUQsIG1hcmt1cCwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVAsXG4gICAgbWFya3VwSW5kZXg6IG1hcmt1cFF1ZXVlLnB1c2gobWFya3VwKSAtIDEsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBtb3ZpbmcgYW4gZXhpc3RpbmcgZWxlbWVudCB0byBhbm90aGVyIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggU291cmNlIGluZGV4IG9mIHRoZSBleGlzdGluZyBlbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlTW92ZShwYXJlbnRJRCwgZnJvbUluZGV4LCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyxcbiAgICBtYXJrdXBJbmRleDogbnVsbCxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogZnJvbUluZGV4LFxuICAgIHRvSW5kZXg6IHRvSW5kZXhcbiAgfSk7XG59XG5cbi8qKlxuICogRW5xdWV1ZXMgcmVtb3ZpbmcgYW4gZWxlbWVudCBhdCBhbiBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IEluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJlbW92ZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVSZW1vdmUocGFyZW50SUQsIGZyb21JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFLFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBzZXR0aW5nIHRoZSBtYXJrdXAgb2YgYSBub2RlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlU2V0TWFya3VwKHBhcmVudElELCBtYXJrdXApIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5TRVRfTUFSS1VQLFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIGNvbnRlbnQ6IG1hcmt1cCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBzZXR0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlVGV4dENvbnRlbnQocGFyZW50SUQsIHRleHRDb250ZW50KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5ULFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIGNvbnRlbnQ6IHRleHRDb250ZW50LFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIFByb2Nlc3NlcyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwcm9jZXNzUXVldWUoKSB7XG4gIGlmICh1cGRhdGVRdWV1ZS5sZW5ndGgpIHtcbiAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXModXBkYXRlUXVldWUsIG1hcmt1cFF1ZXVlKTtcbiAgICBjbGVhclF1ZXVlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhcnMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJRdWV1ZSgpIHtcbiAgdXBkYXRlUXVldWUubGVuZ3RoID0gMDtcbiAgbWFya3VwUXVldWUubGVuZ3RoID0gMDtcbn1cblxuLyoqXG4gKiBSZWFjdE11bHRpQ2hpbGQgYXJlIGNhcGFibGUgb2YgcmVjb25jaWxpbmcgbXVsdGlwbGUgY2hpbGRyZW4uXG4gKlxuICogQGNsYXNzIFJlYWN0TXVsdGlDaGlsZFxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGQgPSB7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGNvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBjb21wb25lbnRzIHRoYXQgbXVzdCByZWNvbmNpbGUgbXVsdGlwbGVcbiAgICogY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCBieSBgUmVhY3RET01Db21wb25lbnRgIHRvIG1vdW50LCB1cGRhdGUsIGFuZFxuICAgKiB1bm1vdW50IGNoaWxkIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBsZW5kcyB7UmVhY3RNdWx0aUNoaWxkLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG5cbiAgICBfcmVjb25jaWxlckluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLmluc3RhbnRpYXRlQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIuaW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBfcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAocHJldkNoaWxkcmVuLCBuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBuZXh0Q2hpbGRyZW47XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICAgIG5leHRDaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cyk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIudXBkYXRlQ2hpbGRyZW4ocHJldkNoaWxkcmVuLCBuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzKTtcbiAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgbW91bnRlZCByZXByZXNlbnRhdGlvbnMuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24gKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fcmVjb25jaWxlckluc3RhbnRpYXRlQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgIHZhciBtb3VudEltYWdlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bbmFtZV07XG4gICAgICAgICAgLy8gSW5saW5lZCBmb3IgcGVyZm9ybWFuY2UsIHNlZSBgUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RJRGAuXG4gICAgICAgICAgdmFyIHJvb3RJRCA9IHRoaXMuX3Jvb3ROb2RlSUQgKyBuYW1lO1xuICAgICAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCByb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgbW91bnRJbWFnZXMucHVzaChtb3VudEltYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbnkgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIHRleHQgY29udGVudCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dENvbnRlbnQgU3RyaW5nIG9mIGNvbnRlbnQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlVGV4dENvbnRlbnQ6IGZ1bmN0aW9uIChuZXh0Q29udGVudCkge1xuICAgICAgdXBkYXRlRGVwdGgrKztcbiAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSByZW5kZXJlZCBjaGlsZHJlbi5cbiAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbik7XG4gICAgICAgIC8vIFRPRE86IFRoZSBzZXRUZXh0Q29udGVudCBvcGVyYXRpb24gc2hvdWxkIGJlIGVub3VnaFxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZChwcmV2Q2hpbGRyZW5bbmFtZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgbmV3IHRleHQgY29udGVudC5cbiAgICAgICAgdGhpcy5zZXRUZXh0Q29udGVudChuZXh0Q29udGVudCk7XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB1cGRhdGVEZXB0aC0tO1xuICAgICAgICBpZiAoIXVwZGF0ZURlcHRoKSB7XG4gICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBjbGVhclF1ZXVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbnkgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIG1hcmt1cCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dE1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZU1hcmt1cDogZnVuY3Rpb24gKG5leHRNYXJrdXApIHtcbiAgICAgIHVwZGF0ZURlcHRoKys7XG4gICAgICB2YXIgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgIC8vIFJlbW92ZSBhbnkgcmVuZGVyZWQgY2hpbGRyZW4uXG4gICAgICAgIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVubW91bnRDaGlsZHJlbihwcmV2Q2hpbGRyZW4pO1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGRyZW5bbmFtZV0sIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldE1hcmt1cChuZXh0TWFya3VwKTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNsZWFyUXVldWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggbmV3IGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cyBOZXN0ZWQgY2hpbGQgZWxlbWVudCBtYXBzLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24gKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdXBkYXRlRGVwdGgrKztcbiAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl91cGRhdGVDaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgY2xlYXJRdWV1ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW1wcm92ZSBwZXJmb3JtYW5jZSBieSBpc29sYXRpbmcgdGhpcyBob3QgY29kZSBwYXRoIGZyb20gdGhlIHRyeS9jYXRjaFxuICAgICAqIGJsb2NrIGluIGB1cGRhdGVDaGlsZHJlbmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIE5lc3RlZCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBmaW5hbFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IHRoaXMuX3JlY29uY2lsZXJVcGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbmV4dENoaWxkcmVuO1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmFtZTtcbiAgICAgIC8vIGBuZXh0SW5kZXhgIHdpbGwgaW5jcmVtZW50IGZvciBlYWNoIGNoaWxkIGluIGBuZXh0Q2hpbGRyZW5gLCBidXRcbiAgICAgIC8vIGBsYXN0SW5kZXhgIHdpbGwgYmUgdGhlIGxhc3QgaW5kZXggdmlzaXRlZCBpbiBgcHJldkNoaWxkcmVuYC5cbiAgICAgIHZhciBsYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG4gICAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIGlmIChwcmV2Q2hpbGQgPT09IG5leHRDaGlsZCkge1xuICAgICAgICAgIHRoaXMubW92ZUNoaWxkKHByZXZDaGlsZCwgbmV4dEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICBwcmV2Q2hpbGQuX21vdW50SW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGBsYXN0SW5kZXhgIGJlZm9yZSBgX21vdW50SW5kZXhgIGdldHMgdW5zZXQgYnkgdW5tb3VudGluZy5cbiAgICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZChwcmV2Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgICB0aGlzLl9tb3VudENoaWxkQnlOYW1lQXRJbmRleChuZXh0Q2hpbGQsIG5hbWUsIG5leHRJbmRleCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgICAgZm9yIChuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgICB0aGlzLl91bm1vdW50Q2hpbGQocHJldkNoaWxkcmVuW25hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cbiAgICAgKiB3aGVuIHRoaXMgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVubW91bnRDaGlsZHJlbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHJlbmRlcmVkQ2hpbGRyZW4pO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgY2hpbGQgY29tcG9uZW50IHRvIHRoZSBzdXBwbGllZCBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3ZlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsYXN0SW5kZXggTGFzdCBpbmRleCB2aXNpdGVkIG9mIHRoZSBzaWJsaW5ncyBvZiBgY2hpbGRgLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBtb3ZlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCwgdG9JbmRleCwgbGFzdEluZGV4KSB7XG4gICAgICAvLyBJZiB0aGUgaW5kZXggb2YgYGNoaWxkYCBpcyBsZXNzIHRoYW4gYGxhc3RJbmRleGAsIHRoZW4gaXQgbmVlZHMgdG9cbiAgICAgIC8vIGJlIG1vdmVkLiBPdGhlcndpc2UsIHdlIGRvIG5vdCBuZWVkIHRvIG1vdmUgaXQgYmVjYXVzZSBhIGNoaWxkIHdpbGwgYmVcbiAgICAgIC8vIGluc2VydGVkIG9yIG1vdmVkIGJlZm9yZSBgY2hpbGRgLlxuICAgICAgaWYgKGNoaWxkLl9tb3VudEluZGV4IDwgbGFzdEluZGV4KSB7XG4gICAgICAgIGVucXVldWVNb3ZlKHRoaXMuX3Jvb3ROb2RlSUQsIGNoaWxkLl9tb3VudEluZGV4LCB0b0luZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vdW50SW1hZ2UgTWFya3VwIHRvIGluc2VydC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCwgbW91bnRJbWFnZSkge1xuICAgICAgZW5xdWV1ZUluc2VydE1hcmt1cCh0aGlzLl9yb290Tm9kZUlELCBtb3VudEltYWdlLCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDaGlsZCB0byByZW1vdmUuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlbW92ZUNoaWxkOiBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGVucXVldWVSZW1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoaXMgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0Q29udGVudCBUZXh0IGNvbnRlbnQgdG8gc2V0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzZXRUZXh0Q29udGVudDogZnVuY3Rpb24gKHRleHRDb250ZW50KSB7XG4gICAgICBlbnF1ZXVlVGV4dENvbnRlbnQodGhpcy5fcm9vdE5vZGVJRCwgdGV4dENvbnRlbnQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoaXMgbWFya3VwIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRvIHNldC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc2V0TWFya3VwOiBmdW5jdGlvbiAobWFya3VwKSB7XG4gICAgICBlbnF1ZXVlU2V0TWFya3VwKHRoaXMuX3Jvb3ROb2RlSUQsIG1hcmt1cCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdW50cyBhIGNoaWxkIHdpdGggdGhlIHN1cHBsaWVkIG5hbWUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGlzIHBhcnQgb2YgYHVwZGF0ZUNoaWxkcmVuYCBhbmQgaXMgaGVyZSBmb3IgcmVhZGFiaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gbW91bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY2hpbGQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4OiBmdW5jdGlvbiAoY2hpbGQsIG5hbWUsIGluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgLy8gSW5saW5lZCBmb3IgcGVyZm9ybWFuY2UsIHNlZSBgUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RJRGAuXG4gICAgICB2YXIgcm9vdElEID0gdGhpcy5fcm9vdE5vZGVJRCArIG5hbWU7XG4gICAgICB2YXIgbW91bnRJbWFnZSA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjaGlsZCwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4O1xuICAgICAgdGhpcy5jcmVhdGVDaGlsZChjaGlsZCwgbW91bnRJbWFnZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGEgcmVuZGVyZWQgY2hpbGQuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGlzIHBhcnQgb2YgYHVwZGF0ZUNoaWxkcmVuYCBhbmQgaXMgaGVyZSBmb3IgcmVhZGFiaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gdW5tb3VudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF91bm1vdW50Q2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgdGhpcy5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IG51bGw7XG4gICAgfVxuXG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUk5kV3gwYVVOb2FXeGtMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE15MHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElGSmxZV04wVFhWc2RHbERhR2xzWkZ4dUlDb2dRSFI1Y0dWamFHVmphM01nYzNSaGRHbGpMVzl1YkhsY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQlNaV0ZqZEVOdmJYQnZibVZ1ZEVWdWRtbHliMjV0Wlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRFTnZiWEJ2Ym1WdWRFVnVkbWx5YjI1dFpXNTBKeWs3WEc1MllYSWdVbVZoWTNSTmRXeDBhVU5vYVd4a1ZYQmtZWFJsVkhsd1pYTWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBUWFZzZEdsRGFHbHNaRlZ3WkdGMFpWUjVjR1Z6SnlrN1hHNWNiblpoY2lCU1pXRmpkRU4xY25KbGJuUlBkMjVsY2lBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSW5LVHRjYm5aaGNpQlNaV0ZqZEZKbFkyOXVZMmxzWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFVtVmpiMjVqYVd4bGNpY3BPMXh1ZG1GeUlGSmxZV04wUTJocGJHUlNaV052Ym1OcGJHVnlJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRU5vYVd4a1VtVmpiMjVqYVd4bGNpY3BPMXh1WEc1MllYSWdabXhoZEhSbGJrTm9hV3hrY21WdUlEMGdjbVZ4ZFdseVpTZ25MaTltYkdGMGRHVnVRMmhwYkdSeVpXNG5LVHRjYmx4dUx5b3FYRzRnS2lCVmNHUmhkR2x1WnlCamFHbHNaSEpsYmlCdlppQmhJR052YlhCdmJtVnVkQ0J0WVhrZ2RISnBaMmRsY2lCeVpXTjFjbk5wZG1VZ2RYQmtZWFJsY3k0Z1ZHaGxJR1JsY0hSb0lHbHpYRzRnS2lCMWMyVmtJSFJ2SUdKaGRHTm9JSEpsWTNWeWMybDJaU0IxY0dSaGRHVnpJSFJ2SUhKbGJtUmxjaUJ0WVhKcmRYQWdiVzl5WlNCbFptWnBZMmxsYm5Sc2VTNWNiaUFxWEc0Z0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZlZ4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxTDF4dWRtRnlJSFZ3WkdGMFpVUmxjSFJvSUQwZ01EdGNibHh1THlvcVhHNGdLaUJSZFdWMVpTQnZaaUIxY0dSaGRHVWdZMjl1Wm1sbmRYSmhkR2x2YmlCdlltcGxZM1J6TGx4dUlDcGNiaUFxSUVWaFkyZ2diMkpxWldOMElHaGhjeUJoSUdCMGVYQmxZQ0J3Y205d1pYSjBlU0IwYUdGMElHbHpJR2x1SUdCU1pXRmpkRTExYkhScFEyaHBiR1JWY0dSaGRHVlVlWEJsYzJBdVhHNGdLbHh1SUNvZ1FIUjVjR1VnZTJGeWNtRjVQRzlpYW1WamRENTlYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb3ZYRzUyWVhJZ2RYQmtZWFJsVVhWbGRXVWdQU0JiWFR0Y2JseHVMeW9xWEc0Z0tpQlJkV1YxWlNCdlppQnRZWEpyZFhBZ2RHOGdZbVVnY21WdVpHVnlaV1F1WEc0Z0tseHVJQ29nUUhSNWNHVWdlMkZ5Y21GNVBITjBjbWx1Wno1OVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvdlhHNTJZWElnYldGeWEzVndVWFZsZFdVZ1BTQmJYVHRjYmx4dUx5b3FYRzRnS2lCRmJuRjFaWFZsY3lCdFlYSnJkWEFnZEc4Z1ltVWdjbVZ1WkdWeVpXUWdZVzVrSUdsdWMyVnlkR1ZrSUdGMElHRWdjM1Z3Y0d4cFpXUWdhVzVrWlhndVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCaGNtVnVkRWxFSUVsRUlHOW1JSFJvWlNCd1lYSmxiblFnWTI5dGNHOXVaVzUwTGx4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMWhjbXQxY0NCTllYSnJkWEFnZEdoaGRDQnlaVzVrWlhKeklHbHVkRzhnWVc0Z1pXeGxiV1Z1ZEM1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBiMGx1WkdWNElFUmxjM1JwYm1GMGFXOXVJR2x1WkdWNExseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUwxeHVablZ1WTNScGIyNGdaVzV4ZFdWMVpVbHVjMlZ5ZEUxaGNtdDFjQ2h3WVhKbGJuUkpSQ3dnYldGeWEzVndMQ0IwYjBsdVpHVjRLU0I3WEc0Z0lDOHZJRTVQVkVVNklFNTFiR3dnZG1Gc2RXVnpJSEpsWkhWalpTQm9hV1JrWlc0Z1kyeGhjM05sY3k1Y2JpQWdkWEJrWVhSbFVYVmxkV1V1Y0hWemFDaDdYRzRnSUNBZ2NHRnlaVzUwU1VRNklIQmhjbVZ1ZEVsRUxGeHVJQ0FnSUhCaGNtVnVkRTV2WkdVNklHNTFiR3dzWEc0Z0lDQWdkSGx3WlRvZ1VtVmhZM1JOZFd4MGFVTm9hV3hrVlhCa1lYUmxWSGx3WlhNdVNVNVRSVkpVWDAxQlVrdFZVQ3hjYmlBZ0lDQnRZWEpyZFhCSmJtUmxlRG9nYldGeWEzVndVWFZsZFdVdWNIVnphQ2h0WVhKcmRYQXBJQzBnTVN4Y2JpQWdJQ0JqYjI1MFpXNTBPaUJ1ZFd4c0xGeHVJQ0FnSUdaeWIyMUpibVJsZURvZ2JuVnNiQ3hjYmlBZ0lDQjBiMGx1WkdWNE9pQjBiMGx1WkdWNFhHNGdJSDBwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVZ1Y1hWbGRXVnpJRzF2ZG1sdVp5QmhiaUJsZUdsemRHbHVaeUJsYkdWdFpXNTBJSFJ2SUdGdWIzUm9aWElnYVc1a1pYZ3VYRzRnS2x4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIQmhjbVZ1ZEVsRUlFbEVJRzltSUhSb1pTQndZWEpsYm5RZ1kyOXRjRzl1Wlc1MExseHVJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR1p5YjIxSmJtUmxlQ0JUYjNWeVkyVWdhVzVrWlhnZ2IyWWdkR2hsSUdWNGFYTjBhVzVuSUdWc1pXMWxiblF1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2RHOUpibVJsZUNCRVpYTjBhVzVoZEdsdmJpQnBibVJsZUNCdlppQjBhR1VnWld4bGJXVnVkQzVjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdWdWNYVmxkV1ZOYjNabEtIQmhjbVZ1ZEVsRUxDQm1jbTl0U1c1a1pYZ3NJSFJ2U1c1a1pYZ3BJSHRjYmlBZ0x5OGdUazlVUlRvZ1RuVnNiQ0IyWVd4MVpYTWdjbVZrZFdObElHaHBaR1JsYmlCamJHRnpjMlZ6TGx4dUlDQjFjR1JoZEdWUmRXVjFaUzV3ZFhOb0tIdGNiaUFnSUNCd1lYSmxiblJKUkRvZ2NHRnlaVzUwU1VRc1hHNGdJQ0FnY0dGeVpXNTBUbTlrWlRvZ2JuVnNiQ3hjYmlBZ0lDQjBlWEJsT2lCU1pXRmpkRTExYkhScFEyaHBiR1JWY0dSaGRHVlVlWEJsY3k1TlQxWkZYMFZZU1ZOVVNVNUhMRnh1SUNBZ0lHMWhjbXQxY0VsdVpHVjRPaUJ1ZFd4c0xGeHVJQ0FnSUdOdmJuUmxiblE2SUc1MWJHd3NYRzRnSUNBZ1puSnZiVWx1WkdWNE9pQm1jbTl0U1c1a1pYZ3NYRzRnSUNBZ2RHOUpibVJsZURvZ2RHOUpibVJsZUZ4dUlDQjlLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkZibkYxWlhWbGN5QnlaVzF2ZG1sdVp5QmhiaUJsYkdWdFpXNTBJR0YwSUdGdUlHbHVaR1Y0TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J3WVhKbGJuUkpSQ0JKUkNCdlppQjBhR1VnY0dGeVpXNTBJR052YlhCdmJtVnVkQzVjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCbWNtOXRTVzVrWlhnZ1NXNWtaWGdnYjJZZ2RHaGxJR1ZzWlcxbGJuUWdkRzhnY21WdGIzWmxMbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWlc1eGRXVjFaVkpsYlc5MlpTaHdZWEpsYm5SSlJDd2dabkp2YlVsdVpHVjRLU0I3WEc0Z0lDOHZJRTVQVkVVNklFNTFiR3dnZG1Gc2RXVnpJSEpsWkhWalpTQm9hV1JrWlc0Z1kyeGhjM05sY3k1Y2JpQWdkWEJrWVhSbFVYVmxkV1V1Y0hWemFDaDdYRzRnSUNBZ2NHRnlaVzUwU1VRNklIQmhjbVZ1ZEVsRUxGeHVJQ0FnSUhCaGNtVnVkRTV2WkdVNklHNTFiR3dzWEc0Z0lDQWdkSGx3WlRvZ1VtVmhZM1JOZFd4MGFVTm9hV3hrVlhCa1lYUmxWSGx3WlhNdVVrVk5UMVpGWDA1UFJFVXNYRzRnSUNBZ2JXRnlhM1Z3U1c1a1pYZzZJRzUxYkd3c1hHNGdJQ0FnWTI5dWRHVnVkRG9nYm5Wc2JDeGNiaUFnSUNCbWNtOXRTVzVrWlhnNklHWnliMjFKYm1SbGVDeGNiaUFnSUNCMGIwbHVaR1Y0T2lCdWRXeHNYRzRnSUgwcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVWdWNYVmxkV1Z6SUhObGRIUnBibWNnZEdobElHMWhjbXQxY0NCdlppQmhJRzV2WkdVdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCaGNtVnVkRWxFSUVsRUlHOW1JSFJvWlNCd1lYSmxiblFnWTI5dGNHOXVaVzUwTGx4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMWhjbXQxY0NCTllYSnJkWEFnZEdoaGRDQnlaVzVrWlhKeklHbHVkRzhnWVc0Z1pXeGxiV1Z1ZEM1Y2JpQXFJRUJ3Y21sMllYUmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHVnVjWFZsZFdWVFpYUk5ZWEpyZFhBb2NHRnlaVzUwU1VRc0lHMWhjbXQxY0NrZ2UxeHVJQ0F2THlCT1QxUkZPaUJPZFd4c0lIWmhiSFZsY3lCeVpXUjFZMlVnYUdsa1pHVnVJR05zWVhOelpYTXVYRzRnSUhWd1pHRjBaVkYxWlhWbExuQjFjMmdvZTF4dUlDQWdJSEJoY21WdWRFbEVPaUJ3WVhKbGJuUkpSQ3hjYmlBZ0lDQndZWEpsYm5ST2IyUmxPaUJ1ZFd4c0xGeHVJQ0FnSUhSNWNHVTZJRkpsWVdOMFRYVnNkR2xEYUdsc1pGVndaR0YwWlZSNWNHVnpMbE5GVkY5TlFWSkxWVkFzWEc0Z0lDQWdiV0Z5YTNWd1NXNWtaWGc2SUc1MWJHd3NYRzRnSUNBZ1kyOXVkR1Z1ZERvZ2JXRnlhM1Z3TEZ4dUlDQWdJR1p5YjIxSmJtUmxlRG9nYm5Wc2JDeGNiaUFnSUNCMGIwbHVaR1Y0T2lCdWRXeHNYRzRnSUgwcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVWdWNYVmxkV1Z6SUhObGRIUnBibWNnZEdobElIUmxlSFFnWTI5dWRHVnVkQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjR0Z5Wlc1MFNVUWdTVVFnYjJZZ2RHaGxJSEJoY21WdWRDQmpiMjF3YjI1bGJuUXVYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZEdWNGRFTnZiblJsYm5RZ1ZHVjRkQ0JqYjI1MFpXNTBJSFJ2SUhObGRDNWNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpOWNibVoxYm1OMGFXOXVJR1Z1Y1hWbGRXVlVaWGgwUTI5dWRHVnVkQ2h3WVhKbGJuUkpSQ3dnZEdWNGRFTnZiblJsYm5RcElIdGNiaUFnTHk4Z1RrOVVSVG9nVG5Wc2JDQjJZV3gxWlhNZ2NtVmtkV05sSUdocFpHUmxiaUJqYkdGemMyVnpMbHh1SUNCMWNHUmhkR1ZSZFdWMVpTNXdkWE5vS0h0Y2JpQWdJQ0J3WVhKbGJuUkpSRG9nY0dGeVpXNTBTVVFzWEc0Z0lDQWdjR0Z5Wlc1MFRtOWtaVG9nYm5Wc2JDeGNiaUFnSUNCMGVYQmxPaUJTWldGamRFMTFiSFJwUTJocGJHUlZjR1JoZEdWVWVYQmxjeTVVUlZoVVgwTlBUbFJGVGxRc1hHNGdJQ0FnYldGeWEzVndTVzVrWlhnNklHNTFiR3dzWEc0Z0lDQWdZMjl1ZEdWdWREb2dkR1Y0ZEVOdmJuUmxiblFzWEc0Z0lDQWdabkp2YlVsdVpHVjRPaUJ1ZFd4c0xGeHVJQ0FnSUhSdlNXNWtaWGc2SUc1MWJHeGNiaUFnZlNrN1hHNTlYRzVjYmk4cUtseHVJQ29nVUhKdlkyVnpjMlZ6SUdGdWVTQmxibkYxWlhWbFpDQjFjR1JoZEdWekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUhCeWIyTmxjM05SZFdWMVpTZ3BJSHRjYmlBZ2FXWWdLSFZ3WkdGMFpWRjFaWFZsTG14bGJtZDBhQ2tnZTF4dUlDQWdJRkpsWVdOMFEyOXRjRzl1Wlc1MFJXNTJhWEp2Ym0xbGJuUXVjSEp2WTJWemMwTm9hV3hrY21WdVZYQmtZWFJsY3loMWNHUmhkR1ZSZFdWMVpTd2diV0Z5YTNWd1VYVmxkV1VwTzF4dUlDQWdJR05zWldGeVVYVmxkV1VvS1R0Y2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFTnNaV0Z5Y3lCaGJua2daVzV4ZFdWMVpXUWdkWEJrWVhSbGN5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ292WEc1bWRXNWpkR2x2YmlCamJHVmhjbEYxWlhWbEtDa2dlMXh1SUNCMWNHUmhkR1ZSZFdWMVpTNXNaVzVuZEdnZ1BTQXdPMXh1SUNCdFlYSnJkWEJSZFdWMVpTNXNaVzVuZEdnZ1BTQXdPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxZV04wVFhWc2RHbERhR2xzWkNCaGNtVWdZMkZ3WVdKc1pTQnZaaUJ5WldOdmJtTnBiR2x1WnlCdGRXeDBhWEJzWlNCamFHbHNaSEpsYmk1Y2JpQXFYRzRnS2lCQVkyeGhjM01nVW1WaFkzUk5kV3gwYVVOb2FXeGtYRzRnS2lCQWFXNTBaWEp1WVd4Y2JpQXFMMXh1ZG1GeUlGSmxZV04wVFhWc2RHbERhR2xzWkNBOUlIdGNibHh1SUNBdktpcGNiaUFnSUNvZ1VISnZkbWxrWlhNZ1kyOXRiVzl1SUdaMWJtTjBhVzl1WVd4cGRIa2dabTl5SUdOdmJYQnZibVZ1ZEhNZ2RHaGhkQ0J0ZFhOMElISmxZMjl1WTJsc1pTQnRkV3gwYVhCc1pWeHVJQ0FnS2lCamFHbHNaSEpsYmk0Z1ZHaHBjeUJwY3lCMWMyVmtJR0o1SUdCU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEdBZ2RHOGdiVzkxYm5Rc0lIVndaR0YwWlN3Z1lXNWtYRzRnSUNBcUlIVnViVzkxYm5RZ1kyaHBiR1FnWTI5dGNHOXVaVzUwY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRR3hsYm1SeklIdFNaV0ZqZEUxMWJIUnBRMmhwYkdRdWNISnZkRzkwZVhCbGZWeHVJQ0FnS2k5Y2JpQWdUV2w0YVc0NklIdGNibHh1SUNBZ0lGOXlaV052Ym1OcGJHVnlTVzV6ZEdGdWRHbGhkR1ZEYUdsc1pISmxiam9nWm5WdVkzUnBiMjRnS0c1bGMzUmxaRU5vYVd4a2NtVnVMQ0IwY21GdWMyRmpkR2x2Yml3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyTjFjbkpsYm5SRmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlMbU4xY25KbGJuUWdQU0IwYUdsekxsOWpkWEp5Wlc1MFJXeGxiV1Z1ZEM1ZmIzZHVaWEk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VtVmhZM1JEYUdsc1pGSmxZMjl1WTJsc1pYSXVhVzV6ZEdGdWRHbGhkR1ZEYUdsc1pISmxiaWh1WlhOMFpXUkRhR2xzWkhKbGJpd2dkSEpoYm5OaFkzUnBiMjRzSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCU1pXRmpkRU4xY25KbGJuUlBkMjVsY2k1amRYSnlaVzUwSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCU1pXRmpkRU5vYVd4a1VtVmpiMjVqYVd4bGNpNXBibk4wWVc1MGFXRjBaVU5vYVd4a2NtVnVLRzVsYzNSbFpFTm9hV3hrY21WdUxDQjBjbUZ1YzJGamRHbHZiaXdnWTI5dWRHVjRkQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjl5WldOdmJtTnBiR1Z5VlhCa1lYUmxRMmhwYkdSeVpXNDZJR1oxYm1OMGFXOXVJQ2h3Y21WMlEyaHBiR1J5Wlc0c0lHNWxlSFJPWlhOMFpXUkRhR2xzWkhKbGJrVnNaVzFsYm5SekxDQjBjbUZ1YzJGamRHbHZiaXdnWTI5dWRHVjRkQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHNWxlSFJEYUdsc1pISmxianRjYmlBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCU1pXRmpkRU4xY25KbGJuUlBkMjVsY2k1amRYSnlaVzUwSUQwZ2RHaHBjeTVmWTNWeWNtVnVkRVZzWlcxbGJuUXVYMjkzYm1WeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGRFTm9hV3hrY21WdUlEMGdabXhoZEhSbGJrTm9hV3hrY21WdUtHNWxlSFJPWlhOMFpXUkRhR2xzWkhKbGJrVnNaVzFsYm5SektUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXVZM1Z5Y21WdWRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJTWldGamRFTm9hV3hrVW1WamIyNWphV3hsY2k1MWNHUmhkR1ZEYUdsc1pISmxiaWh3Y21WMlEyaHBiR1J5Wlc0c0lHNWxlSFJEYUdsc1pISmxiaXdnZEhKaGJuTmhZM1JwYjI0c0lHTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnVaWGgwUTJocGJHUnlaVzRnUFNCbWJHRjBkR1Z1UTJocGJHUnlaVzRvYm1WNGRFNWxjM1JsWkVOb2FXeGtjbVZ1Uld4bGJXVnVkSE1wTzF4dUlDQWdJQ0FnY21WMGRYSnVJRkpsWVdOMFEyaHBiR1JTWldOdmJtTnBiR1Z5TG5Wd1pHRjBaVU5vYVd4a2NtVnVLSEJ5WlhaRGFHbHNaSEpsYml3Z2JtVjRkRU5vYVd4a2NtVnVMQ0IwY21GdWMyRmpkR2x2Yml3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxibVZ5WVhSbGN5QmhJRndpYlc5MWJuUWdhVzFoWjJWY0lpQm1iM0lnWldGamFDQnZaaUIwYUdVZ2MzVndjR3hwWldRZ1kyaHBiR1J5Wlc0dUlFbHVJSFJvWlNCallYTmxYRzRnSUNBZ0lDb2diMllnWUZKbFlXTjBSRTlOUTI5dGNHOXVaVzUwWUN3Z1lTQnRiM1Z1ZENCcGJXRm5aU0JwY3lCaElITjBjbWx1WnlCdlppQnRZWEpyZFhBdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZXo5dlltcGxZM1I5SUc1bGMzUmxaRU5vYVd4a2NtVnVJRTVsYzNSbFpDQmphR2xzWkNCdFlYQnpMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMkZ5Y21GNWZTQkJiaUJoY25KaGVTQnZaaUJ0YjNWdWRHVmtJSEpsY0hKbGMyVnVkR0YwYVc5dWN5NWNiaUFnSUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNBZ0tpOWNiaUFnSUNCdGIzVnVkRU5vYVd4a2NtVnVPaUJtZFc1amRHbHZiaUFvYm1WemRHVmtRMmhwYkdSeVpXNHNJSFJ5WVc1ellXTjBhVzl1TENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNCMllYSWdZMmhwYkdSeVpXNGdQU0IwYUdsekxsOXlaV052Ym1OcGJHVnlTVzV6ZEdGdWRHbGhkR1ZEYUdsc1pISmxiaWh1WlhOMFpXUkRhR2xzWkhKbGJpd2dkSEpoYm5OaFkzUnBiMjRzSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnZEdocGN5NWZjbVZ1WkdWeVpXUkRhR2xzWkhKbGJpQTlJR05vYVd4a2NtVnVPMXh1SUNBZ0lDQWdkbUZ5SUcxdmRXNTBTVzFoWjJWeklEMGdXMTA3WEc0Z0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2JtRnRaU0JwYmlCamFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTJocGJHUnlaVzR1YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ1kyaHBiR1FnUFNCamFHbHNaSEpsYmx0dVlXMWxYVHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkpibXhwYm1Wa0lHWnZjaUJ3WlhKbWIzSnRZVzVqWlN3Z2MyVmxJR0JTWldGamRFbHVjM1JoYm1ObFNHRnVaR3hsY3k1amNtVmhkR1ZTWldGamRFbEVZQzVjYmlBZ0lDQWdJQ0FnSUNCMllYSWdjbTl2ZEVsRUlEMGdkR2hwY3k1ZmNtOXZkRTV2WkdWSlJDQXJJRzVoYldVN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUcxdmRXNTBTVzFoWjJVZ1BTQlNaV0ZqZEZKbFkyOXVZMmxzWlhJdWJXOTFiblJEYjIxd2IyNWxiblFvWTJocGJHUXNJSEp2YjNSSlJDd2dkSEpoYm5OaFkzUnBiMjRzSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnSUNBZ0lHTm9hV3hrTGw5dGIzVnVkRWx1WkdWNElEMGdhVzVrWlhnckt6dGNiaUFnSUNBZ0lDQWdJQ0J0YjNWdWRFbHRZV2RsY3k1d2RYTm9LRzF2ZFc1MFNXMWhaMlVwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYlc5MWJuUkpiV0ZuWlhNN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxjR3hoWTJWeklHRnVlU0J5Wlc1a1pYSmxaQ0JqYUdsc1pISmxiaUIzYVhSb0lHRWdkR1Y0ZENCamIyNTBaVzUwSUhOMGNtbHVaeTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVaWGgwUTI5dWRHVnVkQ0JUZEhKcGJtY2diMllnWTI5dWRHVnVkQzVjYmlBZ0lDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDQWdLaTljYmlBZ0lDQjFjR1JoZEdWVVpYaDBRMjl1ZEdWdWREb2dablZ1WTNScGIyNGdLRzVsZUhSRGIyNTBaVzUwS1NCN1hHNGdJQ0FnSUNCMWNHUmhkR1ZFWlhCMGFDc3JPMXh1SUNBZ0lDQWdkbUZ5SUdWeWNtOXlWR2h5YjNkdUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCd2NtVjJRMmhwYkdSeVpXNGdQU0IwYUdsekxsOXlaVzVrWlhKbFpFTm9hV3hrY21WdU8xeHVJQ0FnSUNBZ0lDQXZMeUJTWlcxdmRtVWdZVzU1SUhKbGJtUmxjbVZrSUdOb2FXeGtjbVZ1TGx4dUlDQWdJQ0FnSUNCU1pXRmpkRU5vYVd4a1VtVmpiMjVqYVd4bGNpNTFibTF2ZFc1MFEyaHBiR1J5Wlc0b2NISmxka05vYVd4a2NtVnVLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZFOUVUem9nVkdobElITmxkRlJsZUhSRGIyNTBaVzUwSUc5d1pYSmhkR2x2YmlCemFHOTFiR1FnWW1VZ1pXNXZkV2RvWEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUc1aGJXVWdhVzRnY0hKbGRrTm9hV3hrY21WdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnlaWFpEYUdsc1pISmxiaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkVzV0YjNWdWRFTm9hV3hrS0hCeVpYWkRhR2xzWkhKbGJsdHVZVzFsWFNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklGTmxkQ0J1WlhjZ2RHVjRkQ0JqYjI1MFpXNTBMbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRlJsZUhSRGIyNTBaVzUwS0c1bGVIUkRiMjUwWlc1MEtUdGNiaUFnSUNBZ0lDQWdaWEp5YjNKVWFISnZkMjRnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUhWd1pHRjBaVVJsY0hSb0xTMDdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRYQmtZWFJsUkdWd2RHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aWEp5YjNKVWFISnZkMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVVYVmxkV1VvS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdlkyVnpjMUYxWlhWbEtDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxjR3hoWTJWeklHRnVlU0J5Wlc1a1pYSmxaQ0JqYUdsc1pISmxiaUIzYVhSb0lHRWdiV0Z5YTNWd0lITjBjbWx1Wnk1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J1WlhoMFRXRnlhM1Z3SUZOMGNtbHVaeUJ2WmlCdFlYSnJkWEF1WEc0Z0lDQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQWdJQ292WEc0Z0lDQWdkWEJrWVhSbFRXRnlhM1Z3T2lCbWRXNWpkR2x2YmlBb2JtVjRkRTFoY210MWNDa2dlMXh1SUNBZ0lDQWdkWEJrWVhSbFJHVndkR2dyS3p0Y2JpQWdJQ0FnSUhaaGNpQmxjbkp2Y2xSb2NtOTNiaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjSEpsZGtOb2FXeGtjbVZ1SUQwZ2RHaHBjeTVmY21WdVpHVnlaV1JEYUdsc1pISmxianRjYmlBZ0lDQWdJQ0FnTHk4Z1VtVnRiM1psSUdGdWVTQnlaVzVrWlhKbFpDQmphR2xzWkhKbGJpNWNiaUFnSUNBZ0lDQWdVbVZoWTNSRGFHbHNaRkpsWTI5dVkybHNaWEl1ZFc1dGIzVnVkRU5vYVd4a2NtVnVLSEJ5WlhaRGFHbHNaSEpsYmlrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHNWhiV1VnYVc0Z2NISmxka05vYVd4a2NtVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5WlhaRGFHbHNaSEpsYmk1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFc1dGIzVnVkRU5vYVd4a1FubE9ZVzFsS0hCeVpYWkRhR2xzWkhKbGJsdHVZVzFsWFN3Z2JtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBUV0Z5YTNWd0tHNWxlSFJOWVhKcmRYQXBPMXh1SUNBZ0lDQWdJQ0JsY25KdmNsUm9jbTkzYmlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ2RYQmtZWFJsUkdWd2RHZ3RMVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjFjR1JoZEdWRVpYQjBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNsUm9jbTkzYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSlJkV1YxWlNncE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOWpaWE56VVhWbGRXVW9LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWWEJrWVhSbGN5QjBhR1VnY21WdVpHVnlaV1FnWTJocGJHUnlaVzRnZDJsMGFDQnVaWGNnWTJocGJHUnlaVzR1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlejl2WW1wbFkzUjlJRzVsZUhST1pYTjBaV1JEYUdsc1pISmxia1ZzWlcxbGJuUnpJRTVsYzNSbFpDQmphR2xzWkNCbGJHVnRaVzUwSUcxaGNITXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dWZTQjBjbUZ1YzJGamRHbHZibHh1SUNBZ0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIVndaR0YwWlVOb2FXeGtjbVZ1T2lCbWRXNWpkR2x2YmlBb2JtVjRkRTVsYzNSbFpFTm9hV3hrY21WdVJXeGxiV1Z1ZEhNc0lIUnlZVzV6WVdOMGFXOXVMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdJQ0IxY0dSaGRHVkVaWEIwYUNzck8xeHVJQ0FnSUNBZ2RtRnlJR1Z5Y205eVZHaHliM2R1SUQwZ2RISjFaVHRjYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNWd1pHRjBaVU5vYVd4a2NtVnVLRzVsZUhST1pYTjBaV1JEYUdsc1pISmxia1ZzWlcxbGJuUnpMQ0IwY21GdWMyRmpkR2x2Yml3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnSUNBZ0lHVnljbTl5VkdoeWIzZHVJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0IxY0dSaGRHVkVaWEIwYUMwdE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVhWd1pHRjBaVVJsY0hSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5VkdoeWIzZHVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xGMVpYVmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjJObGMzTlJkV1YxWlNncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJYQnliM1psSUhCbGNtWnZjbTFoYm1ObElHSjVJR2x6YjJ4aGRHbHVaeUIwYUdseklHaHZkQ0JqYjJSbElIQmhkR2dnWm5KdmJTQjBhR1VnZEhKNUwyTmhkR05vWEc0Z0lDQWdJQ29nWW14dlkyc2dhVzRnWUhWd1pHRjBaVU5vYVd4a2NtVnVZQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdQMjlpYW1WamRIMGdibVY0ZEU1bGMzUmxaRU5vYVd4a2NtVnVSV3hsYldWdWRITWdUbVZ6ZEdWa0lHTm9hV3hrSUdWc1pXMWxiblFnYldGd2N5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI1OUlIUnlZVzV6WVdOMGFXOXVYRzRnSUNBZ0lDb2dRR1pwYm1Gc1hHNGdJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5MWNHUmhkR1ZEYUdsc1pISmxiam9nWm5WdVkzUnBiMjRnS0c1bGVIUk9aWE4wWldSRGFHbHNaSEpsYmtWc1pXMWxiblJ6TENCMGNtRnVjMkZqZEdsdmJpd2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhCeVpYWkRhR2xzWkhKbGJpQTlJSFJvYVhNdVgzSmxibVJsY21Wa1EyaHBiR1J5Wlc0N1hHNGdJQ0FnSUNCMllYSWdibVY0ZEVOb2FXeGtjbVZ1SUQwZ2RHaHBjeTVmY21WamIyNWphV3hsY2xWd1pHRjBaVU5vYVd4a2NtVnVLSEJ5WlhaRGFHbHNaSEpsYml3Z2JtVjRkRTVsYzNSbFpFTm9hV3hrY21WdVJXeGxiV1Z1ZEhNc0lIUnlZVzV6WVdOMGFXOXVMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQWdJSFJvYVhNdVgzSmxibVJsY21Wa1EyaHBiR1J5Wlc0Z1BTQnVaWGgwUTJocGJHUnlaVzQ3WEc0Z0lDQWdJQ0JwWmlBb0lXNWxlSFJEYUdsc1pISmxiaUFtSmlBaGNISmxka05vYVd4a2NtVnVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFpoY2lCdVlXMWxPMXh1SUNBZ0lDQWdMeThnWUc1bGVIUkpibVJsZUdBZ2QybHNiQ0JwYm1OeVpXMWxiblFnWm05eUlHVmhZMmdnWTJocGJHUWdhVzRnWUc1bGVIUkRhR2xzWkhKbGJtQXNJR0oxZEZ4dUlDQWdJQ0FnTHk4Z1lHeGhjM1JKYm1SbGVHQWdkMmxzYkNCaVpTQjBhR1VnYkdGemRDQnBibVJsZUNCMmFYTnBkR1ZrSUdsdUlHQndjbVYyUTJocGJHUnlaVzVnTGx4dUlDQWdJQ0FnZG1GeUlHeGhjM1JKYm1SbGVDQTlJREE3WEc0Z0lDQWdJQ0IyWVhJZ2JtVjRkRWx1WkdWNElEMGdNRHRjYmlBZ0lDQWdJR1p2Y2lBb2JtRnRaU0JwYmlCdVpYaDBRMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnVaWGgwUTJocGJHUnlaVzR1YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllYSWdjSEpsZGtOb2FXeGtJRDBnY0hKbGRrTm9hV3hrY21WdUlDWW1JSEJ5WlhaRGFHbHNaSEpsYmx0dVlXMWxYVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNWxlSFJEYUdsc1pDQTlJRzVsZUhSRGFHbHNaSEpsYmx0dVlXMWxYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnlaWFpEYUdsc1pDQTlQVDBnYm1WNGRFTm9hV3hrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGIzWmxRMmhwYkdRb2NISmxka05vYVd4a0xDQnVaWGgwU1c1a1pYZ3NJR3hoYzNSSmJtUmxlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2JHRnpkRWx1WkdWNElEMGdUV0YwYUM1dFlYZ29jSEpsZGtOb2FXeGtMbDl0YjNWdWRFbHVaR1Y0TENCc1lYTjBTVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQWdJSEJ5WlhaRGFHbHNaQzVmYlc5MWJuUkpibVJsZUNBOUlHNWxlSFJKYm1SbGVEdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2NISmxka05vYVd4a0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlZjR1JoZEdVZ1lHeGhjM1JKYm1SbGVHQWdZbVZtYjNKbElHQmZiVzkxYm5SSmJtUmxlR0FnWjJWMGN5QjFibk5sZENCaWVTQjFibTF2ZFc1MGFXNW5MbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRnpkRWx1WkdWNElEMGdUV0YwYUM1dFlYZ29jSEpsZGtOb2FXeGtMbDl0YjNWdWRFbHVaR1Y0TENCc1lYTjBTVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkVzV0YjNWdWRFTm9hV3hrS0hCeVpYWkRhR2xzWkNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUM4dklGUm9aU0JqYUdsc1pDQnRkWE4wSUdKbElHbHVjM1JoYm5ScFlYUmxaQ0JpWldadmNtVWdhWFFuY3lCdGIzVnVkR1ZrTGx4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDIxdmRXNTBRMmhwYkdSQ2VVNWhiV1ZCZEVsdVpHVjRLRzVsZUhSRGFHbHNaQ3dnYm1GdFpTd2dibVY0ZEVsdVpHVjRMQ0IwY21GdWMyRmpkR2x2Yml3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdibVY0ZEVsdVpHVjRLeXM3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCU1pXMXZkbVVnWTJocGJHUnlaVzRnZEdoaGRDQmhjbVVnYm04Z2JHOXVaMlZ5SUhCeVpYTmxiblF1WEc0Z0lDQWdJQ0JtYjNJZ0tHNWhiV1VnYVc0Z2NISmxka05vYVd4a2NtVnVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbVYyUTJocGJHUnlaVzR1YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrZ0ppWWdJU2h1WlhoMFEyaHBiR1J5Wlc0Z0ppWWdibVY0ZEVOb2FXeGtjbVZ1TG1oaGMwOTNibEJ5YjNCbGNuUjVLRzVoYldVcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1Z1Ylc5MWJuUkRhR2xzWkNod2NtVjJRMmhwYkdSeVpXNWJibUZ0WlYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlZ1Ylc5MWJuUnpJR0ZzYkNCeVpXNWtaWEpsWkNCamFHbHNaSEpsYmk0Z1ZHaHBjeUJ6YUc5MWJHUWdZbVVnZFhObFpDQjBieUJqYkdWaGJpQjFjQ0JqYUdsc1pISmxibHh1SUNBZ0lDQXFJSGRvWlc0Z2RHaHBjeUJqYjIxd2IyNWxiblFnYVhNZ2RXNXRiM1Z1ZEdWa0xseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnZFc1dGIzVnVkRU5vYVd4a2NtVnVPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCMllYSWdjbVZ1WkdWeVpXUkRhR2xzWkhKbGJpQTlJSFJvYVhNdVgzSmxibVJsY21Wa1EyaHBiR1J5Wlc0N1hHNGdJQ0FnSUNCU1pXRmpkRU5vYVd4a1VtVmpiMjVqYVd4bGNpNTFibTF2ZFc1MFEyaHBiR1J5Wlc0b2NtVnVaR1Z5WldSRGFHbHNaSEpsYmlrN1hHNGdJQ0FnSUNCMGFHbHpMbDl5Wlc1a1pYSmxaRU5vYVd4a2NtVnVJRDBnYm5Wc2JEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUVzkyWlhNZ1lTQmphR2xzWkNCamIyMXdiMjVsYm5RZ2RHOGdkR2hsSUhOMWNIQnNhV1ZrSUdsdVpHVjRMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEVOdmJYQnZibVZ1ZEgwZ1kyaHBiR1FnUTI5dGNHOXVaVzUwSUhSdklHMXZkbVV1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSFJ2U1c1a1pYZ2dSR1Z6ZEdsdVlYUnBiMjRnYVc1a1pYZ2diMllnZEdobElHVnNaVzFsYm5RdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUd4aGMzUkpibVJsZUNCTVlYTjBJR2x1WkdWNElIWnBjMmwwWldRZ2IyWWdkR2hsSUhOcFlteHBibWR6SUc5bUlHQmphR2xzWkdBdVhHNGdJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUcxdmRtVkRhR2xzWkRvZ1puVnVZM1JwYjI0Z0tHTm9hV3hrTENCMGIwbHVaR1Y0TENCc1lYTjBTVzVrWlhncElIdGNiaUFnSUNBZ0lDOHZJRWxtSUhSb1pTQnBibVJsZUNCdlppQmdZMmhwYkdSZ0lHbHpJR3hsYzNNZ2RHaGhiaUJnYkdGemRFbHVaR1Y0WUN3Z2RHaGxiaUJwZENCdVpXVmtjeUIwYjF4dUlDQWdJQ0FnTHk4Z1ltVWdiVzkyWldRdUlFOTBhR1Z5ZDJselpTd2dkMlVnWkc4Z2JtOTBJRzVsWldRZ2RHOGdiVzkyWlNCcGRDQmlaV05oZFhObElHRWdZMmhwYkdRZ2QybHNiQ0JpWlZ4dUlDQWdJQ0FnTHk4Z2FXNXpaWEowWldRZ2IzSWdiVzkyWldRZ1ltVm1iM0psSUdCamFHbHNaR0F1WEc0Z0lDQWdJQ0JwWmlBb1kyaHBiR1F1WDIxdmRXNTBTVzVrWlhnZ1BDQnNZWE4wU1c1a1pYZ3BJSHRjYmlBZ0lDQWdJQ0FnWlc1eGRXVjFaVTF2ZG1Vb2RHaHBjeTVmY205dmRFNXZaR1ZKUkN3Z1kyaHBiR1F1WDIxdmRXNTBTVzVrWlhnc0lIUnZTVzVrWlhncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRjbVZoZEdWeklHRWdZMmhwYkdRZ1kyOXRjRzl1Wlc1MExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRU52YlhCdmJtVnVkSDBnWTJocGJHUWdRMjl0Y0c5dVpXNTBJSFJ2SUdOeVpXRjBaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiVzkxYm5SSmJXRm5aU0JOWVhKcmRYQWdkRzhnYVc1elpYSjBMbHh1SUNBZ0lDQXFJRUJ3Y205MFpXTjBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQmpjbVZoZEdWRGFHbHNaRG9nWm5WdVkzUnBiMjRnS0dOb2FXeGtMQ0J0YjNWdWRFbHRZV2RsS1NCN1hHNGdJQ0FnSUNCbGJuRjFaWFZsU1c1elpYSjBUV0Z5YTNWd0tIUm9hWE11WDNKdmIzUk9iMlJsU1VRc0lHMXZkVzUwU1cxaFoyVXNJR05vYVd4a0xsOXRiM1Z1ZEVsdVpHVjRLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WdGIzWmxjeUJoSUdOb2FXeGtJR052YlhCdmJtVnVkQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRGIyMXdiMjVsYm5SOUlHTm9hV3hrSUVOb2FXeGtJSFJ2SUhKbGJXOTJaUzVjYmlBZ0lDQWdLaUJBY0hKdmRHVmpkR1ZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVZ0YjNabFEyaHBiR1E2SUdaMWJtTjBhVzl1SUNoamFHbHNaQ2tnZTF4dUlDQWdJQ0FnWlc1eGRXVjFaVkpsYlc5MlpTaDBhR2x6TGw5eWIyOTBUbTlrWlVsRUxDQmphR2xzWkM1ZmJXOTFiblJKYm1SbGVDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaHBjeUIwWlhoMElHTnZiblJsYm5RZ2MzUnlhVzVuTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFJsZUhSRGIyNTBaVzUwSUZSbGVIUWdZMjl1ZEdWdWRDQjBieUJ6WlhRdVhHNGdJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGUmxlSFJEYjI1MFpXNTBPaUJtZFc1amRHbHZiaUFvZEdWNGRFTnZiblJsYm5RcElIdGNiaUFnSUNBZ0lHVnVjWFZsZFdWVVpYaDBRMjl1ZEdWdWRDaDBhR2x6TGw5eWIyOTBUbTlrWlVsRUxDQjBaWGgwUTI5dWRHVnVkQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hwY3lCdFlYSnJkWEFnYzNSeWFXNW5MbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMWhjbXQxY0NCTllYSnJkWEFnZEc4Z2MyVjBMbHh1SUNBZ0lDQXFJRUJ3Y205MFpXTjBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJOWVhKcmRYQTZJR1oxYm1OMGFXOXVJQ2h0WVhKcmRYQXBJSHRjYmlBZ0lDQWdJR1Z1Y1hWbGRXVlRaWFJOWVhKcmRYQW9kR2hwY3k1ZmNtOXZkRTV2WkdWSlJDd2diV0Z5YTNWd0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUVzkxYm5SeklHRWdZMmhwYkdRZ2QybDBhQ0IwYUdVZ2MzVndjR3hwWldRZ2JtRnRaUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRTVQVkVVNklGUm9hWE1nYVhNZ2NHRnlkQ0J2WmlCZ2RYQmtZWFJsUTJocGJHUnlaVzVnSUdGdVpDQnBjeUJvWlhKbElHWnZjaUJ5WldGa1lXSnBiR2wwZVM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VW1WaFkzUkRiMjF3YjI1bGJuUjlJR05vYVd4a0lFTnZiWEJ2Ym1WdWRDQjBieUJ0YjNWdWRDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JtRnRaU0JPWVcxbElHOW1JSFJvWlNCamFHbHNaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdhVzVrWlhnZ1NXNWtaWGdnWVhRZ2QyaHBZMmdnZEc4Z2FXNXpaWEowSUhSb1pTQmphR2xzWkM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjU5SUhSeVlXNXpZV04wYVc5dVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYlc5MWJuUkRhR2xzWkVKNVRtRnRaVUYwU1c1a1pYZzZJR1oxYm1OMGFXOXVJQ2hqYUdsc1pDd2dibUZ0WlN3Z2FXNWtaWGdzSUhSeVlXNXpZV04wYVc5dUxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ0lDQXZMeUJKYm14cGJtVmtJR1p2Y2lCd1pYSm1iM0p0WVc1alpTd2djMlZsSUdCU1pXRmpkRWx1YzNSaGJtTmxTR0Z1Wkd4bGN5NWpjbVZoZEdWU1pXRmpkRWxFWUM1Y2JpQWdJQ0FnSUhaaGNpQnliMjkwU1VRZ1BTQjBhR2x6TGw5eWIyOTBUbTlrWlVsRUlDc2dibUZ0WlR0Y2JpQWdJQ0FnSUhaaGNpQnRiM1Z1ZEVsdFlXZGxJRDBnVW1WaFkzUlNaV052Ym1OcGJHVnlMbTF2ZFc1MFEyOXRjRzl1Wlc1MEtHTm9hV3hrTENCeWIyOTBTVVFzSUhSeVlXNXpZV04wYVc5dUxDQmpiMjUwWlhoMEtUdGNiaUFnSUNBZ0lHTm9hV3hrTGw5dGIzVnVkRWx1WkdWNElEMGdhVzVrWlhnN1hHNGdJQ0FnSUNCMGFHbHpMbU55WldGMFpVTm9hV3hrS0dOb2FXeGtMQ0J0YjNWdWRFbHRZV2RsS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZXNXRiM1Z1ZEhNZ1lTQnlaVzVrWlhKbFpDQmphR2xzWkM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUU1UFZFVTZJRlJvYVhNZ2FYTWdjR0Z5ZENCdlppQmdkWEJrWVhSbFEyaHBiR1J5Wlc1Z0lHRnVaQ0JwY3lCb1pYSmxJR1p2Y2lCeVpXRmtZV0pwYkdsMGVTNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JEYjIxd2IyNWxiblI5SUdOb2FXeGtJRU52YlhCdmJtVnVkQ0IwYnlCMWJtMXZkVzUwTGx4dUlDQWdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdYM1Z1Ylc5MWJuUkRhR2xzWkRvZ1puVnVZM1JwYjI0Z0tHTm9hV3hrS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkpsYlc5MlpVTm9hV3hrS0dOb2FXeGtLVHRjYmlBZ0lDQWdJR05vYVd4a0xsOXRiM1Z1ZEVsdVpHVjRJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnZlZ4dVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBUWFZzZEdsRGFHbHNaRHNpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xuXG4vKipcbiAqIFdoZW4gYSBjb21wb25lbnQncyBjaGlsZHJlbiBhcmUgdXBkYXRlZCwgYSBzZXJpZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25cbiAqIG9iamVjdHMgYXJlIGNyZWF0ZWQgaW4gb3JkZXIgdG8gYmF0Y2ggYW5kIHNlcmlhbGl6ZSB0aGUgcmVxdWlyZWQgY2hhbmdlcy5cbiAqXG4gKiBFbnVtZXJhdGVzIGFsbCB0aGUgcG9zc2libGUgdHlwZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICBJTlNFUlRfTUFSS1VQOiBudWxsLFxuICBNT1ZFX0VYSVNUSU5HOiBudWxsLFxuICBSRU1PVkVfTk9ERTogbnVsbCxcbiAgU0VUX01BUktVUDogbnVsbCxcbiAgVEVYVF9DT05URU5UOiBudWxsXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlczsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TmF0aXZlQ29tcG9uZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3MgPSBudWxsO1xudmFyIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IG51bGw7XG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHdyYXBwZXIgY2xhc3NlcyBhcm91bmQgbmF0aXZlIHRhZ3MuXG52YXIgdGFnVG9Db21wb25lbnRDbGFzcyA9IHt9O1xudmFyIHRleHRDb21wb25lbnRDbGFzcyA9IG51bGw7XG5cbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgLy8gVGhpcyBhY2NlcHRzIGEgY2xhc3MgdGhhdCByZWNlaXZlcyB0aGUgdGFnIHN0cmluZy4gVGhpcyBpcyBhIGNhdGNoIGFsbFxuICAvLyB0aGF0IGNhbiByZW5kZXIgYW55IGtpbmQgb2YgdGFnLlxuICBpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9LFxuICAvLyBUaGlzIGFjY2VwdHMgYSB0ZXh0IGNvbXBvbmVudCBjbGFzcyB0aGF0IHRha2VzIHRoZSB0ZXh0IHN0cmluZyB0byBiZVxuICAvLyByZW5kZXJlZCBhcyBwcm9wcy5cbiAgaW5qZWN0VGV4dENvbXBvbmVudENsYXNzOiBmdW5jdGlvbiAoY29tcG9uZW50Q2xhc3MpIHtcbiAgICB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBjb21wb25lbnRDbGFzcztcbiAgfSxcbiAgLy8gVGhpcyBhY2NlcHRzIGEga2V5ZWQgb2JqZWN0IHdpdGggY2xhc3NlcyBhcyB2YWx1ZXMuIEVhY2gga2V5IHJlcHJlc2VudHMgYVxuICAvLyB0YWcuIFRoYXQgcGFydGljdWxhciB0YWcgd2lsbCB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIHRoZSBnZW5lcmljIG9uZS5cbiAgaW5qZWN0Q29tcG9uZW50Q2xhc3NlczogZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzZXMpIHtcbiAgICBhc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcywgY29tcG9uZW50Q2xhc3Nlcyk7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IGEgY29tcG9zaXRlIGNvbXBvbmVudCB3cmFwcGVyIGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgdGFnIGZvciB3aGljaCB0byBnZXQgdGhlIGNsYXNzLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBSZWFjdCBjbGFzcyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlO1xuICB9XG4gIHZhciB0YWcgPSBlbGVtZW50LnR5cGU7XG4gIHZhciBjb21wb25lbnRDbGFzcyA9IHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXTtcbiAgaWYgKGNvbXBvbmVudENsYXNzID09IG51bGwpIHtcbiAgICB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ10gPSBjb21wb25lbnRDbGFzcyA9IGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyh0YWcpO1xuICB9XG4gIHJldHVybiBjb21wb25lbnRDbGFzcztcbn1cblxuLyoqXG4gKiBHZXQgYSBuYXRpdmUgaW50ZXJuYWwgY29tcG9uZW50IGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGludGVybmFsIGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KSB7XG4gICFnZW5lcmljQ29tcG9uZW50Q2xhc3MgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVGhlcmUgaXMgbm8gcmVnaXN0ZXJlZCBjb21wb25lbnQgZm9yIHRoZSB0YWcgJXMnLCBlbGVtZW50LnR5cGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG5ldyBnZW5lcmljQ29tcG9uZW50Q2xhc3MoZWxlbWVudC50eXBlLCBlbGVtZW50LnByb3BzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0VGV4dH0gdGV4dFxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlRm9yVGV4dCh0ZXh0KSB7XG4gIHJldHVybiBuZXcgdGV4dENvbXBvbmVudENsYXNzKHRleHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Q29tcG9uZW50KGNvbXBvbmVudCkge1xuICByZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgdGV4dENvbXBvbmVudENsYXNzO1xufVxuXG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSB7XG4gIGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudDogZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50LFxuICBjcmVhdGVJbnRlcm5hbENvbXBvbmVudDogY3JlYXRlSW50ZXJuYWxDb21wb25lbnQsXG4gIGNyZWF0ZUluc3RhbmNlRm9yVGV4dDogY3JlYXRlSW5zdGFuY2VGb3JUZXh0LFxuICBpc1RleHRDb21wb25lbnQ6IGlzVGV4dENvbXBvbmVudCxcbiAgaW5qZWN0aW9uOiBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNST1lYUnBkbVZEYjIxd2IyNWxiblF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFMExUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1VtVmhZM1JPWVhScGRtVkRiMjF3YjI1bGJuUmNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJoYzNOcFoyNGdQU0J5WlhGMWFYSmxLQ2N1TDA5aWFtVmpkQzVoYzNOcFoyNG5LVHRjYm5aaGNpQnBiblpoY21saGJuUWdQU0J5WlhGMWFYSmxLQ2RtWW1wekwyeHBZaTlwYm5aaGNtbGhiblFuS1R0Y2JseHVkbUZ5SUdGMWRHOUhaVzVsY21GMFpWZHlZWEJ3WlhKRGJHRnpjeUE5SUc1MWJHdzdYRzUyWVhJZ1oyVnVaWEpwWTBOdmJYQnZibVZ1ZEVOc1lYTnpJRDBnYm5Wc2JEdGNiaTh2SUZSb2FYTWdjbVZuYVhOMGNua2dhMlZsY0hNZ2RISmhZMnNnYjJZZ2QzSmhjSEJsY2lCamJHRnpjMlZ6SUdGeWIzVnVaQ0J1WVhScGRtVWdkR0ZuY3k1Y2JuWmhjaUIwWVdkVWIwTnZiWEJ2Ym1WdWRFTnNZWE56SUQwZ2UzMDdYRzUyWVhJZ2RHVjRkRU52YlhCdmJtVnVkRU5zWVhOeklEMGdiblZzYkR0Y2JseHVkbUZ5SUZKbFlXTjBUbUYwYVhabFEyOXRjRzl1Wlc1MFNXNXFaV04wYVc5dUlEMGdlMXh1SUNBdkx5QlVhR2x6SUdGalkyVndkSE1nWVNCamJHRnpjeUIwYUdGMElISmxZMlZwZG1WeklIUm9aU0IwWVdjZ2MzUnlhVzVuTGlCVWFHbHpJR2x6SUdFZ1kyRjBZMmdnWVd4c1hHNGdJQzh2SUhSb1lYUWdZMkZ1SUhKbGJtUmxjaUJoYm5rZ2EybHVaQ0J2WmlCMFlXY3VYRzRnSUdsdWFtVmpkRWRsYm1WeWFXTkRiMjF3YjI1bGJuUkRiR0Z6Y3pvZ1puVnVZM1JwYjI0Z0tHTnZiWEJ2Ym1WdWRFTnNZWE56S1NCN1hHNGdJQ0FnWjJWdVpYSnBZME52YlhCdmJtVnVkRU5zWVhOeklEMGdZMjl0Y0c5dVpXNTBRMnhoYzNNN1hHNGdJSDBzWEc0Z0lDOHZJRlJvYVhNZ1lXTmpaWEIwY3lCaElIUmxlSFFnWTI5dGNHOXVaVzUwSUdOc1lYTnpJSFJvWVhRZ2RHRnJaWE1nZEdobElIUmxlSFFnYzNSeWFXNW5JSFJ2SUdKbFhHNGdJQzh2SUhKbGJtUmxjbVZrSUdGeklIQnliM0J6TGx4dUlDQnBibXBsWTNSVVpYaDBRMjl0Y0c5dVpXNTBRMnhoYzNNNklHWjFibU4wYVc5dUlDaGpiMjF3YjI1bGJuUkRiR0Z6Y3lrZ2UxeHVJQ0FnSUhSbGVIUkRiMjF3YjI1bGJuUkRiR0Z6Y3lBOUlHTnZiWEJ2Ym1WdWRFTnNZWE56TzF4dUlDQjlMRnh1SUNBdkx5QlVhR2x6SUdGalkyVndkSE1nWVNCclpYbGxaQ0J2WW1wbFkzUWdkMmwwYUNCamJHRnpjMlZ6SUdGeklIWmhiSFZsY3k0Z1JXRmphQ0JyWlhrZ2NtVndjbVZ6Wlc1MGN5QmhYRzRnSUM4dklIUmhaeTRnVkdoaGRDQndZWEowYVdOMWJHRnlJSFJoWnlCM2FXeHNJSFZ6WlNCMGFHbHpJR05zWVhOeklHbHVjM1JsWVdRZ2IyWWdkR2hsSUdkbGJtVnlhV01nYjI1bExseHVJQ0JwYm1wbFkzUkRiMjF3YjI1bGJuUkRiR0Z6YzJWek9pQm1kVzVqZEdsdmJpQW9ZMjl0Y0c5dVpXNTBRMnhoYzNObGN5a2dlMXh1SUNBZ0lHRnpjMmxuYmloMFlXZFViME52YlhCdmJtVnVkRU5zWVhOekxDQmpiMjF3YjI1bGJuUkRiR0Z6YzJWektUdGNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJIWlhRZ1lTQmpiMjF3YjNOcGRHVWdZMjl0Y0c5dVpXNTBJSGR5WVhCd1pYSWdZMnhoYzNNZ1ptOXlJR0VnYzNCbFkybG1hV01nZEdGbkxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1VtVmhZM1JGYkdWdFpXNTBmU0JsYkdWdFpXNTBJRlJvWlNCMFlXY2dabTl5SUhkb2FXTm9JSFJ2SUdkbGRDQjBhR1VnWTJ4aGMzTXVYRzRnS2lCQWNtVjBkWEp1SUh0bWRXNWpkR2x2Ym4wZ1ZHaGxJRkpsWVdOMElHTnNZWE56SUdOdmJuTjBjblZqZEc5eUlHWjFibU4wYVc5dUxseHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUkRiMjF3YjI1bGJuUkRiR0Z6YzBadmNrVnNaVzFsYm5Rb1pXeGxiV1Z1ZENrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUdWc1pXMWxiblF1ZEhsd1pTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJsYkdWdFpXNTBMblI1Y0dVN1hHNGdJSDFjYmlBZ2RtRnlJSFJoWnlBOUlHVnNaVzFsYm5RdWRIbHdaVHRjYmlBZ2RtRnlJR052YlhCdmJtVnVkRU5zWVhOeklEMGdkR0ZuVkc5RGIyMXdiMjVsYm5SRGJHRnpjMXQwWVdkZE8xeHVJQ0JwWmlBb1kyOXRjRzl1Wlc1MFEyeGhjM01nUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSFJoWjFSdlEyOXRjRzl1Wlc1MFEyeGhjM05iZEdGblhTQTlJR052YlhCdmJtVnVkRU5zWVhOeklEMGdZWFYwYjBkbGJtVnlZWFJsVjNKaGNIQmxja05zWVhOektIUmhaeWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR052YlhCdmJtVnVkRU5zWVhOek8xeHVmVnh1WEc0dktpcGNiaUFxSUVkbGRDQmhJRzVoZEdsMlpTQnBiblJsY201aGJDQmpiMjF3YjI1bGJuUWdZMnhoYzNNZ1ptOXlJR0VnYzNCbFkybG1hV01nZEdGbkxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1VtVmhZM1JGYkdWdFpXNTBmU0JsYkdWdFpXNTBJRlJvWlNCbGJHVnRaVzUwSUhSdklHTnlaV0YwWlM1Y2JpQXFJRUJ5WlhSMWNtNGdlMloxYm1OMGFXOXVmU0JVYUdVZ2FXNTBaWEp1WVd3Z1kyeGhjM01nWTI5dWMzUnlkV04wYjNJZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1aMWJtTjBhVzl1SUdOeVpXRjBaVWx1ZEdWeWJtRnNRMjl0Y0c5dVpXNTBLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lXZGxibVZ5YVdORGIyMXdiMjVsYm5SRGJHRnpjeUEvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZFVhR1Z5WlNCcGN5QnVieUJ5WldkcGMzUmxjbVZrSUdOdmJYQnZibVZ1ZENCbWIzSWdkR2hsSUhSaFp5QWxjeWNzSUdWc1pXMWxiblF1ZEhsd1pTa2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQnlaWFIxY200Z2JtVjNJR2RsYm1WeWFXTkRiMjF3YjI1bGJuUkRiR0Z6Y3lobGJHVnRaVzUwTG5SNWNHVXNJR1ZzWlcxbGJuUXVjSEp2Y0hNcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUlVaWGgwZlNCMFpYaDBYRzRnS2lCQWNtVjBkWEp1SUh0U1pXRmpkRU52YlhCdmJtVnVkSDFjYmlBcUwxeHVablZ1WTNScGIyNGdZM0psWVhSbFNXNXpkR0Z1WTJWR2IzSlVaWGgwS0hSbGVIUXBJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QjBaWGgwUTI5dGNHOXVaVzUwUTJ4aGMzTW9kR1Y0ZENrN1hHNTlYRzVjYmk4cUtseHVJQ29nUUhCaGNtRnRJSHRTWldGamRFTnZiWEJ2Ym1WdWRIMGdZMjl0Y0c5dVpXNTBYRzRnS2lCQWNtVjBkWEp1SUh0aWIyOXNaV0Z1ZlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzFSbGVIUkRiMjF3YjI1bGJuUW9ZMjl0Y0c5dVpXNTBLU0I3WEc0Z0lISmxkSFZ5YmlCamIyMXdiMjVsYm5RZ2FXNXpkR0Z1WTJWdlppQjBaWGgwUTI5dGNHOXVaVzUwUTJ4aGMzTTdYRzU5WEc1Y2JuWmhjaUJTWldGamRFNWhkR2wyWlVOdmJYQnZibVZ1ZENBOUlIdGNiaUFnWjJWMFEyOXRjRzl1Wlc1MFEyeGhjM05HYjNKRmJHVnRaVzUwT2lCblpYUkRiMjF3YjI1bGJuUkRiR0Z6YzBadmNrVnNaVzFsYm5Rc1hHNGdJR055WldGMFpVbHVkR1Z5Ym1Gc1EyOXRjRzl1Wlc1ME9pQmpjbVZoZEdWSmJuUmxjbTVoYkVOdmJYQnZibVZ1ZEN4Y2JpQWdZM0psWVhSbFNXNXpkR0Z1WTJWR2IzSlVaWGgwT2lCamNtVmhkR1ZKYm5OMFlXNWpaVVp2Y2xSbGVIUXNYRzRnSUdselZHVjRkRU52YlhCdmJtVnVkRG9nYVhOVVpYaDBRMjl0Y0c5dVpXNTBMRnh1SUNCcGJtcGxZM1JwYjI0NklGSmxZV04wVG1GMGFYWmxRMjl0Y0c5dVpXNTBTVzVxWldOMGFXOXVYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGSmxZV04wVG1GMGFYWmxRMjl0Y0c5dVpXNTBPeUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gd2FyblREWihwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yICYmIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICcnKSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGFic3RyYWN0IEFQSSBmb3IgYW4gdXBkYXRlIHF1ZXVlLlxuICovXG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHt9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNvbXBsZXRlU3RhdGUpIHtcbiAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVNldFByb3BzOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHBhcnRpYWxQcm9wcykge1xuICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdzZXRQcm9wcycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzIE5ldyBwcm9wcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVByb3BzOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHByb3BzKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VQcm9wcycpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROb29wVXBkYXRlUXVldWU7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUk9iMjl3VlhCa1lYUmxVWFZsZFdVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElGSmxZV04wVG05dmNGVndaR0YwWlZGMVpYVmxYRzRnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZDJGeWJtbHVaeUE5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDNkaGNtNXBibWNuS1R0Y2JseHVablZ1WTNScGIyNGdkMkZ5YmxSRVdpaHdkV0pzYVdOSmJuTjBZVzVqWlN3Z1kyRnNiR1Z5VG1GdFpTa2dlMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCM1lYSnVhVzVuS0daaGJITmxMQ0FuSlhNb0xpNHVLVG9nUTJGdUlHOXViSGtnZFhCa1lYUmxJR0VnYlc5MWJuUmxaQ0J2Y2lCdGIzVnVkR2x1WnlCamIyMXdiMjVsYm5RdUlDY2dLeUFuVkdocGN5QjFjM1ZoYkd4NUlHMWxZVzV6SUhsdmRTQmpZV3hzWldRZ0pYTW9LU0J2YmlCaGJpQjFibTF2ZFc1MFpXUWdZMjl0Y0c5dVpXNTBMaUFuSUNzZ0oxUm9hWE1nYVhNZ1lTQnVieTF2Y0M0Z1VHeGxZWE5sSUdOb1pXTnJJSFJvWlNCamIyUmxJR1p2Y2lCMGFHVWdKWE1nWTI5dGNHOXVaVzUwTGljc0lHTmhiR3hsY2s1aGJXVXNJR05oYkd4bGNrNWhiV1VzSUhCMVlteHBZMGx1YzNSaGJtTmxMbU52Ym5OMGNuVmpkRzl5SUNZbUlIQjFZbXhwWTBsdWMzUmhibU5sTG1OdmJuTjBjblZqZEc5eUxtUnBjM0JzWVhsT1lXMWxJSHg4SUNjbktTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUZSb2FYTWdhWE1nZEdobElHRmljM1J5WVdOMElFRlFTU0JtYjNJZ1lXNGdkWEJrWVhSbElIRjFaWFZsTGx4dUlDb3ZYRzUyWVhJZ1VtVmhZM1JPYjI5d1ZYQmtZWFJsVVhWbGRXVWdQU0I3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU5vWldOcmN5QjNhR1YwYUdWeUlHOXlJRzV2ZENCMGFHbHpJR052YlhCdmMybDBaU0JqYjIxd2IyNWxiblFnYVhNZ2JXOTFiblJsWkM1Y2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRFTnNZWE56ZlNCd2RXSnNhV05KYm5OMFlXNWpaU0JVYUdVZ2FXNXpkR0Z1WTJVZ2QyVWdkMkZ1ZENCMGJ5QjBaWE4wTGx4dUlDQWdLaUJBY21WMGRYSnVJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JRzF2ZFc1MFpXUXNJR1poYkhObElHOTBhR1Z5ZDJselpTNWNiaUFnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnS2lCQVptbHVZV3hjYmlBZ0lDb3ZYRzRnSUdselRXOTFiblJsWkRvZ1puVnVZM1JwYjI0Z0tIQjFZbXhwWTBsdWMzUmhibU5sS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJGYm5GMVpYVmxJR0VnWTJGc2JHSmhZMnNnZEdoaGRDQjNhV3hzSUdKbElHVjRaV04xZEdWa0lHRm1kR1Z5SUdGc2JDQjBhR1VnY0dWdVpHbHVaeUIxY0dSaGRHVnpYRzRnSUNBcUlHaGhkbVVnY0hKdlkyVnpjMlZrTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTJ4aGMzTjlJSEIxWW14cFkwbHVjM1JoYm1ObElGUm9aU0JwYm5OMFlXNWpaU0IwYnlCMWMyVWdZWE1nWUhSb2FYTmdJR052Ym5SbGVIUXVYRzRnSUNBcUlFQndZWEpoYlNCN1AyWjFibU4wYVc5dWZTQmpZV3hzWW1GamF5QkRZV3hzWldRZ1lXWjBaWElnYzNSaGRHVWdhWE1nZFhCa1lYUmxaQzVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0JsYm5GMVpYVmxRMkZzYkdKaFkyczZJR1oxYm1OMGFXOXVJQ2h3ZFdKc2FXTkpibk4wWVc1alpTd2dZMkZzYkdKaFkyc3BJSHQ5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJHYjNKalpYTWdZVzRnZFhCa1lYUmxMaUJVYUdseklITm9iM1ZzWkNCdmJteDVJR0psSUdsdWRtOXJaV1FnZDJobGJpQnBkQ0JwY3lCcmJtOTNiaUIzYVhSb1hHNGdJQ0FxSUdObGNuUmhhVzUwZVNCMGFHRjBJSGRsSUdGeVpTQXFLbTV2ZENvcUlHbHVJR0VnUkU5TklIUnlZVzV6WVdOMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCWmIzVWdiV0Y1SUhkaGJuUWdkRzhnWTJGc2JDQjBhR2x6SUhkb1pXNGdlVzkxSUd0dWIzY2dkR2hoZENCemIyMWxJR1JsWlhCbGNpQmhjM0JsWTNRZ2IyWWdkR2hsWEc0Z0lDQXFJR052YlhCdmJtVnVkQ2R6SUhOMFlYUmxJR2hoY3lCamFHRnVaMlZrSUdKMWRDQmdjMlYwVTNSaGRHVmdJSGRoY3lCdWIzUWdZMkZzYkdWa0xseHVJQ0FnS2x4dUlDQWdLaUJVYUdseklIZHBiR3dnYm05MElHbHVkbTlyWlNCZ2MyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxZQ3dnWW5WMElHbDBJSGRwYkd3Z2FXNTJiMnRsWEc0Z0lDQXFJR0JqYjIxd2IyNWxiblJYYVd4c1ZYQmtZWFJsWUNCaGJtUWdZR052YlhCdmJtVnVkRVJwWkZWd1pHRjBaV0F1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JEYkdGemMzMGdjSFZpYkdsalNXNXpkR0Z1WTJVZ1ZHaGxJR2x1YzNSaGJtTmxJSFJvWVhRZ2MyaHZkV3hrSUhKbGNtVnVaR1Z5TGx4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUdWdWNYVmxkV1ZHYjNKalpWVndaR0YwWlRvZ1puVnVZM1JwYjI0Z0tIQjFZbXhwWTBsdWMzUmhibU5sS1NCN1hHNGdJQ0FnZDJGeWJsUkVXaWh3ZFdKc2FXTkpibk4wWVc1alpTd2dKMlp2Y21ObFZYQmtZWFJsSnlrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsY0d4aFkyVnpJR0ZzYkNCdlppQjBhR1VnYzNSaGRHVXVJRUZzZDJGNWN5QjFjMlVnZEdocGN5QnZjaUJnYzJWMFUzUmhkR1ZnSUhSdklHMTFkR0YwWlNCemRHRjBaUzVjYmlBZ0lDb2dXVzkxSUhOb2IzVnNaQ0IwY21WaGRDQmdkR2hwY3k1emRHRjBaV0FnWVhNZ2FXMXRkWFJoWW14bExseHVJQ0FnS2x4dUlDQWdLaUJVYUdWeVpTQnBjeUJ1YnlCbmRXRnlZVzUwWldVZ2RHaGhkQ0JnZEdocGN5NXpkR0YwWldBZ2QybHNiQ0JpWlNCcGJXMWxaR2xoZEdWc2VTQjFjR1JoZEdWa0xDQnpiMXh1SUNBZ0tpQmhZMk5sYzNOcGJtY2dZSFJvYVhNdWMzUmhkR1ZnSUdGbWRHVnlJR05oYkd4cGJtY2dkR2hwY3lCdFpYUm9iMlFnYldGNUlISmxkSFZ5YmlCMGFHVWdiMnhrSUhaaGJIVmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBRMnhoYzNOOUlIQjFZbXhwWTBsdWMzUmhibU5sSUZSb1pTQnBibk4wWVc1alpTQjBhR0YwSUhOb2IzVnNaQ0J5WlhKbGJtUmxjaTVjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHTnZiWEJzWlhSbFUzUmhkR1VnVG1WNGRDQnpkR0YwWlM1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCbGJuRjFaWFZsVW1Wd2JHRmpaVk4wWVhSbE9pQm1kVzVqZEdsdmJpQW9jSFZpYkdsalNXNXpkR0Z1WTJVc0lHTnZiWEJzWlhSbFUzUmhkR1VwSUh0Y2JpQWdJQ0IzWVhKdVZFUmFLSEIxWW14cFkwbHVjM1JoYm1ObExDQW5jbVZ3YkdGalpWTjBZWFJsSnlrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhNZ1lTQnpkV0p6WlhRZ2IyWWdkR2hsSUhOMFlYUmxMaUJVYUdseklHOXViSGtnWlhocGMzUnpJR0psWTJGMWMyVWdYM0JsYm1ScGJtZFRkR0YwWlNCcGMxeHVJQ0FnS2lCcGJuUmxjbTVoYkM0Z1ZHaHBjeUJ3Y205MmFXUmxjeUJoSUcxbGNtZHBibWNnYzNSeVlYUmxaM2tnZEdoaGRDQnBjeUJ1YjNRZ1lYWmhhV3hoWW14bElIUnZJR1JsWlhCY2JpQWdJQ29nY0hKdmNHVnlkR2xsY3lCM2FHbGphQ0JwY3lCamIyNW1kWE5wYm1jdUlGUlBSRTg2SUVWNGNHOXpaU0J3Wlc1a2FXNW5VM1JoZEdVZ2IzSWdaRzl1SjNRZ2RYTmxJR2wwWEc0Z0lDQXFJR1IxY21sdVp5QjBhR1VnYldWeVoyVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WaFkzUkRiR0Z6YzMwZ2NIVmliR2xqU1c1emRHRnVZMlVnVkdobElHbHVjM1JoYm1ObElIUm9ZWFFnYzJodmRXeGtJSEpsY21WdVpHVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2NHRnlkR2xoYkZOMFlYUmxJRTVsZUhRZ2NHRnlkR2xoYkNCemRHRjBaU0IwYnlCaVpTQnRaWEpuWldRZ2QybDBhQ0J6ZEdGMFpTNWNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmxibkYxWlhWbFUyVjBVM1JoZEdVNklHWjFibU4wYVc5dUlDaHdkV0pzYVdOSmJuTjBZVzVqWlN3Z2NHRnlkR2xoYkZOMFlYUmxLU0I3WEc0Z0lDQWdkMkZ5YmxSRVdpaHdkV0pzYVdOSmJuTjBZVzVqWlN3Z0ozTmxkRk4wWVhSbEp5azdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRITWdZU0J6ZFdKelpYUWdiMllnZEdobElIQnliM0J6TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTJ4aGMzTjlJSEIxWW14cFkwbHVjM1JoYm1ObElGUm9aU0JwYm5OMFlXNWpaU0IwYUdGMElITm9iM1ZzWkNCeVpYSmxibVJsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJSEJoY25ScFlXeFFjbTl3Y3lCVGRXSnpaWFFnYjJZZ2RHaGxJRzVsZUhRZ2NISnZjSE11WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnWlc1eGRXVjFaVk5sZEZCeWIzQnpPaUJtZFc1amRHbHZiaUFvY0hWaWJHbGpTVzV6ZEdGdVkyVXNJSEJoY25ScFlXeFFjbTl3Y3lrZ2UxeHVJQ0FnSUhkaGNtNVVSRm9vY0hWaWJHbGpTVzV6ZEdGdVkyVXNJQ2R6WlhSUWNtOXdjeWNwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWEJzWVdObGN5QmhiR3dnYjJZZ2RHaGxJSEJ5YjNCekxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFEyeGhjM045SUhCMVlteHBZMGx1YzNSaGJtTmxJRlJvWlNCcGJuTjBZVzVqWlNCMGFHRjBJSE5vYjNWc1pDQnlaWEpsYm1SbGNpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCeWIzQnpJRTVsZHlCd2NtOXdjeTVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0JsYm5GMVpYVmxVbVZ3YkdGalpWQnliM0J6T2lCbWRXNWpkR2x2YmlBb2NIVmliR2xqU1c1emRHRnVZMlVzSUhCeWIzQnpLU0I3WEc0Z0lDQWdkMkZ5YmxSRVdpaHdkV0pzYVdOSmJuTjBZVzVqWlN3Z0ozSmxjR3hoWTJWUWNtOXdjeWNwTzF4dUlDQjlYRzVjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVbVZoWTNST2IyOXdWWEJrWVhSbFVYVmxkV1U3SWwxOSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RPd25lclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJlYWN0T3duZXJzIGFyZSBjYXBhYmxlIG9mIHN0b3JpbmcgcmVmZXJlbmNlcyB0byBvd25lZCBjb21wb25lbnRzLlxuICpcbiAqIEFsbCBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vYmVpbmcvLyByZWZlcmVuY2VkIGJ5IG93bmVyIGNvbXBvbmVudHMsIGJ1dFxuICogb25seSBSZWFjdE93bmVyIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9yZWZlcmVuY2luZy8vIG93bmVkIGNvbXBvbmVudHMuXG4gKiBUaGUgbmFtZWQgcmVmZXJlbmNlIGlzIGtub3duIGFzIGEgXCJyZWZcIi5cbiAqXG4gKiBSZWZzIGFyZSBhdmFpbGFibGUgd2hlbiBtb3VudGVkIGFuZCB1cGRhdGVkIGR1cmluZyByZWNvbmNpbGlhdGlvbi5cbiAqXG4gKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAqICAgICAgICAgICA8Q3VzdG9tQ29tcG9uZW50IHJlZj1cImN1c3RvbVwiIC8+XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgKTtcbiAqICAgICB9LFxuICogICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaGFuZGxlQ2xpY2soKTtcbiAqICAgICB9LFxuICogICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaW5pdGlhbGl6ZSgpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogUmVmcyBzaG91bGQgcmFyZWx5IGJlIHVzZWQuIFdoZW4gcmVmcyBhcmUgdXNlZCwgdGhleSBzaG91bGQgb25seSBiZSBkb25lIHRvXG4gKiBjb250cm9sIGRhdGEgdGhhdCBpcyBub3QgaGFuZGxlZCBieSBSZWFjdCdzIGRhdGEgZmxvdy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RPd25lclxuICovXG52YXIgUmVhY3RPd25lciA9IHtcblxuICAvKipcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIG93bmVyLlxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzVmFsaWRPd25lcjogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiAhIShvYmplY3QgJiYgdHlwZW9mIG9iamVjdC5hdHRhY2hSZWYgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbicpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50IGJ5IHJlZiB0byBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgYnkgd2hpY2ggdG8gcmVmZXIgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdG8gcmVjb3JkIHRoZSByZWYuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uIChjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAhUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2FkZENvbXBvbmVudEFzUmVmVG8oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gWW91IG1pZ2h0ICcgKyAnYmUgYWRkaW5nIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBhIGNvbXBvbmVudFxcJ3MgJyArICdgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgJyArICcoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIG93bmVyLmF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjb21wb25lbnQgYnkgcmVmIGZyb20gYW4gb3duZXIgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIGRlcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgb2YgdGhlIHJlZiB0byByZW1vdmUuXG4gICAqIEBwYXJhbSB7UmVhY3RPd25lcn0gb3duZXIgQ29tcG9uZW50IG9uIHdoaWNoIHRoZSByZWYgaXMgcmVjb3JkZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbTogZnVuY3Rpb24gKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICFSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFlvdSBtaWdodCAnICsgJ2JlIHJlbW92aW5nIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBhIGNvbXBvbmVudFxcJ3MgJyArICdgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgJyArICcoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIC8vIENoZWNrIHRoYXQgYGNvbXBvbmVudGAgaXMgc3RpbGwgdGhlIGN1cnJlbnQgcmVmIGJlY2F1c2Ugd2UgZG8gbm90IHdhbnQgdG9cbiAgICAvLyBkZXRhY2ggdGhlIHJlZiBpZiBhbm90aGVyIGNvbXBvbmVudCBzdG9sZSBpdC5cbiAgICBpZiAob3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5yZWZzW3JlZl0gPT09IGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpKSB7XG4gICAgICBvd25lci5kZXRhY2hSZWYocmVmKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE93bmVyO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JQZDI1bGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCU1pXRmpkRTkzYm1WeVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2YVc1MllYSnBZVzUwSnlrN1hHNWNiaThxS2x4dUlDb2dVbVZoWTNSUGQyNWxjbk1nWVhKbElHTmhjR0ZpYkdVZ2IyWWdjM1J2Y21sdVp5QnlaV1psY21WdVkyVnpJSFJ2SUc5M2JtVmtJR052YlhCdmJtVnVkSE11WEc0Z0tseHVJQ29nUVd4c0lHTnZiWEJ2Ym1WdWRITWdZWEpsSUdOaGNHRmliR1VnYjJZZ0x5OWlaV2x1Wnk4dklISmxabVZ5Wlc1alpXUWdZbmtnYjNkdVpYSWdZMjl0Y0c5dVpXNTBjeXdnWW5WMFhHNGdLaUJ2Ym14NUlGSmxZV04wVDNkdVpYSWdZMjl0Y0c5dVpXNTBjeUJoY21VZ1kyRndZV0pzWlNCdlppQXZMM0psWm1WeVpXNWphVzVuTHk4Z2IzZHVaV1FnWTI5dGNHOXVaVzUwY3k1Y2JpQXFJRlJvWlNCdVlXMWxaQ0J5WldabGNtVnVZMlVnYVhNZ2EyNXZkMjRnWVhNZ1lTQmNJbkpsWmx3aUxseHVJQ3BjYmlBcUlGSmxabk1nWVhKbElHRjJZV2xzWVdKc1pTQjNhR1Z1SUcxdmRXNTBaV1FnWVc1a0lIVndaR0YwWldRZ1pIVnlhVzVuSUhKbFkyOXVZMmxzYVdGMGFXOXVMbHh1SUNwY2JpQXFJQ0FnZG1GeUlFMTVRMjl0Y0c5dVpXNTBJRDBnVW1WaFkzUXVZM0psWVhSbFEyeGhjM01vZTF4dUlDb2dJQ0FnSUhKbGJtUmxjam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdLaUFnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ29nSUNBZ0lDQWdJQ0E4WkdsMklHOXVRMnhwWTJzOWUzUm9hWE11YUdGdVpHeGxRMnhwWTJ0OVBseHVJQ29nSUNBZ0lDQWdJQ0FnSUR4RGRYTjBiMjFEYjIxd2IyNWxiblFnY21WbVBWd2lZM1Z6ZEc5dFhDSWdMejVjYmlBcUlDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0tpQWdJQ0FnSUNBcE8xeHVJQ29nSUNBZ0lIMHNYRzRnS2lBZ0lDQWdhR0Z1Wkd4bFEyeHBZMnM2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ29nSUNBZ0lDQWdkR2hwY3k1eVpXWnpMbU4xYzNSdmJTNW9ZVzVrYkdWRGJHbGpheWdwTzF4dUlDb2dJQ0FnSUgwc1hHNGdLaUFnSUNBZ1kyOXRjRzl1Wlc1MFJHbGtUVzkxYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNvZ0lDQWdJQ0FnZEdocGN5NXlaV1p6TG1OMWMzUnZiUzVwYm1sMGFXRnNhWHBsS0NrN1hHNGdLaUFnSUNBZ2ZWeHVJQ29nSUNCOUtUdGNiaUFxWEc0Z0tpQlNaV1p6SUhOb2IzVnNaQ0J5WVhKbGJIa2dZbVVnZFhObFpDNGdWMmhsYmlCeVpXWnpJR0Z5WlNCMWMyVmtMQ0IwYUdWNUlITm9iM1ZzWkNCdmJteDVJR0psSUdSdmJtVWdkRzljYmlBcUlHTnZiblJ5YjJ3Z1pHRjBZU0IwYUdGMElHbHpJRzV2ZENCb1lXNWtiR1ZrSUdKNUlGSmxZV04wSjNNZ1pHRjBZU0JtYkc5M0xseHVJQ3BjYmlBcUlFQmpiR0Z6Y3lCU1pXRmpkRTkzYm1WeVhHNGdLaTljYm5aaGNpQlNaV0ZqZEU5M2JtVnlJRDBnZTF4dVhHNGdJQzhxS2x4dUlDQWdLaUJBY0dGeVlXMGdlejl2WW1wbFkzUjlJRzlpYW1WamRGeHVJQ0FnS2lCQWNtVjBkWEp1SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUdCdlltcGxZM1JnSUdseklHRWdkbUZzYVdRZ2IzZHVaWEl1WEc0Z0lDQXFJRUJtYVc1aGJGeHVJQ0FnS2k5Y2JpQWdhWE5XWVd4cFpFOTNibVZ5T2lCbWRXNWpkR2x2YmlBb2IySnFaV04wS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ0VoS0c5aWFtVmpkQ0FtSmlCMGVYQmxiMllnYjJKcVpXTjBMbUYwZEdGamFGSmxaaUE5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwZVhCbGIyWWdiMkpxWldOMExtUmxkR0ZqYUZKbFppQTlQVDBnSjJaMWJtTjBhVzl1SnlrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhNZ1lTQmpiMjF3YjI1bGJuUWdZbmtnY21WbUlIUnZJR0Z1SUc5M2JtVnlJR052YlhCdmJtVnVkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRU52YlhCdmJtVnVkSDBnWTI5dGNHOXVaVzUwSUVOdmJYQnZibVZ1ZENCMGJ5QnlaV1psY21WdVkyVXVYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeVpXWWdUbUZ0WlNCaWVTQjNhR2xqYUNCMGJ5QnlaV1psY2lCMGJ5QjBhR1VnWTI5dGNHOXVaVzUwTGx4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFQzZHVaWEo5SUc5M2JtVnlJRU52YlhCdmJtVnVkQ0J2YmlCM2FHbGphQ0IwYnlCeVpXTnZjbVFnZEdobElISmxaaTVjYmlBZ0lDb2dRR1pwYm1Gc1hHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ1lXUmtRMjl0Y0c5dVpXNTBRWE5TWldaVWJ6b2dablZ1WTNScGIyNGdLR052YlhCdmJtVnVkQ3dnY21WbUxDQnZkMjVsY2lrZ2UxeHVJQ0FnSUNGU1pXRmpkRTkzYm1WeUxtbHpWbUZzYVdSUGQyNWxjaWh2ZDI1bGNpa2dQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBbllXUmtRMjl0Y0c5dVpXNTBRWE5TWldaVWJ5Z3VMaTRwT2lCUGJteDVJR0VnVW1WaFkzUlBkMjVsY2lCallXNGdhR0YyWlNCeVpXWnpMaUJaYjNVZ2JXbG5hSFFnSnlBcklDZGlaU0JoWkdScGJtY2dZU0J5WldZZ2RHOGdZU0JqYjIxd2IyNWxiblFnZEdoaGRDQjNZWE1nYm05MElHTnlaV0YwWldRZ2FXNXphV1JsSUdFZ1kyOXRjRzl1Wlc1MFhGd25jeUFuSUNzZ0oyQnlaVzVrWlhKZ0lHMWxkR2h2WkN3Z2IzSWdlVzkxSUdoaGRtVWdiWFZzZEdsd2JHVWdZMjl3YVdWeklHOW1JRkpsWVdOMElHeHZZV1JsWkNBbklDc2dKeWhrWlhSaGFXeHpPaUJvZEhSd2N6b3ZMMlppTG0xbEwzSmxZV04wTFhKbFpuTXRiWFZ6ZEMxb1lYWmxMVzkzYm1WeUtTNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnYjNkdVpYSXVZWFIwWVdOb1VtVm1LSEpsWml3Z1kyOXRjRzl1Wlc1MEtUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WdGIzWmxjeUJoSUdOdmJYQnZibVZ1ZENCaWVTQnlaV1lnWm5KdmJTQmhiaUJ2ZDI1bGNpQmpiMjF3YjI1bGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WaFkzUkRiMjF3YjI1bGJuUjlJR052YlhCdmJtVnVkQ0JEYjIxd2IyNWxiblFnZEc4Z1pHVnlaV1psY21WdVkyVXVYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeVpXWWdUbUZ0WlNCdlppQjBhR1VnY21WbUlIUnZJSEpsYlc5MlpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRTkzYm1WeWZTQnZkMjVsY2lCRGIyMXdiMjVsYm5RZ2IyNGdkMmhwWTJnZ2RHaGxJSEpsWmlCcGN5QnlaV052Y21SbFpDNWNiaUFnSUNvZ1FHWnBibUZzWEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnY21WdGIzWmxRMjl0Y0c5dVpXNTBRWE5TWldaR2NtOXRPaUJtZFc1amRHbHZiaUFvWTI5dGNHOXVaVzUwTENCeVpXWXNJRzkzYm1WeUtTQjdYRzRnSUNBZ0lWSmxZV04wVDNkdVpYSXVhWE5XWVd4cFpFOTNibVZ5S0c5M2JtVnlLU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZHlaVzF2ZG1WRGIyMXdiMjVsYm5SQmMxSmxaa1p5YjIwb0xpNHVLVG9nVDI1c2VTQmhJRkpsWVdOMFQzZHVaWElnWTJGdUlHaGhkbVVnY21WbWN5NGdXVzkxSUcxcFoyaDBJQ2NnS3lBblltVWdjbVZ0YjNacGJtY2dZU0J5WldZZ2RHOGdZU0JqYjIxd2IyNWxiblFnZEdoaGRDQjNZWE1nYm05MElHTnlaV0YwWldRZ2FXNXphV1JsSUdFZ1kyOXRjRzl1Wlc1MFhGd25jeUFuSUNzZ0oyQnlaVzVrWlhKZ0lHMWxkR2h2WkN3Z2IzSWdlVzkxSUdoaGRtVWdiWFZzZEdsd2JHVWdZMjl3YVdWeklHOW1JRkpsWVdOMElHeHZZV1JsWkNBbklDc2dKeWhrWlhSaGFXeHpPaUJvZEhSd2N6b3ZMMlppTG0xbEwzSmxZV04wTFhKbFpuTXRiWFZ6ZEMxb1lYWmxMVzkzYm1WeUtTNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnTHk4Z1EyaGxZMnNnZEdoaGRDQmdZMjl0Y0c5dVpXNTBZQ0JwY3lCemRHbHNiQ0IwYUdVZ1kzVnljbVZ1ZENCeVpXWWdZbVZqWVhWelpTQjNaU0JrYnlCdWIzUWdkMkZ1ZENCMGIxeHVJQ0FnSUM4dklHUmxkR0ZqYUNCMGFHVWdjbVZtSUdsbUlHRnViM1JvWlhJZ1kyOXRjRzl1Wlc1MElITjBiMnhsSUdsMExseHVJQ0FnSUdsbUlDaHZkMjVsY2k1blpYUlFkV0pzYVdOSmJuTjBZVzVqWlNncExuSmxabk5iY21WbVhTQTlQVDBnWTI5dGNHOXVaVzUwTG1kbGRGQjFZbXhwWTBsdWMzUmhibU5sS0NrcElIdGNiaUFnSUNBZ0lHOTNibVZ5TG1SbGRHRmphRkpsWmloeVpXWXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBUM2R1WlhJN0lsMTkiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UGVyZlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVhY3RQZXJmIGlzIGEgZ2VuZXJhbCBBT1Agc3lzdGVtIGRlc2lnbmVkIHRvIG1lYXN1cmUgcGVyZm9ybWFuY2UuIFRoaXNcbiAqIG1vZHVsZSBvbmx5IGhhcyB0aGUgaG9va3M6IHNlZSBSZWFjdERlZmF1bHRQZXJmIGZvciB0aGUgYW5hbHlzaXMgdG9vbC5cbiAqL1xudmFyIFJlYWN0UGVyZiA9IHtcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZW5hYmxlL2Rpc2FibGUgbWVhc3VyZW1lbnQuIFNldCB0byBmYWxzZSBieSBkZWZhdWx0IHRvIHByZXZlbnRcbiAgICogYWNjaWRlbnRhbCBsb2dnaW5nIGFuZCBwZXJmIGxvc3MuXG4gICAqL1xuICBlbmFibGVNZWFzdXJlOiBmYWxzZSxcblxuICAvKipcbiAgICogSG9sZHMgb250byB0aGUgbWVhc3VyZSBmdW5jdGlvbiBpbiB1c2UuIEJ5IGRlZmF1bHQsIGRvbid0IG1lYXN1cmVcbiAgICogYW55dGhpbmcsIGJ1dCB3ZSdsbCBvdmVycmlkZSB0aGlzIGlmIHdlIGluamVjdCBhIG1lYXN1cmUgZnVuY3Rpb24uXG4gICAqL1xuICBzdG9yZWRNZWFzdXJlOiBfbm9NZWFzdXJlLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3ROYW1lXG4gICAqIEBwYXJhbSB7b2JqZWN0PHN0cmluZz59IG1ldGhvZE5hbWVzXG4gICAqL1xuICBtZWFzdXJlTWV0aG9kczogZnVuY3Rpb24gKG9iamVjdCwgb2JqZWN0TmFtZSwgbWV0aG9kTmFtZXMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZm9yICh2YXIga2V5IGluIG1ldGhvZE5hbWVzKSB7XG4gICAgICAgIGlmICghbWV0aG9kTmFtZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdFtrZXldID0gUmVhY3RQZXJmLm1lYXN1cmUob2JqZWN0TmFtZSwgbWV0aG9kTmFtZXNba2V5XSwgb2JqZWN0W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVXNlIHRoaXMgdG8gd3JhcCBtZXRob2RzIHlvdSB3YW50IHRvIG1lYXN1cmUuIFplcm8gb3ZlcmhlYWQgaW4gcHJvZHVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9iak5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgKi9cbiAgbWVhc3VyZTogZnVuY3Rpb24gKG9iak5hbWUsIGZuTmFtZSwgZnVuYykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbWVhc3VyZWRGdW5jID0gbnVsbDtcbiAgICAgIHZhciB3cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUpIHtcbiAgICAgICAgICBpZiAoIW1lYXN1cmVkRnVuYykge1xuICAgICAgICAgICAgbWVhc3VyZWRGdW5jID0gUmVhY3RQZXJmLnN0b3JlZE1lYXN1cmUob2JqTmFtZSwgZm5OYW1lLCBmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1lYXN1cmVkRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgd3JhcHBlci5kaXNwbGF5TmFtZSA9IG9iak5hbWUgKyAnXycgKyBmbk5hbWU7XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWVhc3VyZVxuICAgICAqL1xuICAgIGluamVjdE1lYXN1cmU6IGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICBSZWFjdFBlcmYuc3RvcmVkTWVhc3VyZSA9IG1lYXN1cmU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFNpbXBseSBwYXNzZXMgdGhyb3VnaCB0aGUgbWVhc3VyZWQgZnVuY3Rpb24sIHdpdGhvdXQgbWVhc3VyaW5nIGl0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gX25vTWVhc3VyZShvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQZXJmO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JRWlhKbUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRGQmxjbVpjYmlBcUlFQjBlWEJsWTJobFkydHpJSE4wWVhScFl5MXZibXg1WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzR2S2lwY2JpQXFJRkpsWVdOMFVHVnlaaUJwY3lCaElHZGxibVZ5WVd3Z1FVOVFJSE41YzNSbGJTQmtaWE5wWjI1bFpDQjBieUJ0WldGemRYSmxJSEJsY21admNtMWhibU5sTGlCVWFHbHpYRzRnS2lCdGIyUjFiR1VnYjI1c2VTQm9ZWE1nZEdobElHaHZiMnR6T2lCelpXVWdVbVZoWTNSRVpXWmhkV3gwVUdWeVppQm1iM0lnZEdobElHRnVZV3g1YzJseklIUnZiMnd1WEc0Z0tpOWNiblpoY2lCU1pXRmpkRkJsY21ZZ1BTQjdYRzRnSUM4cUtseHVJQ0FnS2lCQ2IyOXNaV0Z1SUhSdklHVnVZV0pzWlM5a2FYTmhZbXhsSUcxbFlYTjFjbVZ0Wlc1MExpQlRaWFFnZEc4Z1ptRnNjMlVnWW5rZ1pHVm1ZWFZzZENCMGJ5QndjbVYyWlc1MFhHNGdJQ0FxSUdGalkybGtaVzUwWVd3Z2JHOW5aMmx1WnlCaGJtUWdjR1Z5WmlCc2IzTnpMbHh1SUNBZ0tpOWNiaUFnWlc1aFlteGxUV1ZoYzNWeVpUb2dabUZzYzJVc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVodmJHUnpJRzl1ZEc4Z2RHaGxJRzFsWVhOMWNtVWdablZ1WTNScGIyNGdhVzRnZFhObExpQkNlU0JrWldaaGRXeDBMQ0JrYjI0bmRDQnRaV0Z6ZFhKbFhHNGdJQ0FxSUdGdWVYUm9hVzVuTENCaWRYUWdkMlVuYkd3Z2IzWmxjbkpwWkdVZ2RHaHBjeUJwWmlCM1pTQnBibXBsWTNRZ1lTQnRaV0Z6ZFhKbElHWjFibU4wYVc5dUxseHVJQ0FnS2k5Y2JpQWdjM1J2Y21Wa1RXVmhjM1Z5WlRvZ1gyNXZUV1ZoYzNWeVpTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUc5aWFtVmpkRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IySnFaV04wVG1GdFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkRHh6ZEhKcGJtYytmU0J0WlhSb2IyUk9ZVzFsYzF4dUlDQWdLaTljYmlBZ2JXVmhjM1Z5WlUxbGRHaHZaSE02SUdaMWJtTjBhVzl1SUNodlltcGxZM1FzSUc5aWFtVmpkRTVoYldVc0lHMWxkR2h2WkU1aGJXVnpLU0I3WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCdFpYUm9iMlJPWVcxbGN5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXMWxkR2h2WkU1aGJXVnpMbWhoYzA5M2JsQnliM0JsY25SNUtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J2WW1wbFkzUmJhMlY1WFNBOUlGSmxZV04wVUdWeVppNXRaV0Z6ZFhKbEtHOWlhbVZqZEU1aGJXVXNJRzFsZEdodlpFNWhiV1Z6VzJ0bGVWMHNJRzlpYW1WamRGdHJaWGxkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVnpaU0IwYUdseklIUnZJSGR5WVhBZ2JXVjBhRzlrY3lCNWIzVWdkMkZ1ZENCMGJ5QnRaV0Z6ZFhKbExpQmFaWEp2SUc5MlpYSm9aV0ZrSUdsdUlIQnliMlIxWTNScGIyNHVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J2WW1wT1lXMWxYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCbWJrNWhiV1ZjYmlBZ0lDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdablZ1WTF4dUlDQWdLaUJBY21WMGRYSnVJSHRtZFc1amRHbHZibjFjYmlBZ0lDb3ZYRzRnSUcxbFlYTjFjbVU2SUdaMWJtTjBhVzl1SUNodlltcE9ZVzFsTENCbWJrNWhiV1VzSUdaMWJtTXBJSHRjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2RtRnlJRzFsWVhOMWNtVmtSblZ1WXlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0IyWVhJZ2QzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGSmxZV04wVUdWeVppNWxibUZpYkdWTlpXRnpkWEpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGdFpXRnpkWEpsWkVaMWJtTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxZWE4xY21Wa1JuVnVZeUE5SUZKbFlXTjBVR1Z5Wmk1emRHOXlaV1JOWldGemRYSmxLRzlpYWs1aGJXVXNJR1p1VG1GdFpTd2dablZ1WXlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ0WldGemRYSmxaRVoxYm1NdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVl5NWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUhkeVlYQndaWEl1WkdsemNHeGhlVTVoYldVZ1BTQnZZbXBPWVcxbElDc2dKMThuSUNzZ1ptNU9ZVzFsTzF4dUlDQWdJQ0FnY21WMGRYSnVJSGR5WVhCd1pYSTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtZFc1ak8xeHVJQ0I5TEZ4dVhHNGdJR2x1YW1WamRHbHZiam9nZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUcxbFlYTjFjbVZjYmlBZ0lDQWdLaTljYmlBZ0lDQnBibXBsWTNSTlpXRnpkWEpsT2lCbWRXNWpkR2x2YmlBb2JXVmhjM1Z5WlNrZ2UxeHVJQ0FnSUNBZ1VtVmhZM1JRWlhKbUxuTjBiM0psWkUxbFlYTjFjbVVnUFNCdFpXRnpkWEpsTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCVGFXMXdiSGtnY0dGemMyVnpJSFJvY205MVoyZ2dkR2hsSUcxbFlYTjFjbVZrSUdaMWJtTjBhVzl1TENCM2FYUm9iM1YwSUcxbFlYTjFjbWx1WnlCcGRDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IySnFUbUZ0WlZ4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHWnVUbUZ0WlZ4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdablZ1WTF4dUlDb2dRSEpsZEhWeWJpQjdablZ1WTNScGIyNTlYRzRnS2k5Y2JtWjFibU4wYVc5dUlGOXViMDFsWVhOMWNtVW9iMkpxVG1GdFpTd2dabTVPWVcxbExDQm1kVzVqS1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkpsWVdOMFVHVnlaanNpWFgwPSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbiAgICBwcm9wOiAncHJvcCcsXG4gICAgY29udGV4dDogJ2NvbnRleHQnLFxuICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dVRtRnRaWE11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE15MHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElGSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZiazVoYldWelhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdVbVZoWTNSUWNtOXdWSGx3WlV4dlkyRjBhVzl1VG1GdFpYTWdQU0I3ZlR0Y2JseHVhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnVW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dVRtRnRaWE1nUFNCN1hHNGdJQ0FnY0hKdmNEb2dKM0J5YjNBbkxGeHVJQ0FnSUdOdmJuUmxlSFE2SUNkamIyNTBaWGgwSnl4Y2JpQWdJQ0JqYUdsc1pFTnZiblJsZUhRNklDZGphR2xzWkNCamIyNTBaWGgwSjF4dUlDQjlPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZiazVoYldWek95SmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlNaXJyb3InKTtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSBrZXlNaXJyb3Ioe1xuICBwcm9wOiBudWxsLFxuICBjb250ZXh0OiBudWxsLFxuICBjaGlsZENvbnRleHQ6IG51bGxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbnM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMnKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xuXG4vKipcbiAqIENvbGxlY3Rpb24gb2YgbWV0aG9kcyB0aGF0IGFsbG93IGRlY2xhcmF0aW9uIGFuZCB2YWxpZGF0aW9uIG9mIHByb3BzIHRoYXQgYXJlXG4gKiBzdXBwbGllZCB0byBSZWFjdCBjb21wb25lbnRzLiBFeGFtcGxlIHVzYWdlOlxuICpcbiAqICAgdmFyIFByb3BzID0gcmVxdWlyZSgnUmVhY3RQcm9wVHlwZXMnKTtcbiAqICAgdmFyIE15QXJ0aWNsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICBwcm9wVHlwZXM6IHtcbiAqICAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBwcm9wIG5hbWVkIFwiZGVzY3JpcHRpb25cIi5cbiAqICAgICAgIGRlc2NyaXB0aW9uOiBQcm9wcy5zdHJpbmcsXG4gKlxuICogICAgICAgLy8gQSByZXF1aXJlZCBlbnVtIHByb3AgbmFtZWQgXCJjYXRlZ29yeVwiLlxuICogICAgICAgY2F0ZWdvcnk6IFByb3BzLm9uZU9mKFsnTmV3cycsJ1Bob3RvcyddKS5pc1JlcXVpcmVkLFxuICpcbiAqICAgICAgIC8vIEEgcHJvcCBuYW1lZCBcImRpYWxvZ1wiIHRoYXQgcmVxdWlyZXMgYW4gaW5zdGFuY2Ugb2YgRGlhbG9nLlxuICogICAgICAgZGlhbG9nOiBQcm9wcy5pbnN0YW5jZU9mKERpYWxvZykuaXNSZXF1aXJlZFxuICogICAgIH0sXG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHsgLi4uIH1cbiAqICAgfSk7XG4gKlxuICogQSBtb3JlIGZvcm1hbCBzcGVjaWZpY2F0aW9uIG9mIGhvdyB0aGVzZSBtZXRob2RzIGFyZSB1c2VkOlxuICpcbiAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICogICBkZWNsIDo9IFJlYWN0UHJvcFR5cGVzLnt0eXBlfSguaXNSZXF1aXJlZCk/XG4gKlxuICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICogYWxsb3dzIHRoZSBjcmVhdGlvbiBvZiBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbnMuIEZvciBleGFtcGxlOlxuICpcbiAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgcHJvcFR5cGVzOiB7XG4gKiAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBvciBVUkkgcHJvcCBuYW1lZCBcImhyZWZcIi5cbiAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gKiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAqICAgICAgICBpZiAocHJvcFZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHByb3BWYWx1ZSAhPT0gJ3N0cmluZycgJiZcbiAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gKiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICogICAgICAgICAgICAnRXhwZWN0ZWQgYSBzdHJpbmcgb3IgYW4gVVJJIGZvciAnICsgcHJvcE5hbWUgKyAnIGluICcgK1xuICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gKiAgICAgICAgICApO1xuICogICAgICAgIH1cbiAqICAgICAgfVxuICogICAgfSxcbiAqICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7Li4ufVxuICogIH0pO1xuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbnZhciBBTk9OWU1PVVMgPSAnPDxhbm9ueW1vdXM+Pic7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdhcnJheScpLFxuICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignbnVtYmVyJyksXG4gIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcblxuICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG4gIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgZWxlbWVudDogY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCksXG4gIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gIG5vZGU6IGNyZWF0ZU5vZGVDaGVja2VyKCksXG4gIG9iamVjdE9mOiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyLFxuICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gIHNoYXBlOiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdSZXF1aXJlZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHdhcyBub3Qgc3BlY2lmaWVkIGluICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgIC8vIGNoZWNrLCBidXQgd2UgY2FuIG9mZmVyIGEgbW9yZSBwcmVjaXNlIGVycm9yIG1lc3NhZ2UgaGVyZSByYXRoZXIgdGhhblxuICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyhudWxsKSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gYXJyYXkuJykpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJ1snICsgaSArICddJyk7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgaWYgKCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBzaW5nbGUgUmVhY3RFbGVtZW50LicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcihleHBlY3RlZENsYXNzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGlmICghKHByb3BzW3Byb3BOYW1lXSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHZhciBhY3R1YWxDbGFzc05hbWUgPSBnZXRDbGFzc05hbWUocHJvcHNbcHJvcE5hbWVdKTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgYWN0dWFsQ2xhc3NOYW1lICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdpbnN0YW5jZSBvZiBgJyArIGV4cGVjdGVkQ2xhc3NOYW1lICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZXhwZWN0ZWRWYWx1ZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVmFsdWVzKSkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBpbnN0YW5jZSBvZiBhcnJheS4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gZXhwZWN0ZWRWYWx1ZXNbaV0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBvbmUgb2YgJyArIHZhbHVlc1N0cmluZyArICcuJykpO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIG9iamVjdC4nKSk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgIGlmIChwcm9wVmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSk7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXlPZlR5cGVDaGVja2VycykpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS4nKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5KTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wVmFsdWUgPT09IG51bGwgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKHByb3BWYWx1ZSk7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gcHJvcFZhbHVlLmVudHJpZXMpIHtcbiAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLlxuICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gRXF1aXZhbGVudCBvZiBgdHlwZW9mYCBidXQgd2l0aCBzcGVjaWFsIGhhbmRsaW5nIGZvciBhcnJheSBhbmQgcmVnZXhwLlxuZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gJ2FycmF5JztcbiAgfVxuICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuICAgIC8vICdvYmplY3QnIGZvciB0eXBlb2YgYSBSZWdFeHAuIFdlJ2xsIG5vcm1hbGl6ZSB0aGlzIGhlcmUgc28gdGhhdCAvYmxhL1xuICAgIC8vIHBhc3NlcyBQcm9wVHlwZXMub2JqZWN0LlxuICAgIHJldHVybiAnb2JqZWN0JztcbiAgfVxuICByZXR1cm4gcHJvcFR5cGU7XG59XG5cbi8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbi8vIFNlZSBgY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXJgLlxuZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG4gIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gIGlmIChwcm9wVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgcmV0dXJuICdkYXRlJztcbiAgICB9IGVsc2UgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvcFR5cGU7XG59XG5cbi8vIFJldHVybnMgY2xhc3MgbmFtZSBvZiB0aGUgb2JqZWN0LCBpZiBhbnkuXG5mdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gIGlmICghcHJvcFZhbHVlLmNvbnN0cnVjdG9yIHx8ICFwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgIHJldHVybiAnPDxhbm9ueW1vdXM+Pic7XG4gIH1cbiAgcmV0dXJuIHByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKCcuL0NhbGxiYWNrUXVldWUnKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0RE9NRmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9SZWFjdERPTUZlYXR1cmVGbGFncycpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5wdXRTZWxlY3Rpb24nKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNhY3Rpb24nKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCwgd2hlbiBwb3NzaWJsZSwgdGhlIHNlbGVjdGlvbiByYW5nZSAoY3VycmVudGx5IHNlbGVjdGVkIHRleHRcbiAqIGlucHV0KSBpcyBub3QgZGlzdHVyYmVkIGJ5IHBlcmZvcm1pbmcgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgU0VMRUNUSU9OX1JFU1RPUkFUSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7U2VsZWN0aW9ufSBTZWxlY3Rpb24gaW5mb3JtYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbkluZm9ybWF0aW9uLFxuICAvKipcbiAgICogQHBhcmFtIHtTZWxlY3Rpb259IHNlbCBTZWxlY3Rpb24gaW5mb3JtYXRpb24gcmV0dXJuZWQgZnJvbSBgaW5pdGlhbGl6ZWAuXG4gICAqL1xuICBjbG9zZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5yZXN0b3JlU2VsZWN0aW9uXG59O1xuXG4vKipcbiAqIFN1cHByZXNzZXMgZXZlbnRzIChibHVyL2ZvY3VzKSB0aGF0IGNvdWxkIGJlIGluYWR2ZXJ0ZW50bHkgZGlzcGF0Y2hlZCBkdWUgdG9cbiAqIGhpZ2ggbGV2ZWwgRE9NIG1hbmlwdWxhdGlvbnMgKGxpa2UgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgYSB0ZXh0IGlucHV0IGZyb20gdGhlXG4gKiBET00pLlxuICovXG52YXIgRVZFTlRfU1VQUFJFU1NJT04gPSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUaGUgZW5hYmxlZCBzdGF0dXMgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlXG4gICAqIHRoZSByZWNvbmNpbGlhdGlvbi5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudGx5RW5hYmxlZCA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pc0VuYWJsZWQoKTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgcmV0dXJuIGN1cnJlbnRseUVuYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJldmlvdXNseUVuYWJsZWQgRW5hYmxlZCBzdGF0dXMgb2ZcbiAgICogICBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBiZWZvcmUgdGhlIHJlY29uY2lsaWF0aW9uIG9jY3VycmVkLiBgY2xvc2VgXG4gICAqICAgcmVzdG9yZXMgdGhlIHByZXZpb3VzIHZhbHVlLlxuICAgKi9cbiAgY2xvc2U6IGZ1bmN0aW9uIChwcmV2aW91c2x5RW5hYmxlZCkge1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKHByZXZpb3VzbHlFbmFibGVkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm92aWRlcyBhIHF1ZXVlIGZvciBjb2xsZWN0aW5nIGBjb21wb25lbnREaWRNb3VudGAgYW5kXG4gKiBgY29tcG9uZW50RGlkVXBkYXRlYCBjYWxsYmFja3MgZHVyaW5nIHRoZSB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbnZhciBPTl9ET01fUkVBRFlfUVVFVUVJTkcgPSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYWwgYG9uRE9NUmVhZHlgIHF1ZXVlLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJlc2V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFmdGVyIERPTSBpcyBmbHVzaGVkLCBpbnZva2UgYWxsIHJlZ2lzdGVyZWQgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcy5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkubm90aWZ5QWxsKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRXhlY3V0ZWQgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYFRyYW5zYWN0aW9uYCBpbnN0YW5jZS4gQ29uc2lkZXIgdGhlc2UgYXNcbiAqIGJlaW5nIG1lbWJlciBtZXRob2RzLCBidXQgd2l0aCBhbiBpbXBsaWVkIG9yZGVyaW5nIHdoaWxlIGJlaW5nIGlzb2xhdGVkIGZyb21cbiAqIGVhY2ggb3RoZXIuXG4gKi9cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtTRUxFQ1RJT05fUkVTVE9SQVRJT04sIEVWRU5UX1NVUFBSRVNTSU9OLCBPTl9ET01fUkVBRFlfUVVFVUVJTkddO1xuXG4vKipcbiAqIEN1cnJlbnRseTpcbiAqIC0gVGhlIG9yZGVyIHRoYXQgdGhlc2UgYXJlIGxpc3RlZCBpbiB0aGUgdHJhbnNhY3Rpb24gaXMgY3JpdGljYWw6XG4gKiAtIFN1cHByZXNzZXMgZXZlbnRzLlxuICogLSBSZXN0b3JlcyBzZWxlY3Rpb24gcmFuZ2UuXG4gKlxuICogRnV0dXJlOlxuICogLSBSZXN0b3JlIGRvY3VtZW50L292ZXJmbG93IHNjcm9sbCBwb3NpdGlvbnMgdGhhdCB3ZXJlIHVuaW50ZW50aW9uYWxseVxuICogICBtb2RpZmllZCB2aWEgRE9NIGluc2VydGlvbnMgYWJvdmUgdGhlIHRvcCB2aWV3cG9ydCBib3VuZGFyeS5cbiAqIC0gSW1wbGVtZW50L2ludGVncmF0ZSB3aXRoIGN1c3RvbWl6ZWQgY29uc3RyYWludCBiYXNlZCBsYXlvdXQgc3lzdGVtIGFuZCBrZWVwXG4gKiAgIHRyYWNrIG9mIHdoaWNoIGRpbWVuc2lvbnMgbXVzdCBiZSByZW1lYXN1cmVkLlxuICpcbiAqIEBjbGFzcyBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oZm9yY2VIVE1MKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgLy8gT25seSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgcmVhbGx5IG5lZWRzIHRoaXMgb3B0aW9uIChzZWVcbiAgLy8gYFJlYWN0U2VydmVyUmVuZGVyaW5nYCksIGJ1dCBzZXJ2ZXItc2lkZSB1c2VzXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uYCBpbnN0ZWFkLiBUaGlzIG9wdGlvbiBpcyBoZXJlIHNvIHRoYXQgaXQnc1xuICAvLyBhY2Nlc3NpYmxlIGFuZCBkZWZhdWx0cyB0byBmYWxzZSB3aGVuIGBSZWFjdERPTUNvbXBvbmVudGAgYW5kXG4gIC8vIGBSZWFjdFRleHRDb21wb25lbnRgIGNoZWNrcyBpdCBpbiBgbW91bnRDb21wb25lbnRgLmBcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IGZhbHNlO1xuICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuICB0aGlzLnVzZUNyZWF0ZUVsZW1lbnQgPSAhZm9yY2VIVE1MICYmIFJlYWN0RE9NRmVhdHVyZUZsYWdzLnVzZUNyZWF0ZUVsZW1lbnQ7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheTxvYmplY3Q+fSBMaXN0IG9mIG9wZXJhdGlvbiB3cmFwIHByb2NlZHVyZXMuXG4gICAqICAgVE9ETzogY29udmVydCB0byBhcnJheTxUcmFuc2FjdGlvbldyYXBwZXI+XG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cbiAgICovXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeTtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcywgYW5kIHdpbGwgaW52b2tlIHRoaXMgYmVmb3JlIGFsbG93aW5nIHRoaXNcbiAgICogaW5zdGFuY2UgdG8gYmUgcmV1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLnJlYWN0TW91bnRSZWFkeSk7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBudWxsO1xuICB9XG59O1xuXG5hc3NpZ24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCBNaXhpbik7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJlZiA9IHJlcXVpcmUoJy4vUmVhY3RSZWYnKTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gY2FsbCBSZWFjdFJlZi5hdHRhY2hSZWZzIHdpdGggdGhpcyBjb21wb3NpdGUgY29tcG9uZW50LCBzcGxpdCBvdXRcbiAqIHRvIGF2b2lkIGFsbG9jYXRpb25zIGluIHRoZSB0cmFuc2FjdGlvbiBtb3VudC1yZWFkeSBxdWV1ZS5cbiAqL1xuZnVuY3Rpb24gYXR0YWNoUmVmcygpIHtcbiAgUmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLCB0aGlzLl9jdXJyZW50RWxlbWVudCk7XG59XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSB7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCByb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIG1hcmt1cCA9IGludGVybmFsSW5zdGFuY2UubW91bnRDb21wb25lbnQocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50ICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnJlZiAhPSBudWxsKSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH1cbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIFJlYWN0UmVmLmRldGFjaFJlZnMoaW50ZXJuYWxJbnN0YW5jZSwgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQpO1xuICAgIGludGVybmFsSW5zdGFuY2UudW5tb3VudENvbXBvbmVudCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSBjb21wb25lbnQgdXNpbmcgYSBuZXcgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkVsZW1lbnQgPSBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcblxuICAgIGlmIChuZXh0RWxlbWVudCA9PT0gcHJldkVsZW1lbnQgJiYgY29udGV4dCA9PT0gaW50ZXJuYWxJbnN0YW5jZS5fY29udGV4dCkge1xuICAgICAgLy8gU2luY2UgZWxlbWVudHMgYXJlIGltbXV0YWJsZSBhZnRlciB0aGUgb3duZXIgaXMgcmVuZGVyZWQsXG4gICAgICAvLyB3ZSBjYW4gZG8gYSBjaGVhcCBpZGVudGl0eSBjb21wYXJlIGhlcmUgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYVxuICAgICAgLy8gc3VwZXJmbHVvdXMgcmVjb25jaWxlLiBJdCdzIHBvc3NpYmxlIGZvciBzdGF0ZSB0byBiZSBtdXRhYmxlIGJ1dCBzdWNoXG4gICAgICAvLyBjaGFuZ2Ugc2hvdWxkIHRyaWdnZXIgYW4gdXBkYXRlIG9mIHRoZSBvd25lciB3aGljaCB3b3VsZCByZWNyZWF0ZVxuICAgICAgLy8gdGhlIGVsZW1lbnQuIFdlIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gb3duZXIgc2luY2VcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGFuIGVsZW1lbnQgY3JlYXRlZCBvdXRzaWRlIGEgY29tcG9zaXRlIHRvIGJlXG4gICAgICAvLyBkZWVwbHkgbXV0YXRlZCBhbmQgcmV1c2VkLlxuXG4gICAgICAvLyBUT0RPOiBCYWlsaW5nIG91dCBlYXJseSBpcyBqdXN0IGEgcGVyZiBvcHRpbWl6YXRpb24gcmlnaHQ/XG4gICAgICAvLyBUT0RPOiBSZW1vdmluZyB0aGUgcmV0dXJuIHN0YXRlbWVudCBzaG91bGQgYWZmZWN0IGNvcnJlY3RuZXNzP1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByZWZzQ2hhbmdlZCA9IFJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KTtcblxuICAgIGlmIChyZWZzQ2hhbmdlZCkge1xuICAgICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBwcmV2RWxlbWVudCk7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50KG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG5cbiAgICBpZiAocmVmc0NoYW5nZWQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcywgaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGbHVzaCBhbnkgZGlydHkgY2hhbmdlcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgdHJhbnNhY3Rpb24pIHtcbiAgICBpbnRlcm5hbEluc3RhbmNlLnBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSh0cmFuc2FjdGlvbik7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlY29uY2lsZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UmVmXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RPd25lcicpO1xuXG52YXIgUmVhY3RSZWYgPSB7fTtcblxuZnVuY3Rpb24gYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50LCBvd25lcikge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZihjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGVnYWN5IHJlZlxuICAgIFJlYWN0T3duZXIuYWRkQ29tcG9uZW50QXNSZWZUbyhjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYobnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGVnYWN5IHJlZlxuICAgIFJlYWN0T3duZXIucmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKGNvbXBvbmVudCwgcmVmLCBvd25lcik7XG4gIH1cbn1cblxuUmVhY3RSZWYuYXR0YWNoUmVmcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIGlmIChyZWYgIT0gbnVsbCkge1xuICAgIGF0dGFjaFJlZihyZWYsIGluc3RhbmNlLCBlbGVtZW50Ll9vd25lcik7XG4gIH1cbn07XG5cblJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMgPSBmdW5jdGlvbiAocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSB7XG4gIC8vIElmIGVpdGhlciB0aGUgb3duZXIgb3IgYSBgcmVmYCBoYXMgY2hhbmdlZCwgbWFrZSBzdXJlIHRoZSBuZXdlc3Qgb3duZXJcbiAgLy8gaGFzIHN0b3JlZCBhIHJlZmVyZW5jZSB0byBgdGhpc2AsIGFuZCB0aGUgcHJldmlvdXMgb3duZXIgKGlmIGRpZmZlcmVudClcbiAgLy8gaGFzIGZvcmdvdHRlbiB0aGUgcmVmZXJlbmNlIHRvIGB0aGlzYC4gV2UgdXNlIHRoZSBlbGVtZW50IGluc3RlYWRcbiAgLy8gb2YgdGhlIHB1YmxpYyB0aGlzLnByb3BzIGJlY2F1c2UgdGhlIHBvc3QgcHJvY2Vzc2luZyBjYW5ub3QgZGV0ZXJtaW5lXG4gIC8vIGEgcmVmLiBUaGUgcmVmIGNvbmNlcHR1YWxseSBsaXZlcyBvbiB0aGUgZWxlbWVudC5cblxuICAvLyBUT0RPOiBTaG91bGQgdGhpcyBldmVuIGJlIHBvc3NpYmxlPyBUaGUgb3duZXIgY2Fubm90IGNoYW5nZSBiZWNhdXNlXG4gIC8vIGl0J3MgZm9yYmlkZGVuIGJ5IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LiBUaGUgcmVmIGNhbiBjaGFuZ2VcbiAgLy8gaWYgeW91IHN3YXAgdGhlIGtleXMgb2YgYnV0IG5vdCB0aGUgcmVmcy4gUmVjb25zaWRlciB3aGVyZSB0aGlzIGNoZWNrXG4gIC8vIGlzIG1hZGUuIEl0IHByb2JhYmx5IGJlbG9uZ3Mgd2hlcmUgdGhlIGtleSBjaGVja2luZyBhbmRcbiAgLy8gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCBpcyBkb25lLlxuXG4gIHZhciBwcmV2RW1wdHkgPSBwcmV2RWxlbWVudCA9PT0gbnVsbCB8fCBwcmV2RWxlbWVudCA9PT0gZmFsc2U7XG4gIHZhciBuZXh0RW1wdHkgPSBuZXh0RWxlbWVudCA9PT0gbnVsbCB8fCBuZXh0RWxlbWVudCA9PT0gZmFsc2U7XG5cbiAgcmV0dXJuKFxuICAgIC8vIFRoaXMgaGFzIGEgZmV3IGZhbHNlIHBvc2l0aXZlcyB3L3IvdCBlbXB0eSBjb21wb25lbnRzLlxuICAgIHByZXZFbXB0eSB8fCBuZXh0RW1wdHkgfHwgbmV4dEVsZW1lbnQuX293bmVyICE9PSBwcmV2RWxlbWVudC5fb3duZXIgfHwgbmV4dEVsZW1lbnQucmVmICE9PSBwcmV2RWxlbWVudC5yZWZcbiAgKTtcbn07XG5cblJlYWN0UmVmLmRldGFjaFJlZnMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBkZXRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVmOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJvb3RJbmRleEluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IF9jcmVhdGVSZWFjdFJvb3RJbmRleFxuICAgKi9cbiAgaW5qZWN0Q3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uIChfY3JlYXRlUmVhY3RSb290SW5kZXgpIHtcbiAgICBSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCA9IF9jcmVhdGVSZWFjdFJvb3RJbmRleDtcbiAgfVxufTtcblxudmFyIFJlYWN0Um9vdEluZGV4ID0ge1xuICBjcmVhdGVSZWFjdFJvb3RJbmRleDogbnVsbCxcbiAgaW5qZWN0aW9uOiBSZWFjdFJvb3RJbmRleEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJvb3RJbmRleDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneSA9IHtcbiAgaXNCYXRjaGluZ1VwZGF0ZXM6IGZhbHNlLFxuICBiYXRjaGVkVXBkYXRlczogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaGVyZS4gRHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyaW5nIHdlIGRvbid0IHdhbnQgdG9cbiAgICAvLyBzY2hlZHVsZSBhbnkgdXBkYXRlcy4gV2Ugd2lsbCBzaW1wbHkgaWdub3JlIHRoZW0uXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5OyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyUmVuZGVyaW5nXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3knKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlSGFuZGxlcycpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKCcuL1JlYWN0TWFya3VwQ2hlY2tzdW0nKTtcbnZhciBSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneScpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24nKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSFRNTCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcoZWxlbWVudCkge1xuICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3JlbmRlclRvU3RyaW5nKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gIHZhciB0cmFuc2FjdGlvbjtcbiAgdHJ5IHtcbiAgICBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5KTtcblxuICAgIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgdHJhbnNhY3Rpb24gPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZChmYWxzZSk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIG51bGwpO1xuICAgICAgdmFyIG1hcmt1cCA9IGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgZW1wdHlPYmplY3QpO1xuICAgICAgcmV0dXJuIFJlYWN0TWFya3VwQ2hlY2tzdW0uYWRkQ2hlY2tzdW1Ub01hcmt1cChtYXJrdXApO1xuICAgIH0sIG51bGwpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gICAgLy8gUmV2ZXJ0IHRvIHRoZSBET00gYmF0Y2hpbmcgc3RyYXRlZ3kgc2luY2UgdGhlc2UgdHdvIHJlbmRlcmVyc1xuICAgIC8vIGN1cnJlbnRseSBzaGFyZSB0aGVzZSBzdGF0ZWZ1bCBtb2R1bGVzLlxuICAgIFJlYWN0VXBkYXRlcy5pbmplY3Rpb24uaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBIVE1MIG1hcmt1cCwgd2l0aG91dCB0aGUgZXh0cmEgUmVhY3QgSUQgYW5kIGNoZWNrc3VtXG4gKiAoZm9yIGdlbmVyYXRpbmcgc3RhdGljIHBhZ2VzKVxuICovXG5mdW5jdGlvbiByZW5kZXJUb1N0YXRpY01hcmt1cChlbGVtZW50KSB7XG4gICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVuZGVyVG9TdGF0aWNNYXJrdXAoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIHRyYW5zYWN0aW9uO1xuICB0cnkge1xuICAgIFJlYWN0VXBkYXRlcy5pbmplY3Rpb24uaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kpO1xuXG4gICAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB0cmFuc2FjdGlvbiA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKHRydWUpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LCBudWxsKTtcbiAgICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudChpZCwgdHJhbnNhY3Rpb24sIGVtcHR5T2JqZWN0KTtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIC8vIFJldmVydCB0byB0aGUgRE9NIGJhdGNoaW5nIHN0cmF0ZWd5IHNpbmNlIHRoZXNlIHR3byByZW5kZXJlcnNcbiAgICAvLyBjdXJyZW50bHkgc2hhcmUgdGhlc2Ugc3RhdGVmdWwgbW9kdWxlcy5cbiAgICBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlbmRlclRvU3RyaW5nOiByZW5kZXJUb1N0cmluZyxcbiAgcmVuZGVyVG9TdGF0aWNNYXJrdXA6IHJlbmRlclRvU3RhdGljTWFya3VwXG59O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JUWlhKMlpYSlNaVzVrWlhKcGJtY3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCMGVYQmxZMmhsWTJ0eklITjBZWFJwWXkxdmJteDVYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnVW1WaFkzUlRaWEoyWlhKU1pXNWtaWEpwYm1kY2JpQXFMMXh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1VtVmhZM1JFWldaaGRXeDBRbUYwWTJocGJtZFRkSEpoZEdWbmVTQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUkVaV1poZFd4MFFtRjBZMmhwYm1kVGRISmhkR1ZuZVNjcE8xeHVkbUZ5SUZKbFlXTjBSV3hsYldWdWRDQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUkZiR1Z0Wlc1MEp5azdYRzUyWVhJZ1VtVmhZM1JKYm5OMFlXNWpaVWhoYm1Sc1pYTWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBTVzV6ZEdGdVkyVklZVzVrYkdWekp5azdYRzUyWVhJZ1VtVmhZM1JOWVhKcmRYQkRhR1ZqYTNOMWJTQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUk5ZWEpyZFhCRGFHVmphM04xYlNjcE8xeHVkbUZ5SUZKbFlXTjBVMlZ5ZG1WeVFtRjBZMmhwYm1kVGRISmhkR1ZuZVNBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSVFpYSjJaWEpDWVhSamFHbHVaMU4wY21GMFpXZDVKeWs3WEc1MllYSWdVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2YmlBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2YmljcE8xeHVkbUZ5SUZKbFlXTjBWWEJrWVhSbGN5QTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUlZjR1JoZEdWekp5azdYRzVjYm5aaGNpQmxiWEIwZVU5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSjJaaWFuTXZiR2xpTDJWdGNIUjVUMkpxWldOMEp5azdYRzUyWVhJZ2FXNXpkR0Z1ZEdsaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZENBOUlISmxjWFZwY21Vb0p5NHZhVzV6ZEdGdWRHbGhkR1ZTWldGamRFTnZiWEJ2Ym1WdWRDY3BPMXh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMmx1ZG1GeWFXRnVkQ2NwTzF4dVhHNHZLaXBjYmlBcUlFQndZWEpoYlNCN1VtVmhZM1JGYkdWdFpXNTBmU0JsYkdWdFpXNTBYRzRnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUhSb1pTQklWRTFNSUcxaGNtdDFjRnh1SUNvdlhHNW1kVzVqZEdsdmJpQnlaVzVrWlhKVWIxTjBjbWx1WnlobGJHVnRaVzUwS1NCN1hHNGdJQ0ZTWldGamRFVnNaVzFsYm5RdWFYTldZV3hwWkVWc1pXMWxiblFvWld4bGJXVnVkQ2tnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5jbVZ1WkdWeVZHOVRkSEpwYm1jb0tUb2dXVzkxSUcxMWMzUWdjR0Z6Y3lCaElIWmhiR2xrSUZKbFlXTjBSV3hsYldWdWRDNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNWNiaUFnZG1GeUlIUnlZVzV6WVdOMGFXOXVPMXh1SUNCMGNua2dlMXh1SUNBZ0lGSmxZV04wVlhCa1lYUmxjeTVwYm1wbFkzUnBiMjR1YVc1cVpXTjBRbUYwWTJocGJtZFRkSEpoZEdWbmVTaFNaV0ZqZEZObGNuWmxja0poZEdOb2FXNW5VM1J5WVhSbFoza3BPMXh1WEc0Z0lDQWdkbUZ5SUdsa0lEMGdVbVZoWTNSSmJuTjBZVzVqWlVoaGJtUnNaWE11WTNKbFlYUmxVbVZoWTNSU2IyOTBTVVFvS1R0Y2JpQWdJQ0IwY21GdWMyRmpkR2x2YmlBOUlGSmxZV04wVTJWeWRtVnlVbVZ1WkdWeWFXNW5WSEpoYm5OaFkzUnBiMjR1WjJWMFVHOXZiR1ZrS0daaGJITmxLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBjbUZ1YzJGamRHbHZiaTV3WlhKbWIzSnRLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUhaaGNpQmpiMjF3YjI1bGJuUkpibk4wWVc1alpTQTlJR2x1YzNSaGJuUnBZWFJsVW1WaFkzUkRiMjF3YjI1bGJuUW9aV3hsYldWdWRDd2diblZzYkNrN1hHNGdJQ0FnSUNCMllYSWdiV0Z5YTNWd0lEMGdZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVXViVzkxYm5SRGIyMXdiMjVsYm5Rb2FXUXNJSFJ5WVc1ellXTjBhVzl1TENCbGJYQjBlVTlpYW1WamRDazdYRzRnSUNBZ0lDQnlaWFIxY200Z1VtVmhZM1JOWVhKcmRYQkRhR1ZqYTNOMWJTNWhaR1JEYUdWamEzTjFiVlJ2VFdGeWEzVndLRzFoY210MWNDazdYRzRnSUNBZ2ZTd2diblZzYkNrN1hHNGdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2Ymk1eVpXeGxZWE5sS0hSeVlXNXpZV04wYVc5dUtUdGNiaUFnSUNBdkx5QlNaWFpsY25RZ2RHOGdkR2hsSUVSUFRTQmlZWFJqYUdsdVp5QnpkSEpoZEdWbmVTQnphVzVqWlNCMGFHVnpaU0IwZDI4Z2NtVnVaR1Z5WlhKelhHNGdJQ0FnTHk4Z1kzVnljbVZ1ZEd4NUlITm9ZWEpsSUhSb1pYTmxJSE4wWVhSbFpuVnNJRzF2WkhWc1pYTXVYRzRnSUNBZ1VtVmhZM1JWY0dSaGRHVnpMbWx1YW1WamRHbHZiaTVwYm1wbFkzUkNZWFJqYUdsdVoxTjBjbUYwWldkNUtGSmxZV04wUkdWbVlYVnNkRUpoZEdOb2FXNW5VM1J5WVhSbFoza3BPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUUhCaGNtRnRJSHRTWldGamRFVnNaVzFsYm5SOUlHVnNaVzFsYm5SY2JpQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdkR2hsSUVoVVRVd2diV0Z5YTNWd0xDQjNhWFJvYjNWMElIUm9aU0JsZUhSeVlTQlNaV0ZqZENCSlJDQmhibVFnWTJobFkydHpkVzFjYmlBcUlDaG1iM0lnWjJWdVpYSmhkR2x1WnlCemRHRjBhV01nY0dGblpYTXBYRzRnS2k5Y2JtWjFibU4wYVc5dUlISmxibVJsY2xSdlUzUmhkR2xqVFdGeWEzVndLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lWSmxZV04wUld4bGJXVnVkQzVwYzFaaGJHbGtSV3hsYldWdWRDaGxiR1Z0Wlc1MEtTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkeVpXNWtaWEpVYjFOMFlYUnBZMDFoY210MWNDZ3BPaUJaYjNVZ2JYVnpkQ0J3WVhOeklHRWdkbUZzYVdRZ1VtVmhZM1JGYkdWdFpXNTBMaWNwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNCMllYSWdkSEpoYm5OaFkzUnBiMjQ3WEc0Z0lIUnllU0I3WEc0Z0lDQWdVbVZoWTNSVmNHUmhkR1Z6TG1sdWFtVmpkR2x2Ymk1cGJtcGxZM1JDWVhSamFHbHVaMU4wY21GMFpXZDVLRkpsWVdOMFUyVnlkbVZ5UW1GMFkyaHBibWRUZEhKaGRHVm5lU2s3WEc1Y2JpQWdJQ0IyWVhJZ2FXUWdQU0JTWldGamRFbHVjM1JoYm1ObFNHRnVaR3hsY3k1amNtVmhkR1ZTWldGamRGSnZiM1JKUkNncE8xeHVJQ0FnSUhSeVlXNXpZV04wYVc5dUlEMGdVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2Ymk1blpYUlFiMjlzWldRb2RISjFaU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkSEpoYm5OaFkzUnBiMjR1Y0dWeVptOXliU2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCMllYSWdZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVWdQU0JwYm5OMFlXNTBhV0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBLR1ZzWlcxbGJuUXNJRzUxYkd3cE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTG0xdmRXNTBRMjl0Y0c5dVpXNTBLR2xrTENCMGNtRnVjMkZqZEdsdmJpd2daVzF3ZEhsUFltcGxZM1FwTzF4dUlDQWdJSDBzSUc1MWJHd3BPMXh1SUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUZKbFlXTjBVMlZ5ZG1WeVVtVnVaR1Z5YVc1blZISmhibk5oWTNScGIyNHVjbVZzWldGelpTaDBjbUZ1YzJGamRHbHZiaWs3WEc0Z0lDQWdMeThnVW1WMlpYSjBJSFJ2SUhSb1pTQkVUMDBnWW1GMFkyaHBibWNnYzNSeVlYUmxaM2tnYzJsdVkyVWdkR2hsYzJVZ2RIZHZJSEpsYm1SbGNtVnljMXh1SUNBZ0lDOHZJR04xY25KbGJuUnNlU0J6YUdGeVpTQjBhR1Z6WlNCemRHRjBaV1oxYkNCdGIyUjFiR1Z6TGx4dUlDQWdJRkpsWVdOMFZYQmtZWFJsY3k1cGJtcGxZM1JwYjI0dWFXNXFaV04wUW1GMFkyaHBibWRUZEhKaGRHVm5lU2hTWldGamRFUmxabUYxYkhSQ1lYUmphR2x1WjFOMGNtRjBaV2Q1S1R0Y2JpQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnY21WdVpHVnlWRzlUZEhKcGJtYzZJSEpsYm1SbGNsUnZVM1J5YVc1bkxGeHVJQ0J5Wlc1a1pYSlViMU4wWVhScFkwMWhjbXQxY0RvZ2NtVnVaR1Z5Vkc5VGRHRjBhV05OWVhKcmRYQmNibjA3SWwxOSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKCcuL0NhbGxiYWNrUXVldWUnKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNhY3Rpb24nKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogUHJvdmlkZXMgYSBgQ2FsbGJhY2tRdWV1ZWAgcXVldWUgZm9yIGNvbGxlY3RpbmcgYG9uRE9NUmVhZHlgIGNhbGxiYWNrc1xuICogZHVyaW5nIHRoZSBwZXJmb3JtaW5nIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIE9OX0RPTV9SRUFEWV9RVUVVRUlORyA9IHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnRlcm5hbCBgb25ET01SZWFkeWAgcXVldWUuXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcbiAgfSxcblxuICBjbG9zZTogZW1wdHlGdW5jdGlvblxufTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW09OX0RPTV9SRUFEWV9RVUVVRUlOR107XG5cbi8qKlxuICogQGNsYXNzIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVuZGVyVG9TdGF0aWNNYXJrdXBcbiAqL1xuZnVuY3Rpb24gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbihyZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cDtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy51c2VDcmVhdGVFbGVtZW50ID0gZmFsc2U7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheX0gRW1wdHkgbGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWR1cmVzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJldXNlZC5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcbiAgfVxufTtcblxuYXNzaWduKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGZsYXR0ZW5DaGlsZHJlbiA9IHJlcXVpcmUoJy4vZmxhdHRlbkNoaWxkcmVuJyk7XG5cbnZhciBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcgPSB7XG4gIC8qKlxuICAgKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuIEp1c3RcbiAgICogc2ltcGxlIHN5bnRhY3RpYyBzdWdhciBhcm91bmQgZmxhdHRlbkNoaWxkcmVuKCkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gICAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAgICovXG4gIGdldENoaWxkTWFwcGluZzogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gZmxhdHRlbkNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSxcblxuICAvKipcbiAgICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gICAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICAgKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICAgKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAgICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAgICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAgICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gICAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAgICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICAgKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAgICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gICAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gICAqL1xuICBtZXJnZUNoaWxkTWFwcGluZ3M6IGZ1bmN0aW9uIChwcmV2LCBuZXh0KSB7XG4gICAgcHJldiA9IHByZXYgfHwge307XG4gICAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIG5leHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwcmV2W2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gICAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcbiAgICB2YXIgbmV4dEtleXNQZW5kaW5nID0ge307XG5cbiAgICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KHByZXZLZXkpKSB7XG4gICAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcbiAgICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChuZXh0S2V5c1BlbmRpbmcuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gICAgfVxuXG4gICAgLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG4gICAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZE1hcHBpbmc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFRyYW5zaXRpb25FdmVudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbi8qKlxuICogRVZFTlRfTkFNRV9NQVAgaXMgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggZXZlbnQgZmlyZWQgd2hlbiBhXG4gKiB0cmFuc2l0aW9uL2FuaW1hdGlvbiBlbmRzLCBiYXNlZCBvbiB0aGUgc3R5bGUgcHJvcGVydHkgdXNlZCB0b1xuICogZGVmaW5lIHRoYXQgZXZlbnQuXG4gKi9cbnZhciBFVkVOVF9OQU1FX01BUCA9IHtcbiAgdHJhbnNpdGlvbmVuZDoge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ21velRyYW5zaXRpb25FbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvVHJhbnNpdGlvbkVuZCcsXG4gICAgJ21zVHJhbnNpdGlvbic6ICdNU1RyYW5zaXRpb25FbmQnXG4gIH0sXG5cbiAgYW5pbWF0aW9uZW5kOiB7XG4gICAgJ2FuaW1hdGlvbic6ICdhbmltYXRpb25lbmQnLFxuICAgICdXZWJraXRBbmltYXRpb24nOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcbiAgICAnTW96QW5pbWF0aW9uJzogJ21vekFuaW1hdGlvbkVuZCcsXG4gICAgJ09BbmltYXRpb24nOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgJ21zQW5pbWF0aW9uJzogJ01TQW5pbWF0aW9uRW5kJ1xuICB9XG59O1xuXG52YXIgZW5kRXZlbnRzID0gW107XG5cbmZ1bmN0aW9uIGRldGVjdEV2ZW50cygpIHtcbiAgdmFyIHRlc3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgc3R5bGUgPSB0ZXN0RWwuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2VhYmxlLCBhbmQgaWYgbm90IHJlbW92ZSB0aGVtXG4gIC8vIGZyb20gdGhlIG1hcFxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgRVZFTlRfTkFNRV9NQVAuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgfVxuXG4gIGlmICghKCdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgRVZFTlRfTkFNRV9NQVAudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uO1xuICB9XG5cbiAgZm9yICh2YXIgYmFzZUV2ZW50TmFtZSBpbiBFVkVOVF9OQU1FX01BUCkge1xuICAgIHZhciBiYXNlRXZlbnRzID0gRVZFTlRfTkFNRV9NQVBbYmFzZUV2ZW50TmFtZV07XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIGJhc2VFdmVudHMpIHtcbiAgICAgIGlmIChzdHlsZU5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgZW5kRXZlbnRzLnB1c2goYmFzZUV2ZW50c1tzdHlsZU5hbWVdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgZGV0ZWN0RXZlbnRzKCk7XG59XG5cbi8vIFdlIHVzZSB0aGUgcmF3IHthZGR8cmVtb3ZlfUV2ZW50TGlzdGVuZXIoKSBjYWxsIGJlY2F1c2UgRXZlbnRMaXN0ZW5lclxuLy8gZG9lcyBub3Qga25vdyBob3cgdG8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBhbmQgd2UgcmVhbGx5IHNob3VsZFxuLy8gY2xlYW4gdXAuIEFsc28sIHRoZXNlIGV2ZW50cyBhcmUgbm90IHRyaWdnZXJlZCBpbiBvbGRlciBicm93c2Vyc1xuLy8gc28gd2Ugc2hvdWxkIGJlIEEtT0sgaGVyZS5cblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIpIHtcbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lcikge1xuICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudExpc3RlbmVyLCBmYWxzZSk7XG59XG5cbnZhciBSZWFjdFRyYW5zaXRpb25FdmVudHMgPSB7XG4gIGFkZEVuZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChub2RlLCBldmVudExpc3RlbmVyKSB7XG4gICAgaWYgKGVuZEV2ZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIElmIENTUyB0cmFuc2l0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCwgdHJpZ2dlciBhbiBcImVuZCBhbmltYXRpb25cIlxuICAgICAgLy8gZXZlbnQgaW1tZWRpYXRlbHkuXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChldmVudExpc3RlbmVyLCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZW5kRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGVuZEV2ZW50KSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGVuZEV2ZW50LCBldmVudExpc3RlbmVyKTtcbiAgICB9KTtcbiAgfSxcblxuICByZW1vdmVFbmRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAobm9kZSwgZXZlbnRMaXN0ZW5lcikge1xuICAgIGlmIChlbmRFdmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVuZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbmRFdmVudCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRFdmVudCwgZXZlbnRMaXN0ZW5lcik7XG4gICAgfSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUcmFuc2l0aW9uRXZlbnRzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFRyYW5zaXRpb25Hcm91cFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgnLi9SZWFjdCcpO1xudmFyIFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZyA9IHJlcXVpcmUoJy4vUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xuXG52YXIgUmVhY3RUcmFuc2l0aW9uR3JvdXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RUcmFuc2l0aW9uR3JvdXAnLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNvbXBvbmVudDogUmVhY3QuUHJvcFR5cGVzLmFueSxcbiAgICBjaGlsZEZhY3Rvcnk6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBvbmVudDogJ3NwYW4nLFxuICAgICAgY2hpbGRGYWN0b3J5OiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnRcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZyh0aGlzLnByb3BzLmNoaWxkcmVuKVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5cyA9IHt9O1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICB0aGlzLmtleXNUb0xlYXZlID0gW107XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5pdGlhbENoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG4gICAgZm9yICh2YXIga2V5IGluIGluaXRpYWxDaGlsZE1hcHBpbmcpIHtcbiAgICAgIGlmIChpbml0aWFsQ2hpbGRNYXBwaW5nW2tleV0pIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtQXBwZWFyKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNoaWxkcmVuOiBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcubWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpXG4gICAgfSk7XG5cbiAgICB2YXIga2V5O1xuXG4gICAgZm9yIChrZXkgaW4gbmV4dENoaWxkTWFwcGluZykge1xuICAgICAgdmFyIGhhc1ByZXYgPSBwcmV2Q2hpbGRNYXBwaW5nICYmIHByZXZDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgIGlmIChuZXh0Q2hpbGRNYXBwaW5nW2tleV0gJiYgIWhhc1ByZXYgJiYgIXRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSkge1xuICAgICAgICB0aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKSB7XG4gICAgICB2YXIgaGFzTmV4dCA9IG5leHRDaGlsZE1hcHBpbmcgJiYgbmV4dENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgaWYgKHByZXZDaGlsZE1hcHBpbmdba2V5XSAmJiAhaGFzTmV4dCAmJiAhdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldKSB7XG4gICAgICAgIHRoaXMua2V5c1RvTGVhdmUucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHdlIHdhbnQgdG8gc29tZWRheSBjaGVjayBmb3IgcmVvcmRlcmluZywgd2UgY291bGQgZG8gaXQgaGVyZS5cbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5c1RvRW50ZXIgPSB0aGlzLmtleXNUb0VudGVyO1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICBrZXlzVG9FbnRlci5mb3JFYWNoKHRoaXMucGVyZm9ybUVudGVyKTtcblxuICAgIHZhciBrZXlzVG9MZWF2ZSA9IHRoaXMua2V5c1RvTGVhdmU7XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICAgIGtleXNUb0xlYXZlLmZvckVhY2godGhpcy5wZXJmb3JtTGVhdmUpO1xuICB9LFxuXG4gIHBlcmZvcm1BcHBlYXI6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldO1xuXG4gICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbEFwcGVhcih0aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nLmJpbmQodGhpcywga2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hhbmRsZURvbmVBcHBlYXJpbmcoa2V5KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZURvbmVBcHBlYXJpbmc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5yZWZzW2tleV07XG4gICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRBcHBlYXIpIHtcbiAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRBcHBlYXIoKTtcbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgaWYgKCFjdXJyZW50Q2hpbGRNYXBwaW5nIHx8ICFjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBhcHBlYXJlZC4gUmVtb3ZlIGl0LlxuICAgICAgdGhpcy5wZXJmb3JtTGVhdmUoa2V5KTtcbiAgICB9XG4gIH0sXG5cbiAgcGVyZm9ybUVudGVyOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgIHZhciBjb21wb25lbnQgPSB0aGlzLnJlZnNba2V5XTtcblxuICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKHRoaXMuX2hhbmRsZURvbmVFbnRlcmluZy5iaW5kKHRoaXMsIGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYW5kbGVEb25lRW50ZXJpbmcoa2V5KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZURvbmVFbnRlcmluZzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjb21wb25lbnQgPSB0aGlzLnJlZnNba2V5XTtcbiAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEVudGVyKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkRW50ZXIoKTtcbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgaWYgKCFjdXJyZW50Q2hpbGRNYXBwaW5nIHx8ICFjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBlbnRlcmVkLiBSZW1vdmUgaXQuXG4gICAgICB0aGlzLnBlcmZvcm1MZWF2ZShrZXkpO1xuICAgIH1cbiAgfSxcblxuICBwZXJmb3JtTGVhdmU6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldO1xuICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbExlYXZlKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbExlYXZlKHRoaXMuX2hhbmRsZURvbmVMZWF2aW5nLmJpbmQodGhpcywga2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGlzIHNvbWV3aGF0IGRhbmdlcm91cyBiL2MgaXQgY2FsbHMgc2V0U3RhdGUoKVxuICAgICAgLy8gYWdhaW4sIGVmZmVjdGl2ZWx5IG11dGF0aW5nIHRoZSBjb21wb25lbnQgYmVmb3JlIGFsbCB0aGUgd29ya1xuICAgICAgLy8gaXMgZG9uZS5cbiAgICAgIHRoaXMuX2hhbmRsZURvbmVMZWF2aW5nKGtleSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVEb25lTGVhdmluZzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjb21wb25lbnQgPSB0aGlzLnJlZnNba2V5XTtcblxuICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkTGVhdmUpIHtcbiAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRMZWF2ZSgpO1xuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICBpZiAoY3VycmVudENoaWxkTWFwcGluZyAmJiBjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIC8vIFRoaXMgZW50ZXJlZCBhZ2FpbiBiZWZvcmUgaXQgZnVsbHkgbGVmdC4gQWRkIGl0IGFnYWluLlxuICAgICAgdGhpcy5wZXJmb3JtRW50ZXIoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIG5ld0NoaWxkcmVuID0gYXNzaWduKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG4gICAgICAgIGRlbGV0ZSBuZXdDaGlsZHJlbltrZXldO1xuICAgICAgICByZXR1cm4geyBjaGlsZHJlbjogbmV3Q2hpbGRyZW4gfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBUT0RPOiB3ZSBjb3VsZCBnZXQgcmlkIG9mIHRoZSBuZWVkIGZvciB0aGUgd3JhcHBlciBub2RlXG4gICAgLy8gYnkgY2xvbmluZyBhIHNpbmdsZSBjaGlsZFxuICAgIHZhciBjaGlsZHJlblRvUmVuZGVyID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuc3RhdGUuY2hpbGRyZW4pIHtcbiAgICAgIHZhciBjaGlsZCA9IHRoaXMuc3RhdGUuY2hpbGRyZW5ba2V5XTtcbiAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAvLyBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGxlYXZpbmcuXG4gICAgICAgIC8vIFRoZSBub3JtYWwgUmVhY3Qgd2F5IHRvIGRvIGl0IHdvbid0IHdvcmsgc2luY2UgdGhlIGNoaWxkIHdpbGwgaGF2ZVxuICAgICAgICAvLyBhbHJlYWR5IGJlZW4gcmVtb3ZlZC4gSW4gY2FzZSB5b3UgbmVlZCB0aGlzIGJlaGF2aW9yIHlvdSBjYW4gcHJvdmlkZVxuICAgICAgICAvLyBhIGNoaWxkRmFjdG9yeSBmdW5jdGlvbiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlXG4gICAgICAgIC8vIGxlYXZpbmcuXG4gICAgICAgIGNoaWxkcmVuVG9SZW5kZXIucHVzaChSZWFjdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZEZhY3RvcnkoY2hpbGQpLCB7IHJlZjoga2V5LCBrZXk6IGtleSB9KSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuY29tcG9uZW50LCB0aGlzLnByb3BzLCBjaGlsZHJlblRvUmVuZGVyKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUcmFuc2l0aW9uR3JvdXA7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RVcGRhdGVRdWV1ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpIHtcbiAgUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG59XG5cbmZ1bmN0aW9uIGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHB1YmxpY0luc3RhbmNlKTtcbiAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIE9ubHkgd2FybiB3aGVuIHdlIGhhdmUgYSBjYWxsZXJOYW1lLiBPdGhlcndpc2Ugd2Ugc2hvdWxkIGJlIHNpbGVudC5cbiAgICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNhbGxpbmcgZnJvbSBlbnF1ZXVlQ2FsbGJhY2suIFdlIGRvbid0IHdhbnQgdG8gd2FyblxuICAgICAgLy8gdGhlcmUgYmVjYXVzZSB3ZSBhbHJlYWR5IHdhcm5lZCBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgbGlmZWN5Y2xlIG1ldGhvZC5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFjYWxsZXJOYW1lLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCwgJyVzKC4uLik6IENhbm5vdCB1cGRhdGUgZHVyaW5nIGFuIGV4aXN0aW5nIHN0YXRlIHRyYW5zaXRpb24gJyArICcoc3VjaCBhcyB3aXRoaW4gYHJlbmRlcmApLiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgKyAnb2YgcHJvcHMgYW5kIHN0YXRlLicsIGNhbGxlck5hbWUpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIGludGVybmFsSW5zdGFuY2U7XG59XG5cbi8qKlxuICogUmVhY3RVcGRhdGVRdWV1ZSBhbGxvd3MgZm9yIHN0YXRlIHVwZGF0ZXMgdG8gYmUgc2NoZWR1bGVkIGludG8gYSBsYXRlclxuICogcmVjb25jaWxpYXRpb24gc3RlcC5cbiAqL1xudmFyIFJlYWN0VXBkYXRlUXVldWUgPSB7XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgICBpZiAob3duZXIgIT09IG51bGwpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcob3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyLCAnJXMgaXMgYWNjZXNzaW5nIGlzTW91bnRlZCBpbnNpZGUgaXRzIHJlbmRlcigpIGZ1bmN0aW9uLiAnICsgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICsgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgKyAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJywgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHB1YmxpY0luc3RhbmNlKTtcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgLy8gRHVyaW5nIGNvbXBvbmVudFdpbGxNb3VudCBhbmQgcmVuZGVyIHRoaXMgd2lsbCBzdGlsbCBiZSBudWxsIGJ1dCBhZnRlclxuICAgICAgLy8gdGhhdCB3aWxsIGFsd2F5cyByZW5kZXIgdG8gc29tZXRoaW5nLiBBdCBsZWFzdCBmb3Igbm93LiBTbyB3ZSBjYW4gdXNlXG4gICAgICAvLyB0aGlzIGhhY2suXG4gICAgICByZXR1cm4gISFpbnRlcm5hbEluc3RhbmNlLl9yZW5kZXJlZENvbXBvbmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhZnRlciBhbGwgdGhlIHBlbmRpbmcgdXBkYXRlc1xuICAgKiBoYXZlIHByb2Nlc3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gdXNlIGFzIGB0aGlzYCBjb250ZXh0LlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUNhbGxiYWNrOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNhbGxiYWNrKSB7XG4gICAgISh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2VucXVldWVDYWxsYmFjayguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2AsIGByZXBsYWNlUHJvcHNgLCAnICsgJ2BzZXRTdGF0ZWAsIGByZXBsYWNlU3RhdGVgLCBvciBgZm9yY2VVcGRhdGVgIHdpdGggYSBjYWxsYmFjayB0aGF0ICcgKyAnaXNuXFwndCBjYWxsYWJsZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UpO1xuXG4gICAgLy8gUHJldmlvdXNseSB3ZSB3b3VsZCB0aHJvdyBhbiBlcnJvciBpZiB3ZSBkaWRuJ3QgaGF2ZSBhbiBpbnRlcm5hbFxuICAgIC8vIGluc3RhbmNlLiBTaW5jZSB3ZSB3YW50IHRvIG1ha2UgaXQgYSBuby1vcCBpbnN0ZWFkLCB3ZSBtaXJyb3IgdGhlIHNhbWVcbiAgICAvLyBiZWhhdmlvciB3ZSBoYXZlIGluIG90aGVyIGVucXVldWUqIG1ldGhvZHMuXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIGlnbm9yZSBjYWxsYmFja3MgaW4gY29tcG9uZW50V2lsbE1vdW50LiBTZWVcbiAgICAvLyBlbnF1ZXVlVXBkYXRlcy5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgLy8gVE9ETzogVGhlIGNhbGxiYWNrIGhlcmUgaXMgaWdub3JlZCB3aGVuIHNldFN0YXRlIGlzIGNhbGxlZCBmcm9tXG4gICAgLy8gY29tcG9uZW50V2lsbE1vdW50LiBFaXRoZXIgZml4IGl0IG9yIGRpc2FsbG93IGRvaW5nIHNvIGNvbXBsZXRlbHkgaW5cbiAgICAvLyBmYXZvciBvZiBnZXRJbml0aWFsU3RhdGUuIEFsdGVybmF0aXZlbHksIHdlIGNhbiBkaXNhbGxvd1xuICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBkdXJpbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBjYWxsYmFjaykge1xuICAgICEodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdlbnF1ZXVlQ2FsbGJhY2soLi4uKTogWW91IGNhbGxlZCBgc2V0UHJvcHNgLCBgcmVwbGFjZVByb3BzYCwgJyArICdgc2V0U3RhdGVgLCBgcmVwbGFjZVN0YXRlYCwgb3IgYGZvcmNlVXBkYXRlYCB3aXRoIGEgY2FsbGJhY2sgdGhhdCAnICsgJ2lzblxcJ3QgY2FsbGFibGUuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnZm9yY2VVcGRhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IHRydWU7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdyZXBsYWNlU3RhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gW2NvbXBsZXRlU3RhdGVdO1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSB0cnVlO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgc3RhdGUuIFRoaXMgb25seSBleGlzdHMgYmVjYXVzZSBfcGVuZGluZ1N0YXRlIGlzXG4gICAqIGludGVybmFsLiBUaGlzIHByb3ZpZGVzIGEgbWVyZ2luZyBzdHJhdGVneSB0aGF0IGlzIG5vdCBhdmFpbGFibGUgdG8gZGVlcFxuICAgKiBwcm9wZXJ0aWVzIHdoaWNoIGlzIGNvbmZ1c2luZy4gVE9ETzogRXhwb3NlIHBlbmRpbmdTdGF0ZSBvciBkb24ndCB1c2UgaXRcbiAgICogZHVyaW5nIHRoZSBtZXJnZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsU3RhdGUgTmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcXVldWUgPSBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSB8fCAoaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWUgPSBbXSk7XG4gICAgcXVldWUucHVzaChwYXJ0aWFsU3RhdGUpO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgcHJvcHMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFByb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0UHJvcHM6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFByb3BzKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdzZXRQcm9wcycpO1xuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVTZXRQcm9wc0ludGVybmFsKGludGVybmFsSW5zdGFuY2UsIHBhcnRpYWxQcm9wcyk7XG4gIH0sXG5cbiAgZW5xdWV1ZVNldFByb3BzSW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBwYXJ0aWFsUHJvcHMpIHtcbiAgICB2YXIgdG9wTGV2ZWxXcmFwcGVyID0gaW50ZXJuYWxJbnN0YW5jZS5fdG9wTGV2ZWxXcmFwcGVyO1xuICAgICF0b3BMZXZlbFdyYXBwZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnc2V0UHJvcHMoLi4uKTogWW91IGNhbGxlZCBgc2V0UHJvcHNgIG9uIGEgJyArICdjb21wb25lbnQgd2l0aCBhIHBhcmVudC4gVGhpcyBpcyBhbiBhbnRpLXBhdHRlcm4gc2luY2UgcHJvcHMgd2lsbCAnICsgJ2dldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lclxcJ3MgJyArICdgcmVuZGVyYCBtZXRob2QgdG8gcGFzcyB0aGUgY29ycmVjdCB2YWx1ZSBhcyBwcm9wcyB0byB0aGUgY29tcG9uZW50ICcgKyAnd2hlcmUgaXQgaXMgY3JlYXRlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBNZXJnZSB3aXRoIHRoZSBwZW5kaW5nIGVsZW1lbnQgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2Ugd2l0aCBleGlzdGluZ1xuICAgIC8vIGVsZW1lbnQgcHJvcHMuXG4gICAgdmFyIHdyYXBFbGVtZW50ID0gdG9wTGV2ZWxXcmFwcGVyLl9wZW5kaW5nRWxlbWVudCB8fCB0b3BMZXZlbFdyYXBwZXIuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBlbGVtZW50ID0gd3JhcEVsZW1lbnQucHJvcHM7XG4gICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCBlbGVtZW50LnByb3BzLCBwYXJ0aWFsUHJvcHMpO1xuICAgIHRvcExldmVsV3JhcHBlci5fcGVuZGluZ0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMod3JhcEVsZW1lbnQsIFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyhlbGVtZW50LCBwcm9wcykpO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZSh0b3BMZXZlbFdyYXBwZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzIE5ldyBwcm9wcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVByb3BzOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHByb3BzKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdyZXBsYWNlUHJvcHMnKTtcbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlUmVwbGFjZVByb3BzSW50ZXJuYWwoaW50ZXJuYWxJbnN0YW5jZSwgcHJvcHMpO1xuICB9LFxuXG4gIGVucXVldWVSZXBsYWNlUHJvcHNJbnRlcm5hbDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIHByb3BzKSB7XG4gICAgdmFyIHRvcExldmVsV3JhcHBlciA9IGludGVybmFsSW5zdGFuY2UuX3RvcExldmVsV3JhcHBlcjtcbiAgICAhdG9wTGV2ZWxXcmFwcGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3JlcGxhY2VQcm9wcyguLi4pOiBZb3UgY2FsbGVkIGByZXBsYWNlUHJvcHNgIG9uIGEgJyArICdjb21wb25lbnQgd2l0aCBhIHBhcmVudC4gVGhpcyBpcyBhbiBhbnRpLXBhdHRlcm4gc2luY2UgcHJvcHMgd2lsbCAnICsgJ2dldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lclxcJ3MgJyArICdgcmVuZGVyYCBtZXRob2QgdG8gcGFzcyB0aGUgY29ycmVjdCB2YWx1ZSBhcyBwcm9wcyB0byB0aGUgY29tcG9uZW50ICcgKyAnd2hlcmUgaXQgaXMgY3JlYXRlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBNZXJnZSB3aXRoIHRoZSBwZW5kaW5nIGVsZW1lbnQgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2Ugd2l0aCBleGlzdGluZ1xuICAgIC8vIGVsZW1lbnQgcHJvcHMuXG4gICAgdmFyIHdyYXBFbGVtZW50ID0gdG9wTGV2ZWxXcmFwcGVyLl9wZW5kaW5nRWxlbWVudCB8fCB0b3BMZXZlbFdyYXBwZXIuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBlbGVtZW50ID0gd3JhcEVsZW1lbnQucHJvcHM7XG4gICAgdG9wTGV2ZWxXcmFwcGVyLl9wZW5kaW5nRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyh3cmFwRWxlbWVudCwgUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKGVsZW1lbnQsIHByb3BzKSk7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKHRvcExldmVsV3JhcHBlcik7XG4gIH0sXG5cbiAgZW5xdWV1ZUVsZW1lbnRJbnRlcm5hbDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIG5ld0VsZW1lbnQpIHtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudCA9IG5ld0VsZW1lbnQ7XG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0VXBkYXRlUXVldWU7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUlZjR1JoZEdWUmRXVjFaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCU1pXRmpkRlZ3WkdGMFpWRjFaWFZsWEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1VtVmhZM1JEZFhKeVpXNTBUM2R1WlhJZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlKeWs3WEc1MllYSWdVbVZoWTNSRmJHVnRaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVWc1pXMWxiblFuS1R0Y2JuWmhjaUJTWldGamRFbHVjM1JoYm1ObFRXRndJRDBnY21WeGRXbHlaU2duTGk5U1pXRmpkRWx1YzNSaGJtTmxUV0Z3SnlrN1hHNTJZWElnVW1WaFkzUlZjR1JoZEdWeklEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRGVndaR0YwWlhNbktUdGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb0p5NHZUMkpxWldOMExtRnpjMmxuYmljcE8xeHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwybHVkbUZ5YVdGdWRDY3BPMXh1ZG1GeUlIZGhjbTVwYm1jZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOTNZWEp1YVc1bkp5azdYRzVjYm1aMWJtTjBhVzl1SUdWdWNYVmxkV1ZWY0dSaGRHVW9hVzUwWlhKdVlXeEpibk4wWVc1alpTa2dlMXh1SUNCU1pXRmpkRlZ3WkdGMFpYTXVaVzV4ZFdWMVpWVndaR0YwWlNocGJuUmxjbTVoYkVsdWMzUmhibU5sS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFNXNTBaWEp1WVd4SmJuTjBZVzVqWlZKbFlXUjVSbTl5VlhCa1lYUmxLSEIxWW14cFkwbHVjM1JoYm1ObExDQmpZV3hzWlhKT1lXMWxLU0I3WEc0Z0lIWmhjaUJwYm5SbGNtNWhiRWx1YzNSaGJtTmxJRDBnVW1WaFkzUkpibk4wWVc1alpVMWhjQzVuWlhRb2NIVmliR2xqU1c1emRHRnVZMlVwTzF4dUlDQnBaaUFvSVdsdWRHVnlibUZzU1c1emRHRnVZMlVwSUh0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdMeThnVDI1c2VTQjNZWEp1SUhkb1pXNGdkMlVnYUdGMlpTQmhJR05oYkd4bGNrNWhiV1V1SUU5MGFHVnlkMmx6WlNCM1pTQnphRzkxYkdRZ1ltVWdjMmxzWlc1MExseHVJQ0FnSUNBZ0x5OGdWMlVuY21VZ2NISnZZbUZpYkhrZ1kyRnNiR2x1WnlCbWNtOXRJR1Z1Y1hWbGRXVkRZV3hzWW1GamF5NGdWMlVnWkc5dUozUWdkMkZ1ZENCMGJ5QjNZWEp1WEc0Z0lDQWdJQ0F2THlCMGFHVnlaU0JpWldOaGRYTmxJSGRsSUdGc2NtVmhaSGtnZDJGeWJtVmtJR1p2Y2lCMGFHVWdZMjl5Y21WemNHOXVaR2x1WnlCc2FXWmxZM2xqYkdVZ2JXVjBhRzlrTGx4dUlDQWdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb0lXTmhiR3hsY2s1aGJXVXNJQ2NsY3lndUxpNHBPaUJEWVc0Z2IyNXNlU0IxY0dSaGRHVWdZU0J0YjNWdWRHVmtJRzl5SUcxdmRXNTBhVzVuSUdOdmJYQnZibVZ1ZEM0Z0p5QXJJQ2RVYUdseklIVnpkV0ZzYkhrZ2JXVmhibk1nZVc5MUlHTmhiR3hsWkNBbGN5Z3BJRzl1SUdGdUlIVnViVzkxYm5SbFpDQmpiMjF3YjI1bGJuUXVJQ2NnS3lBblZHaHBjeUJwY3lCaElHNXZMVzl3TGlCUWJHVmhjMlVnWTJobFkyc2dkR2hsSUdOdlpHVWdabTl5SUhSb1pTQWxjeUJqYjIxd2IyNWxiblF1Snl3Z1kyRnNiR1Z5VG1GdFpTd2dZMkZzYkdWeVRtRnRaU3dnY0hWaWJHbGpTVzV6ZEdGdVkyVXVZMjl1YzNSeWRXTjBiM0l1WkdsemNHeGhlVTVoYldVcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnZlZ4dVhHNGdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29VbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXVZM1Z5Y21WdWRDQTlQU0J1ZFd4c0xDQW5KWE1vTGk0dUtUb2dRMkZ1Ym05MElIVndaR0YwWlNCa2RYSnBibWNnWVc0Z1pYaHBjM1JwYm1jZ2MzUmhkR1VnZEhKaGJuTnBkR2x2YmlBbklDc2dKeWh6ZFdOb0lHRnpJSGRwZEdocGJpQmdjbVZ1WkdWeVlDa3VJRkpsYm1SbGNpQnRaWFJvYjJSeklITm9iM1ZzWkNCaVpTQmhJSEIxY21VZ1puVnVZM1JwYjI0Z0p5QXJJQ2R2WmlCd2NtOXdjeUJoYm1RZ2MzUmhkR1V1Snl3Z1kyRnNiR1Z5VG1GdFpTa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYVc1MFpYSnVZV3hKYm5OMFlXNWpaVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbElHRnNiRzkzY3lCbWIzSWdjM1JoZEdVZ2RYQmtZWFJsY3lCMGJ5QmlaU0J6WTJobFpIVnNaV1FnYVc1MGJ5QmhJR3hoZEdWeVhHNGdLaUJ5WldOdmJtTnBiR2xoZEdsdmJpQnpkR1Z3TGx4dUlDb3ZYRzUyWVhJZ1VtVmhZM1JWY0dSaGRHVlJkV1YxWlNBOUlIdGNibHh1SUNBdktpcGNiaUFnSUNvZ1EyaGxZMnR6SUhkb1pYUm9aWElnYjNJZ2JtOTBJSFJvYVhNZ1kyOXRjRzl6YVhSbElHTnZiWEJ2Ym1WdWRDQnBjeUJ0YjNWdWRHVmtMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTJ4aGMzTjlJSEIxWW14cFkwbHVjM1JoYm1ObElGUm9aU0JwYm5OMFlXNWpaU0IzWlNCM1lXNTBJSFJ2SUhSbGMzUXVYRzRnSUNBcUlFQnlaWFIxY200Z2UySnZiMnhsWVc1OUlGUnlkV1VnYVdZZ2JXOTFiblJsWkN3Z1ptRnNjMlVnYjNSb1pYSjNhWE5sTGx4dUlDQWdLaUJBY0hKdmRHVmpkR1ZrWEc0Z0lDQXFJRUJtYVc1aGJGeHVJQ0FnS2k5Y2JpQWdhWE5OYjNWdWRHVmtPaUJtZFc1amRHbHZiaUFvY0hWaWJHbGpTVzV6ZEdGdVkyVXBJSHRjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2RtRnlJRzkzYm1WeUlEMGdVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXVZM1Z5Y21WdWREdGNiaUFnSUNBZ0lHbG1JQ2h2ZDI1bGNpQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1WnlodmQyNWxjaTVmZDJGeWJtVmtRV0p2ZFhSU1pXWnpTVzVTWlc1a1pYSXNJQ2NsY3lCcGN5QmhZMk5sYzNOcGJtY2dhWE5OYjNWdWRHVmtJR2x1YzJsa1pTQnBkSE1nY21WdVpHVnlLQ2tnWm5WdVkzUnBiMjR1SUNjZ0t5QW5jbVZ1WkdWeUtDa2djMmh2ZFd4a0lHSmxJR0VnY0hWeVpTQm1kVzVqZEdsdmJpQnZaaUJ3Y205d2N5QmhibVFnYzNSaGRHVXVJRWwwSUhOb2IzVnNaQ0FuSUNzZ0oyNWxkbVZ5SUdGalkyVnpjeUJ6YjIxbGRHaHBibWNnZEdoaGRDQnlaWEYxYVhKbGN5QnpkR0ZzWlNCa1lYUmhJR1p5YjIwZ2RHaGxJSEJ5WlhacGIzVnpJQ2NnS3lBbmNtVnVaR1Z5TENCemRXTm9JR0Z6SUhKbFpuTXVJRTF2ZG1VZ2RHaHBjeUJzYjJkcFl5QjBieUJqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ0JoYm1RZ0p5QXJJQ2RqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1VnYVc1emRHVmhaQzRuTENCdmQyNWxjaTVuWlhST1lXMWxLQ2tnZkh3Z0owRWdZMjl0Y0c5dVpXNTBKeWtnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lHOTNibVZ5TGw5M1lYSnVaV1JCWW05MWRGSmxabk5KYmxKbGJtUmxjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQnBiblJsY201aGJFbHVjM1JoYm1ObElEMGdVbVZoWTNSSmJuTjBZVzVqWlUxaGNDNW5aWFFvY0hWaWJHbGpTVzV6ZEdGdVkyVXBPMXh1SUNBZ0lHbG1JQ2hwYm5SbGNtNWhiRWx1YzNSaGJtTmxLU0I3WEc0Z0lDQWdJQ0F2THlCRWRYSnBibWNnWTI5dGNHOXVaVzUwVjJsc2JFMXZkVzUwSUdGdVpDQnlaVzVrWlhJZ2RHaHBjeUIzYVd4c0lITjBhV3hzSUdKbElHNTFiR3dnWW5WMElHRm1kR1Z5WEc0Z0lDQWdJQ0F2THlCMGFHRjBJSGRwYkd3Z1lXeDNZWGx6SUhKbGJtUmxjaUIwYnlCemIyMWxkR2hwYm1jdUlFRjBJR3hsWVhOMElHWnZjaUJ1YjNjdUlGTnZJSGRsSUdOaGJpQjFjMlZjYmlBZ0lDQWdJQzh2SUhSb2FYTWdhR0ZqYXk1Y2JpQWdJQ0FnSUhKbGRIVnliaUFoSVdsdWRHVnlibUZzU1c1emRHRnVZMlV1WDNKbGJtUmxjbVZrUTI5dGNHOXVaVzUwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCRmJuRjFaWFZsSUdFZ1kyRnNiR0poWTJzZ2RHaGhkQ0IzYVd4c0lHSmxJR1Y0WldOMWRHVmtJR0ZtZEdWeUlHRnNiQ0IwYUdVZ2NHVnVaR2x1WnlCMWNHUmhkR1Z6WEc0Z0lDQXFJR2hoZG1VZ2NISnZZMlZ6YzJWa0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFEyeGhjM045SUhCMVlteHBZMGx1YzNSaGJtTmxJRlJvWlNCcGJuTjBZVzVqWlNCMGJ5QjFjMlVnWVhNZ1lIUm9hWE5nSUdOdmJuUmxlSFF1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdQMloxYm1OMGFXOXVmU0JqWVd4c1ltRmpheUJEWVd4c1pXUWdZV1owWlhJZ2MzUmhkR1VnYVhNZ2RYQmtZWFJsWkM1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCbGJuRjFaWFZsUTJGc2JHSmhZMnM2SUdaMWJtTjBhVzl1SUNod2RXSnNhV05KYm5OMFlXNWpaU3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0FoS0hSNWNHVnZaaUJqWVd4c1ltRmpheUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dQeUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2FXNTJZWEpwWVc1MEtHWmhiSE5sTENBblpXNXhkV1YxWlVOaGJHeGlZV05yS0M0dUxpazZJRmx2ZFNCallXeHNaV1FnWUhObGRGQnliM0J6WUN3Z1lISmxjR3hoWTJWUWNtOXdjMkFzSUNjZ0t5QW5ZSE5sZEZOMFlYUmxZQ3dnWUhKbGNHeGhZMlZUZEdGMFpXQXNJRzl5SUdCbWIzSmpaVlZ3WkdGMFpXQWdkMmwwYUNCaElHTmhiR3hpWVdOcklIUm9ZWFFnSnlBcklDZHBjMjVjWENkMElHTmhiR3hoWW14bExpY3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0IyWVhJZ2FXNTBaWEp1WVd4SmJuTjBZVzVqWlNBOUlHZGxkRWx1ZEdWeWJtRnNTVzV6ZEdGdVkyVlNaV0ZrZVVadmNsVndaR0YwWlNod2RXSnNhV05KYm5OMFlXNWpaU2s3WEc1Y2JpQWdJQ0F2THlCUWNtVjJhVzkxYzJ4NUlIZGxJSGR2ZFd4a0lIUm9jbTkzSUdGdUlHVnljbTl5SUdsbUlIZGxJR1JwWkc0bmRDQm9ZWFpsSUdGdUlHbHVkR1Z5Ym1Gc1hHNGdJQ0FnTHk4Z2FXNXpkR0Z1WTJVdUlGTnBibU5sSUhkbElIZGhiblFnZEc4Z2JXRnJaU0JwZENCaElHNXZMVzl3SUdsdWMzUmxZV1FzSUhkbElHMXBjbkp2Y2lCMGFHVWdjMkZ0WlZ4dUlDQWdJQzh2SUdKbGFHRjJhVzl5SUhkbElHaGhkbVVnYVc0Z2IzUm9aWElnWlc1eGRXVjFaU29nYldWMGFHOWtjeTVjYmlBZ0lDQXZMeUJYWlNCaGJITnZJRzVsWldRZ2RHOGdhV2R1YjNKbElHTmhiR3hpWVdOcmN5QnBiaUJqYjIxd2IyNWxiblJYYVd4c1RXOTFiblF1SUZObFpWeHVJQ0FnSUM4dklHVnVjWFZsZFdWVmNHUmhkR1Z6TGx4dUlDQWdJR2xtSUNnaGFXNTBaWEp1WVd4SmJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTXBJSHRjYmlBZ0lDQWdJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTXVjSFZ6YUNoallXeHNZbUZqYXlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTWdQU0JiWTJGc2JHSmhZMnRkTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJVVDBSUE9pQlVhR1VnWTJGc2JHSmhZMnNnYUdWeVpTQnBjeUJwWjI1dmNtVmtJSGRvWlc0Z2MyVjBVM1JoZEdVZ2FYTWdZMkZzYkdWa0lHWnliMjFjYmlBZ0lDQXZMeUJqYjIxd2IyNWxiblJYYVd4c1RXOTFiblF1SUVWcGRHaGxjaUJtYVhnZ2FYUWdiM0lnWkdsellXeHNiM2NnWkc5cGJtY2djMjhnWTI5dGNHeGxkR1ZzZVNCcGJseHVJQ0FnSUM4dklHWmhkbTl5SUc5bUlHZGxkRWx1YVhScFlXeFRkR0YwWlM0Z1FXeDBaWEp1WVhScGRtVnNlU3dnZDJVZ1kyRnVJR1JwYzJGc2JHOTNYRzRnSUNBZ0x5OGdZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBJR1IxY21sdVp5QnpaWEoyWlhJdGMybGtaU0J5Wlc1a1pYSnBibWN1WEc0Z0lDQWdaVzV4ZFdWMVpWVndaR0YwWlNocGJuUmxjbTVoYkVsdWMzUmhibU5sS1R0Y2JpQWdmU3hjYmx4dUlDQmxibkYxWlhWbFEyRnNiR0poWTJ0SmJuUmxjbTVoYkRvZ1puVnVZM1JwYjI0Z0tHbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVc0lHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ0lTaDBlWEJsYjJZZ1kyRnNiR0poWTJzZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMlZ1Y1hWbGRXVkRZV3hzWW1GamF5Z3VMaTRwT2lCWmIzVWdZMkZzYkdWa0lHQnpaWFJRY205d2MyQXNJR0J5WlhCc1lXTmxVSEp2Y0hOZ0xDQW5JQ3NnSjJCelpYUlRkR0YwWldBc0lHQnlaWEJzWVdObFUzUmhkR1ZnTENCdmNpQmdabTl5WTJWVmNHUmhkR1ZnSUhkcGRHZ2dZU0JqWVd4c1ltRmpheUIwYUdGMElDY2dLeUFuYVhOdVhGd25kQ0JqWVd4c1lXSnNaUzRuS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2FXWWdLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTXBJSHRjYmlBZ0lDQWdJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTXVjSFZ6YUNoallXeHNZbUZqYXlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTWdQU0JiWTJGc2JHSmhZMnRkTzF4dUlDQWdJSDFjYmlBZ0lDQmxibkYxWlhWbFZYQmtZWFJsS0dsdWRHVnlibUZzU1c1emRHRnVZMlVwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkdiM0pqWlhNZ1lXNGdkWEJrWVhSbExpQlVhR2x6SUhOb2IzVnNaQ0J2Ym14NUlHSmxJR2x1ZG05clpXUWdkMmhsYmlCcGRDQnBjeUJyYm05M2JpQjNhWFJvWEc0Z0lDQXFJR05sY25SaGFXNTBlU0IwYUdGMElIZGxJR0Z5WlNBcUttNXZkQ29xSUdsdUlHRWdSRTlOSUhSeVlXNXpZV04wYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJaYjNVZ2JXRjVJSGRoYm5RZ2RHOGdZMkZzYkNCMGFHbHpJSGRvWlc0Z2VXOTFJR3R1YjNjZ2RHaGhkQ0J6YjIxbElHUmxaWEJsY2lCaGMzQmxZM1FnYjJZZ2RHaGxYRzRnSUNBcUlHTnZiWEJ2Ym1WdWRDZHpJSE4wWVhSbElHaGhjeUJqYUdGdVoyVmtJR0oxZENCZ2MyVjBVM1JoZEdWZ0lIZGhjeUJ1YjNRZ1kyRnNiR1ZrTGx4dUlDQWdLbHh1SUNBZ0tpQlVhR2x6SUhkcGJHd2dibTkwSUdsdWRtOXJaU0JnYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbFlDd2dZblYwSUdsMElIZHBiR3dnYVc1MmIydGxYRzRnSUNBcUlHQmpiMjF3YjI1bGJuUlhhV3hzVlhCa1lYUmxZQ0JoYm1RZ1lHTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpXQXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WaFkzUkRiR0Z6YzMwZ2NIVmliR2xqU1c1emRHRnVZMlVnVkdobElHbHVjM1JoYm1ObElIUm9ZWFFnYzJodmRXeGtJSEpsY21WdVpHVnlMbHh1SUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNvdlhHNGdJR1Z1Y1hWbGRXVkdiM0pqWlZWd1pHRjBaVG9nWm5WdVkzUnBiMjRnS0hCMVlteHBZMGx1YzNSaGJtTmxLU0I3WEc0Z0lDQWdkbUZ5SUdsdWRHVnlibUZzU1c1emRHRnVZMlVnUFNCblpYUkpiblJsY201aGJFbHVjM1JoYm1ObFVtVmhaSGxHYjNKVmNHUmhkR1VvY0hWaWJHbGpTVzV6ZEdGdVkyVXNJQ2RtYjNKalpWVndaR0YwWlNjcE8xeHVYRzRnSUNBZ2FXWWdLQ0ZwYm5SbGNtNWhiRWx1YzNSaGJtTmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXNTBaWEp1WVd4SmJuTjBZVzVqWlM1ZmNHVnVaR2x1WjBadmNtTmxWWEJrWVhSbElEMGdkSEoxWlR0Y2JseHVJQ0FnSUdWdWNYVmxkV1ZWY0dSaGRHVW9hVzUwWlhKdVlXeEpibk4wWVc1alpTazdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGNHeGhZMlZ6SUdGc2JDQnZaaUIwYUdVZ2MzUmhkR1V1SUVGc2QyRjVjeUIxYzJVZ2RHaHBjeUJ2Y2lCZ2MyVjBVM1JoZEdWZ0lIUnZJRzExZEdGMFpTQnpkR0YwWlM1Y2JpQWdJQ29nV1c5MUlITm9iM1ZzWkNCMGNtVmhkQ0JnZEdocGN5NXpkR0YwWldBZ1lYTWdhVzF0ZFhSaFlteGxMbHh1SUNBZ0tseHVJQ0FnS2lCVWFHVnlaU0JwY3lCdWJ5Qm5kV0Z5WVc1MFpXVWdkR2hoZENCZ2RHaHBjeTV6ZEdGMFpXQWdkMmxzYkNCaVpTQnBiVzFsWkdsaGRHVnNlU0IxY0dSaGRHVmtMQ0J6YjF4dUlDQWdLaUJoWTJObGMzTnBibWNnWUhSb2FYTXVjM1JoZEdWZ0lHRm1kR1Z5SUdOaGJHeHBibWNnZEdocGN5QnRaWFJvYjJRZ2JXRjVJSEpsZEhWeWJpQjBhR1VnYjJ4a0lIWmhiSFZsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTJ4aGMzTjlJSEIxWW14cFkwbHVjM1JoYm1ObElGUm9aU0JwYm5OMFlXNWpaU0IwYUdGMElITm9iM1ZzWkNCeVpYSmxibVJsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR052YlhCc1pYUmxVM1JoZEdVZ1RtVjRkQ0J6ZEdGMFpTNWNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmxibkYxWlhWbFVtVndiR0ZqWlZOMFlYUmxPaUJtZFc1amRHbHZiaUFvY0hWaWJHbGpTVzV6ZEdGdVkyVXNJR052YlhCc1pYUmxVM1JoZEdVcElIdGNiaUFnSUNCMllYSWdhVzUwWlhKdVlXeEpibk4wWVc1alpTQTlJR2RsZEVsdWRHVnlibUZzU1c1emRHRnVZMlZTWldGa2VVWnZjbFZ3WkdGMFpTaHdkV0pzYVdOSmJuTjBZVzVqWlN3Z0ozSmxjR3hoWTJWVGRHRjBaU2NwTzF4dVhHNGdJQ0FnYVdZZ0tDRnBiblJsY201aGJFbHVjM1JoYm1ObEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVc1MFpYSnVZV3hKYm5OMFlXNWpaUzVmY0dWdVpHbHVaMU4wWVhSbFVYVmxkV1VnUFNCYlkyOXRjR3hsZEdWVGRHRjBaVjA3WEc0Z0lDQWdhVzUwWlhKdVlXeEpibk4wWVc1alpTNWZjR1Z1WkdsdVoxSmxjR3hoWTJWVGRHRjBaU0E5SUhSeWRXVTdYRzVjYmlBZ0lDQmxibkYxWlhWbFZYQmtZWFJsS0dsdWRHVnlibUZzU1c1emRHRnVZMlVwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFJ6SUdFZ2MzVmljMlYwSUc5bUlIUm9aU0J6ZEdGMFpTNGdWR2hwY3lCdmJteDVJR1Y0YVhOMGN5QmlaV05oZFhObElGOXdaVzVrYVc1blUzUmhkR1VnYVhOY2JpQWdJQ29nYVc1MFpYSnVZV3d1SUZSb2FYTWdjSEp2ZG1sa1pYTWdZU0J0WlhKbmFXNW5JSE4wY21GMFpXZDVJSFJvWVhRZ2FYTWdibTkwSUdGMllXbHNZV0pzWlNCMGJ5QmtaV1Z3WEc0Z0lDQXFJSEJ5YjNCbGNuUnBaWE1nZDJocFkyZ2dhWE1nWTI5dVpuVnphVzVuTGlCVVQwUlBPaUJGZUhCdmMyVWdjR1Z1WkdsdVoxTjBZWFJsSUc5eUlHUnZiaWQwSUhWelpTQnBkRnh1SUNBZ0tpQmtkWEpwYm1jZ2RHaGxJRzFsY21kbExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFEyeGhjM045SUhCMVlteHBZMGx1YzNSaGJtTmxJRlJvWlNCcGJuTjBZVzVqWlNCMGFHRjBJSE5vYjNWc1pDQnlaWEpsYm1SbGNpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCaGNuUnBZV3hUZEdGMFpTQk9aWGgwSUhCaGNuUnBZV3dnYzNSaGRHVWdkRzhnWW1VZ2JXVnlaMlZrSUhkcGRHZ2djM1JoZEdVdVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ1pXNXhkV1YxWlZObGRGTjBZWFJsT2lCbWRXNWpkR2x2YmlBb2NIVmliR2xqU1c1emRHRnVZMlVzSUhCaGNuUnBZV3hUZEdGMFpTa2dlMXh1SUNBZ0lIWmhjaUJwYm5SbGNtNWhiRWx1YzNSaGJtTmxJRDBnWjJWMFNXNTBaWEp1WVd4SmJuTjBZVzVqWlZKbFlXUjVSbTl5VlhCa1lYUmxLSEIxWW14cFkwbHVjM1JoYm1ObExDQW5jMlYwVTNSaGRHVW5LVHRjYmx4dUlDQWdJR2xtSUNnaGFXNTBaWEp1WVd4SmJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCeGRXVjFaU0E5SUdsdWRHVnlibUZzU1c1emRHRnVZMlV1WDNCbGJtUnBibWRUZEdGMFpWRjFaWFZsSUh4OElDaHBiblJsY201aGJFbHVjM1JoYm1ObExsOXdaVzVrYVc1blUzUmhkR1ZSZFdWMVpTQTlJRnRkS1R0Y2JpQWdJQ0J4ZFdWMVpTNXdkWE5vS0hCaGNuUnBZV3hUZEdGMFpTazdYRzVjYmlBZ0lDQmxibkYxWlhWbFZYQmtZWFJsS0dsdWRHVnlibUZzU1c1emRHRnVZMlVwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFJ6SUdFZ2MzVmljMlYwSUc5bUlIUm9aU0J3Y205d2N5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRFTnNZWE56ZlNCd2RXSnNhV05KYm5OMFlXNWpaU0JVYUdVZ2FXNXpkR0Z1WTJVZ2RHaGhkQ0J6YUc5MWJHUWdjbVZ5Wlc1a1pYSXVYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCd1lYSjBhV0ZzVUhKdmNITWdVM1ZpYzJWMElHOW1JSFJvWlNCdVpYaDBJSEJ5YjNCekxseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lHVnVjWFZsZFdWVFpYUlFjbTl3Y3pvZ1puVnVZM1JwYjI0Z0tIQjFZbXhwWTBsdWMzUmhibU5sTENCd1lYSjBhV0ZzVUhKdmNITXBJSHRjYmlBZ0lDQjJZWElnYVc1MFpYSnVZV3hKYm5OMFlXNWpaU0E5SUdkbGRFbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJWU1pXRmtlVVp2Y2xWd1pHRjBaU2h3ZFdKc2FXTkpibk4wWVc1alpTd2dKM05sZEZCeWIzQnpKeWs3WEc0Z0lDQWdhV1lnS0NGcGJuUmxjbTVoYkVsdWMzUmhibU5sS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lGSmxZV04wVlhCa1lYUmxVWFZsZFdVdVpXNXhkV1YxWlZObGRGQnliM0J6U1c1MFpYSnVZV3dvYVc1MFpYSnVZV3hKYm5OMFlXNWpaU3dnY0dGeWRHbGhiRkJ5YjNCektUdGNiaUFnZlN4Y2JseHVJQ0JsYm5GMVpYVmxVMlYwVUhKdmNITkpiblJsY201aGJEb2dablZ1WTNScGIyNGdLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXNJSEJoY25ScFlXeFFjbTl3Y3lrZ2UxeHVJQ0FnSUhaaGNpQjBiM0JNWlhabGJGZHlZWEJ3WlhJZ1BTQnBiblJsY201aGJFbHVjM1JoYm1ObExsOTBiM0JNWlhabGJGZHlZWEJ3WlhJN1hHNGdJQ0FnSVhSdmNFeGxkbVZzVjNKaGNIQmxjaUEvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZHpaWFJRY205d2N5Z3VMaTRwT2lCWmIzVWdZMkZzYkdWa0lHQnpaWFJRY205d2MyQWdiMjRnWVNBbklDc2dKMk52YlhCdmJtVnVkQ0IzYVhSb0lHRWdjR0Z5Wlc1MExpQlVhR2x6SUdseklHRnVJR0Z1ZEdrdGNHRjBkR1Z5YmlCemFXNWpaU0J3Y205d2N5QjNhV3hzSUNjZ0t5QW5aMlYwSUhKbFlXTjBhWFpsYkhrZ2RYQmtZWFJsWkNCM2FHVnVJSEpsYm1SbGNtVmtMaUJKYm5OMFpXRmtMQ0JqYUdGdVoyVWdkR2hsSUc5M2JtVnlYRnduY3lBbklDc2dKMkJ5Wlc1a1pYSmdJRzFsZEdodlpDQjBieUJ3WVhOeklIUm9aU0JqYjNKeVpXTjBJSFpoYkhWbElHRnpJSEJ5YjNCeklIUnZJSFJvWlNCamIyMXdiMjVsYm5RZ0p5QXJJQ2QzYUdWeVpTQnBkQ0JwY3lCamNtVmhkR1ZrTGljcElEb2dhVzUyWVhKcFlXNTBLR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJQzh2SUUxbGNtZGxJSGRwZEdnZ2RHaGxJSEJsYm1ScGJtY2daV3hsYldWdWRDQnBaaUJwZENCbGVHbHpkSE1zSUc5MGFHVnlkMmx6WlNCM2FYUm9JR1Y0YVhOMGFXNW5YRzRnSUNBZ0x5OGdaV3hsYldWdWRDQndjbTl3Y3k1Y2JpQWdJQ0IyWVhJZ2QzSmhjRVZzWlcxbGJuUWdQU0IwYjNCTVpYWmxiRmR5WVhCd1pYSXVYM0JsYm1ScGJtZEZiR1Z0Wlc1MElIeDhJSFJ2Y0V4bGRtVnNWM0poY0hCbGNpNWZZM1Z5Y21WdWRFVnNaVzFsYm5RN1hHNGdJQ0FnZG1GeUlHVnNaVzFsYm5RZ1BTQjNjbUZ3Uld4bGJXVnVkQzV3Y205d2N6dGNiaUFnSUNCMllYSWdjSEp2Y0hNZ1BTQmhjM05wWjI0b2UzMHNJR1ZzWlcxbGJuUXVjSEp2Y0hNc0lIQmhjblJwWVd4UWNtOXdjeWs3WEc0Z0lDQWdkRzl3VEdWMlpXeFhjbUZ3Y0dWeUxsOXdaVzVrYVc1blJXeGxiV1Z1ZENBOUlGSmxZV04wUld4bGJXVnVkQzVqYkc5dVpVRnVaRkpsY0d4aFkyVlFjbTl3Y3loM2NtRndSV3hsYldWdWRDd2dVbVZoWTNSRmJHVnRaVzUwTG1Oc2IyNWxRVzVrVW1Wd2JHRmpaVkJ5YjNCektHVnNaVzFsYm5Rc0lIQnliM0J6S1NrN1hHNWNiaUFnSUNCbGJuRjFaWFZsVlhCa1lYUmxLSFJ2Y0V4bGRtVnNWM0poY0hCbGNpazdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGNHeGhZMlZ6SUdGc2JDQnZaaUIwYUdVZ2NISnZjSE11WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JEYkdGemMzMGdjSFZpYkdsalNXNXpkR0Z1WTJVZ1ZHaGxJR2x1YzNSaGJtTmxJSFJvWVhRZ2MyaHZkV3hrSUhKbGNtVnVaR1Z5TGx4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdjSEp2Y0hNZ1RtVjNJSEJ5YjNCekxseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lHVnVjWFZsZFdWU1pYQnNZV05sVUhKdmNITTZJR1oxYm1OMGFXOXVJQ2h3ZFdKc2FXTkpibk4wWVc1alpTd2djSEp2Y0hNcElIdGNiaUFnSUNCMllYSWdhVzUwWlhKdVlXeEpibk4wWVc1alpTQTlJR2RsZEVsdWRHVnlibUZzU1c1emRHRnVZMlZTWldGa2VVWnZjbFZ3WkdGMFpTaHdkV0pzYVdOSmJuTjBZVzVqWlN3Z0ozSmxjR3hoWTJWUWNtOXdjeWNwTzF4dUlDQWdJR2xtSUNnaGFXNTBaWEp1WVd4SmJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbExtVnVjWFZsZFdWU1pYQnNZV05sVUhKdmNITkpiblJsY201aGJDaHBiblJsY201aGJFbHVjM1JoYm1ObExDQndjbTl3Y3lrN1hHNGdJSDBzWEc1Y2JpQWdaVzV4ZFdWMVpWSmxjR3hoWTJWUWNtOXdjMGx1ZEdWeWJtRnNPaUJtZFc1amRHbHZiaUFvYVc1MFpYSnVZV3hKYm5OMFlXNWpaU3dnY0hKdmNITXBJSHRjYmlBZ0lDQjJZWElnZEc5d1RHVjJaV3hYY21Gd2NHVnlJRDBnYVc1MFpYSnVZV3hKYm5OMFlXNWpaUzVmZEc5d1RHVjJaV3hYY21Gd2NHVnlPMXh1SUNBZ0lDRjBiM0JNWlhabGJGZHlZWEJ3WlhJZ1B5QndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnYVc1MllYSnBZVzUwS0daaGJITmxMQ0FuY21Wd2JHRmpaVkJ5YjNCektDNHVMaWs2SUZsdmRTQmpZV3hzWldRZ1lISmxjR3hoWTJWUWNtOXdjMkFnYjI0Z1lTQW5JQ3NnSjJOdmJYQnZibVZ1ZENCM2FYUm9JR0VnY0dGeVpXNTBMaUJVYUdseklHbHpJR0Z1SUdGdWRHa3RjR0YwZEdWeWJpQnphVzVqWlNCd2NtOXdjeUIzYVd4c0lDY2dLeUFuWjJWMElISmxZV04wYVhabGJIa2dkWEJrWVhSbFpDQjNhR1Z1SUhKbGJtUmxjbVZrTGlCSmJuTjBaV0ZrTENCamFHRnVaMlVnZEdobElHOTNibVZ5WEZ3bmN5QW5JQ3NnSjJCeVpXNWtaWEpnSUcxbGRHaHZaQ0IwYnlCd1lYTnpJSFJvWlNCamIzSnlaV04wSUhaaGJIVmxJR0Z6SUhCeWIzQnpJSFJ2SUhSb1pTQmpiMjF3YjI1bGJuUWdKeUFySUNkM2FHVnlaU0JwZENCcGN5QmpjbVZoZEdWa0xpY3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUM4dklFMWxjbWRsSUhkcGRHZ2dkR2hsSUhCbGJtUnBibWNnWld4bGJXVnVkQ0JwWmlCcGRDQmxlR2x6ZEhNc0lHOTBhR1Z5ZDJselpTQjNhWFJvSUdWNGFYTjBhVzVuWEc0Z0lDQWdMeThnWld4bGJXVnVkQ0J3Y205d2N5NWNiaUFnSUNCMllYSWdkM0poY0VWc1pXMWxiblFnUFNCMGIzQk1aWFpsYkZkeVlYQndaWEl1WDNCbGJtUnBibWRGYkdWdFpXNTBJSHg4SUhSdmNFeGxkbVZzVjNKaGNIQmxjaTVmWTNWeWNtVnVkRVZzWlcxbGJuUTdYRzRnSUNBZ2RtRnlJR1ZzWlcxbGJuUWdQU0IzY21Gd1JXeGxiV1Z1ZEM1d2NtOXdjenRjYmlBZ0lDQjBiM0JNWlhabGJGZHlZWEJ3WlhJdVgzQmxibVJwYm1kRmJHVnRaVzUwSUQwZ1VtVmhZM1JGYkdWdFpXNTBMbU5zYjI1bFFXNWtVbVZ3YkdGalpWQnliM0J6S0hkeVlYQkZiR1Z0Wlc1MExDQlNaV0ZqZEVWc1pXMWxiblF1WTJ4dmJtVkJibVJTWlhCc1lXTmxVSEp2Y0hNb1pXeGxiV1Z1ZEN3Z2NISnZjSE1wS1R0Y2JseHVJQ0FnSUdWdWNYVmxkV1ZWY0dSaGRHVW9kRzl3VEdWMlpXeFhjbUZ3Y0dWeUtUdGNiaUFnZlN4Y2JseHVJQ0JsYm5GMVpYVmxSV3hsYldWdWRFbHVkR1Z5Ym1Gc09pQm1kVzVqZEdsdmJpQW9hVzUwWlhKdVlXeEpibk4wWVc1alpTd2dibVYzUld4bGJXVnVkQ2tnZTF4dUlDQWdJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZEZiR1Z0Wlc1MElEMGdibVYzUld4bGJXVnVkRHRjYmlBZ0lDQmxibkYxWlhWbFZYQmtZWFJsS0dsdWRHVnlibUZzU1c1emRHRnVZMlVwTzF4dUlDQjlYRzVjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVbVZoWTNSVmNHUmhkR1ZSZFdWMVpUc2lYWDA9IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFVwZGF0ZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBkaXJ0eUNvbXBvbmVudHMgPSBbXTtcbnZhciBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG52YXIgYXNhcEVucXVldWVkID0gZmFsc2U7XG5cbnZhciBiYXRjaGluZ1N0cmF0ZWd5ID0gbnVsbDtcblxuZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKSB7XG4gICEoUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gJiYgYmF0Y2hpbmdTdHJhdGVneSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IGluamVjdCBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcyBhbmQgYmF0Y2hpbmcgJyArICdzdHJhdGVneScpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIE5FU1RFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCAhPT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gQWRkaXRpb25hbCB1cGRhdGVzIHdlcmUgZW5xdWV1ZWQgYnkgY29tcG9uZW50RGlkVXBkYXRlIGhhbmRsZXJzIG9yXG4gICAgICAvLyBzaW1pbGFyOyBiZWZvcmUgb3VyIG93biBVUERBVEVfUVVFVUVJTkcgd3JhcHBlciBjbG9zZXMsIHdlIHdhbnQgdG8gcnVuXG4gICAgICAvLyB0aGVzZSBuZXcgdXBkYXRlcyBzbyB0aGF0IGlmIEEncyBjb21wb25lbnREaWRVcGRhdGUgY2FsbHMgc2V0U3RhdGUgb25cbiAgICAgIC8vIEIsIEIgd2lsbCB1cGRhdGUgYmVmb3JlIHRoZSBjYWxsYmFjayBBJ3MgdXBkYXRlciBwcm92aWRlZCB3aGVuIGNhbGxpbmdcbiAgICAgIC8vIHNldFN0YXRlLlxuICAgICAgZGlydHlDb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCk7XG4gICAgICBmbHVzaEJhdGNoZWRVcGRhdGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxufTtcblxudmFyIFVQREFURV9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5yZXNldCgpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW05FU1RFRF9VUERBVEVTLCBVUERBVEVfUVVFVUVJTkddO1xuXG5mdW5jdGlvbiBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgdGhpcy5jYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCggLyogZm9yY2VIVE1MICovZmFsc2UpO1xufVxuXG5hc3NpZ24oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5jYWxsYmFja1F1ZXVlKTtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUgPSBudWxsO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IG51bGw7XG4gIH0sXG5cbiAgcGVyZm9ybTogZnVuY3Rpb24gKG1ldGhvZCwgc2NvcGUsIGEpIHtcbiAgICAvLyBFc3NlbnRpYWxseSBjYWxscyBgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtKG1ldGhvZCwgc2NvcGUsIGEpYFxuICAgIC8vIHdpdGggdGhpcyB0cmFuc2FjdGlvbidzIHdyYXBwZXJzIGFyb3VuZCBpdC5cbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uTWl4aW4ucGVyZm9ybS5jYWxsKHRoaXMsIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybSwgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiwgbWV0aG9kLCBzY29wZSwgYSk7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbik7XG5cbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLCBhLCBiLCBjLCBkLCBlKSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG4gIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpO1xufVxuXG4vKipcbiAqIEFycmF5IGNvbXBhcmF0b3IgZm9yIFJlYWN0Q29tcG9uZW50cyBieSBtb3VudCBvcmRlcmluZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjMSBmaXJzdCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzIgc2Vjb25kIGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFJldHVybiB2YWx1ZSB1c2FibGUgYnkgQXJyYXkucHJvdG90eXBlLnNvcnQoKS5cbiAqL1xuZnVuY3Rpb24gbW91bnRPcmRlckNvbXBhcmF0b3IoYzEsIGMyKSB7XG4gIHJldHVybiBjMS5fbW91bnRPcmRlciAtIGMyLl9tb3VudE9yZGVyO1xufVxuXG5mdW5jdGlvbiBydW5CYXRjaGVkVXBkYXRlcyh0cmFuc2FjdGlvbikge1xuICB2YXIgbGVuID0gdHJhbnNhY3Rpb24uZGlydHlDb21wb25lbnRzTGVuZ3RoO1xuICAhKGxlbiA9PT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgZmx1c2ggdHJhbnNhY3Rpb25cXCdzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvICcgKyAnbWF0Y2ggZGlydHktY29tcG9uZW50cyBhcnJheSBsZW5ndGggKCVzKS4nLCBsZW4sIGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAvLyBTaW5jZSByZWNvbmNpbGluZyBhIGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIG93bmVyIGhpZXJhcmNoeSB1c3VhbGx5IChub3RcbiAgLy8gYWx3YXlzIC0tIHNlZSBzaG91bGRDb21wb25lbnRVcGRhdGUoKSkgd2lsbCByZWNvbmNpbGUgY2hpbGRyZW4sIHJlY29uY2lsZVxuICAvLyB0aGVtIGJlZm9yZSB0aGVpciBjaGlsZHJlbiBieSBzb3J0aW5nIHRoZSBhcnJheS5cbiAgZGlydHlDb21wb25lbnRzLnNvcnQobW91bnRPcmRlckNvbXBhcmF0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYmVmb3JlIHBlbmRpbmcgY2hhbmdlcyBhcHBseSwgaXQgd2lsbCBzdGlsbFxuICAgIC8vIGJlIGhlcmUsIGJ1dCB3ZSBhc3N1bWUgdGhhdCBpdCBoYXMgY2xlYXJlZCBpdHMgX3BlbmRpbmdDYWxsYmFja3MgYW5kXG4gICAgLy8gdGhhdCBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaXMgYSBub29wLlxuICAgIHZhciBjb21wb25lbnQgPSBkaXJ0eUNvbXBvbmVudHNbaV07XG5cbiAgICAvLyBJZiBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaGFwcGVucyB0byBlbnF1ZXVlIGFueSBuZXcgdXBkYXRlcywgd2VcbiAgICAvLyBzaG91bGRuJ3QgZXhlY3V0ZSB0aGUgY2FsbGJhY2tzIHVudGlsIHRoZSBuZXh0IHJlbmRlciBoYXBwZW5zLCBzb1xuICAgIC8vIHN0YXNoIHRoZSBjYWxsYmFja3MgZmlyc3RcbiAgICB2YXIgY2FsbGJhY2tzID0gY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzO1xuICAgIGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG5cbiAgICBSZWFjdFJlY29uY2lsZXIucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KGNvbXBvbmVudCwgdHJhbnNhY3Rpb24ucmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuXG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uY2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrc1tqXSwgY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZmx1c2hCYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbidzIHdyYXBwZXJzIHdpbGwgY2xlYXIgdGhlIGRpcnR5Q29tcG9uZW50c1xuICAvLyBhcnJheSBhbmQgcGVyZm9ybSBhbnkgdXBkYXRlcyBlbnF1ZXVlZCBieSBtb3VudC1yZWFkeSBoYW5kbGVycyAoaS5lLixcbiAgLy8gY29tcG9uZW50RGlkVXBkYXRlKSBidXQgd2UgbmVlZCB0byBjaGVjayBoZXJlIHRvbyBpbiBvcmRlciB0byBjYXRjaFxuICAvLyB1cGRhdGVzIGVucXVldWVkIGJ5IHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgYXNhcCBjYWxscy5cbiAgd2hpbGUgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGggfHwgYXNhcEVucXVldWVkKSB7XG4gICAgaWYgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG4gICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKHJ1bkJhdGNoZWRVcGRhdGVzLCBudWxsLCB0cmFuc2FjdGlvbik7XG4gICAgICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIH1cblxuICAgIGlmIChhc2FwRW5xdWV1ZWQpIHtcbiAgICAgIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuICAgICAgdmFyIHF1ZXVlID0gYXNhcENhbGxiYWNrUXVldWU7XG4gICAgICBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gICAgICBxdWV1ZS5ub3RpZnlBbGwoKTtcbiAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZShxdWV1ZSk7XG4gICAgfVxuICB9XG59O1xuZmx1c2hCYXRjaGVkVXBkYXRlcyA9IFJlYWN0UGVyZi5tZWFzdXJlKCdSZWFjdFVwZGF0ZXMnLCAnZmx1c2hCYXRjaGVkVXBkYXRlcycsIGZsdXNoQmF0Y2hlZFVwZGF0ZXMpO1xuXG4vKipcbiAqIE1hcmsgYSBjb21wb25lbnQgYXMgbmVlZGluZyBhIHJlcmVuZGVyLCBhZGRpbmcgYW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYVxuICogbGlzdCBvZiBmdW5jdGlvbnMgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBvbmNlIHRoZSByZXJlbmRlciBvY2N1cnMuXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoY29tcG9uZW50KSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG5cbiAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChUaGlzIGlzIGNhbGxlZCBieSBlYWNoIHRvcC1sZXZlbCB1cGRhdGVcbiAgLy8gZnVuY3Rpb24sIGxpa2Ugc2V0UHJvcHMsIHNldFN0YXRlLCBmb3JjZVVwZGF0ZSwgZXRjLjsgY3JlYXRpb24gYW5kXG4gIC8vIGRlc3RydWN0aW9uIG9mIHRvcC1sZXZlbCBjb21wb25lbnRzIGlzIGd1YXJkZWQgaW4gUmVhY3RNb3VudC4pXG5cbiAgaWYgKCFiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhlbnF1ZXVlVXBkYXRlLCBjb21wb25lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpcnR5Q29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG59XG5cbi8qKlxuICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRvIGJlIHJ1biBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJhdGNoaW5nIGN5Y2xlLiBUaHJvd3NcbiAqIGlmIG5vIHVwZGF0ZXMgYXJlIGN1cnJlbnRseSBiZWluZyBwZXJmb3JtZWQuXG4gKi9cbmZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzLmFzYXA6IENhblxcJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZScgKyAndXBkYXRlcyBhcmUgbm90IGJlaW5nIGJhdGNoZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBhc2FwQ2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgYXNhcEVucXVldWVkID0gdHJ1ZTtcbn1cblxudmFyIFJlYWN0VXBkYXRlc0luamVjdGlvbiA9IHtcbiAgaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IGZ1bmN0aW9uIChSZWNvbmNpbGVUcmFuc2FjdGlvbikge1xuICAgICFSZWNvbmNpbGVUcmFuc2FjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuICB9LFxuXG4gIGluamVjdEJhdGNoaW5nU3RyYXRlZ3k6IGZ1bmN0aW9uIChfYmF0Y2hpbmdTdHJhdGVneSkge1xuICAgICFfYmF0Y2hpbmdTdHJhdGVneSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoaW5nIHN0cmF0ZWd5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICEodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgISh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPT09ICdib29sZWFuJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYW4gaXNCYXRjaGluZ1VwZGF0ZXMgYm9vbGVhbiBhdHRyaWJ1dGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgYmF0Y2hpbmdTdHJhdGVneSA9IF9iYXRjaGluZ1N0cmF0ZWd5O1xuICB9XG59O1xuXG52YXIgUmVhY3RVcGRhdGVzID0ge1xuICAvKipcbiAgICogUmVhY3QgcmVmZXJlbmNlcyBgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbmAgdXNpbmcgdGhpcyBwcm9wZXJ0eSBpbiBvcmRlclxuICAgKiB0byBhbGxvdyBkZXBlbmRlbmN5IGluamVjdGlvbi5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOiBudWxsLFxuXG4gIGJhdGNoZWRVcGRhdGVzOiBiYXRjaGVkVXBkYXRlcyxcbiAgZW5xdWV1ZVVwZGF0ZTogZW5xdWV1ZVVwZGF0ZSxcbiAgZmx1c2hCYXRjaGVkVXBkYXRlczogZmx1c2hCYXRjaGVkVXBkYXRlcyxcbiAgaW5qZWN0aW9uOiBSZWFjdFVwZGF0ZXNJbmplY3Rpb24sXG4gIGFzYXA6IGFzYXBcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JWY0dSaGRHVnpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRkpsWVdOMFZYQmtZWFJsYzF4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlFTmhiR3hpWVdOclVYVmxkV1VnUFNCeVpYRjFhWEpsS0NjdUwwTmhiR3hpWVdOclVYVmxkV1VuS1R0Y2JuWmhjaUJRYjI5c1pXUkRiR0Z6Y3lBOUlISmxjWFZwY21Vb0p5NHZVRzl2YkdWa1EyeGhjM01uS1R0Y2JuWmhjaUJTWldGamRGQmxjbVlnUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wVUdWeVppY3BPMXh1ZG1GeUlGSmxZV04wVW1WamIyNWphV3hsY2lBOUlISmxjWFZwY21Vb0p5NHZVbVZoWTNSU1pXTnZibU5wYkdWeUp5azdYRzUyWVhJZ1ZISmhibk5oWTNScGIyNGdQU0J5WlhGMWFYSmxLQ2N1TDFSeVlXNXpZV04wYVc5dUp5azdYRzVjYm5aaGNpQmhjM05wWjI0Z1BTQnlaWEYxYVhKbEtDY3VMMDlpYW1WamRDNWhjM05wWjI0bktUdGNiblpoY2lCcGJuWmhjbWxoYm5RZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOXBiblpoY21saGJuUW5LVHRjYmx4dWRtRnlJR1JwY25SNVEyOXRjRzl1Wlc1MGN5QTlJRnRkTzF4dWRtRnlJR0Z6WVhCRFlXeHNZbUZqYTFGMVpYVmxJRDBnUTJGc2JHSmhZMnRSZFdWMVpTNW5aWFJRYjI5c1pXUW9LVHRjYm5aaGNpQmhjMkZ3Ulc1eGRXVjFaV1FnUFNCbVlXeHpaVHRjYmx4dWRtRnlJR0poZEdOb2FXNW5VM1J5WVhSbFoza2dQU0J1ZFd4c08xeHVYRzVtZFc1amRHbHZiaUJsYm5OMWNtVkpibXBsWTNSbFpDZ3BJSHRjYmlBZ0lTaFNaV0ZqZEZWd1pHRjBaWE11VW1WaFkzUlNaV052Ym1OcGJHVlVjbUZ1YzJGamRHbHZiaUFtSmlCaVlYUmphR2x1WjFOMGNtRjBaV2Q1S1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RTWldGamRGVndaR0YwWlhNNklHMTFjM1FnYVc1cVpXTjBJR0VnY21WamIyNWphV3hsSUhSeVlXNXpZV04wYVc5dUlHTnNZWE56SUdGdVpDQmlZWFJqYUdsdVp5QW5JQ3NnSjNOMGNtRjBaV2Q1SnlrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcElEb2dkVzVrWldacGJtVmtPMXh1ZlZ4dVhHNTJZWElnVGtWVFZFVkVYMVZRUkVGVVJWTWdQU0I3WEc0Z0lHbHVhWFJwWVd4cGVtVTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxtUnBjblI1UTI5dGNHOXVaVzUwYzB4bGJtZDBhQ0E5SUdScGNuUjVRMjl0Y0c5dVpXNTBjeTVzWlc1bmRHZzdYRzRnSUgwc1hHNGdJR05zYjNObE9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVaR2x5ZEhsRGIyMXdiMjVsYm5SelRHVnVaM1JvSUNFOVBTQmthWEowZVVOdmJYQnZibVZ1ZEhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBdkx5QkJaR1JwZEdsdmJtRnNJSFZ3WkdGMFpYTWdkMlZ5WlNCbGJuRjFaWFZsWkNCaWVTQmpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVWdhR0Z1Wkd4bGNuTWdiM0pjYmlBZ0lDQWdJQzh2SUhOcGJXbHNZWEk3SUdKbFptOXlaU0J2ZFhJZ2IzZHVJRlZRUkVGVVJWOVJWVVZWUlVsT1J5QjNjbUZ3Y0dWeUlHTnNiM05sY3l3Z2QyVWdkMkZ1ZENCMGJ5QnlkVzVjYmlBZ0lDQWdJQzh2SUhSb1pYTmxJRzVsZHlCMWNHUmhkR1Z6SUhOdklIUm9ZWFFnYVdZZ1FTZHpJR052YlhCdmJtVnVkRVJwWkZWd1pHRjBaU0JqWVd4c2N5QnpaWFJUZEdGMFpTQnZibHh1SUNBZ0lDQWdMeThnUWl3Z1FpQjNhV3hzSUhWd1pHRjBaU0JpWldadmNtVWdkR2hsSUdOaGJHeGlZV05ySUVFbmN5QjFjR1JoZEdWeUlIQnliM1pwWkdWa0lIZG9aVzRnWTJGc2JHbHVaMXh1SUNBZ0lDQWdMeThnYzJWMFUzUmhkR1V1WEc0Z0lDQWdJQ0JrYVhKMGVVTnZiWEJ2Ym1WdWRITXVjM0JzYVdObEtEQXNJSFJvYVhNdVpHbHlkSGxEYjIxd2IyNWxiblJ6VEdWdVozUm9LVHRjYmlBZ0lDQWdJR1pzZFhOb1FtRjBZMmhsWkZWd1pHRjBaWE1vS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdaR2x5ZEhsRGIyMXdiMjVsYm5SekxteGxibWQwYUNBOUlEQTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzUyWVhJZ1ZWQkVRVlJGWDFGVlJWVkZTVTVISUQwZ2UxeHVJQ0JwYm1sMGFXRnNhWHBsT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RHaHBjeTVqWVd4c1ltRmphMUYxWlhWbExuSmxjMlYwS0NrN1hHNGdJSDBzWEc0Z0lHTnNiM05sT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RHaHBjeTVqWVd4c1ltRmphMUYxWlhWbExtNXZkR2xtZVVGc2JDZ3BPMXh1SUNCOVhHNTlPMXh1WEc1MllYSWdWRkpCVGxOQlExUkpUMDVmVjFKQlVGQkZVbE1nUFNCYlRrVlRWRVZFWDFWUVJFRlVSVk1zSUZWUVJFRlVSVjlSVlVWVlJVbE9SMTA3WEc1Y2JtWjFibU4wYVc5dUlGSmxZV04wVlhCa1lYUmxjMFpzZFhOb1ZISmhibk5oWTNScGIyNG9LU0I3WEc0Z0lIUm9hWE11Y21WcGJtbDBhV0ZzYVhwbFZISmhibk5oWTNScGIyNG9LVHRjYmlBZ2RHaHBjeTVrYVhKMGVVTnZiWEJ2Ym1WdWRITk1aVzVuZEdnZ1BTQnVkV3hzTzF4dUlDQjBhR2x6TG1OaGJHeGlZV05yVVhWbGRXVWdQU0JEWVd4c1ltRmphMUYxWlhWbExtZGxkRkJ2YjJ4bFpDZ3BPMXh1SUNCMGFHbHpMbkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1SUQwZ1VtVmhZM1JWY0dSaGRHVnpMbEpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNHVaMlYwVUc5dmJHVmtLQ0F2S2lCbWIzSmpaVWhVVFV3Z0tpOW1ZV3h6WlNrN1hHNTlYRzVjYm1GemMybG5iaWhTWldGamRGVndaR0YwWlhOR2JIVnphRlJ5WVc1ellXTjBhVzl1TG5CeWIzUnZkSGx3WlN3Z1ZISmhibk5oWTNScGIyNHVUV2w0YVc0c0lIdGNiaUFnWjJWMFZISmhibk5oWTNScGIyNVhjbUZ3Y0dWeWN6b2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQlVVa0ZPVTBGRFZFbFBUbDlYVWtGUVVFVlNVenRjYmlBZ2ZTeGNibHh1SUNCa1pYTjBjblZqZEc5eU9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkR2hwY3k1a2FYSjBlVU52YlhCdmJtVnVkSE5NWlc1bmRHZ2dQU0J1ZFd4c08xeHVJQ0FnSUVOaGJHeGlZV05yVVhWbGRXVXVjbVZzWldGelpTaDBhR2x6TG1OaGJHeGlZV05yVVhWbGRXVXBPMXh1SUNBZ0lIUm9hWE11WTJGc2JHSmhZMnRSZFdWMVpTQTlJRzUxYkd3N1hHNGdJQ0FnVW1WaFkzUlZjR1JoZEdWekxsSmxZV04wVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0dWNtVnNaV0Z6WlNoMGFHbHpMbkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1S1R0Y2JpQWdJQ0IwYUdsekxuSmxZMjl1WTJsc1pWUnlZVzV6WVdOMGFXOXVJRDBnYm5Wc2JEdGNiaUFnZlN4Y2JseHVJQ0J3WlhKbWIzSnRPaUJtZFc1amRHbHZiaUFvYldWMGFHOWtMQ0J6WTI5d1pTd2dZU2tnZTF4dUlDQWdJQzh2SUVWemMyVnVkR2xoYkd4NUlHTmhiR3h6SUdCMGFHbHpMbkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1TG5CbGNtWnZjbTBvYldWMGFHOWtMQ0J6WTI5d1pTd2dZU2xnWEc0Z0lDQWdMeThnZDJsMGFDQjBhR2x6SUhSeVlXNXpZV04wYVc5dUozTWdkM0poY0hCbGNuTWdZWEp2ZFc1a0lHbDBMbHh1SUNBZ0lISmxkSFZ5YmlCVWNtRnVjMkZqZEdsdmJpNU5hWGhwYmk1d1pYSm1iM0p0TG1OaGJHd29kR2hwY3l3Z2RHaHBjeTV5WldOdmJtTnBiR1ZVY21GdWMyRmpkR2x2Ymk1d1pYSm1iM0p0TENCMGFHbHpMbkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1TENCdFpYUm9iMlFzSUhOamIzQmxMQ0JoS1R0Y2JpQWdmVnh1ZlNrN1hHNWNibEJ2YjJ4bFpFTnNZWE56TG1Ga1pGQnZiMnhwYm1kVWJ5aFNaV0ZqZEZWd1pHRjBaWE5HYkhWemFGUnlZVzV6WVdOMGFXOXVLVHRjYmx4dVpuVnVZM1JwYjI0Z1ltRjBZMmhsWkZWd1pHRjBaWE1vWTJGc2JHSmhZMnNzSUdFc0lHSXNJR01zSUdRc0lHVXBJSHRjYmlBZ1pXNXpkWEpsU1c1cVpXTjBaV1FvS1R0Y2JpQWdZbUYwWTJocGJtZFRkSEpoZEdWbmVTNWlZWFJqYUdWa1ZYQmtZWFJsY3loallXeHNZbUZqYXl3Z1lTd2dZaXdnWXl3Z1pDd2daU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dRWEp5WVhrZ1kyOXRjR0Z5WVhSdmNpQm1iM0lnVW1WaFkzUkRiMjF3YjI1bGJuUnpJR0o1SUcxdmRXNTBJRzl5WkdWeWFXNW5MbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRGIyMXdiMjVsYm5SOUlHTXhJR1pwY25OMElHTnZiWEJ2Ym1WdWRDQjViM1VuY21VZ1kyOXRjR0Z5YVc1blhHNGdLaUJBY0dGeVlXMGdlMUpsWVdOMFEyOXRjRzl1Wlc1MGZTQmpNaUJ6WldOdmJtUWdZMjl0Y0c5dVpXNTBJSGx2ZFNkeVpTQmpiMjF3WVhKcGJtZGNiaUFxSUVCeVpYUjFjbTRnZTI1MWJXSmxjbjBnVW1WMGRYSnVJSFpoYkhWbElIVnpZV0pzWlNCaWVTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyOXlkQ2dwTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ0YjNWdWRFOXlaR1Z5UTI5dGNHRnlZWFJ2Y2loak1Td2dZeklwSUh0Y2JpQWdjbVYwZFhKdUlHTXhMbDl0YjNWdWRFOXlaR1Z5SUMwZ1l6SXVYMjF2ZFc1MFQzSmtaWEk3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEoxYmtKaGRHTm9aV1JWY0dSaGRHVnpLSFJ5WVc1ellXTjBhVzl1S1NCN1hHNGdJSFpoY2lCc1pXNGdQU0IwY21GdWMyRmpkR2x2Ymk1a2FYSjBlVU52YlhCdmJtVnVkSE5NWlc1bmRHZzdYRzRnSUNFb2JHVnVJRDA5UFNCa2FYSjBlVU52YlhCdmJtVnVkSE11YkdWdVozUm9LU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZEZlSEJsWTNSbFpDQm1iSFZ6YUNCMGNtRnVjMkZqZEdsdmJseGNKM01nYzNSdmNtVmtJR1JwY25SNUxXTnZiWEJ2Ym1WdWRITWdiR1Z1WjNSb0lDZ2xjeWtnZEc4Z0p5QXJJQ2R0WVhSamFDQmthWEowZVMxamIyMXdiMjVsYm5SeklHRnljbUY1SUd4bGJtZDBhQ0FvSlhNcExpY3NJR3hsYml3Z1pHbHlkSGxEYjIxd2IyNWxiblJ6TG14bGJtZDBhQ2tnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUM4dklGTnBibU5sSUhKbFkyOXVZMmxzYVc1bklHRWdZMjl0Y0c5dVpXNTBJR2hwWjJobGNpQnBiaUIwYUdVZ2IzZHVaWElnYUdsbGNtRnlZMmg1SUhWemRXRnNiSGtnS0c1dmRGeHVJQ0F2THlCaGJIZGhlWE1nTFMwZ2MyVmxJSE5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWlNncEtTQjNhV3hzSUhKbFkyOXVZMmxzWlNCamFHbHNaSEpsYml3Z2NtVmpiMjVqYVd4bFhHNGdJQzh2SUhSb1pXMGdZbVZtYjNKbElIUm9aV2x5SUdOb2FXeGtjbVZ1SUdKNUlITnZjblJwYm1jZ2RHaGxJR0Z5Y21GNUxseHVJQ0JrYVhKMGVVTnZiWEJ2Ym1WdWRITXVjMjl5ZENodGIzVnVkRTl5WkdWeVEyOXRjR0Z5WVhSdmNpazdYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lDOHZJRWxtSUdFZ1kyOXRjRzl1Wlc1MElHbHpJSFZ1Ylc5MWJuUmxaQ0JpWldadmNtVWdjR1Z1WkdsdVp5QmphR0Z1WjJWeklHRndjR3g1TENCcGRDQjNhV3hzSUhOMGFXeHNYRzRnSUNBZ0x5OGdZbVVnYUdWeVpTd2dZblYwSUhkbElHRnpjM1Z0WlNCMGFHRjBJR2wwSUdoaGN5QmpiR1ZoY21Wa0lHbDBjeUJmY0dWdVpHbHVaME5oYkd4aVlXTnJjeUJoYm1SY2JpQWdJQ0F2THlCMGFHRjBJSEJsY21admNtMVZjR1JoZEdWSlprNWxZMlZ6YzJGeWVTQnBjeUJoSUc1dmIzQXVYRzRnSUNBZ2RtRnlJR052YlhCdmJtVnVkQ0E5SUdScGNuUjVRMjl0Y0c5dVpXNTBjMXRwWFR0Y2JseHVJQ0FnSUM4dklFbG1JSEJsY21admNtMVZjR1JoZEdWSlprNWxZMlZ6YzJGeWVTQm9ZWEJ3Wlc1eklIUnZJR1Z1Y1hWbGRXVWdZVzU1SUc1bGR5QjFjR1JoZEdWekxDQjNaVnh1SUNBZ0lDOHZJSE5vYjNWc1pHNG5kQ0JsZUdWamRYUmxJSFJvWlNCallXeHNZbUZqYTNNZ2RXNTBhV3dnZEdobElHNWxlSFFnY21WdVpHVnlJR2hoY0hCbGJuTXNJSE52WEc0Z0lDQWdMeThnYzNSaGMyZ2dkR2hsSUdOaGJHeGlZV05yY3lCbWFYSnpkRnh1SUNBZ0lIWmhjaUJqWVd4c1ltRmphM01nUFNCamIyMXdiMjVsYm5RdVgzQmxibVJwYm1kRFlXeHNZbUZqYTNNN1hHNGdJQ0FnWTI5dGNHOXVaVzUwTGw5d1pXNWthVzVuUTJGc2JHSmhZMnR6SUQwZ2JuVnNiRHRjYmx4dUlDQWdJRkpsWVdOMFVtVmpiMjVqYVd4bGNpNXdaWEptYjNKdFZYQmtZWFJsU1daT1pXTmxjM05oY25rb1kyOXRjRzl1Wlc1MExDQjBjbUZ1YzJGamRHbHZiaTV5WldOdmJtTnBiR1ZVY21GdWMyRmpkR2x2YmlrN1hHNWNiaUFnSUNCcFppQW9ZMkZzYkdKaFkydHpLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Ec2dhaUE4SUdOaGJHeGlZV05yY3k1c1pXNW5kR2c3SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2Ymk1allXeHNZbUZqYTFGMVpYVmxMbVZ1Y1hWbGRXVW9ZMkZzYkdKaFkydHpXMnBkTENCamIyMXdiMjVsYm5RdVoyVjBVSFZpYkdsalNXNXpkR0Z1WTJVb0tTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiblpoY2lCbWJIVnphRUpoZEdOb1pXUlZjR1JoZEdWeklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQXZMeUJTWldGamRGVndaR0YwWlhOR2JIVnphRlJ5WVc1ellXTjBhVzl1SjNNZ2QzSmhjSEJsY25NZ2QybHNiQ0JqYkdWaGNpQjBhR1VnWkdseWRIbERiMjF3YjI1bGJuUnpYRzRnSUM4dklHRnljbUY1SUdGdVpDQndaWEptYjNKdElHRnVlU0IxY0dSaGRHVnpJR1Z1Y1hWbGRXVmtJR0o1SUcxdmRXNTBMWEpsWVdSNUlHaGhibVJzWlhKeklDaHBMbVV1TEZ4dUlDQXZMeUJqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1VwSUdKMWRDQjNaU0J1WldWa0lIUnZJR05vWldOcklHaGxjbVVnZEc5dklHbHVJRzl5WkdWeUlIUnZJR05oZEdOb1hHNGdJQzh2SUhWd1pHRjBaWE1nWlc1eGRXVjFaV1FnWW5rZ2MyVjBVM1JoZEdVZ1kyRnNiR0poWTJ0eklHRnVaQ0JoYzJGd0lHTmhiR3h6TGx4dUlDQjNhR2xzWlNBb1pHbHlkSGxEYjIxd2IyNWxiblJ6TG14bGJtZDBhQ0I4ZkNCaGMyRndSVzV4ZFdWMVpXUXBJSHRjYmlBZ0lDQnBaaUFvWkdseWRIbERiMjF3YjI1bGJuUnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhSeVlXNXpZV04wYVc5dUlEMGdVbVZoWTNSVmNHUmhkR1Z6Um14MWMyaFVjbUZ1YzJGamRHbHZiaTVuWlhSUWIyOXNaV1FvS1R0Y2JpQWdJQ0FnSUhSeVlXNXpZV04wYVc5dUxuQmxjbVp2Y20wb2NuVnVRbUYwWTJobFpGVndaR0YwWlhNc0lHNTFiR3dzSUhSeVlXNXpZV04wYVc5dUtUdGNiaUFnSUNBZ0lGSmxZV04wVlhCa1lYUmxjMFpzZFhOb1ZISmhibk5oWTNScGIyNHVjbVZzWldGelpTaDBjbUZ1YzJGamRHbHZiaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dGellYQkZibkYxWlhWbFpDa2dlMXh1SUNBZ0lDQWdZWE5oY0VWdWNYVmxkV1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0IyWVhJZ2NYVmxkV1VnUFNCaGMyRndRMkZzYkdKaFkydFJkV1YxWlR0Y2JpQWdJQ0FnSUdGellYQkRZV3hzWW1GamExRjFaWFZsSUQwZ1EyRnNiR0poWTJ0UmRXVjFaUzVuWlhSUWIyOXNaV1FvS1R0Y2JpQWdJQ0FnSUhGMVpYVmxMbTV2ZEdsbWVVRnNiQ2dwTzF4dUlDQWdJQ0FnUTJGc2JHSmhZMnRSZFdWMVpTNXlaV3hsWVhObEtIRjFaWFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1bWJIVnphRUpoZEdOb1pXUlZjR1JoZEdWeklEMGdVbVZoWTNSUVpYSm1MbTFsWVhOMWNtVW9KMUpsWVdOMFZYQmtZWFJsY3ljc0lDZG1iSFZ6YUVKaGRHTm9aV1JWY0dSaGRHVnpKeXdnWm14MWMyaENZWFJqYUdWa1ZYQmtZWFJsY3lrN1hHNWNiaThxS2x4dUlDb2dUV0Z5YXlCaElHTnZiWEJ2Ym1WdWRDQmhjeUJ1WldWa2FXNW5JR0VnY21WeVpXNWtaWElzSUdGa1pHbHVaeUJoYmlCdmNIUnBiMjVoYkNCallXeHNZbUZqYXlCMGJ5QmhYRzRnS2lCc2FYTjBJRzltSUdaMWJtTjBhVzl1Y3lCM2FHbGphQ0IzYVd4c0lHSmxJR1Y0WldOMWRHVmtJRzl1WTJVZ2RHaGxJSEpsY21WdVpHVnlJRzlqWTNWeWN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1pXNXhkV1YxWlZWd1pHRjBaU2hqYjIxd2IyNWxiblFwSUh0Y2JpQWdaVzV6ZFhKbFNXNXFaV04wWldRb0tUdGNibHh1SUNBdkx5QldZWEpwYjNWeklIQmhjblJ6SUc5bUlHOTFjaUJqYjJSbElDaHpkV05vSUdGeklGSmxZV04wUTI5dGNHOXphWFJsUTI5dGNHOXVaVzUwSjNOY2JpQWdMeThnWDNKbGJtUmxjbFpoYkdsa1lYUmxaRU52YlhCdmJtVnVkQ2tnWVhOemRXMWxJSFJvWVhRZ1kyRnNiSE1nZEc4Z2NtVnVaR1Z5SUdGeVpXNG5kQ0J1WlhOMFpXUTdYRzRnSUM4dklIWmxjbWxtZVNCMGFHRjBJSFJvWVhRbmN5QjBhR1VnWTJGelpTNGdLRlJvYVhNZ2FYTWdZMkZzYkdWa0lHSjVJR1ZoWTJnZ2RHOXdMV3hsZG1Wc0lIVndaR0YwWlZ4dUlDQXZMeUJtZFc1amRHbHZiaXdnYkdsclpTQnpaWFJRY205d2N5d2djMlYwVTNSaGRHVXNJR1p2Y21ObFZYQmtZWFJsTENCbGRHTXVPeUJqY21WaGRHbHZiaUJoYm1SY2JpQWdMeThnWkdWemRISjFZM1JwYjI0Z2IyWWdkRzl3TFd4bGRtVnNJR052YlhCdmJtVnVkSE1nYVhNZ1ozVmhjbVJsWkNCcGJpQlNaV0ZqZEUxdmRXNTBMaWxjYmx4dUlDQnBaaUFvSVdKaGRHTm9hVzVuVTNSeVlYUmxaM2t1YVhOQ1lYUmphR2x1WjFWd1pHRjBaWE1wSUh0Y2JpQWdJQ0JpWVhSamFHbHVaMU4wY21GMFpXZDVMbUpoZEdOb1pXUlZjR1JoZEdWektHVnVjWFZsZFdWVmNHUmhkR1VzSUdOdmJYQnZibVZ1ZENrN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNWNiaUFnWkdseWRIbERiMjF3YjI1bGJuUnpMbkIxYzJnb1kyOXRjRzl1Wlc1MEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCRmJuRjFaWFZsSUdFZ1kyRnNiR0poWTJzZ2RHOGdZbVVnY25WdUlHRjBJSFJvWlNCbGJtUWdiMllnZEdobElHTjFjbkpsYm5RZ1ltRjBZMmhwYm1jZ1kzbGpiR1V1SUZSb2NtOTNjMXh1SUNvZ2FXWWdibThnZFhCa1lYUmxjeUJoY21VZ1kzVnljbVZ1ZEd4NUlHSmxhVzVuSUhCbGNtWnZjbTFsWkM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWVhOaGNDaGpZV3hzWW1GamF5d2dZMjl1ZEdWNGRDa2dlMXh1SUNBaFltRjBZMmhwYm1kVGRISmhkR1ZuZVM1cGMwSmhkR05vYVc1blZYQmtZWFJsY3lBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RTWldGamRGVndaR0YwWlhNdVlYTmhjRG9nUTJGdVhGd25kQ0JsYm5GMVpYVmxJR0Z1SUdGellYQWdZMkZzYkdKaFkyc2dhVzRnWVNCamIyNTBaWGgwSUhkb1pYSmxKeUFySUNkMWNHUmhkR1Z6SUdGeVpTQnViM1FnWW1WcGJtY2dZbUYwWTJobFpDNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJR0Z6WVhCRFlXeHNZbUZqYTFGMVpYVmxMbVZ1Y1hWbGRXVW9ZMkZzYkdKaFkyc3NJR052Ym5SbGVIUXBPMXh1SUNCaGMyRndSVzV4ZFdWMVpXUWdQU0IwY25WbE8xeHVmVnh1WEc1MllYSWdVbVZoWTNSVmNHUmhkR1Z6U1c1cVpXTjBhVzl1SUQwZ2UxeHVJQ0JwYm1wbFkzUlNaV052Ym1OcGJHVlVjbUZ1YzJGamRHbHZiam9nWm5WdVkzUnBiMjRnS0ZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dUtTQjdYRzRnSUNBZ0lWSmxZMjl1WTJsc1pWUnlZVzV6WVdOMGFXOXVJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oxSmxZV04wVlhCa1lYUmxjem9nYlhWemRDQndjbTkyYVdSbElHRWdjbVZqYjI1amFXeGxJSFJ5WVc1ellXTjBhVzl1SUdOc1lYTnpKeWtnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUZKbFlXTjBWWEJrWVhSbGN5NVNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dUlEMGdVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjQ3WEc0Z0lIMHNYRzVjYmlBZ2FXNXFaV04wUW1GMFkyaHBibWRUZEhKaGRHVm5lVG9nWm5WdVkzUnBiMjRnS0Y5aVlYUmphR2x1WjFOMGNtRjBaV2Q1S1NCN1hHNGdJQ0FnSVY5aVlYUmphR2x1WjFOMGNtRjBaV2Q1SUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMUpsWVdOMFZYQmtZWFJsY3pvZ2JYVnpkQ0J3Y205MmFXUmxJR0VnWW1GMFkyaHBibWNnYzNSeVlYUmxaM2tuS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lTaDBlWEJsYjJZZ1gySmhkR05vYVc1blUzUnlZWFJsWjNrdVltRjBZMmhsWkZWd1pHRjBaWE1nUFQwOUlDZG1kVzVqZEdsdmJpY3BJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oxSmxZV04wVlhCa1lYUmxjem9nYlhWemRDQndjbTkyYVdSbElHRWdZbUYwWTJobFpGVndaR0YwWlhNb0tTQm1kVzVqZEdsdmJpY3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FoS0hSNWNHVnZaaUJmWW1GMFkyaHBibWRUZEhKaGRHVm5lUzVwYzBKaGRHTm9hVzVuVlhCa1lYUmxjeUE5UFQwZ0oySnZiMnhsWVc0bktTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkU1pXRmpkRlZ3WkdGMFpYTTZJRzExYzNRZ2NISnZkbWxrWlNCaGJpQnBjMEpoZEdOb2FXNW5WWEJrWVhSbGN5QmliMjlzWldGdUlHRjBkSEpwWW5WMFpTY3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0JpWVhSamFHbHVaMU4wY21GMFpXZDVJRDBnWDJKaGRHTm9hVzVuVTNSeVlYUmxaM2s3WEc0Z0lIMWNibjA3WEc1Y2JuWmhjaUJTWldGamRGVndaR0YwWlhNZ1BTQjdYRzRnSUM4cUtseHVJQ0FnS2lCU1pXRmpkQ0J5WldabGNtVnVZMlZ6SUdCU1pXRmpkRkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1WUNCMWMybHVaeUIwYUdseklIQnliM0JsY25SNUlHbHVJRzl5WkdWeVhHNGdJQ0FxSUhSdklHRnNiRzkzSUdSbGNHVnVaR1Z1WTNrZ2FXNXFaV04wYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUZKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjQ2SUc1MWJHd3NYRzVjYmlBZ1ltRjBZMmhsWkZWd1pHRjBaWE02SUdKaGRHTm9aV1JWY0dSaGRHVnpMRnh1SUNCbGJuRjFaWFZsVlhCa1lYUmxPaUJsYm5GMVpYVmxWWEJrWVhSbExGeHVJQ0JtYkhWemFFSmhkR05vWldSVmNHUmhkR1Z6T2lCbWJIVnphRUpoZEdOb1pXUlZjR1JoZEdWekxGeHVJQ0JwYm1wbFkzUnBiMjQ2SUZKbFlXTjBWWEJrWVhSbGMwbHVhbVZqZEdsdmJpeGNiaUFnWVhOaGNEb2dZWE5oY0Z4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGamRGVndaR0YwWlhNN0lsMTkiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RWZXJzaW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICcwLjE0LjgnOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTVkdET01Qcm9wZXJ0eUNvbmZpZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xuXG52YXIgTVVTVF9VU0VfQVRUUklCVVRFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURTtcblxudmFyIE5TID0ge1xuICB4bGluazogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLFxuICB4bWw6ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnXG59O1xuXG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIFByb3BlcnRpZXM6IHtcbiAgICBjbGlwUGF0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGN4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY3k6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZHg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZpbGw6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmaWxsT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvbnRGYW1pbHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb250U2l6ZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZ4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZnk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBncmFkaWVudFRyYW5zZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGdyYWRpZW50VW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJFbmQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJNaWQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJTdGFydDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG9mZnNldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwYXR0ZXJuQ29udGVudFVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcGF0dGVyblVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcG9pbnRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHJ5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3ByZWFkTWV0aG9kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RvcENvbG9yOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RvcE9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VEYXNoYXJyYXk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VMaW5lY2FwOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZVdpZHRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdGV4dEFuY2hvcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHRyYW5zZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHZlcnNpb246IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB2aWV3Qm94OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4MjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bGlua0FjdHVhdGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bGlua0FyY3JvbGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bGlua0hyZWY6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bGlua1JvbGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bGlua1Nob3c6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bGlua1RpdGxlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeGxpbmtUeXBlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeG1sQmFzZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhtbExhbmc6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bWxTcGFjZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHkxOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5OiBNVVNUX1VTRV9BVFRSSUJVVEVcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXNwYWNlczoge1xuICAgIHhsaW5rQWN0dWF0ZTogTlMueGxpbmssXG4gICAgeGxpbmtBcmNyb2xlOiBOUy54bGluayxcbiAgICB4bGlua0hyZWY6IE5TLnhsaW5rLFxuICAgIHhsaW5rUm9sZTogTlMueGxpbmssXG4gICAgeGxpbmtTaG93OiBOUy54bGluayxcbiAgICB4bGlua1RpdGxlOiBOUy54bGluayxcbiAgICB4bGlua1R5cGU6IE5TLnhsaW5rLFxuICAgIHhtbEJhc2U6IE5TLnhtbCxcbiAgICB4bWxMYW5nOiBOUy54bWwsXG4gICAgeG1sU3BhY2U6IE5TLnhtbFxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge1xuICAgIGNsaXBQYXRoOiAnY2xpcC1wYXRoJyxcbiAgICBmaWxsT3BhY2l0eTogJ2ZpbGwtb3BhY2l0eScsXG4gICAgZm9udEZhbWlseTogJ2ZvbnQtZmFtaWx5JyxcbiAgICBmb250U2l6ZTogJ2ZvbnQtc2l6ZScsXG4gICAgZ3JhZGllbnRUcmFuc2Zvcm06ICdncmFkaWVudFRyYW5zZm9ybScsXG4gICAgZ3JhZGllbnRVbml0czogJ2dyYWRpZW50VW5pdHMnLFxuICAgIG1hcmtlckVuZDogJ21hcmtlci1lbmQnLFxuICAgIG1hcmtlck1pZDogJ21hcmtlci1taWQnLFxuICAgIG1hcmtlclN0YXJ0OiAnbWFya2VyLXN0YXJ0JyxcbiAgICBwYXR0ZXJuQ29udGVudFVuaXRzOiAncGF0dGVybkNvbnRlbnRVbml0cycsXG4gICAgcGF0dGVyblVuaXRzOiAncGF0dGVyblVuaXRzJyxcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAncHJlc2VydmVBc3BlY3RSYXRpbycsXG4gICAgc3ByZWFkTWV0aG9kOiAnc3ByZWFkTWV0aG9kJyxcbiAgICBzdG9wQ29sb3I6ICdzdG9wLWNvbG9yJyxcbiAgICBzdG9wT3BhY2l0eTogJ3N0b3Atb3BhY2l0eScsXG4gICAgc3Ryb2tlRGFzaGFycmF5OiAnc3Ryb2tlLWRhc2hhcnJheScsXG4gICAgc3Ryb2tlTGluZWNhcDogJ3N0cm9rZS1saW5lY2FwJyxcbiAgICBzdHJva2VPcGFjaXR5OiAnc3Ryb2tlLW9wYWNpdHknLFxuICAgIHN0cm9rZVdpZHRoOiAnc3Ryb2tlLXdpZHRoJyxcbiAgICB0ZXh0QW5jaG9yOiAndGV4dC1hbmNob3InLFxuICAgIHZpZXdCb3g6ICd2aWV3Qm94JyxcbiAgICB4bGlua0FjdHVhdGU6ICd4bGluazphY3R1YXRlJyxcbiAgICB4bGlua0FyY3JvbGU6ICd4bGluazphcmNyb2xlJyxcbiAgICB4bGlua0hyZWY6ICd4bGluazpocmVmJyxcbiAgICB4bGlua1JvbGU6ICd4bGluazpyb2xlJyxcbiAgICB4bGlua1Nob3c6ICd4bGluazpzaG93JyxcbiAgICB4bGlua1RpdGxlOiAneGxpbms6dGl0bGUnLFxuICAgIHhsaW5rVHlwZTogJ3hsaW5rOnR5cGUnLFxuICAgIHhtbEJhc2U6ICd4bWw6YmFzZScsXG4gICAgeG1sTGFuZzogJ3htbDpsYW5nJyxcbiAgICB4bWxTcGFjZTogJ3htbDpzcGFjZSdcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTVkdET01Qcm9wZXJ0eUNvbmZpZzsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2VsZWN0RXZlbnRQbHVnaW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5wdXRTZWxlY3Rpb24nKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZSgnLi9pc1RleHRJbnB1dEVsZW1lbnQnKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPD0gMTE7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBzZWxlY3Q6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblNlbGVjdDogbnVsbCB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uU2VsZWN0Q2FwdHVyZTogbnVsbCB9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51LCB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLCB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duLCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXAsIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlXVxuICB9XG59O1xuXG52YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbnZhciBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbnZhciBtb3VzZURvd24gPSBmYWxzZTtcblxuLy8gVHJhY2sgd2hldGhlciBhIGxpc3RlbmVyIGV4aXN0cyBmb3IgdGhpcyBwbHVnaW4uIElmIG5vbmUgZXhpc3QsIHdlIGRvXG4vLyBub3QgZXh0cmFjdCBldmVudHMuXG52YXIgaGFzTGlzdGVuZXIgPSBmYWxzZTtcbnZhciBPTl9TRUxFQ1RfS0VZID0ga2V5T2YoeyBvblNlbGVjdDogbnVsbCB9KTtcblxuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdoaWNoIGlzIGEgdW5pcXVlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgbm90IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG5vZGVzIG9yIGJyb3dzZXJzLCBidXRcbiAqIHR3byBpZGVudGljYWwgc2VsZWN0aW9ucyBvbiB0aGUgc2FtZSBub2RlIHdpbGwgcmV0dXJuIGlkZW50aWNhbCBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb24obm9kZSkge1xuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBub2RlICYmIFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKG5vZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBub2RlLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBub2RlLnNlbGVjdGlvbkVuZFxuICAgIH07XG4gIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuY2hvck5vZGU6IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgZm9jdXNOb2RlOiBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbi5mb2N1c09mZnNldFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcmVudEVsZW1lbnQ6IHJhbmdlLnBhcmVudEVsZW1lbnQoKSxcbiAgICAgIHRleHQ6IHJhbmdlLnRleHQsXG4gICAgICB0b3A6IHJhbmdlLmJvdW5kaW5nVG9wLFxuICAgICAgbGVmdDogcmFuZ2UuYm91bmRpbmdMZWZ0XG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIFBvbGwgc2VsZWN0aW9uIHRvIHNlZSB3aGV0aGVyIGl0J3MgY2hhbmdlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4gez9TeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIC8vIEVuc3VyZSB3ZSBoYXZlIHRoZSByaWdodCBlbGVtZW50LCBhbmQgdGhhdCB0aGUgdXNlciBpcyBub3QgZHJhZ2dpbmcgYVxuICAvLyBzZWxlY3Rpb24gKHRoaXMgbWF0Y2hlcyBuYXRpdmUgYHNlbGVjdGAgZXZlbnQgYmVoYXZpb3IpLiBJbiBIVE1MNSwgc2VsZWN0XG4gIC8vIGZpcmVzIG9ubHkgb24gaW5wdXQgYW5kIHRleHRhcmVhIHRodXMgaWYgdGhlcmUncyBubyBmb2N1c2VkIGVsZW1lbnQgd2VcbiAgLy8gd29uJ3QgZGlzcGF0Y2guXG4gIGlmIChtb3VzZURvd24gfHwgYWN0aXZlRWxlbWVudCA9PSBudWxsIHx8IGFjdGl2ZUVsZW1lbnQgIT09IGdldEFjdGl2ZUVsZW1lbnQoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gT25seSBmaXJlIHdoZW4gc2VsZWN0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbihhY3RpdmVFbGVtZW50KTtcbiAgaWYgKCFsYXN0U2VsZWN0aW9uIHx8ICFzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgY3VycmVudFNlbGVjdGlvbikpIHtcbiAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcblxuICAgIHZhciBzeW50aGV0aWNFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLnNlbGVjdCwgYWN0aXZlRWxlbWVudElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gICAgc3ludGhldGljRXZlbnQudHlwZSA9ICdzZWxlY3QnO1xuICAgIHN5bnRoZXRpY0V2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQ7XG5cbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoc3ludGhldGljRXZlbnQpO1xuXG4gICAgcmV0dXJuIHN5bnRoZXRpY0V2ZW50O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25TZWxlY3RgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBzZWxlY3QgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBjb250ZW50RWRpdGFibGVcbiAqXG4gKiBUaGlzIGRpZmZlcnMgZnJvbSBuYXRpdmUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMgaW4gdGhlIGZvbGxvd2luZyB3YXlzOlxuICogLSBGaXJlcyBvbiBjb250ZW50RWRpdGFibGUgZmllbGRzIGFzIHdlbGwgYXMgaW5wdXRzLlxuICogLSBGaXJlcyBmb3IgY29sbGFwc2VkIHNlbGVjdGlvbi5cbiAqIC0gRmlyZXMgYWZ0ZXIgdXNlciBpbnB1dC5cbiAqL1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmICghaGFzTGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAvLyBUcmFjayB0aGUgaW5wdXQgbm9kZSB0aGF0IGhhcyBmb2N1cy5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0b3BMZXZlbFRhcmdldCkgfHwgdG9wTGV2ZWxUYXJnZXQuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudElEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbiAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAvLyBEb24ndCBmaXJlIHRoZSBldmVudCB3aGlsZSB0aGUgdXNlciBpcyBkcmFnZ2luZy4gVGhpcyBtYXRjaGVzIHRoZVxuICAgICAgLy8gc2VtYW50aWNzIG9mIHRoZSBuYXRpdmUgc2VsZWN0IGV2ZW50LlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgICAgbW91c2VEb3duID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VVcDpcbiAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gICAgICAvLyBDaHJvbWUgYW5kIElFIGZpcmUgbm9uLXN0YW5kYXJkIGV2ZW50IHdoZW4gc2VsZWN0aW9uIGlzIGNoYW5nZWQgKGFuZFxuICAgICAgLy8gc29tZXRpbWVzIHdoZW4gaXQgaGFzbid0KS4gSUUncyBldmVudCBmaXJlcyBvdXQgb2Ygb3JkZXIgd2l0aCByZXNwZWN0XG4gICAgICAvLyB0byBrZXkgYW5kIGlucHV0IGV2ZW50cyBvbiBkZWxldGlvbiwgc28gd2UgZGlzY2FyZCBpdC5cbiAgICAgIC8vXG4gICAgICAvLyBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBzZWxlY3Rpb25jaGFuZ2UsIHNvIGNoZWNrIHNlbGVjdGlvbiBzdGF0dXNcbiAgICAgIC8vIGFmdGVyIGVhY2gga2V5IGVudHJ5LiBUaGUgc2VsZWN0aW9uIGNoYW5nZXMgYWZ0ZXIga2V5ZG93biBhbmQgYmVmb3JlXG4gICAgICAvLyBrZXl1cCwgYnV0IHdlIGNoZWNrIG9uIGtleWRvd24gYXMgd2VsbCBpbiB0aGUgY2FzZSBvZiBob2xkaW5nIGRvd24gYVxuICAgICAgLy8ga2V5LCB3aGVuIG11bHRpcGxlIGtleWRvd24gZXZlbnRzIGFyZSBmaXJlZCBidXQgb25seSBvbmUga2V5dXAgaXMuXG4gICAgICAvLyBUaGlzIGlzIGFsc28gb3VyIGFwcHJvYWNoIGZvciBJRSBoYW5kbGluZywgZm9yIHRoZSByZWFzb24gYWJvdmUuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlOlxuICAgICAgICBpZiAoc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBkaWRQdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSBPTl9TRUxFQ1RfS0VZKSB7XG4gICAgICBoYXNMaXN0ZW5lciA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdEV2ZW50UGx1Z2luOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTZXJ2ZXJSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2l6ZSBvZiB0aGUgcmVhY3RSb290IElEIHNwYWNlLiBXZSBnZW5lcmF0ZSByYW5kb20gbnVtYmVycyBmb3IgUmVhY3Qgcm9vdFxuICogSURzIGFuZCBpZiB0aGVyZSdzIGEgY29sbGlzaW9uIHRoZSBldmVudHMgYW5kIERPTSB1cGRhdGUgc3lzdGVtIHdpbGxcbiAqIGdldCBjb25mdXNlZC4gSW4gdGhlIGZ1dHVyZSB3ZSBuZWVkIGEgd2F5IHRvIGdlbmVyYXRlIEdVSURzIGJ1dCBmb3JcbiAqIG5vdyB0aGlzIHdpbGwgd29yayBvbiBhIHNtYWxsZXIgc2NhbGUuXG4gKi9cbnZhciBHTE9CQUxfTU9VTlRfUE9JTlRfTUFYID0gTWF0aC5wb3coMiwgNTMpO1xuXG52YXIgU2VydmVyUmVhY3RSb290SW5kZXggPSB7XG4gIGNyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogR0xPQkFMX01PVU5UX1BPSU5UX01BWCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VydmVyUmVhY3RSb290SW5kZXg7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTaW1wbGVFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCdmYmpzL2xpYi9FdmVudExpc3RlbmVyJyk7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnQnKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcbnZhciBTeW50aGV0aWNGb2N1c0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNGb2N1c0V2ZW50Jyk7XG52YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljS2V5Ym9hcmRFdmVudCcpO1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY01vdXNlRXZlbnQnKTtcbnZhciBTeW50aGV0aWNEcmFnRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0RyYWdFdmVudCcpO1xudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1RvdWNoRXZlbnQnKTtcbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG52YXIgU3ludGhldGljV2hlZWxFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljV2hlZWxFdmVudCcpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZSgnLi9nZXRFdmVudENoYXJDb2RlJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBhYm9ydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQWJvcnQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkFib3J0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgYmx1cjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQmx1cjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQmx1ckNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGNhblBsYXk6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNhblBsYXk6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNhblBsYXlDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBjYW5QbGF5VGhyb3VnaDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ2FuUGxheVRocm91Z2g6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNhblBsYXlUaHJvdWdoQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgY2xpY2s6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNsaWNrOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25DbGlja0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGNvbnRleHRNZW51OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db250ZXh0TWVudTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ29udGV4dE1lbnVDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBjb3B5OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db3B5OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Db3B5Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgY3V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25DdXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkN1dENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRvdWJsZUNsaWNrOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Eb3VibGVDbGljazogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRG91YmxlQ2xpY2tDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0VuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ0VuZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ0VuZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFbnRlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ0VudGVyOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnRW50ZXJDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnRXhpdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ0V4aXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdFeGl0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0xlYXZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnTGVhdmU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdMZWF2ZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdPdmVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnT3ZlcjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ092ZXJDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyYWdTdGFydDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ1N0YXJ0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJvcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJvcDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJvcENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGR1cmF0aW9uQ2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EdXJhdGlvbkNoYW5nZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHVyYXRpb25DaGFuZ2VDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBlbXB0aWVkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25FbXB0aWVkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25FbXB0aWVkQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZW5jcnlwdGVkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25FbmNyeXB0ZWQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkVuY3J5cHRlZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGVuZGVkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25FbmRlZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRW5kZWRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBlcnJvcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRXJyb3I6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkVycm9yQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkZvY3VzOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Gb2N1c0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGlucHV0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25JbnB1dDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uSW5wdXRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBrZXlEb3duOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25LZXlEb3duOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25LZXlEb3duQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAga2V5UHJlc3M6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbktleVByZXNzOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25LZXlQcmVzc0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGtleVVwOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25LZXlVcDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uS2V5VXBDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBsb2FkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Mb2FkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Mb2FkQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbG9hZGVkRGF0YToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTG9hZGVkRGF0YTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTG9hZGVkRGF0YUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGxvYWRlZE1ldGFkYXRhOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Mb2FkZWRNZXRhZGF0YTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTG9hZGVkTWV0YWRhdGFDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBsb2FkU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkxvYWRTdGFydDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTG9hZFN0YXJ0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgLy8gTm90ZTogV2UgZG8gbm90IGFsbG93IGxpc3RlbmluZyB0byBtb3VzZU92ZXIgZXZlbnRzLiBJbnN0ZWFkLCB1c2UgdGhlXG4gIC8vIG9uTW91c2VFbnRlci9vbk1vdXNlTGVhdmUgY3JlYXRlZCBieSBgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luYC5cbiAgbW91c2VEb3duOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Nb3VzZURvd246IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlRG93bkNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlTW92ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTW91c2VNb3ZlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBtb3VzZU91dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTW91c2VPdXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlT3V0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VPdmVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Nb3VzZU92ZXI6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlT3ZlckNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlVXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbk1vdXNlVXA6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlVXBDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBwYXN0ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUGFzdGU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblBhc3RlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcGF1c2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblBhdXNlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25QYXVzZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHBsYXk6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblBsYXk6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblBsYXlDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBwbGF5aW5nOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25QbGF5aW5nOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25QbGF5aW5nQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcHJvZ3Jlc3M6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblByb2dyZXNzOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Qcm9ncmVzc0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHJhdGVDaGFuZ2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblJhdGVDaGFuZ2U6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblJhdGVDaGFuZ2VDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICByZXNldDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUmVzZXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblJlc2V0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgc2Nyb2xsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TY3JvbGw6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblNjcm9sbENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHNlZWtlZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU2Vla2VkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TZWVrZWRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBzZWVraW5nOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TZWVraW5nOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TZWVraW5nQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgc3RhbGxlZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU3RhbGxlZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uU3RhbGxlZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHN1Ym1pdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU3VibWl0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TdWJtaXRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBzdXNwZW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TdXNwZW5kOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TdXNwZW5kQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgdGltZVVwZGF0ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uVGltZVVwZGF0ZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVGltZVVwZGF0ZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoQ2FuY2VsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Ub3VjaENhbmNlbDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVG91Y2hDYW5jZWxDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB0b3VjaEVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uVG91Y2hFbmQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblRvdWNoRW5kQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hNb3ZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Ub3VjaE1vdmU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblRvdWNoTW92ZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblRvdWNoU3RhcnQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblRvdWNoU3RhcnRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB2b2x1bWVDaGFuZ2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblZvbHVtZUNoYW5nZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVm9sdW1lQ2hhbmdlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgd2FpdGluZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uV2FpdGluZzogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uV2FpdGluZ0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHdoZWVsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25XaGVlbDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uV2hlZWxDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9XG59O1xuXG52YXIgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnID0ge1xuICB0b3BBYm9ydDogZXZlbnRUeXBlcy5hYm9ydCxcbiAgdG9wQmx1cjogZXZlbnRUeXBlcy5ibHVyLFxuICB0b3BDYW5QbGF5OiBldmVudFR5cGVzLmNhblBsYXksXG4gIHRvcENhblBsYXlUaHJvdWdoOiBldmVudFR5cGVzLmNhblBsYXlUaHJvdWdoLFxuICB0b3BDbGljazogZXZlbnRUeXBlcy5jbGljayxcbiAgdG9wQ29udGV4dE1lbnU6IGV2ZW50VHlwZXMuY29udGV4dE1lbnUsXG4gIHRvcENvcHk6IGV2ZW50VHlwZXMuY29weSxcbiAgdG9wQ3V0OiBldmVudFR5cGVzLmN1dCxcbiAgdG9wRG91YmxlQ2xpY2s6IGV2ZW50VHlwZXMuZG91YmxlQ2xpY2ssXG4gIHRvcERyYWc6IGV2ZW50VHlwZXMuZHJhZyxcbiAgdG9wRHJhZ0VuZDogZXZlbnRUeXBlcy5kcmFnRW5kLFxuICB0b3BEcmFnRW50ZXI6IGV2ZW50VHlwZXMuZHJhZ0VudGVyLFxuICB0b3BEcmFnRXhpdDogZXZlbnRUeXBlcy5kcmFnRXhpdCxcbiAgdG9wRHJhZ0xlYXZlOiBldmVudFR5cGVzLmRyYWdMZWF2ZSxcbiAgdG9wRHJhZ092ZXI6IGV2ZW50VHlwZXMuZHJhZ092ZXIsXG4gIHRvcERyYWdTdGFydDogZXZlbnRUeXBlcy5kcmFnU3RhcnQsXG4gIHRvcERyb3A6IGV2ZW50VHlwZXMuZHJvcCxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6IGV2ZW50VHlwZXMuZHVyYXRpb25DaGFuZ2UsXG4gIHRvcEVtcHRpZWQ6IGV2ZW50VHlwZXMuZW1wdGllZCxcbiAgdG9wRW5jcnlwdGVkOiBldmVudFR5cGVzLmVuY3J5cHRlZCxcbiAgdG9wRW5kZWQ6IGV2ZW50VHlwZXMuZW5kZWQsXG4gIHRvcEVycm9yOiBldmVudFR5cGVzLmVycm9yLFxuICB0b3BGb2N1czogZXZlbnRUeXBlcy5mb2N1cyxcbiAgdG9wSW5wdXQ6IGV2ZW50VHlwZXMuaW5wdXQsXG4gIHRvcEtleURvd246IGV2ZW50VHlwZXMua2V5RG93bixcbiAgdG9wS2V5UHJlc3M6IGV2ZW50VHlwZXMua2V5UHJlc3MsXG4gIHRvcEtleVVwOiBldmVudFR5cGVzLmtleVVwLFxuICB0b3BMb2FkOiBldmVudFR5cGVzLmxvYWQsXG4gIHRvcExvYWRlZERhdGE6IGV2ZW50VHlwZXMubG9hZGVkRGF0YSxcbiAgdG9wTG9hZGVkTWV0YWRhdGE6IGV2ZW50VHlwZXMubG9hZGVkTWV0YWRhdGEsXG4gIHRvcExvYWRTdGFydDogZXZlbnRUeXBlcy5sb2FkU3RhcnQsXG4gIHRvcE1vdXNlRG93bjogZXZlbnRUeXBlcy5tb3VzZURvd24sXG4gIHRvcE1vdXNlTW92ZTogZXZlbnRUeXBlcy5tb3VzZU1vdmUsXG4gIHRvcE1vdXNlT3V0OiBldmVudFR5cGVzLm1vdXNlT3V0LFxuICB0b3BNb3VzZU92ZXI6IGV2ZW50VHlwZXMubW91c2VPdmVyLFxuICB0b3BNb3VzZVVwOiBldmVudFR5cGVzLm1vdXNlVXAsXG4gIHRvcFBhc3RlOiBldmVudFR5cGVzLnBhc3RlLFxuICB0b3BQYXVzZTogZXZlbnRUeXBlcy5wYXVzZSxcbiAgdG9wUGxheTogZXZlbnRUeXBlcy5wbGF5LFxuICB0b3BQbGF5aW5nOiBldmVudFR5cGVzLnBsYXlpbmcsXG4gIHRvcFByb2dyZXNzOiBldmVudFR5cGVzLnByb2dyZXNzLFxuICB0b3BSYXRlQ2hhbmdlOiBldmVudFR5cGVzLnJhdGVDaGFuZ2UsXG4gIHRvcFJlc2V0OiBldmVudFR5cGVzLnJlc2V0LFxuICB0b3BTY3JvbGw6IGV2ZW50VHlwZXMuc2Nyb2xsLFxuICB0b3BTZWVrZWQ6IGV2ZW50VHlwZXMuc2Vla2VkLFxuICB0b3BTZWVraW5nOiBldmVudFR5cGVzLnNlZWtpbmcsXG4gIHRvcFN0YWxsZWQ6IGV2ZW50VHlwZXMuc3RhbGxlZCxcbiAgdG9wU3VibWl0OiBldmVudFR5cGVzLnN1Ym1pdCxcbiAgdG9wU3VzcGVuZDogZXZlbnRUeXBlcy5zdXNwZW5kLFxuICB0b3BUaW1lVXBkYXRlOiBldmVudFR5cGVzLnRpbWVVcGRhdGUsXG4gIHRvcFRvdWNoQ2FuY2VsOiBldmVudFR5cGVzLnRvdWNoQ2FuY2VsLFxuICB0b3BUb3VjaEVuZDogZXZlbnRUeXBlcy50b3VjaEVuZCxcbiAgdG9wVG91Y2hNb3ZlOiBldmVudFR5cGVzLnRvdWNoTW92ZSxcbiAgdG9wVG91Y2hTdGFydDogZXZlbnRUeXBlcy50b3VjaFN0YXJ0LFxuICB0b3BWb2x1bWVDaGFuZ2U6IGV2ZW50VHlwZXMudm9sdW1lQ2hhbmdlLFxuICB0b3BXYWl0aW5nOiBldmVudFR5cGVzLndhaXRpbmcsXG4gIHRvcFdoZWVsOiBldmVudFR5cGVzLndoZWVsXG59O1xuXG5mb3IgKHZhciB0eXBlIGluIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZykge1xuICB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdHlwZV0uZGVwZW5kZW5jaWVzID0gW3R5cGVdO1xufVxuXG52YXIgT05fQ0xJQ0tfS0VZID0ga2V5T2YoeyBvbkNsaWNrOiBudWxsIH0pO1xudmFyIG9uQ2xpY2tMaXN0ZW5lcnMgPSB7fTtcblxudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BMZXZlbFR5cGVdO1xuICAgIGlmICghZGlzcGF0Y2hDb25maWcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgRXZlbnRDb25zdHJ1Y3RvcjtcbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEFib3J0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENhblBsYXk6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ2FuUGxheVRocm91Z2g6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHVyYXRpb25DaGFuZ2U6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRW1wdGllZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFbmNyeXB0ZWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRW5kZWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRXJyb3I6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wSW5wdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkZWREYXRhOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWRlZE1ldGFkYXRhOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWRTdGFydDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXVzZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQbGF5OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBsYXlpbmc6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUHJvZ3Jlc3M6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUmF0ZUNoYW5nZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSZXNldDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWVrZWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2Vla2luZzpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdGFsbGVkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN1Ym1pdDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdXNwZW5kOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRpbWVVcGRhdGU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVm9sdW1lQ2hhbmdlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFdhaXRpbmc6XG4gICAgICAgIC8vIEhUTUwgRXZlbnRzXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5kZXguaHRtbCNldmVudHMtMFxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgICAvLyBGaXJlRm94IGNyZWF0ZXMgYSBrZXlwcmVzcyBldmVudCBmb3IgZnVuY3Rpb24ga2V5cyB0b28uIFRoaXMgcmVtb3Zlc1xuICAgICAgICAvLyB0aGUgdW53YW50ZWQga2V5cHJlc3MgZXZlbnRzLiBFbnRlciBpcyBob3dldmVyIGJvdGggcHJpbnRhYmxlIGFuZFxuICAgICAgICAvLyBub24tcHJpbnRhYmxlLiBPbmUgd291bGQgZXhwZWN0IFRhYiB0byBiZSBhcyB3ZWxsIChidXQgaXQgaXNuJ3QpLlxuICAgICAgICBpZiAoZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ2xpY2s6XG4gICAgICAgIC8vIEZpcmVmb3ggY3JlYXRlcyBhIGNsaWNrIGV2ZW50IG9uIHJpZ2h0IG1vdXNlIGNsaWNrcy4gVGhpcyByZW1vdmVzIHRoZVxuICAgICAgICAvLyB1bndhbnRlZCBjbGljayBldmVudHMuXG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERvdWJsZUNsaWNrOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0VudGVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFeGl0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdMZWF2ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnT3ZlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnU3RhcnQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJvcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGw6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNVSUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvcHk6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ3V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAhRXZlbnRDb25zdHJ1Y3RvciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdTaW1wbGVFdmVudFBsdWdpbjogVW5oYW5kbGVkIGV2ZW50IHR5cGUsIGAlc2AuJywgdG9wTGV2ZWxUeXBlKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGV2ZW50ID0gRXZlbnRDb25zdHJ1Y3Rvci5nZXRQb29sZWQoZGlzcGF0Y2hDb25maWcsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH0sXG5cbiAgZGlkUHV0TGlzdGVuZXI6IGZ1bmN0aW9uIChpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICAvLyBNb2JpbGUgU2FmYXJpIGRvZXMgbm90IGZpcmUgcHJvcGVybHkgYnViYmxlIGNsaWNrIGV2ZW50cyBvblxuICAgIC8vIG5vbi1pbnRlcmFjdGl2ZSBlbGVtZW50cywgd2hpY2ggbWVhbnMgZGVsZWdhdGVkIGNsaWNrIGxpc3RlbmVycyBkbyBub3RcbiAgICAvLyBmaXJlLiBUaGUgd29ya2Fyb3VuZCBmb3IgdGhpcyBidWcgaW52b2x2ZXMgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrXG4gICAgLy8gbGlzdGVuZXIgb24gdGhlIHRhcmdldCBub2RlLlxuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSBPTl9DTElDS19LRVkpIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICAgIGlmICghb25DbGlja0xpc3RlbmVyc1tpZF0pIHtcbiAgICAgICAgb25DbGlja0xpc3RlbmVyc1tpZF0gPSBFdmVudExpc3RlbmVyLmxpc3Rlbihub2RlLCAnY2xpY2snLCBlbXB0eUZ1bmN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgd2lsbERlbGV0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gT05fQ0xJQ0tfS0VZKSB7XG4gICAgICBvbkNsaWNrTGlzdGVuZXJzW2lkXS5yZW1vdmUoKTtcbiAgICAgIGRlbGV0ZSBvbkNsaWNrTGlzdGVuZXJzW2lkXTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaW1wbGVFdmVudFBsdWdpbjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVMmx0Y0d4bFJYWmxiblJRYkhWbmFXNHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JUYVcxd2JHVkZkbVZ1ZEZCc2RXZHBibHh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUVWMlpXNTBRMjl1YzNSaGJuUnpJRDBnY21WeGRXbHlaU2duTGk5RmRtVnVkRU52Ym5OMFlXNTBjeWNwTzF4dWRtRnlJRVYyWlc1MFRHbHpkR1Z1WlhJZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOUZkbVZ1ZEV4cGMzUmxibVZ5SnlrN1hHNTJZWElnUlhabGJuUlFjbTl3WVdkaGRHOXljeUE5SUhKbGNYVnBjbVVvSnk0dlJYWmxiblJRY205d1lXZGhkRzl5Y3ljcE8xeHVkbUZ5SUZKbFlXTjBUVzkxYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFRXOTFiblFuS1R0Y2JuWmhjaUJUZVc1MGFHVjBhV05EYkdsd1ltOWhjbVJGZG1WdWRDQTlJSEpsY1hWcGNtVW9KeTR2VTNsdWRHaGxkR2xqUTJ4cGNHSnZZWEprUlhabGJuUW5LVHRjYm5aaGNpQlRlVzUwYUdWMGFXTkZkbVZ1ZENBOUlISmxjWFZwY21Vb0p5NHZVM2x1ZEdobGRHbGpSWFpsYm5RbktUdGNiblpoY2lCVGVXNTBhR1YwYVdOR2IyTjFjMFYyWlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlUZVc1MGFHVjBhV05HYjJOMWMwVjJaVzUwSnlrN1hHNTJZWElnVTNsdWRHaGxkR2xqUzJWNVltOWhjbVJGZG1WdWRDQTlJSEpsY1hWcGNtVW9KeTR2VTNsdWRHaGxkR2xqUzJWNVltOWhjbVJGZG1WdWRDY3BPMXh1ZG1GeUlGTjViblJvWlhScFkwMXZkWE5sUlhabGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDFONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5RbktUdGNiblpoY2lCVGVXNTBhR1YwYVdORWNtRm5SWFpsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMU41Ym5Sb1pYUnBZMFJ5WVdkRmRtVnVkQ2NwTzF4dWRtRnlJRk41Ym5Sb1pYUnBZMVJ2ZFdOb1JYWmxiblFnUFNCeVpYRjFhWEpsS0NjdUwxTjViblJvWlhScFkxUnZkV05vUlhabGJuUW5LVHRjYm5aaGNpQlRlVzUwYUdWMGFXTlZTVVYyWlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlUZVc1MGFHVjBhV05WU1VWMlpXNTBKeWs3WEc1MllYSWdVM2x1ZEdobGRHbGpWMmhsWld4RmRtVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlUzbHVkR2hsZEdsalYyaGxaV3hGZG1WdWRDY3BPMXh1WEc1MllYSWdaVzF3ZEhsR2RXNWpkR2x2YmlBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwyVnRjSFI1Um5WdVkzUnBiMjRuS1R0Y2JuWmhjaUJuWlhSRmRtVnVkRU5vWVhKRGIyUmxJRDBnY21WeGRXbHlaU2duTGk5blpYUkZkbVZ1ZEVOb1lYSkRiMlJsSnlrN1hHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNnblptSnFjeTlzYVdJdmFXNTJZWEpwWVc1MEp5azdYRzUyWVhJZ2EyVjVUMllnUFNCeVpYRjFhWEpsS0NkbVltcHpMMnhwWWk5clpYbFBaaWNwTzF4dVhHNTJZWElnZEc5d1RHVjJaV3hVZVhCbGN5QTlJRVYyWlc1MFEyOXVjM1JoYm5SekxuUnZjRXhsZG1Wc1ZIbHdaWE03WEc1Y2JuWmhjaUJsZG1WdWRGUjVjR1Z6SUQwZ2UxeHVJQ0JoWW05eWREb2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3SUc5dVFXSnZjblE2SUhSeWRXVWdmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9leUJ2YmtGaWIzSjBRMkZ3ZEhWeVpUb2dkSEoxWlNCOUtWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ1lteDFjam9nZTF4dUlDQWdJSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWek9pQjdYRzRnSUNBZ0lDQmlkV0ppYkdWa09pQnJaWGxQWmloN0lHOXVRbXgxY2pvZ2RISjFaU0I5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3SUc5dVFteDFja05oY0hSMWNtVTZJSFJ5ZFdVZ2ZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHTmhibEJzWVhrNklIdGNiaUFnSUNCd2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjem9nZTF4dUlDQWdJQ0FnWW5WaVlteGxaRG9nYTJWNVQyWW9leUJ2YmtOaGJsQnNZWGs2SUhSeWRXVWdmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9leUJ2YmtOaGJsQnNZWGxEWVhCMGRYSmxPaUIwY25WbElIMHBYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dUlDQmpZVzVRYkdGNVZHaHliM1ZuYURvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdJRzl1UTJGdVVHeGhlVlJvY205MVoyZzZJSFJ5ZFdVZ2ZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2V5QnZia05oYmxCc1lYbFVhSEp2ZFdkb1EyRndkSFZ5WlRvZ2RISjFaU0I5S1Z4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnWTJ4cFkyczZJSHRjYmlBZ0lDQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3pvZ2UxeHVJQ0FnSUNBZ1luVmlZbXhsWkRvZ2EyVjVUMllvZXlCdmJrTnNhV05yT2lCMGNuVmxJSDBwTEZ4dUlDQWdJQ0FnWTJGd2RIVnlaV1E2SUd0bGVVOW1LSHNnYjI1RGJHbGphME5oY0hSMWNtVTZJSFJ5ZFdVZ2ZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHTnZiblJsZUhSTlpXNTFPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0hzZ2IyNURiMjUwWlhoMFRXVnVkVG9nZEhKMVpTQjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdJRzl1UTI5dWRHVjRkRTFsYm5WRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0JqYjNCNU9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1RGIzQjVPaUIwY25WbElIMHBMRnh1SUNBZ0lDQWdZMkZ3ZEhWeVpXUTZJR3RsZVU5bUtIc2diMjVEYjNCNVEyRndkSFZ5WlRvZ2RISjFaU0I5S1Z4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnWTNWME9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1RGRYUTZJSFJ5ZFdVZ2ZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2V5QnZia04xZEVOaGNIUjFjbVU2SUhSeWRXVWdmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJR1J2ZFdKc1pVTnNhV05yT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIc2diMjVFYjNWaWJHVkRiR2xqYXpvZ2RISjFaU0I5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3SUc5dVJHOTFZbXhsUTJ4cFkydERZWEIwZFhKbE9pQjBjblZsSUgwcFhHNGdJQ0FnZlZ4dUlDQjlMRnh1SUNCa2NtRm5PaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0hzZ2IyNUVjbUZuT2lCMGNuVmxJSDBwTEZ4dUlDQWdJQ0FnWTJGd2RIVnlaV1E2SUd0bGVVOW1LSHNnYjI1RWNtRm5RMkZ3ZEhWeVpUb2dkSEoxWlNCOUtWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ1pISmhaMFZ1WkRvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdJRzl1UkhKaFowVnVaRG9nZEhKMVpTQjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdJRzl1UkhKaFowVnVaRU5oY0hSMWNtVTZJSFJ5ZFdVZ2ZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHUnlZV2RGYm5SbGNqb2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3SUc5dVJISmhaMFZ1ZEdWeU9pQjBjblZsSUgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0hzZ2IyNUVjbUZuUlc1MFpYSkRZWEIwZFhKbE9pQjBjblZsSUgwcFhHNGdJQ0FnZlZ4dUlDQjlMRnh1SUNCa2NtRm5SWGhwZERvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdJRzl1UkhKaFowVjRhWFE2SUhSeWRXVWdmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9leUJ2YmtSeVlXZEZlR2wwUTJGd2RIVnlaVG9nZEhKMVpTQjlLVnh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdaSEpoWjB4bFlYWmxPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0hzZ2IyNUVjbUZuVEdWaGRtVTZJSFJ5ZFdVZ2ZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2V5QnZia1J5WVdkTVpXRjJaVU5oY0hSMWNtVTZJSFJ5ZFdVZ2ZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHUnlZV2RQZG1WeU9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1RWNtRm5UM1psY2pvZ2RISjFaU0I5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3SUc5dVJISmhaMDkyWlhKRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0JrY21GblUzUmhjblE2SUh0Y2JpQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN6b2dlMXh1SUNBZ0lDQWdZblZpWW14bFpEb2dhMlY1VDJZb2V5QnZia1J5WVdkVGRHRnlkRG9nZEhKMVpTQjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdJRzl1UkhKaFoxTjBZWEowUTJGd2RIVnlaVG9nZEhKMVpTQjlLVnh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdaSEp2Y0RvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdJRzl1UkhKdmNEb2dkSEoxWlNCOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN0lHOXVSSEp2Y0VOaGNIUjFjbVU2SUhSeWRXVWdmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJR1IxY21GMGFXOXVRMmhoYm1kbE9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1RWRYSmhkR2x2YmtOb1lXNW5aVG9nZEhKMVpTQjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdJRzl1UkhWeVlYUnBiMjVEYUdGdVoyVkRZWEIwZFhKbE9pQjBjblZsSUgwcFhHNGdJQ0FnZlZ4dUlDQjlMRnh1SUNCbGJYQjBhV1ZrT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIc2diMjVGYlhCMGFXVmtPaUIwY25WbElIMHBMRnh1SUNBZ0lDQWdZMkZ3ZEhWeVpXUTZJR3RsZVU5bUtIc2diMjVGYlhCMGFXVmtRMkZ3ZEhWeVpUb2dkSEoxWlNCOUtWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ1pXNWpjbmx3ZEdWa09pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1RmJtTnllWEIwWldRNklIUnlkV1VnZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZXlCdmJrVnVZM0o1Y0hSbFpFTmhjSFIxY21VNklIUnlkV1VnZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUdWdVpHVmtPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0hzZ2IyNUZibVJsWkRvZ2RISjFaU0I5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3SUc5dVJXNWtaV1JEWVhCMGRYSmxPaUIwY25WbElIMHBYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dUlDQmxjbkp2Y2pvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdJRzl1UlhKeWIzSTZJSFJ5ZFdVZ2ZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2V5QnZia1Z5Y205eVEyRndkSFZ5WlRvZ2RISjFaU0I5S1Z4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnWm05amRYTTZJSHRjYmlBZ0lDQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3pvZ2UxeHVJQ0FnSUNBZ1luVmlZbXhsWkRvZ2EyVjVUMllvZXlCdmJrWnZZM1Z6T2lCMGNuVmxJSDBwTEZ4dUlDQWdJQ0FnWTJGd2RIVnlaV1E2SUd0bGVVOW1LSHNnYjI1R2IyTjFjME5oY0hSMWNtVTZJSFJ5ZFdVZ2ZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHbHVjSFYwT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIc2diMjVKYm5CMWREb2dkSEoxWlNCOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN0lHOXVTVzV3ZFhSRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0JyWlhsRWIzZHVPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0hzZ2IyNUxaWGxFYjNkdU9pQjBjblZsSUgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0hzZ2IyNUxaWGxFYjNkdVEyRndkSFZ5WlRvZ2RISjFaU0I5S1Z4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnYTJWNVVISmxjM002SUh0Y2JpQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN6b2dlMXh1SUNBZ0lDQWdZblZpWW14bFpEb2dhMlY1VDJZb2V5QnZia3RsZVZCeVpYTnpPaUIwY25WbElIMHBMRnh1SUNBZ0lDQWdZMkZ3ZEhWeVpXUTZJR3RsZVU5bUtIc2diMjVMWlhsUWNtVnpjME5oY0hSMWNtVTZJSFJ5ZFdVZ2ZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHdGxlVlZ3T2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIc2diMjVMWlhsVmNEb2dkSEoxWlNCOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN0lHOXVTMlY1VlhCRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0JzYjJGa09pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1TWIyRmtPaUIwY25WbElIMHBMRnh1SUNBZ0lDQWdZMkZ3ZEhWeVpXUTZJR3RsZVU5bUtIc2diMjVNYjJGa1EyRndkSFZ5WlRvZ2RISjFaU0I5S1Z4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnYkc5aFpHVmtSR0YwWVRvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdJRzl1VEc5aFpHVmtSR0YwWVRvZ2RISjFaU0I5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3SUc5dVRHOWhaR1ZrUkdGMFlVTmhjSFIxY21VNklIUnlkV1VnZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUd4dllXUmxaRTFsZEdGa1lYUmhPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0hzZ2IyNU1iMkZrWldSTlpYUmhaR0YwWVRvZ2RISjFaU0I5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3SUc5dVRHOWhaR1ZrVFdWMFlXUmhkR0ZEWVhCMGRYSmxPaUIwY25WbElIMHBYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dUlDQnNiMkZrVTNSaGNuUTZJSHRjYmlBZ0lDQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3pvZ2UxeHVJQ0FnSUNBZ1luVmlZbXhsWkRvZ2EyVjVUMllvZXlCdmJreHZZV1JUZEdGeWREb2dkSEoxWlNCOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN0lHOXVURzloWkZOMFlYSjBRMkZ3ZEhWeVpUb2dkSEoxWlNCOUtWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ0x5OGdUbTkwWlRvZ1YyVWdaRzhnYm05MElHRnNiRzkzSUd4cGMzUmxibWx1WnlCMGJ5QnRiM1Z6WlU5MlpYSWdaWFpsYm5SekxpQkpibk4wWldGa0xDQjFjMlVnZEdobFhHNGdJQzh2SUc5dVRXOTFjMlZGYm5SbGNpOXZiazF2ZFhObFRHVmhkbVVnWTNKbFlYUmxaQ0JpZVNCZ1JXNTBaWEpNWldGMlpVVjJaVzUwVUd4MVoybHVZQzVjYmlBZ2JXOTFjMlZFYjNkdU9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1TmIzVnpaVVJ2ZDI0NklIUnlkV1VnZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZXlCdmJrMXZkWE5sUkc5M2JrTmhjSFIxY21VNklIUnlkV1VnZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUcxdmRYTmxUVzkyWlRvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdJRzl1VFc5MWMyVk5iM1psT2lCMGNuVmxJSDBwTEZ4dUlDQWdJQ0FnWTJGd2RIVnlaV1E2SUd0bGVVOW1LSHNnYjI1TmIzVnpaVTF2ZG1WRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0J0YjNWelpVOTFkRG9nZTF4dUlDQWdJSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWek9pQjdYRzRnSUNBZ0lDQmlkV0ppYkdWa09pQnJaWGxQWmloN0lHOXVUVzkxYzJWUGRYUTZJSFJ5ZFdVZ2ZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2V5QnZiazF2ZFhObFQzVjBRMkZ3ZEhWeVpUb2dkSEoxWlNCOUtWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ2JXOTFjMlZQZG1WeU9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1TmIzVnpaVTkyWlhJNklIUnlkV1VnZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZXlCdmJrMXZkWE5sVDNabGNrTmhjSFIxY21VNklIUnlkV1VnZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUcxdmRYTmxWWEE2SUh0Y2JpQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN6b2dlMXh1SUNBZ0lDQWdZblZpWW14bFpEb2dhMlY1VDJZb2V5QnZiazF2ZFhObFZYQTZJSFJ5ZFdVZ2ZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2V5QnZiazF2ZFhObFZYQkRZWEIwZFhKbE9pQjBjblZsSUgwcFhHNGdJQ0FnZlZ4dUlDQjlMRnh1SUNCd1lYTjBaVG9nZTF4dUlDQWdJSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWek9pQjdYRzRnSUNBZ0lDQmlkV0ppYkdWa09pQnJaWGxQWmloN0lHOXVVR0Z6ZEdVNklIUnlkV1VnZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZXlCdmJsQmhjM1JsUTJGd2RIVnlaVG9nZEhKMVpTQjlLVnh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdjR0YxYzJVNklIdGNiaUFnSUNCd2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjem9nZTF4dUlDQWdJQ0FnWW5WaVlteGxaRG9nYTJWNVQyWW9leUJ2YmxCaGRYTmxPaUIwY25WbElIMHBMRnh1SUNBZ0lDQWdZMkZ3ZEhWeVpXUTZJR3RsZVU5bUtIc2diMjVRWVhWelpVTmhjSFIxY21VNklIUnlkV1VnZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhCc1lYazZJSHRjYmlBZ0lDQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3pvZ2UxeHVJQ0FnSUNBZ1luVmlZbXhsWkRvZ2EyVjVUMllvZXlCdmJsQnNZWGs2SUhSeWRXVWdmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9leUJ2YmxCc1lYbERZWEIwZFhKbE9pQjBjblZsSUgwcFhHNGdJQ0FnZlZ4dUlDQjlMRnh1SUNCd2JHRjVhVzVuT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIc2diMjVRYkdGNWFXNW5PaUIwY25WbElIMHBMRnh1SUNBZ0lDQWdZMkZ3ZEhWeVpXUTZJR3RsZVU5bUtIc2diMjVRYkdGNWFXNW5RMkZ3ZEhWeVpUb2dkSEoxWlNCOUtWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ2NISnZaM0psYzNNNklIdGNiaUFnSUNCd2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjem9nZTF4dUlDQWdJQ0FnWW5WaVlteGxaRG9nYTJWNVQyWW9leUJ2YmxCeWIyZHlaWE56T2lCMGNuVmxJSDBwTEZ4dUlDQWdJQ0FnWTJGd2RIVnlaV1E2SUd0bGVVOW1LSHNnYjI1UWNtOW5jbVZ6YzBOaGNIUjFjbVU2SUhSeWRXVWdmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJSEpoZEdWRGFHRnVaMlU2SUh0Y2JpQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN6b2dlMXh1SUNBZ0lDQWdZblZpWW14bFpEb2dhMlY1VDJZb2V5QnZibEpoZEdWRGFHRnVaMlU2SUhSeWRXVWdmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9leUJ2YmxKaGRHVkRhR0Z1WjJWRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0J5WlhObGREb2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3SUc5dVVtVnpaWFE2SUhSeWRXVWdmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9leUJ2YmxKbGMyVjBRMkZ3ZEhWeVpUb2dkSEoxWlNCOUtWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ2MyTnliMnhzT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIc2diMjVUWTNKdmJHdzZJSFJ5ZFdVZ2ZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2V5QnZibE5qY205c2JFTmhjSFIxY21VNklIUnlkV1VnZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhObFpXdGxaRG9nZTF4dUlDQWdJSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWek9pQjdYRzRnSUNBZ0lDQmlkV0ppYkdWa09pQnJaWGxQWmloN0lHOXVVMlZsYTJWa09pQjBjblZsSUgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0hzZ2IyNVRaV1ZyWldSRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0J6WldWcmFXNW5PaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0hzZ2IyNVRaV1ZyYVc1bk9pQjBjblZsSUgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0hzZ2IyNVRaV1ZyYVc1blEyRndkSFZ5WlRvZ2RISjFaU0I5S1Z4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnYzNSaGJHeGxaRG9nZTF4dUlDQWdJSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWek9pQjdYRzRnSUNBZ0lDQmlkV0ppYkdWa09pQnJaWGxQWmloN0lHOXVVM1JoYkd4bFpEb2dkSEoxWlNCOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN0lHOXVVM1JoYkd4bFpFTmhjSFIxY21VNklIUnlkV1VnZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhOMVltMXBkRG9nZTF4dUlDQWdJSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWek9pQjdYRzRnSUNBZ0lDQmlkV0ppYkdWa09pQnJaWGxQWmloN0lHOXVVM1ZpYldsME9pQjBjblZsSUgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0hzZ2IyNVRkV0p0YVhSRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0J6ZFhOd1pXNWtPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0hzZ2IyNVRkWE53Wlc1a09pQjBjblZsSUgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0hzZ2IyNVRkWE53Wlc1a1EyRndkSFZ5WlRvZ2RISjFaU0I5S1Z4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnZEdsdFpWVndaR0YwWlRvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdJRzl1VkdsdFpWVndaR0YwWlRvZ2RISjFaU0I5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3SUc5dVZHbHRaVlZ3WkdGMFpVTmhjSFIxY21VNklIUnlkV1VnZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhSdmRXTm9RMkZ1WTJWc09pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1VWIzVmphRU5oYm1ObGJEb2dkSEoxWlNCOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN0lHOXVWRzkxWTJoRFlXNWpaV3hEWVhCMGRYSmxPaUIwY25WbElIMHBYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dUlDQjBiM1ZqYUVWdVpEb2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3SUc5dVZHOTFZMmhGYm1RNklIUnlkV1VnZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZXlCdmJsUnZkV05vUlc1a1EyRndkSFZ5WlRvZ2RISjFaU0I5S1Z4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnZEc5MVkyaE5iM1psT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIc2diMjVVYjNWamFFMXZkbVU2SUhSeWRXVWdmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9leUJ2YmxSdmRXTm9UVzkyWlVOaGNIUjFjbVU2SUhSeWRXVWdmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJSFJ2ZFdOb1UzUmhjblE2SUh0Y2JpQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN6b2dlMXh1SUNBZ0lDQWdZblZpWW14bFpEb2dhMlY1VDJZb2V5QnZibFJ2ZFdOb1UzUmhjblE2SUhSeWRXVWdmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9leUJ2YmxSdmRXTm9VM1JoY25SRFlYQjBkWEpsT2lCMGNuVmxJSDBwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0IyYjJ4MWJXVkRhR0Z1WjJVNklIdGNiaUFnSUNCd2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjem9nZTF4dUlDQWdJQ0FnWW5WaVlteGxaRG9nYTJWNVQyWW9leUJ2YmxadmJIVnRaVU5vWVc1blpUb2dkSEoxWlNCOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN0lHOXVWbTlzZFcxbFEyaGhibWRsUTJGd2RIVnlaVG9nZEhKMVpTQjlLVnh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdkMkZwZEdsdVp6b2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3SUc5dVYyRnBkR2x1WnpvZ2RISjFaU0I5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3SUc5dVYyRnBkR2x1WjBOaGNIUjFjbVU2SUhSeWRXVWdmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJSGRvWldWc09pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHNnYjI1WGFHVmxiRG9nZEhKMVpTQjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdJRzl1VjJobFpXeERZWEIwZFhKbE9pQjBjblZsSUgwcFhHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dVhHNTJZWElnZEc5d1RHVjJaV3hGZG1WdWRITlViMFJwYzNCaGRHTm9RMjl1Wm1sbklEMGdlMXh1SUNCMGIzQkJZbTl5ZERvZ1pYWmxiblJVZVhCbGN5NWhZbTl5ZEN4Y2JpQWdkRzl3UW14MWNqb2daWFpsYm5SVWVYQmxjeTVpYkhWeUxGeHVJQ0IwYjNCRFlXNVFiR0Y1T2lCbGRtVnVkRlI1Y0dWekxtTmhibEJzWVhrc1hHNGdJSFJ2Y0VOaGJsQnNZWGxVYUhKdmRXZG9PaUJsZG1WdWRGUjVjR1Z6TG1OaGJsQnNZWGxVYUhKdmRXZG9MRnh1SUNCMGIzQkRiR2xqYXpvZ1pYWmxiblJVZVhCbGN5NWpiR2xqYXl4Y2JpQWdkRzl3UTI5dWRHVjRkRTFsYm5VNklHVjJaVzUwVkhsd1pYTXVZMjl1ZEdWNGRFMWxiblVzWEc0Z0lIUnZjRU52Y0hrNklHVjJaVzUwVkhsd1pYTXVZMjl3ZVN4Y2JpQWdkRzl3UTNWME9pQmxkbVZ1ZEZSNWNHVnpMbU4xZEN4Y2JpQWdkRzl3Ukc5MVlteGxRMnhwWTJzNklHVjJaVzUwVkhsd1pYTXVaRzkxWW14bFEyeHBZMnNzWEc0Z0lIUnZjRVJ5WVdjNklHVjJaVzUwVkhsd1pYTXVaSEpoWnl4Y2JpQWdkRzl3UkhKaFowVnVaRG9nWlhabGJuUlVlWEJsY3k1a2NtRm5SVzVrTEZ4dUlDQjBiM0JFY21GblJXNTBaWEk2SUdWMlpXNTBWSGx3WlhNdVpISmhaMFZ1ZEdWeUxGeHVJQ0IwYjNCRWNtRm5SWGhwZERvZ1pYWmxiblJVZVhCbGN5NWtjbUZuUlhocGRDeGNiaUFnZEc5d1JISmhaMHhsWVhabE9pQmxkbVZ1ZEZSNWNHVnpMbVJ5WVdkTVpXRjJaU3hjYmlBZ2RHOXdSSEpoWjA5MlpYSTZJR1YyWlc1MFZIbHdaWE11WkhKaFowOTJaWElzWEc0Z0lIUnZjRVJ5WVdkVGRHRnlkRG9nWlhabGJuUlVlWEJsY3k1a2NtRm5VM1JoY25Rc1hHNGdJSFJ2Y0VSeWIzQTZJR1YyWlc1MFZIbHdaWE11WkhKdmNDeGNiaUFnZEc5d1JIVnlZWFJwYjI1RGFHRnVaMlU2SUdWMlpXNTBWSGx3WlhNdVpIVnlZWFJwYjI1RGFHRnVaMlVzWEc0Z0lIUnZjRVZ0Y0hScFpXUTZJR1YyWlc1MFZIbHdaWE11Wlcxd2RHbGxaQ3hjYmlBZ2RHOXdSVzVqY25sd2RHVmtPaUJsZG1WdWRGUjVjR1Z6TG1WdVkzSjVjSFJsWkN4Y2JpQWdkRzl3Ulc1a1pXUTZJR1YyWlc1MFZIbHdaWE11Wlc1a1pXUXNYRzRnSUhSdmNFVnljbTl5T2lCbGRtVnVkRlI1Y0dWekxtVnljbTl5TEZ4dUlDQjBiM0JHYjJOMWN6b2daWFpsYm5SVWVYQmxjeTVtYjJOMWN5eGNiaUFnZEc5d1NXNXdkWFE2SUdWMlpXNTBWSGx3WlhNdWFXNXdkWFFzWEc0Z0lIUnZjRXRsZVVSdmQyNDZJR1YyWlc1MFZIbHdaWE11YTJWNVJHOTNiaXhjYmlBZ2RHOXdTMlY1VUhKbGMzTTZJR1YyWlc1MFZIbHdaWE11YTJWNVVISmxjM01zWEc0Z0lIUnZjRXRsZVZWd09pQmxkbVZ1ZEZSNWNHVnpMbXRsZVZWd0xGeHVJQ0IwYjNCTWIyRmtPaUJsZG1WdWRGUjVjR1Z6TG14dllXUXNYRzRnSUhSdmNFeHZZV1JsWkVSaGRHRTZJR1YyWlc1MFZIbHdaWE11Ykc5aFpHVmtSR0YwWVN4Y2JpQWdkRzl3VEc5aFpHVmtUV1YwWVdSaGRHRTZJR1YyWlc1MFZIbHdaWE11Ykc5aFpHVmtUV1YwWVdSaGRHRXNYRzRnSUhSdmNFeHZZV1JUZEdGeWREb2daWFpsYm5SVWVYQmxjeTVzYjJGa1UzUmhjblFzWEc0Z0lIUnZjRTF2ZFhObFJHOTNiam9nWlhabGJuUlVlWEJsY3k1dGIzVnpaVVJ2ZDI0c1hHNGdJSFJ2Y0UxdmRYTmxUVzkyWlRvZ1pYWmxiblJVZVhCbGN5NXRiM1Z6WlUxdmRtVXNYRzRnSUhSdmNFMXZkWE5sVDNWME9pQmxkbVZ1ZEZSNWNHVnpMbTF2ZFhObFQzVjBMRnh1SUNCMGIzQk5iM1Z6WlU5MlpYSTZJR1YyWlc1MFZIbHdaWE11Ylc5MWMyVlBkbVZ5TEZ4dUlDQjBiM0JOYjNWelpWVndPaUJsZG1WdWRGUjVjR1Z6TG0xdmRYTmxWWEFzWEc0Z0lIUnZjRkJoYzNSbE9pQmxkbVZ1ZEZSNWNHVnpMbkJoYzNSbExGeHVJQ0IwYjNCUVlYVnpaVG9nWlhabGJuUlVlWEJsY3k1d1lYVnpaU3hjYmlBZ2RHOXdVR3hoZVRvZ1pYWmxiblJVZVhCbGN5NXdiR0Y1TEZ4dUlDQjBiM0JRYkdGNWFXNW5PaUJsZG1WdWRGUjVjR1Z6TG5Cc1lYbHBibWNzWEc0Z0lIUnZjRkJ5YjJkeVpYTnpPaUJsZG1WdWRGUjVjR1Z6TG5CeWIyZHlaWE56TEZ4dUlDQjBiM0JTWVhSbFEyaGhibWRsT2lCbGRtVnVkRlI1Y0dWekxuSmhkR1ZEYUdGdVoyVXNYRzRnSUhSdmNGSmxjMlYwT2lCbGRtVnVkRlI1Y0dWekxuSmxjMlYwTEZ4dUlDQjBiM0JUWTNKdmJHdzZJR1YyWlc1MFZIbHdaWE11YzJOeWIyeHNMRnh1SUNCMGIzQlRaV1ZyWldRNklHVjJaVzUwVkhsd1pYTXVjMlZsYTJWa0xGeHVJQ0IwYjNCVFpXVnJhVzVuT2lCbGRtVnVkRlI1Y0dWekxuTmxaV3RwYm1jc1hHNGdJSFJ2Y0ZOMFlXeHNaV1E2SUdWMlpXNTBWSGx3WlhNdWMzUmhiR3hsWkN4Y2JpQWdkRzl3VTNWaWJXbDBPaUJsZG1WdWRGUjVjR1Z6TG5OMVltMXBkQ3hjYmlBZ2RHOXdVM1Z6Y0dWdVpEb2daWFpsYm5SVWVYQmxjeTV6ZFhOd1pXNWtMRnh1SUNCMGIzQlVhVzFsVlhCa1lYUmxPaUJsZG1WdWRGUjVjR1Z6TG5ScGJXVlZjR1JoZEdVc1hHNGdJSFJ2Y0ZSdmRXTm9RMkZ1WTJWc09pQmxkbVZ1ZEZSNWNHVnpMblJ2ZFdOb1EyRnVZMlZzTEZ4dUlDQjBiM0JVYjNWamFFVnVaRG9nWlhabGJuUlVlWEJsY3k1MGIzVmphRVZ1WkN4Y2JpQWdkRzl3Vkc5MVkyaE5iM1psT2lCbGRtVnVkRlI1Y0dWekxuUnZkV05vVFc5MlpTeGNiaUFnZEc5d1ZHOTFZMmhUZEdGeWREb2daWFpsYm5SVWVYQmxjeTUwYjNWamFGTjBZWEowTEZ4dUlDQjBiM0JXYjJ4MWJXVkRhR0Z1WjJVNklHVjJaVzUwVkhsd1pYTXVkbTlzZFcxbFEyaGhibWRsTEZ4dUlDQjBiM0JYWVdsMGFXNW5PaUJsZG1WdWRGUjVjR1Z6TG5kaGFYUnBibWNzWEc0Z0lIUnZjRmRvWldWc09pQmxkbVZ1ZEZSNWNHVnpMbmRvWldWc1hHNTlPMXh1WEc1bWIzSWdLSFpoY2lCMGVYQmxJR2x1SUhSdmNFeGxkbVZzUlhabGJuUnpWRzlFYVhOd1lYUmphRU52Ym1acFp5a2dlMXh1SUNCMGIzQk1aWFpsYkVWMlpXNTBjMVJ2UkdsemNHRjBZMmhEYjI1bWFXZGJkSGx3WlYwdVpHVndaVzVrWlc1amFXVnpJRDBnVzNSNWNHVmRPMXh1ZlZ4dVhHNTJZWElnVDA1ZlEweEpRMHRmUzBWWklEMGdhMlY1VDJZb2V5QnZia05zYVdOck9pQnVkV3hzSUgwcE8xeHVkbUZ5SUc5dVEyeHBZMnRNYVhOMFpXNWxjbk1nUFNCN2ZUdGNibHh1ZG1GeUlGTnBiWEJzWlVWMlpXNTBVR3gxWjJsdUlEMGdlMXh1WEc0Z0lHVjJaVzUwVkhsd1pYTTZJR1YyWlc1MFZIbHdaWE1zWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjBiM0JNWlhabGJGUjVjR1VnVW1WamIzSmtJR1p5YjIwZ1lFVjJaVzUwUTI5dWMzUmhiblJ6WUM1Y2JpQWdJQ29nUUhCaGNtRnRJSHRFVDAxRmRtVnVkRlJoY21kbGRIMGdkRzl3VEdWMlpXeFVZWEpuWlhRZ1ZHaGxJR3hwYzNSbGJtbHVaeUJqYjIxd2IyNWxiblFnY205dmRDQnViMlJsTGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkRzl3VEdWMlpXeFVZWEpuWlhSSlJDQkpSQ0J2WmlCZ2RHOXdUR1YyWld4VVlYSm5aWFJnTGx4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdibUYwYVhabFJYWmxiblFnVG1GMGFYWmxJR0p5YjNkelpYSWdaWFpsYm5RdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZXlwOUlFRnVJR0ZqWTNWdGRXeGhkR2x2YmlCdlppQnplVzUwYUdWMGFXTWdaWFpsYm5SekxseHVJQ0FnS2lCQWMyVmxJSHRGZG1WdWRGQnNkV2RwYmtoMVlpNWxlSFJ5WVdOMFJYWmxiblJ6ZlZ4dUlDQWdLaTljYmlBZ1pYaDBjbUZqZEVWMlpXNTBjem9nWm5WdVkzUnBiMjRnS0hSdmNFeGxkbVZzVkhsd1pTd2dkRzl3VEdWMlpXeFVZWEpuWlhRc0lIUnZjRXhsZG1Wc1ZHRnlaMlYwU1VRc0lHNWhkR2wyWlVWMlpXNTBMQ0J1WVhScGRtVkZkbVZ1ZEZSaGNtZGxkQ2tnZTF4dUlDQWdJSFpoY2lCa2FYTndZWFJqYUVOdmJtWnBaeUE5SUhSdmNFeGxkbVZzUlhabGJuUnpWRzlFYVhOd1lYUmphRU52Ym1acFoxdDBiM0JNWlhabGJGUjVjR1ZkTzF4dUlDQWdJR2xtSUNnaFpHbHpjR0YwWTJoRGIyNW1hV2NwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ1JYWmxiblJEYjI1emRISjFZM1J2Y2p0Y2JpQWdJQ0J6ZDJsMFkyZ2dLSFJ2Y0V4bGRtVnNWSGx3WlNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRUZpYjNKME9seHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRU5oYmxCc1lYazZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3UTJGdVVHeGhlVlJvY205MVoyZzZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3UkhWeVlYUnBiMjVEYUdGdVoyVTZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3Ulcxd2RHbGxaRHBjYmlBZ0lDQWdJR05oYzJVZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCRmJtTnllWEIwWldRNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdSVzVrWldRNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdSWEp5YjNJNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdTVzV3ZFhRNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdURzloWkRwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQk1iMkZrWldSRVlYUmhPbHh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0V4dllXUmxaRTFsZEdGa1lYUmhPbHh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0V4dllXUlRkR0Z5ZERwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQlFZWFZ6WlRwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQlFiR0Y1T2x4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNGQnNZWGxwYm1jNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdVSEp2WjNKbGMzTTZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3VW1GMFpVTm9ZVzVuWlRwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQlNaWE5sZERwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQlRaV1ZyWldRNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdVMlZsYTJsdVp6cGNiaUFnSUNBZ0lHTmhjMlVnZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JUZEdGc2JHVmtPbHh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0ZOMVltMXBkRHBjYmlBZ0lDQWdJR05oYzJVZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCVGRYTndaVzVrT2x4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNGUnBiV1ZWY0dSaGRHVTZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3Vm05c2RXMWxRMmhoYm1kbE9seHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRmRoYVhScGJtYzZYRzRnSUNBZ0lDQWdJQzh2SUVoVVRVd2dSWFpsYm5SelhHNGdJQ0FnSUNBZ0lDOHZJRUJ6WldVZ2FIUjBjRG92TDNkM2R5NTNNeTV2Y21jdlZGSXZhSFJ0YkRVdmFXNWtaWGd1YUhSdGJDTmxkbVZ1ZEhNdE1GeHVJQ0FnSUNBZ0lDQkZkbVZ1ZEVOdmJuTjBjblZqZEc5eUlEMGdVM2x1ZEdobGRHbGpSWFpsYm5RN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFdGxlVkJ5WlhOek9seHVJQ0FnSUNBZ0lDQXZMeUJHYVhKbFJtOTRJR055WldGMFpYTWdZU0JyWlhsd2NtVnpjeUJsZG1WdWRDQm1iM0lnWm5WdVkzUnBiMjRnYTJWNWN5QjBiMjh1SUZSb2FYTWdjbVZ0YjNabGMxeHVJQ0FnSUNBZ0lDQXZMeUIwYUdVZ2RXNTNZVzUwWldRZ2EyVjVjSEpsYzNNZ1pYWmxiblJ6TGlCRmJuUmxjaUJwY3lCb2IzZGxkbVZ5SUdKdmRHZ2djSEpwYm5SaFlteGxJR0Z1WkZ4dUlDQWdJQ0FnSUNBdkx5QnViMjR0Y0hKcGJuUmhZbXhsTGlCUGJtVWdkMjkxYkdRZ1pYaHdaV04wSUZSaFlpQjBieUJpWlNCaGN5QjNaV3hzSUNoaWRYUWdhWFFnYVhOdUozUXBMbHh1SUNBZ0lDQWdJQ0JwWmlBb1oyVjBSWFpsYm5SRGFHRnlRMjlrWlNodVlYUnBkbVZGZG1WdWRDa2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5b2dabUZzYkhNZ2RHaHliM1ZuYUNBcUwxeHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRXRsZVVSdmQyNDZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3UzJWNVZYQTZYRzRnSUNBZ0lDQWdJRVYyWlc1MFEyOXVjM1J5ZFdOMGIzSWdQU0JUZVc1MGFHVjBhV05MWlhsaWIyRnlaRVYyWlc1ME8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQkNiSFZ5T2x4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFWnZZM1Z6T2x4dUlDQWdJQ0FnSUNCRmRtVnVkRU52Ym5OMGNuVmpkRzl5SUQwZ1UzbHVkR2hsZEdsalJtOWpkWE5GZG1WdWREdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdRMnhwWTJzNlhHNGdJQ0FnSUNBZ0lDOHZJRVpwY21WbWIzZ2dZM0psWVhSbGN5QmhJR05zYVdOcklHVjJaVzUwSUc5dUlISnBaMmgwSUcxdmRYTmxJR05zYVdOcmN5NGdWR2hwY3lCeVpXMXZkbVZ6SUhSb1pWeHVJQ0FnSUNBZ0lDQXZMeUIxYm5kaGJuUmxaQ0JqYkdsamF5QmxkbVZ1ZEhNdVhHNGdJQ0FnSUNBZ0lHbG1JQ2h1WVhScGRtVkZkbVZ1ZEM1aWRYUjBiMjRnUFQwOUlESXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeW9nWm1Gc2JITWdkR2h5YjNWbmFDQXFMMXh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0VOdmJuUmxlSFJOWlc1MU9seHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRVJ2ZFdKc1pVTnNhV05yT2x4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFMXZkWE5sUkc5M2JqcGNiaUFnSUNBZ0lHTmhjMlVnZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JOYjNWelpVMXZkbVU2WEc0Z0lDQWdJQ0JqWVhObElIUnZjRXhsZG1Wc1ZIbHdaWE11ZEc5d1RXOTFjMlZQZFhRNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdUVzkxYzJWUGRtVnlPbHh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0UxdmRYTmxWWEE2WEc0Z0lDQWdJQ0FnSUVWMlpXNTBRMjl1YzNSeWRXTjBiM0lnUFNCVGVXNTBhR1YwYVdOTmIzVnpaVVYyWlc1ME8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQkVjbUZuT2x4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFUnlZV2RGYm1RNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdSSEpoWjBWdWRHVnlPbHh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0VSeVlXZEZlR2wwT2x4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFUnlZV2RNWldGMlpUcGNiaUFnSUNBZ0lHTmhjMlVnZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JFY21GblQzWmxjanBjYmlBZ0lDQWdJR05oYzJVZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCRWNtRm5VM1JoY25RNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdSSEp2Y0RwY2JpQWdJQ0FnSUNBZ1JYWmxiblJEYjI1emRISjFZM1J2Y2lBOUlGTjViblJvWlhScFkwUnlZV2RGZG1WdWREdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdWRzkxWTJoRFlXNWpaV3c2WEc0Z0lDQWdJQ0JqWVhObElIUnZjRXhsZG1Wc1ZIbHdaWE11ZEc5d1ZHOTFZMmhGYm1RNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdWRzkxWTJoTmIzWmxPbHh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0ZSdmRXTm9VM1JoY25RNlhHNGdJQ0FnSUNBZ0lFVjJaVzUwUTI5dWMzUnlkV04wYjNJZ1BTQlRlVzUwYUdWMGFXTlViM1ZqYUVWMlpXNTBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JUWTNKdmJHdzZYRzRnSUNBZ0lDQWdJRVYyWlc1MFEyOXVjM1J5ZFdOMGIzSWdQU0JUZVc1MGFHVjBhV05WU1VWMlpXNTBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JYYUdWbGJEcGNiaUFnSUNBZ0lDQWdSWFpsYm5SRGIyNXpkSEoxWTNSdmNpQTlJRk41Ym5Sb1pYUnBZMWRvWldWc1JYWmxiblE3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0VOdmNIazZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3UTNWME9seHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRkJoYzNSbE9seHVJQ0FnSUNBZ0lDQkZkbVZ1ZEVOdmJuTjBjblZqZEc5eUlEMGdVM2x1ZEdobGRHbGpRMnhwY0dKdllYSmtSWFpsYm5RN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJSDFjYmlBZ0lDQWhSWFpsYm5SRGIyNXpkSEoxWTNSdmNpQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkVGFXMXdiR1ZGZG1WdWRGQnNkV2RwYmpvZ1ZXNW9ZVzVrYkdWa0lHVjJaVzUwSUhSNWNHVXNJR0FsYzJBdUp5d2dkRzl3VEdWMlpXeFVlWEJsS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2RtRnlJR1YyWlc1MElEMGdSWFpsYm5SRGIyNXpkSEoxWTNSdmNpNW5aWFJRYjI5c1pXUW9aR2x6Y0dGMFkyaERiMjVtYVdjc0lIUnZjRXhsZG1Wc1ZHRnlaMlYwU1VRc0lHNWhkR2wyWlVWMlpXNTBMQ0J1WVhScGRtVkZkbVZ1ZEZSaGNtZGxkQ2s3WEc0Z0lDQWdSWFpsYm5SUWNtOXdZV2RoZEc5eWN5NWhZMk4xYlhWc1lYUmxWSGR2VUdoaGMyVkVhWE53WVhSamFHVnpLR1YyWlc1MEtUdGNiaUFnSUNCeVpYUjFjbTRnWlhabGJuUTdYRzRnSUgwc1hHNWNiaUFnWkdsa1VIVjBUR2x6ZEdWdVpYSTZJR1oxYm1OMGFXOXVJQ2hwWkN3Z2NtVm5hWE4wY21GMGFXOXVUbUZ0WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBdkx5Qk5iMkpwYkdVZ1UyRm1ZWEpwSUdSdlpYTWdibTkwSUdacGNtVWdjSEp2Y0dWeWJIa2dZblZpWW14bElHTnNhV05ySUdWMlpXNTBjeUJ2Ymx4dUlDQWdJQzh2SUc1dmJpMXBiblJsY21GamRHbDJaU0JsYkdWdFpXNTBjeXdnZDJocFkyZ2diV1ZoYm5NZ1pHVnNaV2RoZEdWa0lHTnNhV05ySUd4cGMzUmxibVZ5Y3lCa2J5QnViM1JjYmlBZ0lDQXZMeUJtYVhKbExpQlVhR1VnZDI5eWEyRnliM1Z1WkNCbWIzSWdkR2hwY3lCaWRXY2dhVzUyYjJ4MlpYTWdZWFIwWVdOb2FXNW5JR0Z1SUdWdGNIUjVJR05zYVdOclhHNGdJQ0FnTHk4Z2JHbHpkR1Z1WlhJZ2IyNGdkR2hsSUhSaGNtZGxkQ0J1YjJSbExseHVJQ0FnSUdsbUlDaHlaV2RwYzNSeVlYUnBiMjVPWVcxbElEMDlQU0JQVGw5RFRFbERTMTlMUlZrcElIdGNiaUFnSUNBZ0lIWmhjaUJ1YjJSbElEMGdVbVZoWTNSTmIzVnVkQzVuWlhST2IyUmxLR2xrS1R0Y2JpQWdJQ0FnSUdsbUlDZ2hiMjVEYkdsamEweHBjM1JsYm1WeWMxdHBaRjBwSUh0Y2JpQWdJQ0FnSUNBZ2IyNURiR2xqYTB4cGMzUmxibVZ5YzF0cFpGMGdQU0JGZG1WdWRFeHBjM1JsYm1WeUxteHBjM1JsYmlodWIyUmxMQ0FuWTJ4cFkyc25MQ0JsYlhCMGVVWjFibU4wYVc5dUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdkMmxzYkVSbGJHVjBaVXhwYzNSbGJtVnlPaUJtZFc1amRHbHZiaUFvYVdRc0lISmxaMmx6ZEhKaGRHbHZiazVoYldVcElIdGNiaUFnSUNCcFppQW9jbVZuYVhOMGNtRjBhVzl1VG1GdFpTQTlQVDBnVDA1ZlEweEpRMHRmUzBWWktTQjdYRzRnSUNBZ0lDQnZia05zYVdOclRHbHpkR1Z1WlhKelcybGtYUzV5WlcxdmRtVW9LVHRjYmlBZ0lDQWdJR1JsYkdWMFpTQnZia05zYVdOclRHbHpkR1Z1WlhKelcybGtYVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCVGFXMXdiR1ZGZG1WdWRGQnNkV2RwYmpzaVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljQ2xpcGJvYXJkRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cbiAqL1xudmFyIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBjbGlwYm9hcmREYXRhOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2NsaXBib2FyZERhdGEnIGluIGV2ZW50ID8gZXZlbnQuY2xpcGJvYXJkRGF0YSA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNDbGlwYm9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50LCBDbGlwYm9hcmRFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1jb21wb3NpdGlvbmV2ZW50c1xuICovXG52YXIgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ29tcG9zaXRpb25FdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQsIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0RyYWdFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNNb3VzZUV2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBEcmFnRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRHJhZ0V2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhVHJhbnNmZXI6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0RyYWdFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNNb3VzZUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNEcmFnRXZlbnQsIERyYWdFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRHJhZ0V2ZW50OyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgdHlwZTogbnVsbCxcbiAgdGFyZ2V0OiBudWxsLFxuICAvLyBjdXJyZW50VGFyZ2V0IGlzIHNldCB3aGVuIGRpc3BhdGNoaW5nOyBubyB1c2UgaW4gY29weWluZyBpdCBoZXJlXG4gIGN1cnJlbnRUYXJnZXQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsLFxuICBldmVudFBoYXNlOiBudWxsLFxuICBidWJibGVzOiBudWxsLFxuICBjYW5jZWxhYmxlOiBudWxsLFxuICB0aW1lU3RhbXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBldmVudC50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcbiAgfSxcbiAgZGVmYXVsdFByZXZlbnRlZDogbnVsbCxcbiAgaXNUcnVzdGVkOiBudWxsXG59O1xuXG4vKipcbiAqIFN5bnRoZXRpYyBldmVudHMgYXJlIGRpc3BhdGNoZWQgYnkgZXZlbnQgcGx1Z2lucywgdHlwaWNhbGx5IGluIHJlc3BvbnNlIHRvIGFcbiAqIHRvcC1sZXZlbCBldmVudCBkZWxlZ2F0aW9uIGhhbmRsZXIuXG4gKlxuICogVGhlc2Ugc3lzdGVtcyBzaG91bGQgZ2VuZXJhbGx5IHVzZSBwb29saW5nIHRvIHJlZHVjZSB0aGUgZnJlcXVlbmN5IG9mIGdhcmJhZ2VcbiAqIGNvbGxlY3Rpb24uIFRoZSBzeXN0ZW0gc2hvdWxkIGNoZWNrIGBpc1BlcnNpc3RlbnRgIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZVxuICogZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGludG8gdGhlIHBvb2wgYWZ0ZXIgYmVpbmcgZGlzcGF0Y2hlZC4gVXNlcnMgdGhhdFxuICogbmVlZCBhIHBlcnNpc3RlZCBldmVudCBzaG91bGQgaW52b2tlIGBwZXJzaXN0YC5cbiAqXG4gKiBTeW50aGV0aWMgZXZlbnRzIChhbmQgc3ViY2xhc3NlcykgaW1wbGVtZW50IHRoZSBET00gTGV2ZWwgMyBFdmVudHMgQVBJIGJ5XG4gKiBub3JtYWxpemluZyBicm93c2VyIHF1aXJrcy4gU3ViY2xhc3NlcyBkbyBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0byBpbXBsZW1lbnQgYVxuICogRE9NIGludGVyZmFjZTsgY3VzdG9tIGFwcGxpY2F0aW9uLXNwZWNpZmljIGV2ZW50cyBjYW4gYWxzbyBzdWJjbGFzcyB0aGlzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLmRpc3BhdGNoTWFya2VyID0gZGlzcGF0Y2hNYXJrZXI7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BOYW1lID09PSAndGFyZ2V0Jykge1xuICAgICAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDogbmF0aXZlRXZlbnQucmV0dXJuVmFsdWUgPT09IGZhbHNlO1xuICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG4gIH1cbiAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbn1cblxuYXNzaWduKFN5bnRoZXRpY0V2ZW50LnByb3RvdHlwZSwge1xuXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhldmVudCwgJ1RoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91XFwncmUgJyArICdzZWVpbmcgdGhpcywgeW91XFwncmUgY2FsbGluZyBgcHJldmVudERlZmF1bHRgIG9uIGEgJyArICdyZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiBUaGlzIGlzIGEgbm8tb3AuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtZXZlbnQtcG9vbGluZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhldmVudCwgJ1RoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91XFwncmUgJyArICdzZWVpbmcgdGhpcywgeW91XFwncmUgY2FsbGluZyBgc3RvcFByb3BhZ2F0aW9uYCBvbiBhICcgKyAncmVsZWFzZWQvbnVsbGlmaWVkIHN5bnRoZXRpYyBldmVudC4gVGhpcyBpcyBhIG5vLW9wLiBTZWUgJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXZSByZWxlYXNlIGFsbCBkaXNwYXRjaGVkIGBTeW50aGV0aWNFdmVudGBzIGFmdGVyIGVhY2ggZXZlbnQgbG9vcCwgYWRkaW5nXG4gICAqIHRoZW0gYmFjayBpbnRvIHRoZSBwb29sLiBUaGlzIGFsbG93cyBhIHdheSB0byBob2xkIG9udG8gYSByZWZlcmVuY2UgdGhhdFxuICAgKiB3b24ndCBiZSBhZGRlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqL1xuICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzUGVyc2lzdGVudDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlLFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciBgZGVzdHJ1Y3RvcmAgb24gZWFjaCBpbnN0YW5jZSBpdCByZWxlYXNlcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBudWxsO1xuICAgIHRoaXMuZGlzcGF0Y2hNYXJrZXIgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICB9XG5cbn0pO1xuXG5TeW50aGV0aWNFdmVudC5JbnRlcmZhY2UgPSBFdmVudEludGVyZmFjZTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gcmVkdWNlIGJvaWxlcnBsYXRlIHdoZW4gY3JlYXRpbmcgc3ViY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBDbGFzc1xuICogQHBhcmFtIHs/b2JqZWN0fSBJbnRlcmZhY2VcbiAqL1xuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzID0gZnVuY3Rpb24gKENsYXNzLCBJbnRlcmZhY2UpIHtcbiAgdmFyIFN1cGVyID0gdGhpcztcblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICBhc3NpZ24ocHJvdG90eXBlLCBDbGFzcy5wcm90b3R5cGUpO1xuICBDbGFzcy5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIENsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENsYXNzO1xuXG4gIENsYXNzLkludGVyZmFjZSA9IGFzc2lnbih7fSwgU3VwZXIuSW50ZXJmYWNlLCBJbnRlcmZhY2UpO1xuICBDbGFzcy5hdWdtZW50Q2xhc3MgPSBTdXBlci5hdWdtZW50Q2xhc3M7XG5cbiAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKENsYXNzLCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xufTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50LCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0V2ZW50O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlUzbHVkR2hsZEdsalJYWmxiblF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZONWJuUm9aWFJwWTBWMlpXNTBYRzRnS2lCQWRIbHdaV05vWldOcmN5QnpkR0YwYVdNdGIyNXNlVnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUZCdmIyeGxaRU5zWVhOeklEMGdjbVZ4ZFdseVpTZ25MaTlRYjI5c1pXUkRiR0Z6Y3ljcE8xeHVYRzUyWVhJZ1lYTnphV2R1SUQwZ2NtVnhkV2x5WlNnbkxpOVBZbXBsWTNRdVlYTnphV2R1SnlrN1hHNTJZWElnWlcxd2RIbEdkVzVqZEdsdmJpQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMlZ0Y0hSNVJuVnVZM1JwYjI0bktUdGNiblpoY2lCM1lYSnVhVzVuSUQwZ2NtVnhkV2x5WlNnblptSnFjeTlzYVdJdmQyRnlibWx1WnljcE8xeHVYRzR2S2lwY2JpQXFJRUJwYm5SbGNtWmhZMlVnUlhabGJuUmNiaUFxSUVCelpXVWdhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2UkU5TkxVeGxkbVZzTFRNdFJYWmxiblJ6TDF4dUlDb3ZYRzUyWVhJZ1JYWmxiblJKYm5SbGNtWmhZMlVnUFNCN1hHNGdJSFI1Y0dVNklHNTFiR3dzWEc0Z0lIUmhjbWRsZERvZ2JuVnNiQ3hjYmlBZ0x5OGdZM1Z5Y21WdWRGUmhjbWRsZENCcGN5QnpaWFFnZDJobGJpQmthWE53WVhSamFHbHVaenNnYm04Z2RYTmxJR2x1SUdOdmNIbHBibWNnYVhRZ2FHVnlaVnh1SUNCamRYSnlaVzUwVkdGeVoyVjBPaUJsYlhCMGVVWjFibU4wYVc5dUxuUm9ZWFJTWlhSMWNtNXpUblZzYkN4Y2JpQWdaWFpsYm5SUWFHRnpaVG9nYm5Wc2JDeGNiaUFnWW5WaVlteGxjem9nYm5Wc2JDeGNiaUFnWTJGdVkyVnNZV0pzWlRvZ2JuVnNiQ3hjYmlBZ2RHbHRaVk4wWVcxd09pQm1kVzVqZEdsdmJpQW9aWFpsYm5RcElIdGNiaUFnSUNCeVpYUjFjbTRnWlhabGJuUXVkR2x0WlZOMFlXMXdJSHg4SUVSaGRHVXVibTkzS0NrN1hHNGdJSDBzWEc0Z0lHUmxabUYxYkhSUWNtVjJaVzUwWldRNklHNTFiR3dzWEc0Z0lHbHpWSEoxYzNSbFpEb2diblZzYkZ4dWZUdGNibHh1THlvcVhHNGdLaUJUZVc1MGFHVjBhV01nWlhabGJuUnpJR0Z5WlNCa2FYTndZWFJqYUdWa0lHSjVJR1YyWlc1MElIQnNkV2RwYm5Nc0lIUjVjR2xqWVd4c2VTQnBiaUJ5WlhOd2IyNXpaU0IwYnlCaFhHNGdLaUIwYjNBdGJHVjJaV3dnWlhabGJuUWdaR1ZzWldkaGRHbHZiaUJvWVc1a2JHVnlMbHh1SUNwY2JpQXFJRlJvWlhObElITjVjM1JsYlhNZ2MyaHZkV3hrSUdkbGJtVnlZV3hzZVNCMWMyVWdjRzl2YkdsdVp5QjBieUJ5WldSMVkyVWdkR2hsSUdaeVpYRjFaVzVqZVNCdlppQm5ZWEppWVdkbFhHNGdLaUJqYjJ4c1pXTjBhVzl1TGlCVWFHVWdjM2x6ZEdWdElITm9iM1ZzWkNCamFHVmpheUJnYVhOUVpYSnphWE4wWlc1MFlDQjBieUJrWlhSbGNtMXBibVVnZDJobGRHaGxjaUIwYUdWY2JpQXFJR1YyWlc1MElITm9iM1ZzWkNCaVpTQnlaV3hsWVhObFpDQnBiblJ2SUhSb1pTQndiMjlzSUdGbWRHVnlJR0psYVc1bklHUnBjM0JoZEdOb1pXUXVJRlZ6WlhKeklIUm9ZWFJjYmlBcUlHNWxaV1FnWVNCd1pYSnphWE4wWldRZ1pYWmxiblFnYzJodmRXeGtJR2x1ZG05clpTQmdjR1Z5YzJsemRHQXVYRzRnS2x4dUlDb2dVM2x1ZEdobGRHbGpJR1YyWlc1MGN5QW9ZVzVrSUhOMVltTnNZWE56WlhNcElHbHRjR3hsYldWdWRDQjBhR1VnUkU5TklFeGxkbVZzSURNZ1JYWmxiblJ6SUVGUVNTQmllVnh1SUNvZ2JtOXliV0ZzYVhwcGJtY2dZbkp2ZDNObGNpQnhkV2x5YTNNdUlGTjFZbU5zWVhOelpYTWdaRzhnYm05MElHNWxZMlZ6YzJGeWFXeDVJR2hoZG1VZ2RHOGdhVzF3YkdWdFpXNTBJR0ZjYmlBcUlFUlBUU0JwYm5SbGNtWmhZMlU3SUdOMWMzUnZiU0JoY0hCc2FXTmhkR2x2YmkxemNHVmphV1pwWXlCbGRtVnVkSE1nWTJGdUlHRnNjMjhnYzNWaVkyeGhjM01nZEdocGN5NWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1pHbHpjR0YwWTJoRGIyNW1hV2NnUTI5dVptbG5kWEpoZEdsdmJpQjFjMlZrSUhSdklHUnBjM0JoZEdOb0lIUm9hWE1nWlhabGJuUXVYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWkdsemNHRjBZMmhOWVhKclpYSWdUV0Z5YTJWeUlHbGtaVzUwYVdaNWFXNW5JSFJvWlNCbGRtVnVkQ0IwWVhKblpYUXVYRzRnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYm1GMGFYWmxSWFpsYm5RZ1RtRjBhWFpsSUdKeWIzZHpaWElnWlhabGJuUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlGTjViblJvWlhScFkwVjJaVzUwS0dScGMzQmhkR05vUTI5dVptbG5MQ0JrYVhOd1lYUmphRTFoY210bGNpd2dibUYwYVhabFJYWmxiblFzSUc1aGRHbDJaVVYyWlc1MFZHRnlaMlYwS1NCN1hHNGdJSFJvYVhNdVpHbHpjR0YwWTJoRGIyNW1hV2NnUFNCa2FYTndZWFJqYUVOdmJtWnBaenRjYmlBZ2RHaHBjeTVrYVhOd1lYUmphRTFoY210bGNpQTlJR1JwYzNCaGRHTm9UV0Z5YTJWeU8xeHVJQ0IwYUdsekxtNWhkR2wyWlVWMlpXNTBJRDBnYm1GMGFYWmxSWFpsYm5RN1hHNWNiaUFnZG1GeUlFbHVkR1Z5Wm1GalpTQTlJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVTVzUwWlhKbVlXTmxPMXh1SUNCbWIzSWdLSFpoY2lCd2NtOXdUbUZ0WlNCcGJpQkpiblJsY21aaFkyVXBJSHRjYmlBZ0lDQnBaaUFvSVVsdWRHVnlabUZqWlM1b1lYTlBkMjVRY205d1pYSjBlU2h3Y205d1RtRnRaU2twSUh0Y2JpQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnYm05eWJXRnNhWHBsSUQwZ1NXNTBaWEptWVdObFczQnliM0JPWVcxbFhUdGNiaUFnSUNCcFppQW9ibTl5YldGc2FYcGxLU0I3WEc0Z0lDQWdJQ0IwYUdselczQnliM0JPWVcxbFhTQTlJRzV2Y20xaGJHbDZaU2h1WVhScGRtVkZkbVZ1ZENrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNod2NtOXdUbUZ0WlNBOVBUMGdKM1JoY21kbGRDY3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQnVZWFJwZG1WRmRtVnVkRlJoY21kbGREdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE5iY0hKdmNFNWhiV1ZkSUQwZ2JtRjBhWFpsUlhabGJuUmJjSEp2Y0U1aGJXVmRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSFpoY2lCa1pXWmhkV3gwVUhKbGRtVnVkR1ZrSUQwZ2JtRjBhWFpsUlhabGJuUXVaR1ZtWVhWc2RGQnlaWFpsYm5SbFpDQWhQU0J1ZFd4c0lEOGdibUYwYVhabFJYWmxiblF1WkdWbVlYVnNkRkJ5WlhabGJuUmxaQ0E2SUc1aGRHbDJaVVYyWlc1MExuSmxkSFZ5YmxaaGJIVmxJRDA5UFNCbVlXeHpaVHRjYmlBZ2FXWWdLR1JsWm1GMWJIUlFjbVYyWlc1MFpXUXBJSHRjYmlBZ0lDQjBhR2x6TG1selJHVm1ZWFZzZEZCeVpYWmxiblJsWkNBOUlHVnRjSFI1Um5WdVkzUnBiMjR1ZEdoaGRGSmxkSFZ5Ym5OVWNuVmxPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvYVhNdWFYTkVaV1poZFd4MFVISmxkbVZ1ZEdWa0lEMGdaVzF3ZEhsR2RXNWpkR2x2Ymk1MGFHRjBVbVYwZFhKdWMwWmhiSE5sTzF4dUlDQjlYRzRnSUhSb2FYTXVhWE5RY205d1lXZGhkR2x2YmxOMGIzQndaV1FnUFNCbGJYQjBlVVoxYm1OMGFXOXVMblJvWVhSU1pYUjFjbTV6Um1Gc2MyVTdYRzU5WEc1Y2JtRnpjMmxuYmloVGVXNTBhR1YwYVdORmRtVnVkQzV3Y205MGIzUjVjR1VzSUh0Y2JseHVJQ0J3Y21WMlpXNTBSR1ZtWVhWc2REb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJvYVhNdVpHVm1ZWFZzZEZCeVpYWmxiblJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdkbUZ5SUdWMlpXNTBJRDBnZEdocGN5NXVZWFJwZG1WRmRtVnVkRHRjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29aWFpsYm5Rc0lDZFVhR2x6SUhONWJuUm9aWFJwWXlCbGRtVnVkQ0JwY3lCeVpYVnpaV1FnWm05eUlIQmxjbVp2Y20xaGJtTmxJSEpsWVhOdmJuTXVJRWxtSUhsdmRWeGNKM0psSUNjZ0t5QW5jMlZsYVc1bklIUm9hWE1zSUhsdmRWeGNKM0psSUdOaGJHeHBibWNnWUhCeVpYWmxiblJFWldaaGRXeDBZQ0J2YmlCaElDY2dLeUFuY21Wc1pXRnpaV1F2Ym5Wc2JHbG1hV1ZrSUhONWJuUm9aWFJwWXlCbGRtVnVkQzRnVkdocGN5QnBjeUJoSUc1dkxXOXdMaUJUWldVZ0p5QXJJQ2RvZEhSd2N6b3ZMMlppTG0xbEwzSmxZV04wTFdWMlpXNTBMWEJ2YjJ4cGJtY2dabTl5SUcxdmNtVWdhVzVtYjNKdFlYUnBiMjR1SnlrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ2haWFpsYm5RcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1pYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUXBJSHRjYmlBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1YyWlc1MExuSmxkSFZ5YmxaaGJIVmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVhWE5FWldaaGRXeDBVSEpsZG1WdWRHVmtJRDBnWlcxd2RIbEdkVzVqZEdsdmJpNTBhR0YwVW1WMGRYSnVjMVJ5ZFdVN1hHNGdJSDBzWEc1Y2JpQWdjM1J2Y0ZCeWIzQmhaMkYwYVc5dU9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUdWMlpXNTBJRDBnZEdocGN5NXVZWFJwZG1WRmRtVnVkRHRjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JSGRoY201cGJtY29aWFpsYm5Rc0lDZFVhR2x6SUhONWJuUm9aWFJwWXlCbGRtVnVkQ0JwY3lCeVpYVnpaV1FnWm05eUlIQmxjbVp2Y20xaGJtTmxJSEpsWVhOdmJuTXVJRWxtSUhsdmRWeGNKM0psSUNjZ0t5QW5jMlZsYVc1bklIUm9hWE1zSUhsdmRWeGNKM0psSUdOaGJHeHBibWNnWUhOMGIzQlFjbTl3WVdkaGRHbHZibUFnYjI0Z1lTQW5JQ3NnSjNKbGJHVmhjMlZrTDI1MWJHeHBabWxsWkNCemVXNTBhR1YwYVdNZ1pYWmxiblF1SUZSb2FYTWdhWE1nWVNCdWJ5MXZjQzRnVTJWbElDY2dLeUFuYUhSMGNITTZMeTltWWk1dFpTOXlaV0ZqZEMxbGRtVnVkQzF3YjI5c2FXNW5JR1p2Y2lCdGIzSmxJR2x1Wm05eWJXRjBhVzl1TGljcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JV1YyWlc1MEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHVjJaVzUwTG5OMGIzQlFjbTl3WVdkaGRHbHZiaWtnZTF4dUlDQWdJQ0FnWlhabGJuUXVjM1J2Y0ZCeWIzQmhaMkYwYVc5dUtDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWMlpXNTBMbU5oYm1ObGJFSjFZbUpzWlNBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11YVhOUWNtOXdZV2RoZEdsdmJsTjBiM0J3WldRZ1BTQmxiWEIwZVVaMWJtTjBhVzl1TG5Sb1lYUlNaWFIxY201elZISjFaVHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1YyVWdjbVZzWldGelpTQmhiR3dnWkdsemNHRjBZMmhsWkNCZ1UzbHVkR2hsZEdsalJYWmxiblJnY3lCaFpuUmxjaUJsWVdOb0lHVjJaVzUwSUd4dmIzQXNJR0ZrWkdsdVoxeHVJQ0FnS2lCMGFHVnRJR0poWTJzZ2FXNTBieUIwYUdVZ2NHOXZiQzRnVkdocGN5QmhiR3h2ZDNNZ1lTQjNZWGtnZEc4Z2FHOXNaQ0J2Ym5SdklHRWdjbVZtWlhKbGJtTmxJSFJvWVhSY2JpQWdJQ29nZDI5dUozUWdZbVVnWVdSa1pXUWdZbUZqYXlCcGJuUnZJSFJvWlNCd2IyOXNMbHh1SUNBZ0tpOWNiaUFnY0dWeWMybHpkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhSb2FYTXVhWE5RWlhKemFYTjBaVzUwSUQwZ1pXMXdkSGxHZFc1amRHbHZiaTUwYUdGMFVtVjBkWEp1YzFSeWRXVTdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOb1pXTnJjeUJwWmlCMGFHbHpJR1YyWlc1MElITm9iM1ZzWkNCaVpTQnlaV3hsWVhObFpDQmlZV05ySUdsdWRHOGdkR2hsSUhCdmIyd3VYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZEdocGN5QnphRzkxYkdRZ2JtOTBJR0psSUhKbGJHVmhjMlZrTENCbVlXeHpaU0J2ZEdobGNuZHBjMlV1WEc0Z0lDQXFMMXh1SUNCcGMxQmxjbk5wYzNSbGJuUTZJR1Z0Y0hSNVJuVnVZM1JwYjI0dWRHaGhkRkpsZEhWeWJuTkdZV3h6WlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nWUZCdmIyeGxaRU5zWVhOellDQnNiMjlyY3lCbWIzSWdZR1JsYzNSeWRXTjBiM0pnSUc5dUlHVmhZMmdnYVc1emRHRnVZMlVnYVhRZ2NtVnNaV0Z6WlhNdVhHNGdJQ0FxTDF4dUlDQmtaWE4wY25WamRHOXlPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZG1GeUlFbHVkR1Z5Wm1GalpTQTlJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVTVzUwWlhKbVlXTmxPMXh1SUNBZ0lHWnZjaUFvZG1GeUlIQnliM0JPWVcxbElHbHVJRWx1ZEdWeVptRmpaU2tnZTF4dUlDQWdJQ0FnZEdocGMxdHdjbTl3VG1GdFpWMGdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtUnBjM0JoZEdOb1EyOXVabWxuSUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TG1ScGMzQmhkR05vVFdGeWEyVnlJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbTVoZEdsMlpVVjJaVzUwSUQwZ2JuVnNiRHRjYmlBZ2ZWeHVYRzU5S1R0Y2JseHVVM2x1ZEdobGRHbGpSWFpsYm5RdVNXNTBaWEptWVdObElEMGdSWFpsYm5SSmJuUmxjbVpoWTJVN1hHNWNiaThxS2x4dUlDb2dTR1ZzY0dWeUlIUnZJSEpsWkhWalpTQmliMmxzWlhKd2JHRjBaU0IzYUdWdUlHTnlaV0YwYVc1bklITjFZbU5zWVhOelpYTXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdRMnhoYzNOY2JpQXFJRUJ3WVhKaGJTQjdQMjlpYW1WamRIMGdTVzUwWlhKbVlXTmxYRzRnS2k5Y2JsTjViblJvWlhScFkwVjJaVzUwTG1GMVoyMWxiblJEYkdGemN5QTlJR1oxYm1OMGFXOXVJQ2hEYkdGemN5d2dTVzUwWlhKbVlXTmxLU0I3WEc0Z0lIWmhjaUJUZFhCbGNpQTlJSFJvYVhNN1hHNWNiaUFnZG1GeUlIQnliM1J2ZEhsd1pTQTlJRTlpYW1WamRDNWpjbVZoZEdVb1UzVndaWEl1Y0hKdmRHOTBlWEJsS1R0Y2JpQWdZWE56YVdkdUtIQnliM1J2ZEhsd1pTd2dRMnhoYzNNdWNISnZkRzkwZVhCbEtUdGNiaUFnUTJ4aGMzTXVjSEp2ZEc5MGVYQmxJRDBnY0hKdmRHOTBlWEJsTzF4dUlDQkRiR0Z6Y3k1d2NtOTBiM1I1Y0dVdVkyOXVjM1J5ZFdOMGIzSWdQU0JEYkdGemN6dGNibHh1SUNCRGJHRnpjeTVKYm5SbGNtWmhZMlVnUFNCaGMzTnBaMjRvZTMwc0lGTjFjR1Z5TGtsdWRHVnlabUZqWlN3Z1NXNTBaWEptWVdObEtUdGNiaUFnUTJ4aGMzTXVZWFZuYldWdWRFTnNZWE56SUQwZ1UzVndaWEl1WVhWbmJXVnVkRU5zWVhOek8xeHVYRzRnSUZCdmIyeGxaRU5zWVhOekxtRmtaRkJ2YjJ4cGJtZFVieWhEYkdGemN5d2dVRzl2YkdWa1EyeGhjM011Wm05MWNrRnlaM1Z0Wlc1MFVHOXZiR1Z5S1R0Y2JuMDdYRzVjYmxCdmIyeGxaRU5zWVhOekxtRmtaRkJ2YjJ4cGJtZFVieWhUZVc1MGFHVjBhV05GZG1WdWRDd2dVRzl2YkdWa1EyeGhjM011Wm05MWNrRnlaM1Z0Wlc1MFVHOXZiR1Z5S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRlVzUwYUdWMGFXTkZkbVZ1ZERzaVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRm9jdXNFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBGb2N1c0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEZvY3VzRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHJlbGF0ZWRUYXJnZXQ6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0ZvY3VzRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRm9jdXNFdmVudCwgRm9jdXNFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRm9jdXNFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljSW5wdXRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbnZhciBJbnB1dEV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNJbnB1dEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljSW5wdXRFdmVudCwgSW5wdXRFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljSW5wdXRFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljS2V5Ym9hcmRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG5cbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZSgnLi9nZXRFdmVudENoYXJDb2RlJyk7XG52YXIgZ2V0RXZlbnRLZXkgPSByZXF1aXJlKCcuL2dldEV2ZW50S2V5Jyk7XG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEtleWJvYXJkRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgS2V5Ym9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAga2V5OiBnZXRFdmVudEtleSxcbiAgbG9jYXRpb246IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIHJlcGVhdDogbnVsbCxcbiAgbG9jYWxlOiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIC8vIExlZ2FjeSBJbnRlcmZhY2VcbiAgY2hhckNvZGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGBjaGFyQ29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleVByZXNzIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoZSBhY3R1YWwgcHJpbnRhYmxlIGNoYXJhY3Rlci5cblxuICAgIC8vIEtleVByZXNzIGlzIGRlcHJlY2F0ZWQsIGJ1dCBpdHMgcmVwbGFjZW1lbnQgaXMgbm90IHlldCBmaW5hbCBhbmQgbm90XG4gICAgLy8gaW1wbGVtZW50ZWQgaW4gYW55IG1ham9yIGJyb3dzZXIuIE9ubHkgS2V5UHJlc3MgaGFzIGNoYXJDb2RlLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBgd2hpY2hgIGlzIGFuIGFsaWFzIGZvciBlaXRoZXIgYGtleUNvZGVgIG9yIGBjaGFyQ29kZWAgZGVwZW5kaW5nIG9uIHRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNLZXlib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0tleWJvYXJkRXZlbnQsIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY01vdXNlRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoJy4vVmlld3BvcnRNZXRyaWNzJyk7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKCcuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZScpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgTW91c2VFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBNb3VzZUV2ZW50SW50ZXJmYWNlID0ge1xuICBzY3JlZW5YOiBudWxsLFxuICBzY3JlZW5ZOiBudWxsLFxuICBjbGllbnRYOiBudWxsLFxuICBjbGllbnRZOiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIGJ1dHRvbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gV2Via2l0LCBGaXJlZm94LCBJRTkrXG4gICAgLy8gd2hpY2g6ICAxIDIgM1xuICAgIC8vIGJ1dHRvbjogMCAxIDIgKHN0YW5kYXJkKVxuICAgIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gICAgaWYgKCd3aGljaCcgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIC8vIElFPDlcbiAgICAvLyB3aGljaDogIHVuZGVmaW5lZFxuICAgIC8vIGJ1dHRvbjogMCAwIDBcbiAgICAvLyBidXR0b246IDEgNCAyIChvbm1vdXNldXApXG4gICAgcmV0dXJuIGJ1dHRvbiA9PT0gMiA/IDIgOiBidXR0b24gPT09IDQgPyAxIDogMDtcbiAgfSxcbiAgYnV0dG9uczogbnVsbCxcbiAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKGV2ZW50LmZyb21FbGVtZW50ID09PSBldmVudC5zcmNFbGVtZW50ID8gZXZlbnQudG9FbGVtZW50IDogZXZlbnQuZnJvbUVsZW1lbnQpO1xuICB9LFxuICAvLyBcIlByb3ByaWV0YXJ5XCIgSW50ZXJmYWNlLlxuICBwYWdlWDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWCcgaW4gZXZlbnQgPyBldmVudC5wYWdlWCA6IGV2ZW50LmNsaWVudFggKyBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbExlZnQ7XG4gIH0sXG4gIHBhZ2VZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VZJyBpbiBldmVudCA/IGV2ZW50LnBhZ2VZIDogZXZlbnQuY2xpZW50WSArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNNb3VzZUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY01vdXNlRXZlbnQsIE1vdXNlRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1RvdWNoRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNUb3VjaEV2ZW50LCBUb3VjaEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNUb3VjaEV2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNVSUV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuL2dldEV2ZW50VGFyZ2V0Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBVSUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFVJRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHZpZXc6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChldmVudC52aWV3KSB7XG4gICAgICByZXR1cm4gZXZlbnQudmlldztcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZXZlbnQpO1xuICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQud2luZG93ID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIHRhcmdldCBpcyBhIHdpbmRvdyBvYmplY3RcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50O1xuICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICBpZiAoZG9jKSB7XG4gICAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICB9LFxuICBkZXRhaWw6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBldmVudC5kZXRhaWwgfHwgMDtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY1VJRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNVSUV2ZW50LCBVSUV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNVSUV2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNXaGVlbEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY01vdXNlRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFdoZWVsRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgV2hlZWxFdmVudEludGVyZmFjZSA9IHtcbiAgZGVsdGFYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWCcgaW4gZXZlbnQgPyBldmVudC5kZWx0YVggOlxuICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWGAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChyaWdodCBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGFYJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWCA6IDA7XG4gIH0sXG4gIGRlbHRhWTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdkZWx0YVknIGluIGV2ZW50ID8gZXZlbnQuZGVsdGFZIDpcbiAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGFZJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWSA6XG4gICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFgIGZvciBJRTw5IGFuZCBub3JtYWxpemUgKGRvd24gaXMgcG9zaXRpdmUpLlxuICAgICd3aGVlbERlbHRhJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhIDogMDtcbiAgfSxcbiAgZGVsdGFaOiBudWxsLFxuXG4gIC8vIEJyb3dzZXJzIHdpdGhvdXQgXCJkZWx0YU1vZGVcIiBpcyByZXBvcnRpbmcgaW4gcmF3IHdoZWVsIGRlbHRhIHdoZXJlIG9uZVxuICAvLyBub3RjaCBvbiB0aGUgc2Nyb2xsIGlzIGFsd2F5cyArLy0gMTIwLCByb3VnaGx5IGVxdWl2YWxlbnQgdG8gcGl4ZWxzLlxuICAvLyBBIGdvb2QgYXBwcm94aW1hdGlvbiBvZiBET01fREVMVEFfTElORSAoMSkgaXMgNSUgb2Ygdmlld3BvcnQgc2l6ZSBvclxuICAvLyB+NDAgcGl4ZWxzLCBmb3IgRE9NX0RFTFRBX1NDUkVFTiAoMikgaXQgaXMgODcuNSUgb2Ygdmlld3BvcnQgc2l6ZS5cbiAgZGVsdGFNb2RlOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNNb3VzZUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNXaGVlbEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY01vdXNlRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1doZWVsRXZlbnQsIFdoZWVsRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBUcmFuc2FjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIGBUcmFuc2FjdGlvbmAgY3JlYXRlcyBhIGJsYWNrIGJveCB0aGF0IGlzIGFibGUgdG8gd3JhcCBhbnkgbWV0aG9kIHN1Y2ggdGhhdFxuICogY2VydGFpbiBpbnZhcmlhbnRzIGFyZSBtYWludGFpbmVkIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIG1ldGhvZCBpcyBpbnZva2VkXG4gKiAoRXZlbiBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIHdoaWxlIGludm9raW5nIHRoZSB3cmFwcGVkIG1ldGhvZCkuIFdob2V2ZXJcbiAqIGluc3RhbnRpYXRlcyBhIHRyYW5zYWN0aW9uIGNhbiBwcm92aWRlIGVuZm9yY2VycyBvZiB0aGUgaW52YXJpYW50cyBhdFxuICogY3JlYXRpb24gdGltZS4gVGhlIGBUcmFuc2FjdGlvbmAgY2xhc3MgaXRzZWxmIHdpbGwgc3VwcGx5IG9uZSBhZGRpdGlvbmFsXG4gKiBhdXRvbWF0aWMgaW52YXJpYW50IGZvciB5b3UgLSB0aGUgaW52YXJpYW50IHRoYXQgYW55IHRyYW5zYWN0aW9uIGluc3RhbmNlXG4gKiBzaG91bGQgbm90IGJlIHJ1biB3aGlsZSBpdCBpcyBhbHJlYWR5IGJlaW5nIHJ1bi4gWW91IHdvdWxkIHR5cGljYWxseSBjcmVhdGUgYVxuICogc2luZ2xlIGluc3RhbmNlIG9mIGEgYFRyYW5zYWN0aW9uYCBmb3IgcmV1c2UgbXVsdGlwbGUgdGltZXMsIHRoYXQgcG90ZW50aWFsbHlcbiAqIGlzIHVzZWQgdG8gd3JhcCBzZXZlcmFsIGRpZmZlcmVudCBtZXRob2RzLiBXcmFwcGVycyBhcmUgZXh0cmVtZWx5IHNpbXBsZSAtXG4gKiB0aGV5IG9ubHkgcmVxdWlyZSBpbXBsZW1lbnRpbmcgdHdvIG1ldGhvZHMuXG4gKlxuICogPHByZT5cbiAqICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVycyAoaW5qZWN0ZWQgYXQgY3JlYXRpb24gdGltZSlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgICAgICArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0tLS0tLS0tLStcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICB2ICAgICAgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICstLS0tLS0tLS0tLS0tLS0rICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICArLS18ICAgIHdyYXBwZXIxICAgfC0tLXwtLS0tKyAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgKy0tLS0tLS0tLS0tLS0tLSsgICB2ICAgIHwgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICAgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICArLS0tLXwgICB3cmFwcGVyMiAgfC0tLS0tLS0tKyAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgfCAgICArLS0tLS0tLS0tLS0tLSsgIHwgICAgIHwgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgICAgICAgICAgICAgICAgICB8ICAgICB8ICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB2ICAgICB2ICAgICAgICAgICAgICAgICAgICAgdiAgICAgdiAgIHwgd3JhcHBlclxuICogICAgICAgICAgICAgICAgICAgIHwgKy0tLSsgKy0tLSsgICArLS0tLS0tLS0tKyAgICstLS0rICstLS0rIHwgaW52YXJpYW50c1xuICogcGVyZm9ybShhbnlNZXRob2QpIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHwgbWFpbnRhaW5lZFxuICogKy0tLS0tLS0tLS0tLS0tLS0tPnwtfC0tLXwtfC0tLXwtLT58YW55TWV0aG9kfC0tLXwtLS18LXwtLS18LXwtLS0tLS0tLT5cbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgaW5pdGlhbGl6ZSAgICAgICAgICAgICAgICAgICAgY2xvc2UgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqIDwvcHJlPlxuICpcbiAqIFVzZSBjYXNlczpcbiAqIC0gUHJlc2VydmluZyB0aGUgaW5wdXQgc2VsZWN0aW9uIHJhbmdlcyBiZWZvcmUvYWZ0ZXIgcmVjb25jaWxpYXRpb24uXG4gKiAgIFJlc3RvcmluZyBzZWxlY3Rpb24gZXZlbiBpbiB0aGUgZXZlbnQgb2YgYW4gdW5leHBlY3RlZCBlcnJvci5cbiAqIC0gRGVhY3RpdmF0aW5nIGV2ZW50cyB3aGlsZSByZWFycmFuZ2luZyB0aGUgRE9NLCBwcmV2ZW50aW5nIGJsdXJzL2ZvY3VzZXMsXG4gKiAgIHdoaWxlIGd1YXJhbnRlZWluZyB0aGF0IGFmdGVyd2FyZHMsIHRoZSBldmVudCBzeXN0ZW0gaXMgcmVhY3RpdmF0ZWQuXG4gKiAtIEZsdXNoaW5nIGEgcXVldWUgb2YgY29sbGVjdGVkIERPTSBtdXRhdGlvbnMgdG8gdGhlIG1haW4gVUkgdGhyZWFkIGFmdGVyIGFcbiAqICAgcmVjb25jaWxpYXRpb24gdGFrZXMgcGxhY2UgaW4gYSB3b3JrZXIgdGhyZWFkLlxuICogLSBJbnZva2luZyBhbnkgY29sbGVjdGVkIGBjb21wb25lbnREaWRVcGRhdGVgIGNhbGxiYWNrcyBhZnRlciByZW5kZXJpbmcgbmV3XG4gKiAgIGNvbnRlbnQuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBXcmFwcGluZyBwYXJ0aWN1bGFyIGZsdXNoZXMgb2YgdGhlIGBSZWFjdFdvcmtlcmAgcXVldWVcbiAqICAgdG8gcHJlc2VydmUgdGhlIGBzY3JvbGxUb3BgIChhbiBhdXRvbWF0aWMgc2Nyb2xsIGF3YXJlIERPTSkuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBMYXlvdXQgY2FsY3VsYXRpb25zIGJlZm9yZSBhbmQgYWZ0ZXIgRE9NIHVwZGF0ZXMuXG4gKlxuICogVHJhbnNhY3Rpb25hbCBwbHVnaW4gQVBJOlxuICogLSBBIG1vZHVsZSB0aGF0IGhhcyBhbiBgaW5pdGlhbGl6ZWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbnkgcHJlY29tcHV0YXRpb24uXG4gKiAtIGFuZCBhIGBjbG9zZWAgbWV0aG9kIHRoYXQgYWNjZXB0cyB0aGUgcHJlY29tcHV0YXRpb24uIGBjbG9zZWAgaXMgaW52b2tlZFxuICogICB3aGVuIHRoZSB3cmFwcGVkIHByb2Nlc3MgaXMgY29tcGxldGVkLCBvciBoYXMgZmFpbGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VHJhbnNhY3Rpb25hbFdyYXBwZXI+fSB0cmFuc2FjdGlvbldyYXBwZXIgV3JhcHBlciBtb2R1bGVzXG4gKiB0aGF0IGltcGxlbWVudCBgaW5pdGlhbGl6ZWAgYW5kIGBjbG9zZWAuXG4gKiBAcmV0dXJuIHtUcmFuc2FjdGlvbn0gU2luZ2xlIHRyYW5zYWN0aW9uIGZvciByZXVzZSBpbiB0aHJlYWQuXG4gKlxuICogQGNsYXNzIFRyYW5zYWN0aW9uXG4gKi9cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIFNldHMgdXAgdGhpcyBpbnN0YW5jZSBzbyB0aGF0IGl0IGlzIHByZXBhcmVkIGZvciBjb2xsZWN0aW5nIG1ldHJpY3MuIERvZXNcbiAgICogc28gc3VjaCB0aGF0IHRoaXMgc2V0dXAgbWV0aG9kIG1heSBiZSB1c2VkIG9uIGFuIGluc3RhbmNlIHRoYXQgaXMgYWxyZWFkeVxuICAgKiBpbml0aWFsaXplZCwgaW4gYSB3YXkgdGhhdCBkb2VzIG5vdCBjb25zdW1lIGFkZGl0aW9uYWwgbWVtb3J5IHVwb24gcmV1c2UuXG4gICAqIFRoYXQgY2FuIGJlIHVzZWZ1bCBpZiB5b3UgZGVjaWRlIHRvIG1ha2UgeW91ciBzdWJjbGFzcyBvZiB0aGlzIG1peGluIGFcbiAgICogXCJQb29sZWRDbGFzc1wiLlxuICAgKi9cbiAgcmVpbml0aWFsaXplVHJhbnNhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLmdldFRyYW5zYWN0aW9uV3JhcHBlcnMoKTtcbiAgICBpZiAodGhpcy53cmFwcGVySW5pdERhdGEpIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhID0gW107XG4gICAgfVxuICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICB9LFxuXG4gIF9pc0luVHJhbnNhY3Rpb246IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHJldHVybiB7QXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPn0gQXJyYXkgb2YgdHJhbnNhY3Rpb24gd3JhcHBlcnMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBudWxsLFxuXG4gIGlzSW5UcmFuc2FjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2lzSW5UcmFuc2FjdGlvbjtcbiAgfSxcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGZ1bmN0aW9uIHdpdGhpbiBhIHNhZmV0eSB3aW5kb3cuIFVzZSB0aGlzIGZvciB0aGUgdG9wIGxldmVsXG4gICAqIG1ldGhvZHMgdGhhdCByZXN1bHQgaW4gbGFyZ2UgYW1vdW50cyBvZiBjb21wdXRhdGlvbi9tdXRhdGlvbnMgdGhhdCB3b3VsZFxuICAgKiBuZWVkIHRvIGJlIHNhZmV0eSBjaGVja2VkLiBUaGUgb3B0aW9uYWwgYXJndW1lbnRzIGhlbHBzIHByZXZlbnQgdGhlIG5lZWRcbiAgICogdG8gYmluZCBpbiBtYW55IGNhc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWVtYmVyIG9mIHNjb3BlIHRvIGNhbGwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZSBTY29wZSB0byBpbnZva2UgZnJvbS5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gYSBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGIgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBjIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gZCBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGUgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBmIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICpcbiAgICogQHJldHVybiB7Kn0gUmV0dXJuIHZhbHVlIGZyb20gYG1ldGhvZGAuXG4gICAqL1xuICBwZXJmb3JtOiBmdW5jdGlvbiAobWV0aG9kLCBzY29wZSwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgICEhdGhpcy5pc0luVHJhbnNhY3Rpb24oKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUcmFuc2FjdGlvbi5wZXJmb3JtKC4uLik6IENhbm5vdCBpbml0aWFsaXplIGEgdHJhbnNhY3Rpb24gd2hlbiB0aGVyZSAnICsgJ2lzIGFscmVhZHkgYW4gb3V0c3RhbmRpbmcgdHJhbnNhY3Rpb24uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIHZhciBlcnJvclRocm93bjtcbiAgICB2YXIgcmV0O1xuICAgIHRyeSB7XG4gICAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSB0cnVlO1xuICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aFxuICAgICAgLy8gZXJyb3JUaHJvd24gc2V0IHRvIHRydWUgYmVmb3JlIHNldHRpbmcgaXQgdG8gZmFsc2UgYWZ0ZXIgY2FsbGluZ1xuICAgICAgLy8gY2xvc2UgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gdHJ1ZSBpbiB0aGUgZmluYWxseSBibG9jaywgaXQgbWVhbnNcbiAgICAgIC8vIG9uZSBvZiB0aGVzZSBjYWxscyB0aHJldy5cbiAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUFsbCgwKTtcbiAgICAgIHJldCA9IG1ldGhvZC5jYWxsKHNjb3BlLCBhLCBiLCBjLCBkLCBlLCBmKTtcbiAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgIC8vIElmIGBtZXRob2RgIHRocm93cywgcHJlZmVyIHRvIHNob3cgdGhhdCBzdGFjayB0cmFjZSBvdmVyIGFueSB0aHJvd25cbiAgICAgICAgICAvLyBieSBpbnZva2luZyBgY2xvc2VBbGxgLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQWxsKDApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTaW5jZSBgbWV0aG9kYCBkaWRuJ3QgdGhyb3csIHdlIGRvbid0IHdhbnQgdG8gc2lsZW5jZSB0aGUgZXhjZXB0aW9uXG4gICAgICAgICAgLy8gaGVyZS5cbiAgICAgICAgICB0aGlzLmNsb3NlQWxsKDApO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBpbml0aWFsaXplQWxsOiBmdW5jdGlvbiAoc3RhcnRJbmRleCkge1xuICAgIHZhciB0cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgdHJhbnNhY3Rpb25XcmFwcGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aCB0aGVcbiAgICAgICAgLy8gT0JTRVJWRURfRVJST1Igc3RhdGUgYmVmb3JlIG92ZXJ3cml0aW5nIGl0IHdpdGggdGhlIHJlYWwgcmV0dXJuIHZhbHVlXG4gICAgICAgIC8vIG9mIGluaXRpYWxpemUgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gT0JTRVJWRURfRVJST1IgaW4gdGhlIGZpbmFsbHlcbiAgICAgICAgLy8gYmxvY2ssIGl0IG1lYW5zIHdyYXBwZXIuaW5pdGlhbGl6ZSB0aHJldy5cbiAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGFbaV0gPSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUjtcbiAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGFbaV0gPSB3cmFwcGVyLmluaXRpYWxpemUgPyB3cmFwcGVyLmluaXRpYWxpemUuY2FsbCh0aGlzKSA6IG51bGw7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAodGhpcy53cmFwcGVySW5pdERhdGFbaV0gPT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SKSB7XG4gICAgICAgICAgLy8gVGhlIGluaXRpYWxpemVyIGZvciB3cmFwcGVyIGkgdGhyZXcgYW4gZXJyb3I7IGluaXRpYWxpemUgdGhlXG4gICAgICAgICAgLy8gcmVtYWluaW5nIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmVcbiAgICAgICAgICAvLyB0aGF0IHRoZSBmaXJzdCBlcnJvciBpcyB0aGUgb25lIHRvIGJ1YmJsZSB1cC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplQWxsKGkgKyAxKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZXMgZWFjaCBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmNsb3NlW2ldYCBmdW5jdGlvbnMsIHBhc3NpbmcgaW50b1xuICAgKiB0aGVtIHRoZSByZXNwZWN0aXZlIHJldHVybiB2YWx1ZXMgb2YgYHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycy5pbml0W2ldYFxuICAgKiAoYGNsb3NlYHJzIHRoYXQgY29ycmVzcG9uZCB0byBpbml0aWFsaXplcnMgdGhhdCBmYWlsZWQgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCkuXG4gICAqL1xuICBjbG9zZUFsbDogZnVuY3Rpb24gKHN0YXJ0SW5kZXgpIHtcbiAgICAhdGhpcy5pc0luVHJhbnNhY3Rpb24oKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUcmFuc2FjdGlvbi5jbG9zZUFsbCgpOiBDYW5ub3QgY2xvc2UgdHJhbnNhY3Rpb24gd2hlbiBub25lIGFyZSBvcGVuLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHZhciBpbml0RGF0YSA9IHRoaXMud3JhcHBlckluaXREYXRhW2ldO1xuICAgICAgdmFyIGVycm9yVGhyb3duO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aFxuICAgICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG4gICAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG4gICAgICAgIC8vIHdyYXBwZXIuY2xvc2UgdGhyZXcuXG4gICAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluaXREYXRhICE9PSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUiAmJiB3cmFwcGVyLmNsb3NlKSB7XG4gICAgICAgICAgd3JhcHBlci5jbG9zZS5jYWxsKHRoaXMsIGluaXREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgLy8gVGhlIGNsb3NlciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBjbG9zZSB0aGUgcmVtYWluaW5nXG4gICAgICAgICAgLy8gd3JhcHBlcnMgYnV0IHNpbGVuY2UgYW55IGV4Y2VwdGlvbnMgZnJvbSB0aGVtIHRvIGVuc3VyZSB0aGF0IHRoZVxuICAgICAgICAgIC8vIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQWxsKGkgKyAxKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gIH1cbn07XG5cbnZhciBUcmFuc2FjdGlvbiA9IHtcblxuICBNaXhpbjogTWl4aW4sXG5cbiAgLyoqXG4gICAqIFRva2VuIHRvIGxvb2sgZm9yIHRvIGRldGVybWluZSBpZiBhbiBlcnJvciBvY2N1cnJlZC5cbiAgICovXG4gIE9CU0VSVkVEX0VSUk9SOiB7fVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlZISmhibk5oWTNScGIyNHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZSeVlXNXpZV04wYVc5dVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2duWm1KcWN5OXNhV0l2YVc1MllYSnBZVzUwSnlrN1hHNWNiaThxS2x4dUlDb2dZRlJ5WVc1ellXTjBhVzl1WUNCamNtVmhkR1Z6SUdFZ1lteGhZMnNnWW05NElIUm9ZWFFnYVhNZ1lXSnNaU0IwYnlCM2NtRndJR0Z1ZVNCdFpYUm9iMlFnYzNWamFDQjBhR0YwWEc0Z0tpQmpaWEowWVdsdUlHbHVkbUZ5YVdGdWRITWdZWEpsSUcxaGFXNTBZV2x1WldRZ1ltVm1iM0psSUdGdVpDQmhablJsY2lCMGFHVWdiV1YwYUc5a0lHbHpJR2x1ZG05clpXUmNiaUFxSUNoRmRtVnVJR2xtSUdGdUlHVjRZMlZ3ZEdsdmJpQnBjeUIwYUhKdmQyNGdkMmhwYkdVZ2FXNTJiMnRwYm1jZ2RHaGxJSGR5WVhCd1pXUWdiV1YwYUc5a0tTNGdWMmh2WlhabGNseHVJQ29nYVc1emRHRnVkR2xoZEdWeklHRWdkSEpoYm5OaFkzUnBiMjRnWTJGdUlIQnliM1pwWkdVZ1pXNW1iM0pqWlhKeklHOW1JSFJvWlNCcGJuWmhjbWxoYm5SeklHRjBYRzRnS2lCamNtVmhkR2x2YmlCMGFXMWxMaUJVYUdVZ1lGUnlZVzV6WVdOMGFXOXVZQ0JqYkdGemN5QnBkSE5sYkdZZ2QybHNiQ0J6ZFhCd2JIa2diMjVsSUdGa1pHbDBhVzl1WVd4Y2JpQXFJR0YxZEc5dFlYUnBZeUJwYm5aaGNtbGhiblFnWm05eUlIbHZkU0F0SUhSb1pTQnBiblpoY21saGJuUWdkR2hoZENCaGJua2dkSEpoYm5OaFkzUnBiMjRnYVc1emRHRnVZMlZjYmlBcUlITm9iM1ZzWkNCdWIzUWdZbVVnY25WdUlIZG9hV3hsSUdsMElHbHpJR0ZzY21WaFpIa2dZbVZwYm1jZ2NuVnVMaUJaYjNVZ2QyOTFiR1FnZEhsd2FXTmhiR3g1SUdOeVpXRjBaU0JoWEc0Z0tpQnphVzVuYkdVZ2FXNXpkR0Z1WTJVZ2IyWWdZU0JnVkhKaGJuTmhZM1JwYjI1Z0lHWnZjaUJ5WlhWelpTQnRkV3gwYVhCc1pTQjBhVzFsY3l3Z2RHaGhkQ0J3YjNSbGJuUnBZV3hzZVZ4dUlDb2dhWE1nZFhObFpDQjBieUIzY21Gd0lITmxkbVZ5WVd3Z1pHbG1abVZ5Wlc1MElHMWxkR2h2WkhNdUlGZHlZWEJ3WlhKeklHRnlaU0JsZUhSeVpXMWxiSGtnYzJsdGNHeGxJQzFjYmlBcUlIUm9aWGtnYjI1c2VTQnlaWEYxYVhKbElHbHRjR3hsYldWdWRHbHVaeUIwZDI4Z2JXVjBhRzlrY3k1Y2JpQXFYRzRnS2lBOGNISmxQbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGR5WVhCd1pYSnpJQ2hwYm1wbFkzUmxaQ0JoZENCamNtVmhkR2x2YmlCMGFXMWxLVnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDc2dJQ0FnSUNBZ0lDdGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOElDQWdJQ0FnSUNCOFhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS3kwdExTMHRMUzB0TFMwdExTMHRMUzB0ZkMwdExTMHRMUzB0ZkMwdExTMHRMUzB0TFMwdExTMHRLMXh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lId2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWWdJQ0FnSUNBZ0lId2dJQ0FnSUNBZ0lDQWdJQ0FnSUh4Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4SUNBZ0lDQWdLeTB0TFMwdExTMHRMUzB0TFMwdExTc2dJQ0I4SUNBZ0lDQWdJQ0FnSUNBZ0lDQjhYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZDQWdJQ3N0TFh3Z0lDQWdkM0poY0hCbGNqRWdJQ0I4TFMwdGZDMHRMUzBySUNBZ0lDQWdJQ0FnZkZ4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHdnSUNCOElDQXJMUzB0TFMwdExTMHRMUzB0TFMwdEt5QWdJSFlnSUNBZ2ZDQWdJQ0FnSUNBZ0lIeGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOElDQWdmQ0FnSUNBZ0lDQWdJQ0FyTFMwdExTMHRMUzB0TFMwdExTc2dJSHdnSUNBZ0lDQWdJQ0I4WEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmQ0FnSUh3Z0lDQWdJQ3N0TFMwdGZDQWdJSGR5WVhCd1pYSXlJQ0I4TFMwdExTMHRMUzBySUNBZ2ZGeHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z0lDQjhJQ0FnSUNCOElDQWdJQ3N0TFMwdExTMHRMUzB0TFMwdEt5QWdmQ0FnSUNBZ2ZDQWdJSHhjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhJQ0FnZkNBZ0lDQWdmQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z0lDQWdJSHdnSUNCOFhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkNBZ0lIWWdJQ0FnSUhZZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJJQ0FnSUNCMklDQWdmQ0IzY21Gd2NHVnlYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZDQXJMUzB0S3lBckxTMHRLeUFnSUNzdExTMHRMUzB0TFMwcklDQWdLeTB0TFNzZ0t5MHRMU3NnZkNCcGJuWmhjbWxoYm5SelhHNGdLaUJ3WlhKbWIzSnRLR0Z1ZVUxbGRHaHZaQ2tnZkNCOElDQWdmQ0I4SUNBZ2ZDQWdJSHdnSUNBZ0lDQWdJQ0I4SUNBZ2ZDQWdJSHdnZkNBZ0lId2dmQ0J0WVdsdWRHRnBibVZrWEc0Z0tpQXJMUzB0TFMwdExTMHRMUzB0TFMwdExTMCtmQzE4TFMwdGZDMThMUzB0ZkMwdFBueGhibmxOWlhSb2IyUjhMUzB0ZkMwdExYd3RmQzB0TFh3dGZDMHRMUzB0TFMwdFBseHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z2ZDQWdJSHdnZkNBZ0lId2dJQ0I4SUNBZ0lDQWdJQ0FnZkNBZ0lId2dJQ0I4SUh3Z0lDQjhJSHhjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhJSHdnSUNCOElId2dJQ0I4SUNBZ2ZDQWdJQ0FnSUNBZ0lId2dJQ0I4SUNBZ2ZDQjhJQ0FnZkNCOFhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkNCOElDQWdmQ0I4SUNBZ2ZDQWdJSHdnSUNBZ0lDQWdJQ0I4SUNBZ2ZDQWdJSHdnZkNBZ0lId2dmRnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lId2dLeTB0TFNzZ0t5MHRMU3NnSUNBckxTMHRMUzB0TFMwdEt5QWdJQ3N0TFMwcklDc3RMUzBySUh4Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4SUNCcGJtbDBhV0ZzYVhwbElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiRzl6WlNBZ0lDQjhYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0t5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0SzF4dUlDb2dQQzl3Y21VK1hHNGdLbHh1SUNvZ1ZYTmxJR05oYzJWek9seHVJQ29nTFNCUWNtVnpaWEoyYVc1bklIUm9aU0JwYm5CMWRDQnpaV3hsWTNScGIyNGdjbUZ1WjJWeklHSmxabTl5WlM5aFpuUmxjaUJ5WldOdmJtTnBiR2xoZEdsdmJpNWNiaUFxSUNBZ1VtVnpkRzl5YVc1bklITmxiR1ZqZEdsdmJpQmxkbVZ1SUdsdUlIUm9aU0JsZG1WdWRDQnZaaUJoYmlCMWJtVjRjR1ZqZEdWa0lHVnljbTl5TGx4dUlDb2dMU0JFWldGamRHbDJZWFJwYm1jZ1pYWmxiblJ6SUhkb2FXeGxJSEpsWVhKeVlXNW5hVzVuSUhSb1pTQkVUMDBzSUhCeVpYWmxiblJwYm1jZ1lteDFjbk12Wm05amRYTmxjeXhjYmlBcUlDQWdkMmhwYkdVZ1ozVmhjbUZ1ZEdWbGFXNW5JSFJvWVhRZ1lXWjBaWEozWVhKa2N5d2dkR2hsSUdWMlpXNTBJSE41YzNSbGJTQnBjeUJ5WldGamRHbDJZWFJsWkM1Y2JpQXFJQzBnUm14MWMyaHBibWNnWVNCeGRXVjFaU0J2WmlCamIyeHNaV04wWldRZ1JFOU5JRzExZEdGMGFXOXVjeUIwYnlCMGFHVWdiV0ZwYmlCVlNTQjBhSEpsWVdRZ1lXWjBaWElnWVZ4dUlDb2dJQ0J5WldOdmJtTnBiR2xoZEdsdmJpQjBZV3RsY3lCd2JHRmpaU0JwYmlCaElIZHZjbXRsY2lCMGFISmxZV1F1WEc0Z0tpQXRJRWx1ZG05cmFXNW5JR0Z1ZVNCamIyeHNaV04wWldRZ1lHTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpXQWdZMkZzYkdKaFkydHpJR0ZtZEdWeUlISmxibVJsY21sdVp5QnVaWGRjYmlBcUlDQWdZMjl1ZEdWdWRDNWNiaUFxSUMwZ0tFWjFkSFZ5WlNCMWMyVWdZMkZ6WlNrNklGZHlZWEJ3YVc1bklIQmhjblJwWTNWc1lYSWdabXgxYzJobGN5QnZaaUIwYUdVZ1lGSmxZV04wVjI5eWEyVnlZQ0J4ZFdWMVpWeHVJQ29nSUNCMGJ5QndjbVZ6WlhKMlpTQjBhR1VnWUhOamNtOXNiRlJ2Y0dBZ0tHRnVJR0YxZEc5dFlYUnBZeUJ6WTNKdmJHd2dZWGRoY21VZ1JFOU5LUzVjYmlBcUlDMGdLRVoxZEhWeVpTQjFjMlVnWTJGelpTazZJRXhoZVc5MWRDQmpZV3hqZFd4aGRHbHZibk1nWW1WbWIzSmxJR0Z1WkNCaFpuUmxjaUJFVDAwZ2RYQmtZWFJsY3k1Y2JpQXFYRzRnS2lCVWNtRnVjMkZqZEdsdmJtRnNJSEJzZFdkcGJpQkJVRWs2WEc0Z0tpQXRJRUVnYlc5a2RXeGxJSFJvWVhRZ2FHRnpJR0Z1SUdCcGJtbDBhV0ZzYVhwbFlDQnRaWFJvYjJRZ2RHaGhkQ0J5WlhSMWNtNXpJR0Z1ZVNCd2NtVmpiMjF3ZFhSaGRHbHZiaTVjYmlBcUlDMGdZVzVrSUdFZ1lHTnNiM05sWUNCdFpYUm9iMlFnZEdoaGRDQmhZMk5sY0hSeklIUm9aU0J3Y21WamIyMXdkWFJoZEdsdmJpNGdZR05zYjNObFlDQnBjeUJwYm5admEyVmtYRzRnS2lBZ0lIZG9aVzRnZEdobElIZHlZWEJ3WldRZ2NISnZZMlZ6Y3lCcGN5QmpiMjF3YkdWMFpXUXNJRzl5SUdoaGN5Qm1ZV2xzWldRdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlVHhVY21GdWMyRmpkR2x2Ym1Gc1YzSmhjSEJsY2o1OUlIUnlZVzV6WVdOMGFXOXVWM0poY0hCbGNpQlhjbUZ3Y0dWeUlHMXZaSFZzWlhOY2JpQXFJSFJvWVhRZ2FXMXdiR1Z0Wlc1MElHQnBibWwwYVdGc2FYcGxZQ0JoYm1RZ1lHTnNiM05sWUM1Y2JpQXFJRUJ5WlhSMWNtNGdlMVJ5WVc1ellXTjBhVzl1ZlNCVGFXNW5iR1VnZEhKaGJuTmhZM1JwYjI0Z1ptOXlJSEpsZFhObElHbHVJSFJvY21WaFpDNWNiaUFxWEc0Z0tpQkFZMnhoYzNNZ1ZISmhibk5oWTNScGIyNWNiaUFxTDF4dWRtRnlJRTFwZUdsdUlEMGdlMXh1SUNBdktpcGNiaUFnSUNvZ1UyVjBjeUIxY0NCMGFHbHpJR2x1YzNSaGJtTmxJSE52SUhSb1lYUWdhWFFnYVhNZ2NISmxjR0Z5WldRZ1ptOXlJR052Ykd4bFkzUnBibWNnYldWMGNtbGpjeTRnUkc5bGMxeHVJQ0FnS2lCemJ5QnpkV05vSUhSb1lYUWdkR2hwY3lCelpYUjFjQ0J0WlhSb2IyUWdiV0Y1SUdKbElIVnpaV1FnYjI0Z1lXNGdhVzV6ZEdGdVkyVWdkR2hoZENCcGN5QmhiSEpsWVdSNVhHNGdJQ0FxSUdsdWFYUnBZV3hwZW1Wa0xDQnBiaUJoSUhkaGVTQjBhR0YwSUdSdlpYTWdibTkwSUdOdmJuTjFiV1VnWVdSa2FYUnBiMjVoYkNCdFpXMXZjbmtnZFhCdmJpQnlaWFZ6WlM1Y2JpQWdJQ29nVkdoaGRDQmpZVzRnWW1VZ2RYTmxablZzSUdsbUlIbHZkU0JrWldOcFpHVWdkRzhnYldGclpTQjViM1Z5SUhOMVltTnNZWE56SUc5bUlIUm9hWE1nYldsNGFXNGdZVnh1SUNBZ0tpQmNJbEJ2YjJ4bFpFTnNZWE56WENJdVhHNGdJQ0FxTDF4dUlDQnlaV2x1YVhScFlXeHBlbVZVY21GdWMyRmpkR2x2YmpvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUm9hWE11ZEhKaGJuTmhZM1JwYjI1WGNtRndjR1Z5Y3lBOUlIUm9hWE11WjJWMFZISmhibk5oWTNScGIyNVhjbUZ3Y0dWeWN5Z3BPMXh1SUNBZ0lHbG1JQ2gwYUdsekxuZHlZWEJ3WlhKSmJtbDBSR0YwWVNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzY21Gd2NHVnlTVzVwZEVSaGRHRXViR1Z1WjNSb0lEMGdNRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzY21Gd2NHVnlTVzVwZEVSaGRHRWdQU0JiWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1ZmFYTkpibFJ5WVc1ellXTjBhVzl1SUQwZ1ptRnNjMlU3WEc0Z0lIMHNYRzVjYmlBZ1gybHpTVzVVY21GdWMyRmpkR2x2YmpvZ1ptRnNjMlVzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJoWW5OMGNtRmpkRnh1SUNBZ0tpQkFjbVYwZFhKdUlIdEJjbkpoZVR4VWNtRnVjMkZqZEdsdmJsZHlZWEJ3WlhJK2ZTQkJjbkpoZVNCdlppQjBjbUZ1YzJGamRHbHZiaUIzY21Gd2NHVnljeTVjYmlBZ0lDb3ZYRzRnSUdkbGRGUnlZVzV6WVdOMGFXOXVWM0poY0hCbGNuTTZJRzUxYkd3c1hHNWNiaUFnYVhOSmJsUnlZVzV6WVdOMGFXOXVPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ0VoZEdocGN5NWZhWE5KYmxSeVlXNXpZV04wYVc5dU8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJGZUdWamRYUmxjeUIwYUdVZ1puVnVZM1JwYjI0Z2QybDBhR2x1SUdFZ2MyRm1aWFI1SUhkcGJtUnZkeTRnVlhObElIUm9hWE1nWm05eUlIUm9aU0IwYjNBZ2JHVjJaV3hjYmlBZ0lDb2diV1YwYUc5a2N5QjBhR0YwSUhKbGMzVnNkQ0JwYmlCc1lYSm5aU0JoYlc5MWJuUnpJRzltSUdOdmJYQjFkR0YwYVc5dUwyMTFkR0YwYVc5dWN5QjBhR0YwSUhkdmRXeGtYRzRnSUNBcUlHNWxaV1FnZEc4Z1ltVWdjMkZtWlhSNUlHTm9aV05yWldRdUlGUm9aU0J2Y0hScGIyNWhiQ0JoY21kMWJXVnVkSE1nYUdWc2NITWdjSEpsZG1WdWRDQjBhR1VnYm1WbFpGeHVJQ0FnS2lCMGJ5QmlhVzVrSUdsdUlHMWhibmtnWTJGelpYTXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUcxbGRHaHZaQ0JOWlcxaVpYSWdiMllnYzJOdmNHVWdkRzhnWTJGc2JDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhOamIzQmxJRk5qYjNCbElIUnZJR2x1ZG05clpTQm1jbTl0TGx4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamREODlmU0JoSUVGeVozVnRaVzUwSUhSdklIQmhjM01nZEc4Z2RHaGxJRzFsZEdodlpDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1EvUFgwZ1lpQkJjbWQxYldWdWRDQjBieUJ3WVhOeklIUnZJSFJvWlNCdFpYUm9iMlF1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMFB6MTlJR01nUVhKbmRXMWxiblFnZEc4Z2NHRnpjeUIwYnlCMGFHVWdiV1YwYUc5a0xseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkRDg5ZlNCa0lFRnlaM1Z0Wlc1MElIUnZJSEJoYzNNZ2RHOGdkR2hsSUcxbGRHaHZaQzVjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNRL1BYMGdaU0JCY21kMWJXVnVkQ0IwYnlCd1lYTnpJSFJ2SUhSb1pTQnRaWFJvYjJRdVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBQejE5SUdZZ1FYSm5kVzFsYm5RZ2RHOGdjR0Z6Y3lCMGJ5QjBhR1VnYldWMGFHOWtMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUhzcWZTQlNaWFIxY200Z2RtRnNkV1VnWm5KdmJTQmdiV1YwYUc5a1lDNWNiaUFnSUNvdlhHNGdJSEJsY21admNtMDZJR1oxYm1OMGFXOXVJQ2h0WlhSb2IyUXNJSE5qYjNCbExDQmhMQ0JpTENCakxDQmtMQ0JsTENCbUtTQjdYRzRnSUNBZ0lTRjBhR2x6TG1selNXNVVjbUZ1YzJGamRHbHZiaWdwSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMVJ5WVc1ellXTjBhVzl1TG5CbGNtWnZjbTBvTGk0dUtUb2dRMkZ1Ym05MElHbHVhWFJwWVd4cGVtVWdZU0IwY21GdWMyRmpkR2x2YmlCM2FHVnVJSFJvWlhKbElDY2dLeUFuYVhNZ1lXeHlaV0ZrZVNCaGJpQnZkWFJ6ZEdGdVpHbHVaeUIwY21GdWMyRmpkR2x2Ymk0bktTQTZJR2x1ZG1GeWFXRnVkQ2htWVd4elpTa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdkbUZ5SUdWeWNtOXlWR2h5YjNkdU8xeHVJQ0FnSUhaaGNpQnlaWFE3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMmx6U1c1VWNtRnVjMkZqZEdsdmJpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBdkx5QkRZWFJqYUdsdVp5Qmxjbkp2Y25NZ2JXRnJaWE1nWkdWaWRXZG5hVzVuSUcxdmNtVWdaR2xtWm1samRXeDBMQ0J6YnlCM1pTQnpkR0Z5ZENCM2FYUm9YRzRnSUNBZ0lDQXZMeUJsY25KdmNsUm9jbTkzYmlCelpYUWdkRzhnZEhKMVpTQmlaV1p2Y21VZ2MyVjBkR2x1WnlCcGRDQjBieUJtWVd4elpTQmhablJsY2lCallXeHNhVzVuWEc0Z0lDQWdJQ0F2THlCamJHOXpaU0F0TFNCcFppQnBkQ2R6SUhOMGFXeHNJSE5sZENCMGJ5QjBjblZsSUdsdUlIUm9aU0JtYVc1aGJHeDVJR0pzYjJOckxDQnBkQ0J0WldGdWMxeHVJQ0FnSUNBZ0x5OGdiMjVsSUc5bUlIUm9aWE5sSUdOaGJHeHpJSFJvY21WM0xseHVJQ0FnSUNBZ1pYSnliM0pVYUhKdmQyNGdQU0IwY25WbE8xeHVJQ0FnSUNBZ2RHaHBjeTVwYm1sMGFXRnNhWHBsUVd4c0tEQXBPMXh1SUNBZ0lDQWdjbVYwSUQwZ2JXVjBhRzlrTG1OaGJHd29jMk52Y0dVc0lHRXNJR0lzSUdNc0lHUXNJR1VzSUdZcE8xeHVJQ0FnSUNBZ1pYSnliM0pVYUhKdmQyNGdQU0JtWVd4elpUdGNiaUFnSUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5VkdoeWIzZHVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdTV1lnWUcxbGRHaHZaR0FnZEdoeWIzZHpMQ0J3Y21WbVpYSWdkRzhnYzJodmR5QjBhR0YwSUhOMFlXTnJJSFJ5WVdObElHOTJaWElnWVc1NUlIUm9jbTkzYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJR0o1SUdsdWRtOXJhVzVuSUdCamJHOXpaVUZzYkdBdVhHNGdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyeHZjMlZCYkd3b01DazdYRzRnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGTnBibU5sSUdCdFpYUm9iMlJnSUdScFpHNG5kQ0IwYUhKdmR5d2dkMlVnWkc5dUozUWdkMkZ1ZENCMGJ5QnphV3hsYm1ObElIUm9aU0JsZUdObGNIUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBdkx5Qm9aWEpsTGx4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WTJ4dmMyVkJiR3dvTUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHpTVzVVY21GdWMyRmpkR2x2YmlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVjBPMXh1SUNCOUxGeHVYRzRnSUdsdWFYUnBZV3hwZW1WQmJHdzZJR1oxYm1OMGFXOXVJQ2h6ZEdGeWRFbHVaR1Y0S1NCN1hHNGdJQ0FnZG1GeUlIUnlZVzV6WVdOMGFXOXVWM0poY0hCbGNuTWdQU0IwYUdsekxuUnlZVzV6WVdOMGFXOXVWM0poY0hCbGNuTTdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJSE4wWVhKMFNXNWtaWGc3SUdrZ1BDQjBjbUZ1YzJGamRHbHZibGR5WVhCd1pYSnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdkM0poY0hCbGNpQTlJSFJ5WVc1ellXTjBhVzl1VjNKaGNIQmxjbk5iYVYwN1hHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0F2THlCRFlYUmphR2x1WnlCbGNuSnZjbk1nYldGclpYTWdaR1ZpZFdkbmFXNW5JRzF2Y21VZ1pHbG1abWxqZFd4MExDQnpieUIzWlNCemRHRnlkQ0IzYVhSb0lIUm9aVnh1SUNBZ0lDQWdJQ0F2THlCUFFsTkZVbFpGUkY5RlVsSlBVaUJ6ZEdGMFpTQmlaV1p2Y21VZ2IzWmxjbmR5YVhScGJtY2dhWFFnZDJsMGFDQjBhR1VnY21WaGJDQnlaWFIxY200Z2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnTHk4Z2IyWWdhVzVwZEdsaGJHbDZaU0F0TFNCcFppQnBkQ2R6SUhOMGFXeHNJSE5sZENCMGJ5QlBRbE5GVWxaRlJGOUZVbEpQVWlCcGJpQjBhR1VnWm1sdVlXeHNlVnh1SUNBZ0lDQWdJQ0F2THlCaWJHOWpheXdnYVhRZ2JXVmhibk1nZDNKaGNIQmxjaTVwYm1sMGFXRnNhWHBsSUhSb2NtVjNMbHh1SUNBZ0lDQWdJQ0IwYUdsekxuZHlZWEJ3WlhKSmJtbDBSR0YwWVZ0cFhTQTlJRlJ5WVc1ellXTjBhVzl1TGs5Q1UwVlNWa1ZFWDBWU1VrOVNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHlZWEJ3WlhKSmJtbDBSR0YwWVZ0cFhTQTlJSGR5WVhCd1pYSXVhVzVwZEdsaGJHbDZaU0EvSUhkeVlYQndaWEl1YVc1cGRHbGhiR2w2WlM1allXeHNLSFJvYVhNcElEb2diblZzYkR0Y2JpQWdJQ0FnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuZHlZWEJ3WlhKSmJtbDBSR0YwWVZ0cFhTQTlQVDBnVkhKaGJuTmhZM1JwYjI0dVQwSlRSVkpXUlVSZlJWSlNUMUlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJVYUdVZ2FXNXBkR2xoYkdsNlpYSWdabTl5SUhkeVlYQndaWElnYVNCMGFISmxkeUJoYmlCbGNuSnZjanNnYVc1cGRHbGhiR2w2WlNCMGFHVmNiaUFnSUNBZ0lDQWdJQ0F2THlCeVpXMWhhVzVwYm1jZ2QzSmhjSEJsY25NZ1luVjBJSE5wYkdWdVkyVWdZVzU1SUdWNFkyVndkR2x2Ym5NZ1puSnZiU0IwYUdWdElIUnZJR1Z1YzNWeVpWeHVJQ0FnSUNBZ0lDQWdJQzh2SUhSb1lYUWdkR2hsSUdacGNuTjBJR1Z5Y205eUlHbHpJSFJvWlNCdmJtVWdkRzhnWW5WaVlteGxJSFZ3TGx4dUlDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdWFYUnBZV3hwZW1WQmJHd29hU0FySURFcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UzMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1MmIydGxjeUJsWVdOb0lHOW1JR0IwYUdsekxuUnlZVzV6WVdOMGFXOXVWM0poY0hCbGNuTXVZMnh2YzJWYmFWMWdJR1oxYm1OMGFXOXVjeXdnY0dGemMybHVaeUJwYm5SdlhHNGdJQ0FxSUhSb1pXMGdkR2hsSUhKbGMzQmxZM1JwZG1VZ2NtVjBkWEp1SUhaaGJIVmxjeUJ2WmlCZ2RHaHBjeTUwY21GdWMyRmpkR2x2YmxkeVlYQndaWEp6TG1sdWFYUmJhVjFnWEc0Z0lDQXFJQ2hnWTJ4dmMyVmdjbk1nZEdoaGRDQmpiM0p5WlhOd2IyNWtJSFJ2SUdsdWFYUnBZV3hwZW1WeWN5QjBhR0YwSUdaaGFXeGxaQ0IzYVd4c0lHNXZkQ0JpWlZ4dUlDQWdLaUJwYm5admEyVmtLUzVjYmlBZ0lDb3ZYRzRnSUdOc2IzTmxRV3hzT2lCbWRXNWpkR2x2YmlBb2MzUmhjblJKYm1SbGVDa2dlMXh1SUNBZ0lDRjBhR2x6TG1selNXNVVjbUZ1YzJGamRHbHZiaWdwSUQ4Z2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QS9JR2x1ZG1GeWFXRnVkQ2htWVd4elpTd2dKMVJ5WVc1ellXTjBhVzl1TG1Oc2IzTmxRV3hzS0NrNklFTmhibTV2ZENCamJHOXpaU0IwY21GdWMyRmpkR2x2YmlCM2FHVnVJRzV2Ym1VZ1lYSmxJRzl3Wlc0dUp5a2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJSFpoY2lCMGNtRnVjMkZqZEdsdmJsZHlZWEJ3WlhKeklEMGdkR2hwY3k1MGNtRnVjMkZqZEdsdmJsZHlZWEJ3WlhKek8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQnpkR0Z5ZEVsdVpHVjRPeUJwSUR3Z2RISmhibk5oWTNScGIyNVhjbUZ3Y0dWeWN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlIZHlZWEJ3WlhJZ1BTQjBjbUZ1YzJGamRHbHZibGR5WVhCd1pYSnpXMmxkTzF4dUlDQWdJQ0FnZG1GeUlHbHVhWFJFWVhSaElEMGdkR2hwY3k1M2NtRndjR1Z5U1c1cGRFUmhkR0ZiYVYwN1hHNGdJQ0FnSUNCMllYSWdaWEp5YjNKVWFISnZkMjQ3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJEWVhSamFHbHVaeUJsY25KdmNuTWdiV0ZyWlhNZ1pHVmlkV2RuYVc1bklHMXZjbVVnWkdsbVptbGpkV3gwTENCemJ5QjNaU0J6ZEdGeWRDQjNhWFJvWEc0Z0lDQWdJQ0FnSUM4dklHVnljbTl5VkdoeWIzZHVJSE5sZENCMGJ5QjBjblZsSUdKbFptOXlaU0J6WlhSMGFXNW5JR2wwSUhSdklHWmhiSE5sSUdGbWRHVnlJR05oYkd4cGJtZGNiaUFnSUNBZ0lDQWdMeThnWTJ4dmMyVWdMUzBnYVdZZ2FYUW5jeUJ6ZEdsc2JDQnpaWFFnZEc4Z2RISjFaU0JwYmlCMGFHVWdabWx1WVd4c2VTQmliRzlqYXl3Z2FYUWdiV1ZoYm5OY2JpQWdJQ0FnSUNBZ0x5OGdkM0poY0hCbGNpNWpiRzl6WlNCMGFISmxkeTVjYmlBZ0lDQWdJQ0FnWlhKeWIzSlVhSEp2ZDI0Z1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCcFppQW9hVzVwZEVSaGRHRWdJVDA5SUZSeVlXNXpZV04wYVc5dUxrOUNVMFZTVmtWRVgwVlNVazlTSUNZbUlIZHlZWEJ3WlhJdVkyeHZjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjNjbUZ3Y0dWeUxtTnNiM05sTG1OaGJHd29kR2hwY3l3Z2FXNXBkRVJoZEdFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1Z5Y205eVZHaHliM2R1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnSUNCcFppQW9aWEp5YjNKVWFISnZkMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJVYUdVZ1kyeHZjMlZ5SUdadmNpQjNjbUZ3Y0dWeUlHa2dkR2h5WlhjZ1lXNGdaWEp5YjNJN0lHTnNiM05sSUhSb1pTQnlaVzFoYVc1cGJtZGNiaUFnSUNBZ0lDQWdJQ0F2THlCM2NtRndjR1Z5Y3lCaWRYUWdjMmxzWlc1alpTQmhibmtnWlhoalpYQjBhVzl1Y3lCbWNtOXRJSFJvWlcwZ2RHOGdaVzV6ZFhKbElIUm9ZWFFnZEdobFhHNGdJQ0FnSUNBZ0lDQWdMeThnWm1seWMzUWdaWEp5YjNJZ2FYTWdkR2hsSUc5dVpTQjBieUJpZFdKaWJHVWdkWEF1WEc0Z0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTJ4dmMyVkJiR3dvYVNBcklERXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdDlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTUzY21Gd2NHVnlTVzVwZEVSaGRHRXViR1Z1WjNSb0lEMGdNRHRjYmlBZ2ZWeHVmVHRjYmx4dWRtRnlJRlJ5WVc1ellXTjBhVzl1SUQwZ2UxeHVYRzRnSUUxcGVHbHVPaUJOYVhocGJpeGNibHh1SUNBdktpcGNiaUFnSUNvZ1ZHOXJaVzRnZEc4Z2JHOXZheUJtYjNJZ2RHOGdaR1YwWlhKdGFXNWxJR2xtSUdGdUlHVnljbTl5SUc5alkzVnljbVZrTGx4dUlDQWdLaTljYmlBZ1QwSlRSVkpXUlVSZlJWSlNUMUk2SUh0OVhHNWNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ZISmhibk5oWTNScGIyNDdJbDE5IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFZpZXdwb3J0TWV0cmljc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFZpZXdwb3J0TWV0cmljcyA9IHtcblxuICBjdXJyZW50U2Nyb2xsTGVmdDogMCxcblxuICBjdXJyZW50U2Nyb2xsVG9wOiAwLFxuXG4gIHJlZnJlc2hTY3JvbGxWYWx1ZXM6IGZ1bmN0aW9uIChzY3JvbGxQb3NpdGlvbikge1xuICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdCA9IHNjcm9sbFBvc2l0aW9uLng7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3AgPSBzY3JvbGxQb3NpdGlvbi55O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVmlld3BvcnRNZXRyaWNzOyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgYWNjdW11bGF0ZUludG9cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKlxuICogQWNjdW11bGF0ZXMgaXRlbXMgdGhhdCBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBpbnRvIHRoZSBmaXJzdCBvbmUuIFRoaXNcbiAqIGlzIHVzZWQgdG8gY29uc2VydmUgbWVtb3J5IGJ5IGF2b2lkaW5nIGFycmF5IGFsbG9jYXRpb25zLCBhbmQgdGh1cyBzYWNyaWZpY2VzXG4gKiBBUEkgY2xlYW5uZXNzLiBTaW5jZSBgY3VycmVudGAgY2FuIGJlIG51bGwgYmVmb3JlIGJlaW5nIHBhc3NlZCBpbiBhbmQgbm90XG4gKiBudWxsIGFmdGVyIHRoaXMgZnVuY3Rpb24sIG1ha2Ugc3VyZSB0byBhc3NpZ24gaXQgYmFjayB0byBgY3VycmVudGA6XG4gKlxuICogYGEgPSBhY2N1bXVsYXRlSW50byhhLCBiKTtgXG4gKlxuICogVGhpcyBBUEkgc2hvdWxkIGJlIHNwYXJpbmdseSB1c2VkLiBUcnkgYGFjY3VtdWxhdGVgIGZvciBzb21ldGhpbmcgY2xlYW5lci5cbiAqXG4gKiBAcmV0dXJuIHsqfGFycmF5PCo+fSBBbiBhY2N1bXVsYXRpb24gb2YgaXRlbXMuXG4gKi9cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUludG8oY3VycmVudCwgbmV4dCkge1xuICAhKG5leHQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYWNjdW11bGF0ZUludG8oLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBpZiAoY3VycmVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICAvLyBCb3RoIGFyZSBub3QgZW1wdHkuIFdhcm5pbmc6IE5ldmVyIGNhbGwgeC5jb25jYXQoeSkgd2hlbiB5b3UgYXJlIG5vdFxuICAvLyBjZXJ0YWluIHRoYXQgeCBpcyBhbiBBcnJheSAoeCBjb3VsZCBiZSBhIHN0cmluZyB3aXRoIGNvbmNhdCBtZXRob2QpLlxuICB2YXIgY3VycmVudElzQXJyYXkgPSBBcnJheS5pc0FycmF5KGN1cnJlbnQpO1xuICB2YXIgbmV4dElzQXJyYXkgPSBBcnJheS5pc0FycmF5KG5leHQpO1xuXG4gIGlmIChjdXJyZW50SXNBcnJheSAmJiBuZXh0SXNBcnJheSkge1xuICAgIGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KTtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIGlmIChjdXJyZW50SXNBcnJheSkge1xuICAgIGN1cnJlbnQucHVzaChuZXh0KTtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIGlmIChuZXh0SXNBcnJheSkge1xuICAgIC8vIEEgYml0IHRvbyBkYW5nZXJvdXMgdG8gbXV0YXRlIGBuZXh0YC5cbiAgICByZXR1cm4gW2N1cnJlbnRdLmNvbmNhdChuZXh0KTtcbiAgfVxuXG4gIHJldHVybiBbY3VycmVudCwgbmV4dF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWNjdW11bGF0ZUludG87XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2WVdOamRXMTFiR0YwWlVsdWRHOHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UUXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQmhZMk4xYlhWc1lYUmxTVzUwYjF4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMmx1ZG1GeWFXRnVkQ2NwTzF4dVhHNHZLaXBjYmlBcVhHNGdLaUJCWTJOMWJYVnNZWFJsY3lCcGRHVnRjeUIwYUdGMElHMTFjM1FnYm05MElHSmxJRzUxYkd3Z2IzSWdkVzVrWldacGJtVmtJR2x1ZEc4Z2RHaGxJR1pwY25OMElHOXVaUzRnVkdocGMxeHVJQ29nYVhNZ2RYTmxaQ0IwYnlCamIyNXpaWEoyWlNCdFpXMXZjbmtnWW5rZ1lYWnZhV1JwYm1jZ1lYSnlZWGtnWVd4c2IyTmhkR2x2Ym5Nc0lHRnVaQ0IwYUhWeklITmhZM0pwWm1salpYTmNiaUFxSUVGUVNTQmpiR1ZoYm01bGMzTXVJRk5wYm1ObElHQmpkWEp5Wlc1MFlDQmpZVzRnWW1VZ2JuVnNiQ0JpWldadmNtVWdZbVZwYm1jZ2NHRnpjMlZrSUdsdUlHRnVaQ0J1YjNSY2JpQXFJRzUxYkd3Z1lXWjBaWElnZEdocGN5Qm1kVzVqZEdsdmJpd2diV0ZyWlNCemRYSmxJSFJ2SUdGemMybG5iaUJwZENCaVlXTnJJSFJ2SUdCamRYSnlaVzUwWURwY2JpQXFYRzRnS2lCZ1lTQTlJR0ZqWTNWdGRXeGhkR1ZKYm5SdktHRXNJR0lwTzJCY2JpQXFYRzRnS2lCVWFHbHpJRUZRU1NCemFHOTFiR1FnWW1VZ2MzQmhjbWx1WjJ4NUlIVnpaV1F1SUZSeWVTQmdZV05qZFcxMWJHRjBaV0FnWm05eUlITnZiV1YwYUdsdVp5QmpiR1ZoYm1WeUxseHVJQ3BjYmlBcUlFQnlaWFIxY200Z2V5cDhZWEp5WVhrOEtqNTlJRUZ1SUdGalkzVnRkV3hoZEdsdmJpQnZaaUJwZEdWdGN5NWNiaUFxTDF4dVhHNW1kVzVqZEdsdmJpQmhZMk4xYlhWc1lYUmxTVzUwYnloamRYSnlaVzUwTENCdVpYaDBLU0I3WEc0Z0lDRW9ibVY0ZENBaFBTQnVkV3hzS1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RoWTJOMWJYVnNZWFJsU1c1MGJ5Z3VMaTRwT2lCQlkyTjFiWFZzWVhSbFpDQnBkR1Z0Y3lCdGRYTjBJRzV2ZENCaVpTQnVkV3hzSUc5eUlIVnVaR1ZtYVc1bFpDNG5LU0E2SUdsdWRtRnlhV0Z1ZENobVlXeHpaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJR2xtSUNoamRYSnlaVzUwSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVY0ZER0Y2JpQWdmVnh1WEc0Z0lDOHZJRUp2ZEdnZ1lYSmxJRzV2ZENCbGJYQjBlUzRnVjJGeWJtbHVaem9nVG1WMlpYSWdZMkZzYkNCNExtTnZibU5oZENoNUtTQjNhR1Z1SUhsdmRTQmhjbVVnYm05MFhHNGdJQzh2SUdObGNuUmhhVzRnZEdoaGRDQjRJR2x6SUdGdUlFRnljbUY1SUNoNElHTnZkV3hrSUdKbElHRWdjM1J5YVc1bklIZHBkR2dnWTI5dVkyRjBJRzFsZEdodlpDa3VYRzRnSUhaaGNpQmpkWEp5Wlc1MFNYTkJjbkpoZVNBOUlFRnljbUY1TG1selFYSnlZWGtvWTNWeWNtVnVkQ2s3WEc0Z0lIWmhjaUJ1WlhoMFNYTkJjbkpoZVNBOUlFRnljbUY1TG1selFYSnlZWGtvYm1WNGRDazdYRzVjYmlBZ2FXWWdLR04xY25KbGJuUkpjMEZ5Y21GNUlDWW1JRzVsZUhSSmMwRnljbUY1S1NCN1hHNGdJQ0FnWTNWeWNtVnVkQzV3ZFhOb0xtRndjR3g1S0dOMWNuSmxiblFzSUc1bGVIUXBPMXh1SUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR04xY25KbGJuUkpjMEZ5Y21GNUtTQjdYRzRnSUNBZ1kzVnljbVZ1ZEM1d2RYTm9LRzVsZUhRcE8xeHVJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHNWxlSFJKYzBGeWNtRjVLU0I3WEc0Z0lDQWdMeThnUVNCaWFYUWdkRzl2SUdSaGJtZGxjbTkxY3lCMGJ5QnRkWFJoZEdVZ1lHNWxlSFJnTGx4dUlDQWdJSEpsZEhWeWJpQmJZM1Z5Y21WdWRGMHVZMjl1WTJGMEtHNWxlSFFwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUZ0amRYSnlaVzUwTENCdVpYaDBYVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmhZMk4xYlhWc1lYUmxTVzUwYnpzaVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgYWRsZXIzMlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIE1PRCA9IDY1NTIxO1xuXG4vLyBhZGxlcjMyIGlzIG5vdCBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcsIGFuZCBpcyBvbmx5IHVzZWQgdG8gc2FuaXR5IGNoZWNrIHRoYXRcbi8vIG1hcmt1cCBnZW5lcmF0ZWQgb24gdGhlIHNlcnZlciBtYXRjaGVzIHRoZSBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSBjbGllbnQuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIChhIG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIFNoZWV0SlMgdmVyc2lvbikgaGFzIGJlZW4gb3B0aW1pemVkXG4vLyBmb3Igb3VyIHVzZSBjYXNlLCBhdCB0aGUgZXhwZW5zZSBvZiBjb25mb3JtaW5nIHRvIHRoZSBhZGxlcjMyIHNwZWNpZmljYXRpb25cbi8vIGZvciBub24tYXNjaWkgaW5wdXRzLlxuZnVuY3Rpb24gYWRsZXIzMihkYXRhKSB7XG4gIHZhciBhID0gMTtcbiAgdmFyIGIgPSAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0gZGF0YS5sZW5ndGg7XG4gIHZhciBtID0gbCAmIH4weDM7XG4gIHdoaWxlIChpIDwgbSkge1xuICAgIGZvciAoOyBpIDwgTWF0aC5taW4oaSArIDQwOTYsIG0pOyBpICs9IDQpIHtcbiAgICAgIGIgKz0gKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkpKSArIChhICs9IGRhdGEuY2hhckNvZGVBdChpICsgMSkpICsgKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkgKyAyKSkgKyAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSArIDMpKTtcbiAgICB9XG4gICAgYSAlPSBNT0Q7XG4gICAgYiAlPSBNT0Q7XG4gIH1cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICBiICs9IGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICB9XG4gIGEgJT0gTU9EO1xuICBiICU9IE1PRDtcbiAgcmV0dXJuIGEgfCBiIDw8IDE2O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjYW5EZWZpbmVQcm9wZXJ0eVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7IGdldDogZnVuY3Rpb24gKCkge30gfSk7XG4gICAgY2FuRGVmaW5lUHJvcGVydHkgPSB0cnVlO1xuICB9IGNhdGNoICh4KSB7XG4gICAgLy8gSUUgd2lsbCBmYWlsIG9uIGRlZmluZVByb3BlcnR5XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW5EZWZpbmVQcm9wZXJ0eTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZZMkZ1UkdWbWFXNWxVSEp2Y0dWeWRIa3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUdOaGJrUmxabWx1WlZCeWIzQmxjblI1WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1kyRnVSR1ZtYVc1bFVISnZjR1Z5ZEhrZ1BTQm1ZV3h6WlR0Y2JtbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIdDlMQ0FuZUNjc0lIc2daMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdmU0I5S1R0Y2JpQWdJQ0JqWVc1RVpXWnBibVZRY205d1pYSjBlU0E5SUhSeWRXVTdYRzRnSUgwZ1kyRjBZMmdnS0hncElIdGNiaUFnSUNBdkx5QkpSU0IzYVd4c0lHWmhhV3dnYjI0Z1pHVm1hVzVsVUhKdmNHVnlkSGxjYmlBZ2ZWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOaGJrUmxabWx1WlZCeWIzQmxjblI1T3lKZGZRPT0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZGFuZ2Vyb3VzU3R5bGVWYWx1ZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vQ1NTUHJvcGVydHknKTtcblxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cbiAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJztcbiAgaWYgKGlzRW1wdHkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgaXNOb25OdW1lcmljID0gaXNOYU4odmFsdWUpO1xuICBpZiAoaXNOb25OdW1lcmljIHx8IHZhbHVlID09PSAwIHx8IGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkge1xuICAgIHJldHVybiAnJyArIHZhbHVlOyAvLyBjYXN0IHRvIHN0cmluZ1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgfVxuICByZXR1cm4gdmFsdWUgKyAncHgnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRhbmdlcm91c1N0eWxlVmFsdWU7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBkZXByZWNhdGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBUaGlzIHdpbGwgbG9nIGEgc2luZ2xlIGRlcHJlY2F0aW9uIG5vdGljZSBwZXIgZnVuY3Rpb24gYW5kIGZvcndhcmQgdGhlIGNhbGxcbiAqIG9uIHRvIHRoZSBuZXcgQVBJLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3TW9kdWxlIFRoZSBtb2R1bGUgdGhhdCBmbiB3aWxsIGV4aXN0IGluXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3UGFja2FnZSBUaGUgbW9kdWxlIHRoYXQgZm4gd2lsbCBleGlzdCBpblxuICogQHBhcmFtIHsqfSBjdHggVGhlIGNvbnRleHQgdGhpcyBmb3J3YXJkZWQgY2FsbCBzaG91bGQgcnVuIGluXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gZm9yd2FyZCBvbiB0b1xuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgd2FybiBvbmNlIGFuZCB0aGVuIGNhbGwgZm5cbiAqL1xuZnVuY3Rpb24gZGVwcmVjYXRlZChmbk5hbWUsIG5ld01vZHVsZSwgbmV3UGFja2FnZSwgY3R4LCBmbikge1xuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIG5ld0ZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcod2FybmVkLFxuICAgICAgLy8gUmVxdWlyZSBleGFtcGxlcyBpbiB0aGlzIHN0cmluZyBtdXN0IGJlIHNwbGl0IHRvIHByZXZlbnQgUmVhY3Qnc1xuICAgICAgLy8gYnVpbGQgdG9vbHMgZnJvbSBtaXN0YWtpbmcgdGhlbSBmb3IgcmVhbCByZXF1aXJlcy5cbiAgICAgIC8vIE90aGVyd2lzZSB0aGUgYnVpbGQgdG9vbHMgd2lsbCBhdHRlbXB0IHRvIGJ1aWxkIGEgJyVzJyBtb2R1bGUuXG4gICAgICAnUmVhY3QuJXMgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSAlcy4lcyBmcm9tIHJlcXVpcmUnICsgJyhcXCclc1xcJykgJyArICdpbnN0ZWFkLicsIGZuTmFtZSwgbmV3TW9kdWxlLCBmbk5hbWUsIG5ld1BhY2thZ2UpIDogdW5kZWZpbmVkO1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmbi5hcHBseShjdHgsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICAvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSBhbGwgcHJvcGVydGllcyBvZiB0aGUgb3JpZ2luYWwgZm4gYXJlIGNvcGllZCBvdmVyLlxuICAgIC8vIEluIHBhcnRpY3VsYXIsIHRoaXMgaXMgbmVlZGVkIHRvIHN1cHBvcnQgUHJvcFR5cGVzXG4gICAgcmV0dXJuIGFzc2lnbihuZXdGbiwgZm4pO1xuICB9XG5cbiAgcmV0dXJuIGZuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZWQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2WkdWd2NtVmpZWFJsWkM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnWkdWd2NtVmpZWFJsWkZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb0p5NHZUMkpxWldOMExtRnpjMmxuYmljcE8xeHVkbUZ5SUhkaGNtNXBibWNnUFNCeVpYRjFhWEpsS0NkbVltcHpMMnhwWWk5M1lYSnVhVzVuSnlrN1hHNWNiaThxS2x4dUlDb2dWR2hwY3lCM2FXeHNJR3h2WnlCaElITnBibWRzWlNCa1pYQnlaV05oZEdsdmJpQnViM1JwWTJVZ2NHVnlJR1oxYm1OMGFXOXVJR0Z1WkNCbWIzSjNZWEprSUhSb1pTQmpZV3hzWEc0Z0tpQnZiaUIwYnlCMGFHVWdibVYzSUVGUVNTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1ptNU9ZVzFsSUZSb1pTQnVZVzFsSUc5bUlIUm9aU0JtZFc1amRHbHZibHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1bGQwMXZaSFZzWlNCVWFHVWdiVzlrZFd4bElIUm9ZWFFnWm00Z2QybHNiQ0JsZUdsemRDQnBibHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1bGQxQmhZMnRoWjJVZ1ZHaGxJRzF2WkhWc1pTQjBhR0YwSUdadUlIZHBiR3dnWlhocGMzUWdhVzVjYmlBcUlFQndZWEpoYlNCN0tuMGdZM1I0SUZSb1pTQmpiMjUwWlhoMElIUm9hWE1nWm05eWQyRnlaR1ZrSUdOaGJHd2djMmh2ZFd4a0lISjFiaUJwYmx4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdabTRnVkdobElHWjFibU4wYVc5dUlIUnZJR1p2Y25kaGNtUWdiMjRnZEc5Y2JpQXFJRUJ5WlhSMWNtNGdlMloxYm1OMGFXOXVmU0JVYUdVZ1puVnVZM1JwYjI0Z2RHaGhkQ0IzYVd4c0lIZGhjbTRnYjI1alpTQmhibVFnZEdobGJpQmpZV3hzSUdadVhHNGdLaTljYm1aMWJtTjBhVzl1SUdSbGNISmxZMkYwWldRb1ptNU9ZVzFsTENCdVpYZE5iMlIxYkdVc0lHNWxkMUJoWTJ0aFoyVXNJR04wZUN3Z1ptNHBJSHRjYmlBZ2RtRnlJSGRoY201bFpDQTlJR1poYkhObE8xeHVJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lIWmhjaUJ1WlhkR2JpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjNZWEp1YVc1bktIZGhjbTVsWkN4Y2JpQWdJQ0FnSUM4dklGSmxjWFZwY21VZ1pYaGhiWEJzWlhNZ2FXNGdkR2hwY3lCemRISnBibWNnYlhWemRDQmlaU0J6Y0d4cGRDQjBieUJ3Y21WMlpXNTBJRkpsWVdOMEozTmNiaUFnSUNBZ0lDOHZJR0oxYVd4a0lIUnZiMnh6SUdaeWIyMGdiV2x6ZEdGcmFXNW5JSFJvWlcwZ1ptOXlJSEpsWVd3Z2NtVnhkV2x5WlhNdVhHNGdJQ0FnSUNBdkx5QlBkR2hsY25kcGMyVWdkR2hsSUdKMWFXeGtJSFJ2YjJ4eklIZHBiR3dnWVhSMFpXMXdkQ0IwYnlCaWRXbHNaQ0JoSUNjbGN5Y2diVzlrZFd4bExseHVJQ0FnSUNBZ0oxSmxZV04wTGlWeklHbHpJR1JsY0hKbFkyRjBaV1F1SUZCc1pXRnpaU0IxYzJVZ0pYTXVKWE1nWm5KdmJTQnlaWEYxYVhKbEp5QXJJQ2NvWEZ3bkpYTmNYQ2NwSUNjZ0t5QW5hVzV6ZEdWaFpDNG5MQ0JtYms1aGJXVXNJRzVsZDAxdlpIVnNaU3dnWm01T1lXMWxMQ0J1WlhkUVlXTnJZV2RsS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lIZGhjbTVsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTR1WVhCd2JIa29ZM1I0TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHk4Z1YyVWdibVZsWkNCMGJ5QnRZV3RsSUhOMWNtVWdZV3hzSUhCeWIzQmxjblJwWlhNZ2IyWWdkR2hsSUc5eWFXZHBibUZzSUdadUlHRnlaU0JqYjNCcFpXUWdiM1psY2k1Y2JpQWdJQ0F2THlCSmJpQndZWEowYVdOMWJHRnlMQ0IwYUdseklHbHpJRzVsWldSbFpDQjBieUJ6ZFhCd2IzSjBJRkJ5YjNCVWVYQmxjMXh1SUNBZ0lISmxkSFZ5YmlCaGMzTnBaMjRvYm1WM1JtNHNJR1p1S1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCbWJqdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCa1pYQnlaV05oZEdWa095SmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVTQ0FQRV9MT09LVVAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJz4nOiAnJmd0OycsXG4gICc8JzogJyZsdDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgJ1xcJyc6ICcmI3gyNzsnXG59O1xuXG52YXIgRVNDQVBFX1JFR0VYID0gL1smPjxcIiddL2c7XG5cbmZ1bmN0aW9uIGVzY2FwZXIobWF0Y2gpIHtcbiAgcmV0dXJuIEVTQ0FQRV9MT09LVVBbbWF0Y2hdO1xufVxuXG4vKipcbiAqIEVzY2FwZXMgdGV4dCB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdGV4dCBUZXh0IHZhbHVlIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKEVTQ0FQRV9SRUdFWCwgZXNjYXBlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyOyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZmluZERPTU5vZGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgRE9NIG5vZGUgcmVuZGVyZWQgYnkgdGhpcyBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR8RE9NRWxlbWVudH0gY29tcG9uZW50T3JFbGVtZW50XG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsICclcyBpcyBhY2Nlc3NpbmcgZ2V0RE9NTm9kZSBvciBmaW5kRE9NTm9kZSBpbnNpZGUgaXRzIHJlbmRlcigpLiAnICsgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICsgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgKyAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJywgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbXBvbmVudE9yRWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGNvbXBvbmVudE9yRWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBjb21wb25lbnRPckVsZW1lbnQ7XG4gIH1cbiAgaWYgKFJlYWN0SW5zdGFuY2VNYXAuaGFzKGNvbXBvbmVudE9yRWxlbWVudCkpIHtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5nZXROb2RlRnJvbUluc3RhbmNlKGNvbXBvbmVudE9yRWxlbWVudCk7XG4gIH1cbiAgIShjb21wb25lbnRPckVsZW1lbnQucmVuZGVyID09IG51bGwgfHwgdHlwZW9mIGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgIT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2ZpbmRET01Ob2RlIHdhcyBjYWxsZWQgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IGFwcGVhcnMgdG8gYmUgbmVpdGhlciBSZWFjdENvbXBvbmVudCBub3IgRE9NTm9kZSAoa2V5czogJXMpJywgT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRET01Ob2RlO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlptbHVaRVJQVFU1dlpHVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnWm1sdVpFUlBUVTV2WkdWY2JpQXFJRUIwZVhCbFkyaGxZMnR6SUhOMFlYUnBZeTF2Ym14NVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5SnlrN1hHNTJZWElnVW1WaFkzUkpibk4wWVc1alpVMWhjQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JKYm5OMFlXNWpaVTFoY0NjcE8xeHVkbUZ5SUZKbFlXTjBUVzkxYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMUpsWVdOMFRXOTFiblFuS1R0Y2JseHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwybHVkbUZ5YVdGdWRDY3BPMXh1ZG1GeUlIZGhjbTVwYm1jZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOTNZWEp1YVc1bkp5azdYRzVjYmk4cUtseHVJQ29nVW1WMGRYSnVjeUIwYUdVZ1JFOU5JRzV2WkdVZ2NtVnVaR1Z5WldRZ1lua2dkR2hwY3lCbGJHVnRaVzUwTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUkRiMjF3YjI1bGJuUjhSRTlOUld4bGJXVnVkSDBnWTI5dGNHOXVaVzUwVDNKRmJHVnRaVzUwWEc0Z0tpQkFjbVYwZFhKdUlIcy9SRTlOUld4bGJXVnVkSDBnVkdobElISnZiM1FnYm05a1pTQnZaaUIwYUdseklHVnNaVzFsYm5RdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdacGJtUkVUMDFPYjJSbEtHTnZiWEJ2Ym1WdWRFOXlSV3hsYldWdWRDa2dlMXh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJSFpoY2lCdmQyNWxjaUE5SUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5TG1OMWNuSmxiblE3WEc0Z0lDQWdhV1lnS0c5M2JtVnlJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1WnlodmQyNWxjaTVmZDJGeWJtVmtRV0p2ZFhSU1pXWnpTVzVTWlc1a1pYSXNJQ2NsY3lCcGN5QmhZMk5sYzNOcGJtY2daMlYwUkU5TlRtOWtaU0J2Y2lCbWFXNWtSRTlOVG05a1pTQnBibk5wWkdVZ2FYUnpJSEpsYm1SbGNpZ3BMaUFuSUNzZ0ozSmxibVJsY2lncElITm9iM1ZzWkNCaVpTQmhJSEIxY21VZ1puVnVZM1JwYjI0Z2IyWWdjSEp2Y0hNZ1lXNWtJSE4wWVhSbExpQkpkQ0J6YUc5MWJHUWdKeUFySUNkdVpYWmxjaUJoWTJObGMzTWdjMjl0WlhSb2FXNW5JSFJvWVhRZ2NtVnhkV2x5WlhNZ2MzUmhiR1VnWkdGMFlTQm1jbTl0SUhSb1pTQndjbVYyYVc5MWN5QW5JQ3NnSjNKbGJtUmxjaXdnYzNWamFDQmhjeUJ5WldaekxpQk5iM1psSUhSb2FYTWdiRzluYVdNZ2RHOGdZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUWdZVzVrSUNjZ0t5QW5ZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxJR2x1YzNSbFlXUXVKeXdnYjNkdVpYSXVaMlYwVG1GdFpTZ3BJSHg4SUNkQklHTnZiWEJ2Ym1WdWRDY3BJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnYjNkdVpYSXVYM2RoY201bFpFRmliM1YwVW1WbWMwbHVVbVZ1WkdWeUlEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnYVdZZ0tHTnZiWEJ2Ym1WdWRFOXlSV3hsYldWdWRDQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUgxY2JpQWdhV1lnS0dOdmJYQnZibVZ1ZEU5eVJXeGxiV1Z1ZEM1dWIyUmxWSGx3WlNBOVBUMGdNU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmpiMjF3YjI1bGJuUlBja1ZzWlcxbGJuUTdYRzRnSUgxY2JpQWdhV1lnS0ZKbFlXTjBTVzV6ZEdGdVkyVk5ZWEF1YUdGektHTnZiWEJ2Ym1WdWRFOXlSV3hsYldWdWRDa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1VtVmhZM1JOYjNWdWRDNW5aWFJPYjJSbFJuSnZiVWx1YzNSaGJtTmxLR052YlhCdmJtVnVkRTl5Uld4bGJXVnVkQ2s3WEc0Z0lIMWNiaUFnSVNoamIyMXdiMjVsYm5SUGNrVnNaVzFsYm5RdWNtVnVaR1Z5SUQwOUlHNTFiR3dnZkh3Z2RIbHdaVzltSUdOdmJYQnZibVZ1ZEU5eVJXeGxiV1Z1ZEM1eVpXNWtaWElnSVQwOUlDZG1kVzVqZEdsdmJpY3BJRDhnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lHbHVkbUZ5YVdGdWRDaG1ZV3h6WlN3Z0oyWnBibVJFVDAxT2IyUmxJSGRoY3lCallXeHNaV1FnYjI0Z1lXNGdkVzV0YjNWdWRHVmtJR052YlhCdmJtVnVkQzRuS1NBNklHbHVkbUZ5YVdGdWRDaG1ZV3h6WlNrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNGbVlXeHpaU0EvSUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QnBiblpoY21saGJuUW9abUZzYzJVc0lDZEZiR1Z0Wlc1MElHRndjR1ZoY25NZ2RHOGdZbVVnYm1WcGRHaGxjaUJTWldGamRFTnZiWEJ2Ym1WdWRDQnViM0lnUkU5TlRtOWtaU0FvYTJWNWN6b2dKWE1wSnl3Z1QySnFaV04wTG10bGVYTW9ZMjl0Y0c5dVpXNTBUM0pGYkdWdFpXNTBLU2tnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdacGJtUkVUMDFPYjJSbE95SmRmUT09IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmbGF0dGVuQ2hpbGRyZW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBwYXNzZWQgdGhyb3VnaCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9SZWFjdENvbXBvbmVudH0gY2hpbGQgUmVhY3QgY2hpbGQgY29tcG9uZW50LlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFN0cmluZyBuYW1lIG9mIGtleSBwYXRoIHRvIGNoaWxkLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lKSB7XG4gIC8vIFdlIGZvdW5kIGEgY29tcG9uZW50IGluc3RhbmNlLlxuICB2YXIgcmVzdWx0ID0gdHJhdmVyc2VDb250ZXh0O1xuICB2YXIga2V5VW5pcXVlID0gcmVzdWx0W25hbWVdID09PSB1bmRlZmluZWQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoa2V5VW5pcXVlLCAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArICdgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSAnICsgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJywgbmFtZSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGtleVVuaXF1ZSAmJiBjaGlsZCAhPSBudWxsKSB7XG4gICAgcmVzdWx0W25hbWVdID0gY2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuIEFueSBudWxsXG4gKiBjaGlsZHJlbiB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIG9iamVjdC5cbiAqIEByZXR1cm4geyFvYmplY3R9IGZsYXR0ZW5lZCBjaGlsZHJlbiBrZXllZCBieSBuYW1lLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuQ2hpbGRyZW47XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2Wm14aGRIUmxia05vYVd4a2NtVnVMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQm1iR0YwZEdWdVEyaHBiR1J5Wlc1Y2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQjBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVJRDBnY21WeGRXbHlaU2duTGk5MGNtRjJaWEp6WlVGc2JFTm9hV3hrY21WdUp5azdYRzUyWVhJZ2QyRnlibWx1WnlBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwzZGhjbTVwYm1jbktUdGNibHh1THlvcVhHNGdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0IwY21GMlpYSnpaVU52Ym5SbGVIUWdRMjl1ZEdWNGRDQndZWE56WldRZ2RHaHliM1ZuYUNCMGNtRjJaWEp6WVd3dVhHNGdLaUJBY0dGeVlXMGdlejlTWldGamRFTnZiWEJ2Ym1WdWRIMGdZMmhwYkdRZ1VtVmhZM1FnWTJocGJHUWdZMjl0Y0c5dVpXNTBMbHh1SUNvZ1FIQmhjbUZ0SUhzaGMzUnlhVzVuZlNCdVlXMWxJRk4wY21sdVp5QnVZVzFsSUc5bUlHdGxlU0J3WVhSb0lIUnZJR05vYVd4a0xseHVJQ292WEc1bWRXNWpkR2x2YmlCbWJHRjBkR1Z1VTJsdVoyeGxRMmhwYkdSSmJuUnZRMjl1ZEdWNGRDaDBjbUYyWlhKelpVTnZiblJsZUhRc0lHTm9hV3hrTENCdVlXMWxLU0I3WEc0Z0lDOHZJRmRsSUdadmRXNWtJR0VnWTI5dGNHOXVaVzUwSUdsdWMzUmhibU5sTGx4dUlDQjJZWElnY21WemRXeDBJRDBnZEhKaGRtVnljMlZEYjI1MFpYaDBPMXh1SUNCMllYSWdhMlY1Vlc1cGNYVmxJRDBnY21WemRXeDBXMjVoYldWZElEMDlQU0IxYm1SbFptbHVaV1E3WEc0Z0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb2EyVjVWVzVwY1hWbExDQW5abXhoZEhSbGJrTm9hV3hrY21WdUtDNHVMaWs2SUVWdVkyOTFiblJsY21Wa0lIUjNieUJqYUdsc1pISmxiaUIzYVhSb0lIUm9aU0J6WVcxbElHdGxlU3dnSnlBcklDZGdKWE5nTGlCRGFHbHNaQ0JyWlhseklHMTFjM1FnWW1VZ2RXNXBjWFZsT3lCM2FHVnVJSFIzYnlCamFHbHNaSEpsYmlCemFHRnlaU0JoSUd0bGVTd2diMjVzZVNBbklDc2dKM1JvWlNCbWFYSnpkQ0JqYUdsc1pDQjNhV3hzSUdKbElIVnpaV1F1Snl3Z2JtRnRaU2tnT2lCMWJtUmxabWx1WldRN1hHNGdJSDFjYmlBZ2FXWWdLR3RsZVZWdWFYRjFaU0FtSmlCamFHbHNaQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdjbVZ6ZFd4MFcyNWhiV1ZkSUQwZ1kyaHBiR1E3WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCR2JHRjBkR1Z1Y3lCamFHbHNaSEpsYmlCMGFHRjBJR0Z5WlNCMGVYQnBZMkZzYkhrZ2MzQmxZMmxtYVdWa0lHRnpJR0J3Y205d2N5NWphR2xzWkhKbGJtQXVJRUZ1ZVNCdWRXeHNYRzRnS2lCamFHbHNaSEpsYmlCM2FXeHNJRzV2ZENCaVpTQnBibU5zZFdSbFpDQnBiaUIwYUdVZ2NtVnpkV3gwYVc1bklHOWlhbVZqZEM1Y2JpQXFJRUJ5WlhSMWNtNGdleUZ2WW1wbFkzUjlJR1pzWVhSMFpXNWxaQ0JqYUdsc1pISmxiaUJyWlhsbFpDQmllU0J1WVcxbExseHVJQ292WEc1bWRXNWpkR2x2YmlCbWJHRjBkR1Z1UTJocGJHUnlaVzRvWTJocGJHUnlaVzRwSUh0Y2JpQWdhV1lnS0dOb2FXeGtjbVZ1SUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMmhwYkdSeVpXNDdYRzRnSUgxY2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUh0OU8xeHVJQ0IwY21GMlpYSnpaVUZzYkVOb2FXeGtjbVZ1S0dOb2FXeGtjbVZ1TENCbWJHRjBkR1Z1VTJsdVoyeGxRMmhwYkdSSmJuUnZRMjl1ZEdWNGRDd2djbVZ6ZFd4MEtUdGNiaUFnY21WMGRYSnVJSEpsYzNWc2REdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWJHRjBkR1Z1UTJocGJHUnlaVzQ3SWwxOSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb3JFYWNoQWNjdW11bGF0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHthcnJheX0gYXJyIGFuIFwiYWNjdW11bGF0aW9uXCIgb2YgaXRlbXMgd2hpY2ggaXMgZWl0aGVyIGFuIEFycmF5IG9yXG4gKiBhIHNpbmdsZSBpdGVtLiBVc2VmdWwgd2hlbiBwYWlyZWQgd2l0aCB0aGUgYGFjY3VtdWxhdGVgIG1vZHVsZS4gVGhpcyBpcyBhXG4gKiBzaW1wbGUgdXRpbGl0eSB0aGF0IGFsbG93cyB1cyB0byByZWFzb24gYWJvdXQgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zLCBidXRcbiAqIGhhbmRsaW5nIHRoZSBjYXNlIHdoZW4gdGhlcmUgaXMgZXhhY3RseSBvbmUgaXRlbSAoYW5kIHdlIGRvIG5vdCBuZWVkIHRvXG4gKiBhbGxvY2F0ZSBhbiBhcnJheSkuXG4gKi9cbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSBmdW5jdGlvbiAoYXJyLCBjYiwgc2NvcGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGFyci5mb3JFYWNoKGNiLCBzY29wZSk7XG4gIH0gZWxzZSBpZiAoYXJyKSB7XG4gICAgY2IuY2FsbChzY29wZSwgYXJyKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoQWNjdW11bGF0ZWQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50Q2hhckNvZGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge251bWJlcn0gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZTtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudENoYXJDb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudEtleVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZSgnLi9nZXRFdmVudENoYXJDb2RlJyk7XG5cbi8qKlxuICogTm9ybWFsaXphdGlvbiBvZiBkZXByZWNhdGVkIEhUTUw1IGBrZXlgIHZhbHVlc1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIG5vcm1hbGl6ZUtleSA9IHtcbiAgJ0VzYyc6ICdFc2NhcGUnLFxuICAnU3BhY2ViYXInOiAnICcsXG4gICdMZWZ0JzogJ0Fycm93TGVmdCcsXG4gICdVcCc6ICdBcnJvd1VwJyxcbiAgJ1JpZ2h0JzogJ0Fycm93UmlnaHQnLFxuICAnRG93bic6ICdBcnJvd0Rvd24nLFxuICAnRGVsJzogJ0RlbGV0ZScsXG4gICdXaW4nOiAnT1MnLFxuICAnTWVudSc6ICdDb250ZXh0TWVudScsXG4gICdBcHBzJzogJ0NvbnRleHRNZW51JyxcbiAgJ1Njcm9sbCc6ICdTY3JvbGxMb2NrJyxcbiAgJ01velByaW50YWJsZUtleSc6ICdVbmlkZW50aWZpZWQnXG59O1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbGVnYWN5IGBrZXlDb2RlYCB0byBIVE1MNSBga2V5YFxuICogT25seSBzcGVjaWFsIGtleXMgc3VwcG9ydGVkLCBhbGwgb3RoZXJzIGRlcGVuZCBvbiBrZXlib2FyZCBsYXlvdXQgb3IgYnJvd3NlclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICA4OiAnQmFja3NwYWNlJyxcbiAgOTogJ1RhYicsXG4gIDEyOiAnQ2xlYXInLFxuICAxMzogJ0VudGVyJyxcbiAgMTY6ICdTaGlmdCcsXG4gIDE3OiAnQ29udHJvbCcsXG4gIDE4OiAnQWx0JyxcbiAgMTk6ICdQYXVzZScsXG4gIDIwOiAnQ2Fwc0xvY2snLFxuICAyNzogJ0VzY2FwZScsXG4gIDMyOiAnICcsXG4gIDMzOiAnUGFnZVVwJyxcbiAgMzQ6ICdQYWdlRG93bicsXG4gIDM1OiAnRW5kJyxcbiAgMzY6ICdIb21lJyxcbiAgMzc6ICdBcnJvd0xlZnQnLFxuICAzODogJ0Fycm93VXAnLFxuICAzOTogJ0Fycm93UmlnaHQnLFxuICA0MDogJ0Fycm93RG93bicsXG4gIDQ1OiAnSW5zZXJ0JyxcbiAgNDY6ICdEZWxldGUnLFxuICAxMTI6ICdGMScsIDExMzogJ0YyJywgMTE0OiAnRjMnLCAxMTU6ICdGNCcsIDExNjogJ0Y1JywgMTE3OiAnRjYnLFxuICAxMTg6ICdGNycsIDExOTogJ0Y4JywgMTIwOiAnRjknLCAxMjE6ICdGMTAnLCAxMjI6ICdGMTEnLCAxMjM6ICdGMTInLFxuICAxNDQ6ICdOdW1Mb2NrJyxcbiAgMTQ1OiAnU2Nyb2xsTG9jaycsXG4gIDIyNDogJ01ldGEnXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBga2V5YCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRLZXkobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgIC8vIE5vcm1hbGl6ZSBpbmNvbnNpc3RlbnQgdmFsdWVzIHJlcG9ydGVkIGJ5IGJyb3dzZXJzIGR1ZSB0b1xuICAgIC8vIGltcGxlbWVudGF0aW9ucyBvZiBhIHdvcmtpbmcgZHJhZnQgc3BlY2lmaWNhdGlvbi5cblxuICAgIC8vIEZpcmVGb3ggaW1wbGVtZW50cyBga2V5YCBidXQgcmV0dXJucyBgTW96UHJpbnRhYmxlS2V5YCBmb3IgYWxsXG4gICAgLy8gcHJpbnRhYmxlIGNoYXJhY3RlcnMgKG5vcm1hbGl6ZWQgdG8gYFVuaWRlbnRpZmllZGApLCBpZ25vcmUgaXQuXG4gICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICBpZiAoa2V5ICE9PSAnVW5pZGVudGlmaWVkJykge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICAvLyBCcm93c2VyIGRvZXMgbm90IGltcGxlbWVudCBga2V5YCwgcG9seWZpbGwgYXMgbXVjaCBvZiBpdCBhcyB3ZSBjYW4uXG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgdmFyIGNoYXJDb2RlID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCk7XG5cbiAgICAvLyBUaGUgZW50ZXIta2V5IGlzIHRlY2huaWNhbGx5IGJvdGggcHJpbnRhYmxlIGFuZCBub24tcHJpbnRhYmxlIGFuZCBjYW5cbiAgICAvLyB0aHVzIGJlIGNhcHR1cmVkIGJ5IGBrZXlwcmVzc2AsIG5vIG90aGVyIG5vbi1wcmludGFibGUga2V5IHNob3VsZC5cbiAgICByZXR1cm4gY2hhckNvZGUgPT09IDEzID8gJ0VudGVyJyA6IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICB9XG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5ZG93bicgfHwgbmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgIC8vIFdoaWxlIHVzZXIga2V5Ym9hcmQgbGF5b3V0IGRldGVybWluZXMgdGhlIGFjdHVhbCBtZWFuaW5nIG9mIGVhY2hcbiAgICAvLyBga2V5Q29kZWAgdmFsdWUsIGFsbW9zdCBhbGwgZnVuY3Rpb24ga2V5cyBoYXZlIGEgdW5pdmVyc2FsIHZhbHVlLlxuICAgIHJldHVybiB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCAnVW5pZGVudGlmaWVkJztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRLZXk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBtb2RpZmllciBrZXkgdG8gdGhlIGFzc29jaWF0ZWQgcHJvcGVydHkgaW4gdGhlIGV2ZW50LlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2tleXMtTW9kaWZpZXJzXG4gKi9cblxudmFyIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuICAnQWx0JzogJ2FsdEtleScsXG4gICdDb250cm9sJzogJ2N0cmxLZXknLFxuICAnTWV0YSc6ICdtZXRhS2V5JyxcbiAgJ1NoaWZ0JzogJ3NoaWZ0S2V5J1xufTtcblxuLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBnZXRNb2RpZmllclN0YXRlIHNvIHdlIHNpbXBseSBtYXAgaXQgdG8gdGhlIG9ubHlcbi8vIG1vZGlmaWVyIGtleXMgZXhwb3NlZCBieSB0aGUgZXZlbnQgaXRzZWxmLCBkb2VzIG5vdCBzdXBwb3J0IExvY2sta2V5cy5cbi8vIEN1cnJlbnRseSwgYWxsIG1ham9yIGJyb3dzZXJzIGV4Y2VwdCBDaHJvbWUgc2VlbXMgdG8gc3VwcG9ydCBMb2NrLWtleXMuXG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICB2YXIgc3ludGhldGljRXZlbnQgPSB0aGlzO1xuICB2YXIgbmF0aXZlRXZlbnQgPSBzeW50aGV0aWNFdmVudC5uYXRpdmVFdmVudDtcbiAgaWYgKG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUpIHtcbiAgICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpO1xuICB9XG4gIHZhciBrZXlQcm9wID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXTtcbiAgcmV0dXJuIGtleVByb3AgPyAhIW5hdGl2ZUV2ZW50W2tleVByb3BdIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TW9kaWZpZXJTdGF0ZShuYXRpdmVFdmVudCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudE1vZGlmaWVyU3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50VGFyZ2V0XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHZXRzIHRoZSB0YXJnZXQgbm9kZSBmcm9tIGEgbmF0aXZlIGJyb3dzZXIgZXZlbnQgYnkgYWNjb3VudGluZyBmb3JcbiAqIGluY29uc2lzdGVuY2llcyBpbiBicm93c2VyIERPTSBBUElzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge0RPTUV2ZW50VGFyZ2V0fSBUYXJnZXQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIHRhcmdldCA9IG5hdGl2ZUV2ZW50LnRhcmdldCB8fCBuYXRpdmVFdmVudC5zcmNFbGVtZW50IHx8IHdpbmRvdztcbiAgLy8gU2FmYXJpIG1heSBmaXJlIGV2ZW50cyBvbiB0ZXh0IG5vZGVzIChOb2RlLlRFWFRfTk9ERSBpcyAzKS5cbiAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19wcm9wZXJ0aWVzLmh0bWxcbiAgcmV0dXJuIHRhcmdldC5ub2RlVHlwZSA9PT0gMyA/IHRhcmdldC5wYXJlbnROb2RlIDogdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50VGFyZ2V0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRJdGVyYXRvckZuXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIFN5bWJvbCAqL1xudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhbnkgbm9kZSByZXR1cm4gdGhlIGZpcnN0IGxlYWYgbm9kZSB3aXRob3V0IGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZ2V0TGVhZk5vZGUobm9kZSkge1xuICB3aGlsZSAobm9kZSAmJiBub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEdldCB0aGUgbmV4dCBzaWJsaW5nIHdpdGhpbiBhIGNvbnRhaW5lci4gVGhpcyB3aWxsIHdhbGsgdXAgdGhlXG4gKiBET00gaWYgYSBub2RlJ3Mgc2libGluZ3MgaGF2ZSBiZWVuIGV4aGF1c3RlZC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEByZXR1cm4gez9ET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRTaWJsaW5nTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICB9XG59XG5cbi8qKlxuICogR2V0IG9iamVjdCBkZXNjcmliaW5nIHRoZSBub2RlcyB3aGljaCBjb250YWluIGNoYXJhY3RlcnMgYXQgb2Zmc2V0LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gcm9vdFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChyb290LCBvZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBnZXRMZWFmTm9kZShyb290KTtcbiAgdmFyIG5vZGVTdGFydCA9IDA7XG4gIHZhciBub2RlRW5kID0gMDtcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICBub2RlRW5kID0gbm9kZVN0YXJ0ICsgbm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG5cbiAgICAgIGlmIChub2RlU3RhcnQgPD0gb2Zmc2V0ICYmIG5vZGVFbmQgPj0gb2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCAtIG5vZGVTdGFydFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBub2RlU3RhcnQgPSBub2RlRW5kO1xuICAgIH1cblxuICAgIG5vZGUgPSBnZXRMZWFmTm9kZShnZXRTaWJsaW5nTm9kZShub2RlKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRUZXh0Q29udGVudEFjY2Vzc29yXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgY29udGVudEtleSA9IG51bGw7XG5cbi8qKlxuICogR2V0cyB0aGUga2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudCBvbiBhIERPTSBub2RlLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IEtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpIHtcbiAgaWYgKCFjb250ZW50S2V5ICYmIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgIC8vIFByZWZlciB0ZXh0Q29udGVudCB0byBpbm5lclRleHQgYmVjYXVzZSBtYW55IGJyb3dzZXJzIHN1cHBvcnQgYm90aCBidXRcbiAgICAvLyBTVkcgPHRleHQ+IGVsZW1lbnRzIGRvbid0IHN1cHBvcnQgaW5uZXJUZXh0IGV2ZW4gd2hlbiA8ZGl2PiBkb2VzLlxuICAgIGNvbnRlbnRLZXkgPSAndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/ICd0ZXh0Q29udGVudCcgOiAnaW5uZXJUZXh0JztcbiAgfVxuICByZXR1cm4gY29udGVudEtleTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUZXh0Q29udGVudEFjY2Vzc29yOyIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVtcHR5Q29tcG9uZW50Jyk7XG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0TmF0aXZlQ29tcG9uZW50Jyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vLyBUbyBhdm9pZCBhIGN5Y2xpYyBkZXBlbmRlbmN5LCB3ZSBjcmVhdGUgdGhlIGZpbmFsIGNsYXNzIGluIHRoaXMgbW9kdWxlXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyID0gZnVuY3Rpb24gKCkge307XG5hc3NpZ24oUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyLnByb3RvdHlwZSwgUmVhY3RDb21wb3NpdGVDb21wb25lbnQuTWl4aW4sIHtcbiAgX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcbn0pO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgdHlwZSByZWZlcmVuY2UgaXMgYSBrbm93biBpbnRlcm5hbCB0eXBlLiBJLmUuIG5vdCBhIHVzZXJcbiAqIHByb3ZpZGVkIGNvbXBvc2l0ZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgdmFsaWQgaW50ZXJuYWwgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNJbnRlcm5hbENvbXBvbmVudFR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUucHJvdG90eXBlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUucHJvdG90eXBlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBSZWFjdE5vZGUsIGNyZWF0ZSBhbiBpbnN0YW5jZSB0aGF0IHdpbGwgYWN0dWFsbHkgYmUgbW91bnRlZC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fSBBIG5ldyBpbnN0YW5jZSBvZiB0aGUgZWxlbWVudCdzIGNvbnN0cnVjdG9yLlxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5vZGUpIHtcbiAgdmFyIGluc3RhbmNlO1xuXG4gIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IGZhbHNlKSB7XG4gICAgaW5zdGFuY2UgPSBuZXcgUmVhY3RFbXB0eUNvbXBvbmVudChpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgZWxlbWVudCA9IG5vZGU7XG4gICAgIShlbGVtZW50ICYmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRWxlbWVudCB0eXBlIGlzIGludmFsaWQ6IGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgYnVpbHQtaW4gY29tcG9uZW50cykgJyArICdvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgZWxlbWVudC50eXBlID09IG51bGwgPyBlbGVtZW50LnR5cGUgOiB0eXBlb2YgZWxlbWVudC50eXBlLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oZWxlbWVudC5fb3duZXIpKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2Ugc3RyaW5nIHZhbHVlc1xuICAgIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KTtcbiAgICB9IGVsc2UgaWYgKGlzSW50ZXJuYWxDb21wb25lbnRUeXBlKGVsZW1lbnQudHlwZSkpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGVtcG9yYXJpbHkgYXZhaWxhYmxlIGZvciBjdXN0b20gY29tcG9uZW50cyB0aGF0IGFyZSBub3Qgc3RyaW5nXG4gICAgICAvLyByZXByZXNlbnRhdGlvbnMuIEkuZS4gQVJULiBPbmNlIHRob3NlIGFyZSB1cGRhdGVkIHRvIHVzZSB0aGUgc3RyaW5nXG4gICAgICAvLyByZXByZXNlbnRhdGlvbiwgd2UgY2FuIGRyb3AgdGhpcyBjb2RlIHBhdGguXG4gICAgICBpbnN0YW5jZSA9IG5ldyBlbGVtZW50LnR5cGUoZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlID0gbmV3IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlcigpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5vZGUgPT09ICdudW1iZXInKSB7XG4gICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRleHQobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VuY291bnRlcmVkIGludmFsaWQgUmVhY3Qgbm9kZSBvZiB0eXBlICVzJywgdHlwZW9mIG5vZGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3RhbmNlLmNvbnN0cnVjdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLnVubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicsICdPbmx5IFJlYWN0IENvbXBvbmVudHMgY2FuIGJlIG1vdW50ZWQuJykgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBpbnN0YW5jZS4gVGhpcyBjYW4gcHJvYmFibHkganVzdCBtb3ZlIGludG8gdGhlIGNvbnN0cnVjdG9yIG5vdy5cbiAgaW5zdGFuY2UuY29uc3RydWN0KG5vZGUpO1xuXG4gIC8vIFRoZXNlIHR3byBmaWVsZHMgYXJlIHVzZWQgYnkgdGhlIERPTSBhbmQgQVJUIGRpZmZpbmcgYWxnb3JpdGhtc1xuICAvLyByZXNwZWN0aXZlbHkuIEluc3RlYWQgb2YgdXNpbmcgZXhwYW5kb3Mgb24gY29tcG9uZW50cywgd2Ugc2hvdWxkIGJlXG4gIC8vIHN0b3JpbmcgdGhlIHN0YXRlIG5lZWRlZCBieSB0aGUgZGlmZmluZyBhbGdvcml0aG1zIGVsc2V3aGVyZS5cbiAgaW5zdGFuY2UuX21vdW50SW5kZXggPSAwO1xuICBpbnN0YW5jZS5fbW91bnRJbWFnZSA9IG51bGw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpbnN0YW5jZS5faXNPd25lck5lY2Vzc2FyeSA9IGZhbHNlO1xuICAgIGluc3RhbmNlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IGZhbHNlO1xuICB9XG5cbiAgLy8gSW50ZXJuYWwgaW5zdGFuY2VzIHNob3VsZCBmdWxseSBjb25zdHJ1Y3RlZCBhdCB0aGlzIHBvaW50LCBzbyB0aGV5IHNob3VsZFxuICAvLyBub3QgZ2V0IGFueSBuZXcgZmllbGRzIGFkZGVkIHRvIHRoZW0gYXQgdGhpcyBwb2ludC5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG4gICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmFXNXpkR0Z1ZEdsaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQnBibk4wWVc1MGFXRjBaVkpsWVdOMFEyOXRjRzl1Wlc1MFhHNGdLaUJBZEhsd1pXTm9aV05yY3lCemRHRjBhV010YjI1c2VWeHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMFEyOXRjRzl6YVhSbFEyOXRjRzl1Wlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRDY3BPMXh1ZG1GeUlGSmxZV04wUlcxd2RIbERiMjF3YjI1bGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDFKbFlXTjBSVzF3ZEhsRGIyMXdiMjVsYm5RbktUdGNiblpoY2lCU1pXRmpkRTVoZEdsMlpVTnZiWEJ2Ym1WdWRDQTlJSEpsY1hWcGNtVW9KeTR2VW1WaFkzUk9ZWFJwZG1WRGIyMXdiMjVsYm5RbktUdGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb0p5NHZUMkpxWldOMExtRnpjMmxuYmljcE8xeHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb0oyWmlhbk12YkdsaUwybHVkbUZ5YVdGdWRDY3BPMXh1ZG1GeUlIZGhjbTVwYm1jZ1BTQnlaWEYxYVhKbEtDZG1ZbXB6TDJ4cFlpOTNZWEp1YVc1bkp5azdYRzVjYmk4dklGUnZJR0YyYjJsa0lHRWdZM2xqYkdsaklHUmxjR1Z1WkdWdVkza3NJSGRsSUdOeVpXRjBaU0IwYUdVZ1ptbHVZV3dnWTJ4aGMzTWdhVzRnZEdocGN5QnRiMlIxYkdWY2JuWmhjaUJTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRGZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpQW9LU0I3ZlR0Y2JtRnpjMmxuYmloU1pXRmpkRU52YlhCdmMybDBaVU52YlhCdmJtVnVkRmR5WVhCd1pYSXVjSEp2ZEc5MGVYQmxMQ0JTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRDNU5hWGhwYml3Z2UxeHVJQ0JmYVc1emRHRnVkR2xoZEdWU1pXRmpkRU52YlhCdmJtVnVkRG9nYVc1emRHRnVkR2xoZEdWU1pXRmpkRU52YlhCdmJtVnVkRnh1ZlNrN1hHNWNibVoxYm1OMGFXOXVJR2RsZEVSbFkyeGhjbUYwYVc5dVJYSnliM0pCWkdSbGJtUjFiU2h2ZDI1bGNpa2dlMXh1SUNCcFppQW9iM2R1WlhJcElIdGNiaUFnSUNCMllYSWdibUZ0WlNBOUlHOTNibVZ5TG1kbGRFNWhiV1VvS1R0Y2JpQWdJQ0JwWmlBb2JtRnRaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2NnUTJobFkyc2dkR2hsSUhKbGJtUmxjaUJ0WlhSb2IyUWdiMllnWUNjZ0t5QnVZVzFsSUNzZ0oyQXVKenRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlDY25PMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTm9aV05ySUdsbUlIUm9aU0IwZVhCbElISmxabVZ5Wlc1alpTQnBjeUJoSUd0dWIzZHVJR2x1ZEdWeWJtRnNJSFI1Y0dVdUlFa3VaUzRnYm05MElHRWdkWE5sY2x4dUlDb2djSEp2ZG1sa1pXUWdZMjl0Y0c5emFYUmxJSFI1Y0dVdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ2RIbHdaVnh1SUNvZ1FISmxkSFZ5YmlCN1ltOXZiR1ZoYm4wZ1VtVjBkWEp1Y3lCMGNuVmxJR2xtSUhSb2FYTWdhWE1nWVNCMllXeHBaQ0JwYm5SbGNtNWhiQ0IwZVhCbExseHVJQ292WEc1bWRXNWpkR2x2YmlCcGMwbHVkR1Z5Ym1Gc1EyOXRjRzl1Wlc1MFZIbHdaU2gwZVhCbEtTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdkSGx3WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCMGVYQmxiMllnZEhsd1pTNXdjbTkwYjNSNWNHVWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFI1Y0dWdlppQjBlWEJsTG5CeWIzUnZkSGx3WlM1dGIzVnVkRU52YlhCdmJtVnVkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwZVhCbGIyWWdkSGx3WlM1d2NtOTBiM1I1Y0dVdWNtVmpaV2wyWlVOdmJYQnZibVZ1ZENBOVBUMGdKMloxYm1OMGFXOXVKenRjYm4xY2JseHVMeW9xWEc0Z0tpQkhhWFpsYmlCaElGSmxZV04wVG05a1pTd2dZM0psWVhSbElHRnVJR2x1YzNSaGJtTmxJSFJvWVhRZ2QybHNiQ0JoWTNSMVlXeHNlU0JpWlNCdGIzVnVkR1ZrTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUk9iMlJsZlNCdWIyUmxYRzRnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5SUVFZ2JtVjNJR2x1YzNSaGJtTmxJRzltSUhSb1pTQmxiR1Z0Wlc1MEozTWdZMjl1YzNSeWRXTjBiM0l1WEc0Z0tpQkFjSEp2ZEdWamRHVmtYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHVjM1JoYm5ScFlYUmxVbVZoWTNSRGIyMXdiMjVsYm5Rb2JtOWtaU2tnZTF4dUlDQjJZWElnYVc1emRHRnVZMlU3WEc1Y2JpQWdhV1lnS0c1dlpHVWdQVDA5SUc1MWJHd2dmSHdnYm05a1pTQTlQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQnBibk4wWVc1alpTQTlJRzVsZHlCU1pXRmpkRVZ0Y0hSNVEyOXRjRzl1Wlc1MEtHbHVjM1JoYm5ScFlYUmxVbVZoWTNSRGIyMXdiMjVsYm5RcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ1YjJSbElEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJSFpoY2lCbGJHVnRaVzUwSUQwZ2JtOWtaVHRjYmlBZ0lDQWhLR1ZzWlcxbGJuUWdKaVlnS0hSNWNHVnZaaUJsYkdWdFpXNTBMblI1Y0dVZ1BUMDlJQ2RtZFc1amRHbHZiaWNnZkh3Z2RIbHdaVzltSUdWc1pXMWxiblF1ZEhsd1pTQTlQVDBnSjNOMGNtbHVaeWNwS1NBL0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUJwYm5aaGNtbGhiblFvWm1Gc2MyVXNJQ2RGYkdWdFpXNTBJSFI1Y0dVZ2FYTWdhVzUyWVd4cFpEb2daWGh3WldOMFpXUWdZU0J6ZEhKcGJtY2dLR1p2Y2lCaWRXbHNkQzFwYmlCamIyMXdiMjVsYm5SektTQW5JQ3NnSjI5eUlHRWdZMnhoYzNNdlpuVnVZM1JwYjI0Z0tHWnZjaUJqYjIxd2IzTnBkR1VnWTI5dGNHOXVaVzUwY3lrZ1luVjBJR2R2ZERvZ0pYTXVKWE1uTENCbGJHVnRaVzUwTG5SNWNHVWdQVDBnYm5Wc2JDQS9JR1ZzWlcxbGJuUXVkSGx3WlNBNklIUjVjR1Z2WmlCbGJHVnRaVzUwTG5SNWNHVXNJR2RsZEVSbFkyeGhjbUYwYVc5dVJYSnliM0pCWkdSbGJtUjFiU2hsYkdWdFpXNTBMbDl2ZDI1bGNpa3BJRG9nYVc1MllYSnBZVzUwS0daaGJITmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUM4dklGTndaV05wWVd3Z1kyRnpaU0J6ZEhKcGJtY2dkbUZzZFdWelhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbGJHVnRaVzUwTG5SNWNHVWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCcGJuTjBZVzVqWlNBOUlGSmxZV04wVG1GMGFYWmxRMjl0Y0c5dVpXNTBMbU55WldGMFpVbHVkR1Z5Ym1Gc1EyOXRjRzl1Wlc1MEtHVnNaVzFsYm5RcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTkpiblJsY201aGJFTnZiWEJ2Ym1WdWRGUjVjR1VvWld4bGJXVnVkQzUwZVhCbEtTa2dlMXh1SUNBZ0lDQWdMeThnVkdocGN5QnBjeUIwWlcxd2IzSmhjbWxzZVNCaGRtRnBiR0ZpYkdVZ1ptOXlJR04xYzNSdmJTQmpiMjF3YjI1bGJuUnpJSFJvWVhRZ1lYSmxJRzV2ZENCemRISnBibWRjYmlBZ0lDQWdJQzh2SUhKbGNISmxjMlZ1ZEdGMGFXOXVjeTRnU1M1bExpQkJVbFF1SUU5dVkyVWdkR2h2YzJVZ1lYSmxJSFZ3WkdGMFpXUWdkRzhnZFhObElIUm9aU0J6ZEhKcGJtZGNiaUFnSUNBZ0lDOHZJSEpsY0hKbGMyVnVkR0YwYVc5dUxDQjNaU0JqWVc0Z1pISnZjQ0IwYUdseklHTnZaR1VnY0dGMGFDNWNiaUFnSUNBZ0lHbHVjM1JoYm1ObElEMGdibVYzSUdWc1pXMWxiblF1ZEhsd1pTaGxiR1Z0Wlc1MEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVc1emRHRnVZMlVnUFNCdVpYY2dVbVZoWTNSRGIyMXdiM05wZEdWRGIyMXdiMjVsYm5SWGNtRndjR1Z5S0NrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnViMlJsSUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IwZVhCbGIyWWdibTlrWlNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQnBibk4wWVc1alpTQTlJRkpsWVdOMFRtRjBhWFpsUTI5dGNHOXVaVzUwTG1OeVpXRjBaVWx1YzNSaGJtTmxSbTl5VkdWNGRDaHViMlJsS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNBaFptRnNjMlVnUHlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdhVzUyWVhKcFlXNTBLR1poYkhObExDQW5SVzVqYjNWdWRHVnlaV1FnYVc1MllXeHBaQ0JTWldGamRDQnViMlJsSUc5bUlIUjVjR1VnSlhNbkxDQjBlWEJsYjJZZ2JtOWtaU2tnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0I5WEc1Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bklEOGdkMkZ5Ym1sdVp5aDBlWEJsYjJZZ2FXNXpkR0Z1WTJVdVkyOXVjM1J5ZFdOMElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlIUjVjR1Z2WmlCcGJuTjBZVzVqWlM1dGIzVnVkRU52YlhCdmJtVnVkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwZVhCbGIyWWdhVzV6ZEdGdVkyVXVjbVZqWldsMlpVTnZiWEJ2Ym1WdWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQjBlWEJsYjJZZ2FXNXpkR0Z1WTJVdWRXNXRiM1Z1ZEVOdmJYQnZibVZ1ZENBOVBUMGdKMloxYm1OMGFXOXVKeXdnSjA5dWJIa2dVbVZoWTNRZ1EyOXRjRzl1Wlc1MGN5QmpZVzRnWW1VZ2JXOTFiblJsWkM0bktTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ2ZWeHVYRzRnSUM4dklGTmxkSE1nZFhBZ2RHaGxJR2x1YzNSaGJtTmxMaUJVYUdseklHTmhiaUJ3Y205aVlXSnNlU0JxZFhOMElHMXZkbVVnYVc1MGJ5QjBhR1VnWTI5dWMzUnlkV04wYjNJZ2JtOTNMbHh1SUNCcGJuTjBZVzVqWlM1amIyNXpkSEoxWTNRb2JtOWtaU2s3WEc1Y2JpQWdMeThnVkdobGMyVWdkSGR2SUdacFpXeGtjeUJoY21VZ2RYTmxaQ0JpZVNCMGFHVWdSRTlOSUdGdVpDQkJVbFFnWkdsbVptbHVaeUJoYkdkdmNtbDBhRzF6WEc0Z0lDOHZJSEpsYzNCbFkzUnBkbVZzZVM0Z1NXNXpkR1ZoWkNCdlppQjFjMmx1WnlCbGVIQmhibVJ2Y3lCdmJpQmpiMjF3YjI1bGJuUnpMQ0IzWlNCemFHOTFiR1FnWW1WY2JpQWdMeThnYzNSdmNtbHVaeUIwYUdVZ2MzUmhkR1VnYm1WbFpHVmtJR0o1SUhSb1pTQmthV1ptYVc1bklHRnNaMjl5YVhSb2JYTWdaV3h6Wlhkb1pYSmxMbHh1SUNCcGJuTjBZVzVqWlM1ZmJXOTFiblJKYm1SbGVDQTlJREE3WEc0Z0lHbHVjM1JoYm1ObExsOXRiM1Z1ZEVsdFlXZGxJRDBnYm5Wc2JEdGNibHh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJR2x1YzNSaGJtTmxMbDlwYzA5M2JtVnlUbVZqWlhOellYSjVJRDBnWm1Gc2MyVTdYRzRnSUNBZ2FXNXpkR0Z1WTJVdVgzZGhjbTVsWkVGaWIzVjBVbVZtYzBsdVVtVnVaR1Z5SUQwZ1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNBdkx5QkpiblJsY201aGJDQnBibk4wWVc1alpYTWdjMmh2ZFd4a0lHWjFiR3g1SUdOdmJuTjBjblZqZEdWa0lHRjBJSFJvYVhNZ2NHOXBiblFzSUhOdklIUm9aWGtnYzJodmRXeGtYRzRnSUM4dklHNXZkQ0JuWlhRZ1lXNTVJRzVsZHlCbWFXVnNaSE1nWVdSa1pXUWdkRzhnZEdobGJTQmhkQ0IwYUdseklIQnZhVzUwTGx4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUdsbUlDaFBZbXBsWTNRdWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5NcElIdGNiaUFnSUNBZ0lFOWlhbVZqZEM1d2NtVjJaVzUwUlhoMFpXNXphVzl1Y3locGJuTjBZVzVqWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdsdWMzUmhibU5sTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2x1YzNSaGJuUnBZWFJsVW1WaFkzUkRiMjF3YjI1bGJuUTdJbDE5IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRTdXBwb3J0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHwgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gKGV2ZW50TmFtZSBpbiBkb2N1bWVudCk7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0SW5wdXRFbGVtZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWlucHV0LWVsZW1lbnQuaHRtbCNpbnB1dC10eXBlLWF0dHItc3VtbWFyeVxuICovXG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgJ2NvbG9yJzogdHJ1ZSxcbiAgJ2RhdGUnOiB0cnVlLFxuICAnZGF0ZXRpbWUnOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlLFxuICAnZW1haWwnOiB0cnVlLFxuICAnbW9udGgnOiB0cnVlLFxuICAnbnVtYmVyJzogdHJ1ZSxcbiAgJ3Bhc3N3b3JkJzogdHJ1ZSxcbiAgJ3JhbmdlJzogdHJ1ZSxcbiAgJ3NlYXJjaCc6IHRydWUsXG4gICd0ZWwnOiB0cnVlLFxuICAndGV4dCc6IHRydWUsXG4gICd0aW1lJzogdHJ1ZSxcbiAgJ3VybCc6IHRydWUsXG4gICd3ZWVrJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIChub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV0gfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dElucHV0RWxlbWVudDsiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG9ubHlDaGlsZFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgY2hpbGQgaW4gYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuIGFuZCB2ZXJpZmllcyB0aGF0IHRoZXJlXG4gKiBpcyBvbmx5IG9uZSBjaGlsZCBpbiB0aGUgY29sbGVjdGlvbi4gVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpc1xuICogZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGEgc2luZ2xlIGNoaWxkIGdldHMgcGFzc2VkIHdpdGhvdXQgYSB3cmFwcGVyLCBidXQgdGhlXG4gKiBwdXJwb3NlIG9mIHRoaXMgaGVscGVyIGZ1bmN0aW9uIGlzIHRvIGFic3RyYWN0IGF3YXkgdGhlIHBhcnRpY3VsYXIgc3RydWN0dXJlXG4gKiBvZiBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGNoaWxkcmVuIENoaWxkIGNvbGxlY3Rpb24gc3RydWN0dXJlLlxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IFRoZSBmaXJzdCBhbmQgb25seSBgUmVhY3RDb21wb25lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ29ubHlDaGlsZCBtdXN0IGJlIHBhc3NlZCBhIGNoaWxkcmVuIHdpdGggZXhhY3RseSBvbmUgY2hpbGQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb25seUNoaWxkO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmIyNXNlVU5vYVd4a0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0J2Ym14NVEyaHBiR1JjYmlBcUwxeHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnVW1WaFkzUkZiR1Z0Wlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlTWldGamRFVnNaVzFsYm5RbktUdGNibHh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMmx1ZG1GeWFXRnVkQ2NwTzF4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ2RHaGxJR1pwY25OMElHTm9hV3hrSUdsdUlHRWdZMjlzYkdWamRHbHZiaUJ2WmlCamFHbHNaSEpsYmlCaGJtUWdkbVZ5YVdacFpYTWdkR2hoZENCMGFHVnlaVnh1SUNvZ2FYTWdiMjVzZVNCdmJtVWdZMmhwYkdRZ2FXNGdkR2hsSUdOdmJHeGxZM1JwYjI0dUlGUm9aU0JqZFhKeVpXNTBJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOW1JSFJvYVhOY2JpQXFJR1oxYm1OMGFXOXVJR0Z6YzNWdFpYTWdkR2hoZENCaElITnBibWRzWlNCamFHbHNaQ0JuWlhSeklIQmhjM05sWkNCM2FYUm9iM1YwSUdFZ2QzSmhjSEJsY2l3Z1luVjBJSFJvWlZ4dUlDb2djSFZ5Y0c5elpTQnZaaUIwYUdseklHaGxiSEJsY2lCbWRXNWpkR2x2YmlCcGN5QjBieUJoWW5OMGNtRmpkQ0JoZDJGNUlIUm9aU0J3WVhKMGFXTjFiR0Z5SUhOMGNuVmpkSFZ5WlZ4dUlDb2diMllnWTJocGJHUnlaVzR1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHMvYjJKcVpXTjBmU0JqYUdsc1pISmxiaUJEYUdsc1pDQmpiMnhzWldOMGFXOXVJSE4wY25WamRIVnlaUzVjYmlBcUlFQnlaWFIxY200Z2UxSmxZV04wUTI5dGNHOXVaVzUwZlNCVWFHVWdabWx5YzNRZ1lXNWtJRzl1YkhrZ1lGSmxZV04wUTI5dGNHOXVaVzUwWUNCamIyNTBZV2x1WldRZ2FXNGdkR2hsWEc0Z0tpQnpkSEoxWTNSMWNtVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHOXViSGxEYUdsc1pDaGphR2xzWkhKbGJpa2dlMXh1SUNBaFVtVmhZM1JGYkdWdFpXNTBMbWx6Vm1Gc2FXUkZiR1Z0Wlc1MEtHTm9hV3hrY21WdUtTQS9JSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5jSEp2WkhWamRHbHZiaWNnUHlCcGJuWmhjbWxoYm5Rb1ptRnNjMlVzSUNkdmJteDVRMmhwYkdRZ2JYVnpkQ0JpWlNCd1lYTnpaV1FnWVNCamFHbHNaSEpsYmlCM2FYUm9JR1Y0WVdOMGJIa2diMjVsSUdOb2FXeGtMaWNwSURvZ2FXNTJZWEpwWVc1MEtHWmhiSE5sS1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnY21WMGRYSnVJR05vYVd4a2NtVnVPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHOXViSGxEYUdsc1pEc2lYWDA9IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcblxuLyoqXG4gKiBFc2NhcGVzIGF0dHJpYnV0ZSB2YWx1ZSB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpIHtcbiAgcmV0dXJuICdcIicgKyBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodmFsdWUpICsgJ1wiJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4qIEBwcm92aWRlc01vZHVsZSByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lclxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQucmVuZGVyU3VidHJlZUludG9Db250YWluZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNldElubmVySFRNTFxuICovXG5cbi8qIGdsb2JhbHMgTVNBcHAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgV0hJVEVTUEFDRV9URVNUID0gL15bIFxcclxcblxcdFxcZl0vO1xudmFyIE5PTlZJU0lCTEVfVEVTVCA9IC88KCEtLXxsaW5rfG5vc2NyaXB0fG1ldGF8c2NyaXB0fHN0eWxlKVsgXFxyXFxuXFx0XFxmXFwvPl0vO1xuXG4vKipcbiAqIFNldCB0aGUgaW5uZXJIVE1MIHByb3BlcnR5IG9mIGEgbm9kZSwgZW5zdXJpbmcgdGhhdCB3aGl0ZXNwYWNlIGlzIHByZXNlcnZlZFxuICogZXZlbiBpbiBJRTguXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICogQGludGVybmFsXG4gKi9cbnZhciBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbiAobm9kZSwgaHRtbCkge1xuICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG59O1xuXG4vLyBXaW44IGFwcHM6IEFsbG93IGFsbCBodG1sIHRvIGJlIGluc2VydGVkXG5pZiAodHlwZW9mIE1TQXBwICE9PSAndW5kZWZpbmVkJyAmJiBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbikge1xuICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbiAobm9kZSwgaHRtbCkge1xuICAgIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICB9KTtcbiAgfTtcbn1cblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBJRTg6IFdoZW4gdXBkYXRpbmcgYSBqdXN0IGNyZWF0ZWQgbm9kZSB3aXRoIGlubmVySFRNTCBvbmx5IGxlYWRpbmdcbiAgLy8gd2hpdGVzcGFjZSBpcyByZW1vdmVkLiBXaGVuIHVwZGF0aW5nIGFuIGV4aXN0aW5nIG5vZGUgd2l0aCBpbm5lckhUTUxcbiAgLy8gd2hpdGVzcGFjZSBpbiByb290IFRleHROb2RlcyBpcyBhbHNvIGNvbGxhcHNlZC5cbiAgLy8gQHNlZSBxdWlya3Ntb2RlLm9yZy9idWdyZXBvcnRzL2FyY2hpdmVzLzIwMDQvMTEvaW5uZXJodG1sX2FuZF90Lmh0bWxcblxuICAvLyBGZWF0dXJlIGRldGVjdGlvbjsgb25seSBJRTggaXMga25vd24gdG8gYmVoYXZlIGltcHJvcGVybHkgbGlrZSB0aGlzLlxuICB2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGVzdEVsZW1lbnQuaW5uZXJIVE1MID0gJyAnO1xuICBpZiAodGVzdEVsZW1lbnQuaW5uZXJIVE1MID09PSAnJykge1xuICAgIHNldElubmVySFRNTCA9IGZ1bmN0aW9uIChub2RlLCBodG1sKSB7XG4gICAgICAvLyBNYWdpYyB0aGVvcnk6IElFOCBzdXBwb3NlZGx5IGRpZmZlcmVudGlhdGVzIGJldHdlZW4gYWRkZWQgYW5kIHVwZGF0ZWRcbiAgICAgIC8vIG5vZGVzIHdoZW4gcHJvY2Vzc2luZyBpbm5lckhUTUwsIGlubmVySFRNTCBvbiB1cGRhdGVkIG5vZGVzIHN1ZmZlcnNcbiAgICAgIC8vIGZyb20gd29yc2Ugd2hpdGVzcGFjZSBiZWhhdmlvci4gUmUtYWRkaW5nIGEgbm9kZSBsaWtlIHRoaXMgdHJpZ2dlcnNcbiAgICAgIC8vIHRoZSBpbml0aWFsIGFuZCBtb3JlIGZhdm9yYWJsZSB3aGl0ZXNwYWNlIGJlaGF2aW9yLlxuICAgICAgLy8gVE9ETzogV2hhdCB0byBkbyBvbiBhIGRldGFjaGVkIG5vZGU/XG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZSwgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGFsc28gaW1wbGVtZW50IGEgd29ya2Fyb3VuZCBmb3Igbm9uLXZpc2libGUgdGFncyBkaXNhcHBlYXJpbmcgaW50b1xuICAgICAgLy8gdGhpbiBhaXIgb24gSUU4LCB0aGlzIG9ubHkgaGFwcGVucyBpZiB0aGVyZSBpcyBubyB2aXNpYmxlIHRleHRcbiAgICAgIC8vIGluLWZyb250IG9mIHRoZSBub24tdmlzaWJsZSB0YWdzLiBQaWdneWJhY2sgb24gdGhlIHdoaXRlc3BhY2UgZml4XG4gICAgICAvLyBhbmQgc2ltcGx5IGNoZWNrIGlmIGFueSBub24tdmlzaWJsZSB0YWdzIGFwcGVhciBpbiB0aGUgc291cmNlLlxuICAgICAgaWYgKFdISVRFU1BBQ0VfVEVTVC50ZXN0KGh0bWwpIHx8IGh0bWxbMF0gPT09ICc8JyAmJiBOT05WSVNJQkxFX1RFU1QudGVzdChodG1sKSkge1xuICAgICAgICAvLyBSZWNvdmVyIGxlYWRpbmcgd2hpdGVzcGFjZSBieSB0ZW1wb3JhcmlseSBwcmVwZW5kaW5nIGFueSBjaGFyYWN0ZXIuXG4gICAgICAgIC8vIFxcdUZFRkYgaGFzIHRoZSBwb3RlbnRpYWwgYWR2YW50YWdlIG9mIGJlaW5nIHplcm8td2lkdGgvaW52aXNpYmxlLlxuICAgICAgICAvLyBVZ2xpZnlKUyBkcm9wcyBVK0ZFRkYgY2hhcnMgd2hlbiBwYXJzaW5nLCBzbyB1c2UgU3RyaW5nLmZyb21DaGFyQ29kZVxuICAgICAgICAvLyBpbiBob3BlcyB0aGF0IHRoaXMgaXMgcHJlc2VydmVkIGV2ZW4gaWYgXCJcXHVGRUZGXCIgaXMgdHJhbnNmb3JtZWQgdG9cbiAgICAgICAgLy8gdGhlIGFjdHVhbCBVbmljb2RlIGNoYXJhY3RlciAoYnkgQmFiZWwsIGZvciBleGFtcGxlKS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21pc2hvby9VZ2xpZnlKUzIvYmxvYi92Mi40LjIwL2xpYi9wYXJzZS5qcyNMMjE2XG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEZFRkYpICsgaHRtbDtcblxuICAgICAgICAvLyBkZWxldGVEYXRhIGxlYXZlcyBhbiBlbXB0eSBgVGV4dE5vZGVgIHdoaWNoIG9mZnNldHMgdGhlIGluZGV4IG9mIGFsbFxuICAgICAgICAvLyBjaGlsZHJlbi4gRGVmaW5pdGVseSB3YW50IHRvIGF2b2lkIHRoaXMuXG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKHRleHROb2RlLmRhdGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dE5vZGUuZGVsZXRlRGF0YSgwLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRJbm5lckhUTUw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNldFRleHRDb250ZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyJyk7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZSgnLi9zZXRJbm5lckhUTUwnKTtcblxuLyoqXG4gKiBTZXQgdGhlIHRleHRDb250ZW50IHByb3BlcnR5IG9mIGEgbm9kZSwgZW5zdXJpbmcgdGhhdCB3aGl0ZXNwYWNlIGlzIHByZXNlcnZlZFxuICogZXZlbiBpbiBJRTguIGlubmVyVGV4dCBpcyBhIHBvb3Igc3Vic3RpdHV0ZSBmb3IgdGV4dENvbnRlbnQgYW5kLCBhbW9uZyBtYW55XG4gKiBpc3N1ZXMsIGluc2VydHMgPGJyPiBpbnN0ZWFkIG9mIHRoZSBsaXRlcmFsIG5ld2xpbmUgY2hhcnMuIGlubmVySFRNTCBiZWhhdmVzXG4gKiBhcyBpdCBzaG91bGQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQGludGVybmFsXG4gKi9cbnZhciBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uIChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBpZiAoISgndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkpIHtcbiAgICBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uIChub2RlLCB0ZXh0KSB7XG4gICAgICBzZXRJbm5lckhUTUwobm9kZSwgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRleHQpKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VGV4dENvbnRlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhIGBwcmV2RWxlbWVudGAgYW5kIGBuZXh0RWxlbWVudGAsIGRldGVybWluZXMgaWYgdGhlIGV4aXN0aW5nXG4gKiBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZCBhcyBvcHBvc2VkIHRvIGJlaW5nIGRlc3Ryb3llZCBvciByZXBsYWNlZCBieSBhIG5ld1xuICogaW5zdGFuY2UuIEJvdGggYXJndW1lbnRzIGFyZSBlbGVtZW50cy4gVGhpcyBlbnN1cmVzIHRoYXQgdGhpcyBsb2dpYyBjYW5cbiAqIG9wZXJhdGUgb24gc3RhdGVsZXNzIHRyZWVzIHdpdGhvdXQgYW55IGJhY2tpbmcgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2RWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0RWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXhpc3RpbmcgaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuICB2YXIgcHJldkVtcHR5ID0gcHJldkVsZW1lbnQgPT09IG51bGwgfHwgcHJldkVsZW1lbnQgPT09IGZhbHNlO1xuICB2YXIgbmV4dEVtcHR5ID0gbmV4dEVsZW1lbnQgPT09IG51bGwgfHwgbmV4dEVsZW1lbnQgPT09IGZhbHNlO1xuICBpZiAocHJldkVtcHR5IHx8IG5leHRFbXB0eSkge1xuICAgIHJldHVybiBwcmV2RW1wdHkgPT09IG5leHRFbXB0eTtcbiAgfVxuXG4gIHZhciBwcmV2VHlwZSA9IHR5cGVvZiBwcmV2RWxlbWVudDtcbiAgdmFyIG5leHRUeXBlID0gdHlwZW9mIG5leHRFbGVtZW50O1xuICBpZiAocHJldlR5cGUgPT09ICdzdHJpbmcnIHx8IHByZXZUeXBlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXh0VHlwZSA9PT0gJ3N0cmluZycgfHwgbmV4dFR5cGUgPT09ICdudW1iZXInO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXh0VHlwZSA9PT0gJ29iamVjdCcgJiYgcHJldkVsZW1lbnQudHlwZSA9PT0gbmV4dEVsZW1lbnQudHlwZSAmJiBwcmV2RWxlbWVudC5rZXkgPT09IG5leHRFbGVtZW50LmtleTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ7IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0cmF2ZXJzZUFsbENoaWxkcmVuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZUhhbmRsZXMnKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgU0VQQVJBVE9SID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuU0VQQVJBVE9SO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBUT0RPOiBUZXN0IHRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXlcbiAqIHBhdHRlcm4uXG4gKi9cblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXAgPSB7XG4gICc9JzogJz0wJyxcbiAgJy4nOiAnPTEnLFxuICAnOic6ICc9Midcbn07XG5cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCA9IC9bPS46XS9nO1xuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IGZhbHNlO1xuXG5mdW5jdGlvbiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyKG1hdGNoKSB7XG4gIHJldHVybiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwW21hdGNoXTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5rZXkgIT0gbnVsbCkge1xuICAgIC8vIEV4cGxpY2l0IGtleVxuICAgIHJldHVybiB3cmFwVXNlclByb3ZpZGVkS2V5KGNvbXBvbmVudC5rZXkpO1xuICB9XG4gIC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG4gIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG59XG5cbi8qKlxuICogRXNjYXBlIGEgY29tcG9uZW50IGtleSBzbyB0aGF0IGl0IGlzIHNhZmUgdG8gdXNlIGluIGEgcmVhY3RpZC5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgQ29tcG9uZW50IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsIHVzZXJQcm92aWRlZEtleUVzY2FwZXIpO1xufVxuXG4vKipcbiAqIFdyYXAgYSBga2V5YCB2YWx1ZSBleHBsaWNpdGx5IHByb3ZpZGVkIGJ5IHRoZSB1c2VyIHRvIGRpc3Rpbmd1aXNoIGl0IGZyb21cbiAqIGltcGxpY2l0bHktZ2VuZXJhdGVkIGtleXMgZ2VuZXJhdGVkIGJ5IGEgY29tcG9uZW50J3MgaW5kZXggaW4gaXRzIHBhcmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFZhbHVlIG9mIGEgdXNlci1wcm92aWRlZCBga2V5YCBhdHRyaWJ1dGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gd3JhcFVzZXJQcm92aWRlZEtleShrZXkpIHtcbiAgcmV0dXJuICckJyArIGVzY2FwZVVzZXJQcm92aWRlZEtleShrZXkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sXG4gICAgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzLlxuICAgIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZDtcbiAgdmFyIG5leHROYW1lO1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cbiAgdmFyIG5leHROYW1lUHJlZml4ID0gbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiA6IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUjtcblxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaSk7XG4gICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKGNoaWxkcmVuKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IGNoaWxkcmVuLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGlpID0gMDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpaSsrKTtcbiAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhkaWRXYXJuQWJvdXRNYXBzLCAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3QgeWV0IGZ1bGx5IHN1cHBvcnRlZC4gSXQgaXMgYW4gJyArICdleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSAnICsgJ3NlcXVlbmNlIC8gaXRlcmFibGUgb2Yga2V5ZWQgUmVhY3RFbGVtZW50cyBpbnN0ZWFkLicpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLlxuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gZW50cnlbMV07XG4gICAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgd3JhcFVzZXJQcm92aWRlZEtleShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApO1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgIGlmIChjaGlsZHJlbi5faXNSZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgSXQgbG9va3MgbGlrZSB5b3VcXCdyZSB1c2luZyBhbiBlbGVtZW50IGNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgJyArICd2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGFkZGVuZHVtICs9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLCBidXRcbiAqIG1pZ2h0IGFsc28gYmUgc3BlY2lmaWVkIHRocm91Z2ggYXR0cmlidXRlczpcbiAqXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4sIC4uLilgXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMubGVmdFBhbmVsQ2hpbGRyZW4sIC4uLilgXG4gKlxuICogVGhlIGB0cmF2ZXJzZUNvbnRleHRgIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgaXMgcGFzc2VkIHRocm91Z2ggdGhlXG4gKiBlbnRpcmUgdHJhdmVyc2FsLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBhY2N1bXVsYXRpb25zIG9yIGFueXRoaW5nIGVsc2UgdGhhdFxuICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBvYmplY3QuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgZm9yIHRyYXZlcnNhbC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmRISmhkbVZ5YzJWQmJHeERhR2xzWkhKbGJpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ERXpMVEl3TVRVc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1SUNwY2JpQXFJRlJvYVhNZ2MyOTFjbU5sSUdOdlpHVWdhWE1nYkdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDMXpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR2x1SUhSb1pWeHVJQ29nVEVsRFJVNVRSU0JtYVd4bElHbHVJSFJvWlNCeWIyOTBJR1JwY21WamRHOXllU0J2WmlCMGFHbHpJSE52ZFhKalpTQjBjbVZsTGlCQmJpQmhaR1JwZEdsdmJtRnNJR2R5WVc1MFhHNGdLaUJ2WmlCd1lYUmxiblFnY21sbmFIUnpJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQjBhR1VnVUVGVVJVNVVVeUJtYVd4bElHbHVJSFJvWlNCellXMWxJR1JwY21WamRHOXllUzVjYmlBcVhHNGdLaUJBY0hKdmRtbGtaWE5OYjJSMWJHVWdkSEpoZG1WeWMyVkJiR3hEYUdsc1pISmxibHh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5SUQwZ2NtVnhkV2x5WlNnbkxpOVNaV0ZqZEVOMWNuSmxiblJQZDI1bGNpY3BPMXh1ZG1GeUlGSmxZV04wUld4bGJXVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlVtVmhZM1JGYkdWdFpXNTBKeWs3WEc1MllYSWdVbVZoWTNSSmJuTjBZVzVqWlVoaGJtUnNaWE1nUFNCeVpYRjFhWEpsS0NjdUwxSmxZV04wU1c1emRHRnVZMlZJWVc1a2JHVnpKeWs3WEc1Y2JuWmhjaUJuWlhSSmRHVnlZWFJ2Y2tadUlEMGdjbVZ4ZFdseVpTZ25MaTluWlhSSmRHVnlZWFJ2Y2tadUp5azdYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTZ25abUpxY3k5c2FXSXZhVzUyWVhKcFlXNTBKeWs3WEc1MllYSWdkMkZ5Ym1sdVp5QTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMM2RoY201cGJtY25LVHRjYmx4dWRtRnlJRk5GVUVGU1FWUlBVaUE5SUZKbFlXTjBTVzV6ZEdGdVkyVklZVzVrYkdWekxsTkZVRUZTUVZSUFVqdGNiblpoY2lCVFZVSlRSVkJCVWtGVVQxSWdQU0FuT2ljN1hHNWNiaThxS2x4dUlDb2dWRTlFVHpvZ1ZHVnpkQ0IwYUdGMElHRWdjMmx1WjJ4bElHTm9hV3hrSUdGdVpDQmhiaUJoY25KaGVTQjNhWFJvSUc5dVpTQnBkR1Z0SUdoaGRtVWdkR2hsSUhOaGJXVWdhMlY1WEc0Z0tpQndZWFIwWlhKdUxseHVJQ292WEc1Y2JuWmhjaUIxYzJWeVVISnZkbWxrWldSTFpYbEZjMk5oY0dWeVRHOXZhM1Z3SUQwZ2UxeHVJQ0FuUFNjNklDYzlNQ2NzWEc0Z0lDY3VKem9nSnoweEp5eGNiaUFnSnpvbk9pQW5QVEluWEc1OU8xeHVYRzUyWVhJZ2RYTmxjbEJ5YjNacFpHVmtTMlY1UlhOallYQmxVbVZuWlhnZ1BTQXZXejB1T2wwdlp6dGNibHh1ZG1GeUlHUnBaRmRoY201QlltOTFkRTFoY0hNZ1BTQm1ZV3h6WlR0Y2JseHVablZ1WTNScGIyNGdkWE5sY2xCeWIzWnBaR1ZrUzJWNVJYTmpZWEJsY2lodFlYUmphQ2tnZTF4dUlDQnlaWFIxY200Z2RYTmxjbEJ5YjNacFpHVmtTMlY1UlhOallYQmxja3h2YjJ0MWNGdHRZWFJqYUYwN1hHNTlYRzVjYmk4cUtseHVJQ29nUjJWdVpYSmhkR1VnWVNCclpYa2djM1J5YVc1bklIUm9ZWFFnYVdSbGJuUnBabWxsY3lCaElHTnZiWEJ2Ym1WdWRDQjNhWFJvYVc0Z1lTQnpaWFF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHNxZlNCamIyMXdiMjVsYm5RZ1FTQmpiMjF3YjI1bGJuUWdkR2hoZENCamIzVnNaQ0JqYjI1MFlXbHVJR0VnYldGdWRXRnNJR3RsZVM1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnBibVJsZUNCSmJtUmxlQ0IwYUdGMElHbHpJSFZ6WldRZ2FXWWdZU0J0WVc1MVlXd2dhMlY1SUdseklHNXZkQ0J3Y205MmFXUmxaQzVjYmlBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMxY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFEyOXRjRzl1Wlc1MFMyVjVLR052YlhCdmJtVnVkQ3dnYVc1a1pYZ3BJSHRjYmlBZ2FXWWdLR052YlhCdmJtVnVkQ0FtSmlCamIyMXdiMjVsYm5RdWEyVjVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQXZMeUJGZUhCc2FXTnBkQ0JyWlhsY2JpQWdJQ0J5WlhSMWNtNGdkM0poY0ZWelpYSlFjbTkyYVdSbFpFdGxlU2hqYjIxd2IyNWxiblF1YTJWNUtUdGNiaUFnZlZ4dUlDQXZMeUJKYlhCc2FXTnBkQ0JyWlhrZ1pHVjBaWEp0YVc1bFpDQmllU0IwYUdVZ2FXNWtaWGdnYVc0Z2RHaGxJSE5sZEZ4dUlDQnlaWFIxY200Z2FXNWtaWGd1ZEc5VGRISnBibWNvTXpZcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVWelkyRndaU0JoSUdOdmJYQnZibVZ1ZENCclpYa2djMjhnZEdoaGRDQnBkQ0JwY3lCellXWmxJSFJ2SUhWelpTQnBiaUJoSUhKbFlXTjBhV1F1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHNxZlNCMFpYaDBJRU52YlhCdmJtVnVkQ0JyWlhrZ2RHOGdZbVVnWlhOallYQmxaQzVjYmlBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ1FXNGdaWE5qWVhCbFpDQnpkSEpwYm1jdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdWelkyRndaVlZ6WlhKUWNtOTJhV1JsWkV0bGVTaDBaWGgwS1NCN1hHNGdJSEpsZEhWeWJpQW9KeWNnS3lCMFpYaDBLUzV5WlhCc1lXTmxLSFZ6WlhKUWNtOTJhV1JsWkV0bGVVVnpZMkZ3WlZKbFoyVjRMQ0IxYzJWeVVISnZkbWxrWldSTFpYbEZjMk5oY0dWeUtUdGNibjFjYmx4dUx5b3FYRzRnS2lCWGNtRndJR0VnWUd0bGVXQWdkbUZzZFdVZ1pYaHdiR2xqYVhSc2VTQndjbTkyYVdSbFpDQmllU0IwYUdVZ2RYTmxjaUIwYnlCa2FYTjBhVzVuZFdsemFDQnBkQ0JtY205dFhHNGdLaUJwYlhCc2FXTnBkR3g1TFdkbGJtVnlZWFJsWkNCclpYbHpJR2RsYm1WeVlYUmxaQ0JpZVNCaElHTnZiWEJ2Ym1WdWRDZHpJR2x1WkdWNElHbHVJR2wwY3lCd1lYSmxiblF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR3RsZVNCV1lXeDFaU0J2WmlCaElIVnpaWEl0Y0hKdmRtbGtaV1FnWUd0bGVXQWdZWFIwY21saWRYUmxYRzRnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5WEc0Z0tpOWNibVoxYm1OMGFXOXVJSGR5WVhCVmMyVnlVSEp2ZG1sa1pXUkxaWGtvYTJWNUtTQjdYRzRnSUhKbGRIVnliaUFuSkNjZ0t5QmxjMk5oY0dWVmMyVnlVSEp2ZG1sa1pXUkxaWGtvYTJWNUtUdGNibjFjYmx4dUx5b3FYRzRnS2lCQWNHRnlZVzBnZXo4cWZTQmphR2xzWkhKbGJpQkRhR2xzWkhKbGJpQjBjbVZsSUdOdmJuUmhhVzVsY2k1Y2JpQXFJRUJ3WVhKaGJTQjdJWE4wY21sdVozMGdibUZ0WlZOdlJtRnlJRTVoYldVZ2IyWWdkR2hsSUd0bGVTQndZWFJvSUhOdklHWmhjaTVjYmlBcUlFQndZWEpoYlNCN0lXWjFibU4wYVc5dWZTQmpZV3hzWW1GamF5QkRZV3hzWW1GamF5QjBieUJwYm5admEyVWdkMmwwYUNCbFlXTm9JR05vYVd4a0lHWnZkVzVrTGx4dUlDb2dRSEJoY21GdElIcy9LbjBnZEhKaGRtVnljMlZEYjI1MFpYaDBJRlZ6WldRZ2RHOGdjR0Z6Y3lCcGJtWnZjbTFoZEdsdmJpQjBhSEp2ZFdkb2IzVjBJSFJvWlNCMGNtRjJaWEp6WVd4Y2JpQXFJSEJ5YjJObGMzTXVYRzRnS2lCQWNtVjBkWEp1SUhzaGJuVnRZbVZ5ZlNCVWFHVWdiblZ0WW1WeUlHOW1JR05vYVd4a2NtVnVJR2x1SUhSb2FYTWdjM1ZpZEhKbFpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2RISmhkbVZ5YzJWQmJHeERhR2xzWkhKbGJrbHRjR3dvWTJocGJHUnlaVzRzSUc1aGJXVlRiMFpoY2l3Z1kyRnNiR0poWTJzc0lIUnlZWFpsY25ObFEyOXVkR1Y0ZENrZ2UxeHVJQ0IyWVhJZ2RIbHdaU0E5SUhSNWNHVnZaaUJqYUdsc1pISmxianRjYmx4dUlDQnBaaUFvZEhsd1pTQTlQVDBnSjNWdVpHVm1hVzVsWkNjZ2ZId2dkSGx3WlNBOVBUMGdKMkp2YjJ4bFlXNG5LU0I3WEc0Z0lDQWdMeThnUVd4c0lHOW1JSFJvWlNCaFltOTJaU0JoY21VZ2NHVnlZMlZwZG1Wa0lHRnpJRzUxYkd3dVhHNGdJQ0FnWTJocGJHUnlaVzRnUFNCdWRXeHNPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHTm9hV3hrY21WdUlEMDlQU0J1ZFd4c0lIeDhJSFI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4SUhSNWNHVWdQVDA5SUNkdWRXMWlaWEluSUh4OElGSmxZV04wUld4bGJXVnVkQzVwYzFaaGJHbGtSV3hsYldWdWRDaGphR2xzWkhKbGJpa3BJSHRjYmlBZ0lDQmpZV3hzWW1GamF5aDBjbUYyWlhKelpVTnZiblJsZUhRc0lHTm9hV3hrY21WdUxGeHVJQ0FnSUM4dklFbG1JR2wwSjNNZ2RHaGxJRzl1YkhrZ1kyaHBiR1FzSUhSeVpXRjBJSFJvWlNCdVlXMWxJR0Z6SUdsbUlHbDBJSGRoY3lCM2NtRndjR1ZrSUdsdUlHRnVJR0Z5Y21GNVhHNGdJQ0FnTHk4Z2MyOGdkR2hoZENCcGRDZHpJR052Ym5OcGMzUmxiblFnYVdZZ2RHaGxJRzUxYldKbGNpQnZaaUJqYUdsc1pISmxiaUJuY205M2N5NWNiaUFnSUNCdVlXMWxVMjlHWVhJZ1BUMDlJQ2NuSUQ4Z1UwVlFRVkpCVkU5U0lDc2daMlYwUTI5dGNHOXVaVzUwUzJWNUtHTm9hV3hrY21WdUxDQXdLU0E2SUc1aGJXVlRiMFpoY2lrN1hHNGdJQ0FnY21WMGRYSnVJREU3WEc0Z0lIMWNibHh1SUNCMllYSWdZMmhwYkdRN1hHNGdJSFpoY2lCdVpYaDBUbUZ0WlR0Y2JpQWdkbUZ5SUhOMVluUnlaV1ZEYjNWdWRDQTlJREE3SUM4dklFTnZkVzUwSUc5bUlHTm9hV3hrY21WdUlHWnZkVzVrSUdsdUlIUm9aU0JqZFhKeVpXNTBJSE4xWW5SeVpXVXVYRzRnSUhaaGNpQnVaWGgwVG1GdFpWQnlaV1pwZUNBOUlHNWhiV1ZUYjBaaGNpQTlQVDBnSnljZ1B5QlRSVkJCVWtGVVQxSWdPaUJ1WVcxbFUyOUdZWElnS3lCVFZVSlRSVkJCVWtGVVQxSTdYRzVjYmlBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1kyaHBiR1J5Wlc0cEtTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmphR2xzWkhKbGJpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnWTJocGJHUWdQU0JqYUdsc1pISmxibHRwWFR0Y2JpQWdJQ0FnSUc1bGVIUk9ZVzFsSUQwZ2JtVjRkRTVoYldWUWNtVm1hWGdnS3lCblpYUkRiMjF3YjI1bGJuUkxaWGtvWTJocGJHUXNJR2twTzF4dUlDQWdJQ0FnYzNWaWRISmxaVU52ZFc1MElDczlJSFJ5WVhabGNuTmxRV3hzUTJocGJHUnlaVzVKYlhCc0tHTm9hV3hrTENCdVpYaDBUbUZ0WlN3Z1kyRnNiR0poWTJzc0lIUnlZWFpsY25ObFEyOXVkR1Y0ZENrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhaaGNpQnBkR1Z5WVhSdmNrWnVJRDBnWjJWMFNYUmxjbUYwYjNKR2JpaGphR2xzWkhKbGJpazdYRzRnSUNBZ2FXWWdLR2wwWlhKaGRHOXlSbTRwSUh0Y2JpQWdJQ0FnSUhaaGNpQnBkR1Z5WVhSdmNpQTlJR2wwWlhKaGRHOXlSbTR1WTJGc2JDaGphR2xzWkhKbGJpazdYRzRnSUNBZ0lDQjJZWElnYzNSbGNEdGNiaUFnSUNBZ0lHbG1JQ2hwZEdWeVlYUnZja1p1SUNFOVBTQmphR2xzWkhKbGJpNWxiblJ5YVdWektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGFTQTlJREE3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2doS0hOMFpYQWdQU0JwZEdWeVlYUnZjaTV1WlhoMEtDa3BMbVJ2Ym1VcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYUdsc1pDQTlJSE4wWlhBdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkRTVoYldVZ1BTQnVaWGgwVG1GdFpWQnlaV1pwZUNBcklHZGxkRU52YlhCdmJtVnVkRXRsZVNoamFHbHNaQ3dnYVdrckt5azdYRzRnSUNBZ0lDQWdJQ0FnYzNWaWRISmxaVU52ZFc1MElDczlJSFJ5WVhabGNuTmxRV3hzUTJocGJHUnlaVzVKYlhCc0tHTm9hV3hrTENCdVpYaDBUbUZ0WlN3Z1kyRnNiR0poWTJzc0lIUnlZWFpsY25ObFEyOXVkR1Y0ZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUhkaGNtNXBibWNvWkdsa1YyRnlia0ZpYjNWMFRXRndjeXdnSjFWemFXNW5JRTFoY0hNZ1lYTWdZMmhwYkdSeVpXNGdhWE1nYm05MElIbGxkQ0JtZFd4c2VTQnpkWEJ3YjNKMFpXUXVJRWwwSUdseklHRnVJQ2NnS3lBblpYaHdaWEpwYldWdWRHRnNJR1psWVhSMWNtVWdkR2hoZENCdGFXZG9kQ0JpWlNCeVpXMXZkbVZrTGlCRGIyNTJaWEowSUdsMElIUnZJR0VnSnlBcklDZHpaWEYxWlc1alpTQXZJR2wwWlhKaFlteGxJRzltSUd0bGVXVmtJRkpsWVdOMFJXeGxiV1Z1ZEhNZ2FXNXpkR1ZoWkM0bktTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNCa2FXUlhZWEp1UVdKdmRYUk5ZWEJ6SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5QkpkR1Z5WVhSdmNpQjNhV3hzSUhCeWIzWnBaR1VnWlc1MGNua2dXMnNzZGwwZ2RIVndiR1Z6SUhKaGRHaGxjaUIwYUdGdUlIWmhiSFZsY3k1Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0NFb2MzUmxjQ0E5SUdsMFpYSmhkRzl5TG01bGVIUW9LU2t1Wkc5dVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQmxiblJ5ZVNBOUlITjBaWEF1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnVkSEo1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdsc1pDQTlJR1Z1ZEhKNVd6RmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkRTVoYldVZ1BTQnVaWGgwVG1GdFpWQnlaV1pwZUNBcklIZHlZWEJWYzJWeVVISnZkbWxrWldSTFpYa29aVzUwY25sYk1GMHBJQ3NnVTFWQ1UwVlFRVkpCVkU5U0lDc2daMlYwUTI5dGNHOXVaVzUwUzJWNUtHTm9hV3hrTENBd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMVluUnlaV1ZEYjNWdWRDQXJQU0IwY21GMlpYSnpaVUZzYkVOb2FXeGtjbVZ1U1cxd2JDaGphR2xzWkN3Z2JtVjRkRTVoYldVc0lHTmhiR3hpWVdOckxDQjBjbUYyWlhKelpVTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pTQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUhaaGNpQmhaR1JsYm1SMWJTQTlJQ2NuTzF4dUlDQWdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnWVdSa1pXNWtkVzBnUFNBbklFbG1JSGx2ZFNCdFpXRnVkQ0IwYnlCeVpXNWtaWElnWVNCamIyeHNaV04wYVc5dUlHOW1JR05vYVd4a2NtVnVMQ0IxYzJVZ1lXNGdZWEp5WVhrZ0p5QXJJQ2RwYm5OMFpXRmtJRzl5SUhkeVlYQWdkR2hsSUc5aWFtVmpkQ0IxYzJsdVp5QmpjbVZoZEdWR2NtRm5iV1Z1ZENodlltcGxZM1FwSUdaeWIyMGdkR2hsSUNjZ0t5QW5VbVZoWTNRZ1lXUmtMVzl1Y3k0bk8xeHVJQ0FnSUNBZ0lDQnBaaUFvWTJocGJHUnlaVzR1WDJselVtVmhZM1JGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1lXUmtaVzVrZFcwZ1BTQW5JRWwwSUd4dmIydHpJR3hwYTJVZ2VXOTFYRnduY21VZ2RYTnBibWNnWVc0Z1pXeGxiV1Z1ZENCamNtVmhkR1ZrSUdKNUlHRWdaR2xtWm1WeVpXNTBJQ2NnS3lBbmRtVnljMmx2YmlCdlppQlNaV0ZqZEM0Z1RXRnJaU0J6ZFhKbElIUnZJSFZ6WlNCdmJteDVJRzl1WlNCamIzQjVJRzltSUZKbFlXTjBMaWM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlMbU4xY25KbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdibUZ0WlNBOUlGSmxZV04wUTNWeWNtVnVkRTkzYm1WeUxtTjFjbkpsYm5RdVoyVjBUbUZ0WlNncE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNodVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaR1JsYm1SMWJTQXJQU0FuSUVOb1pXTnJJSFJvWlNCeVpXNWtaWElnYldWMGFHOWtJRzltSUdBbklDc2dibUZ0WlNBcklDZGdMaWM3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjJZWElnWTJocGJHUnlaVzVUZEhKcGJtY2dQU0JUZEhKcGJtY29ZMmhwYkdSeVpXNHBPMXh1SUNBZ0lDQWdJV1poYkhObElEOGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeUEvSUdsdWRtRnlhV0Z1ZENobVlXeHpaU3dnSjA5aWFtVmpkSE1nWVhKbElHNXZkQ0IyWVd4cFpDQmhjeUJoSUZKbFlXTjBJR05vYVd4a0lDaG1iM1Z1WkRvZ0pYTXBMaVZ6Snl3Z1kyaHBiR1J5Wlc1VGRISnBibWNnUFQwOUlDZGJiMkpxWldOMElFOWlhbVZqZEYwbklEOGdKMjlpYW1WamRDQjNhWFJvSUd0bGVYTWdleWNnS3lCUFltcGxZM1F1YTJWNWN5aGphR2xzWkhKbGJpa3VhbTlwYmlnbkxDQW5LU0FySUNkOUp5QTZJR05vYVd4a2NtVnVVM1J5YVc1bkxDQmhaR1JsYm1SMWJTa2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ6ZFdKMGNtVmxRMjkxYm5RN1hHNTlYRzVjYmk4cUtseHVJQ29nVkhKaGRtVnljMlZ6SUdOb2FXeGtjbVZ1SUhSb1lYUWdZWEpsSUhSNWNHbGpZV3hzZVNCemNHVmphV1pwWldRZ1lYTWdZSEJ5YjNCekxtTm9hV3hrY21WdVlDd2dZblYwWEc0Z0tpQnRhV2RvZENCaGJITnZJR0psSUhOd1pXTnBabWxsWkNCMGFISnZkV2RvSUdGMGRISnBZblYwWlhNNlhHNGdLbHh1SUNvZ0xTQmdkSEpoZG1WeWMyVkJiR3hEYUdsc1pISmxiaWgwYUdsekxuQnliM0J6TG1Ob2FXeGtjbVZ1TENBdUxpNHBZRnh1SUNvZ0xTQmdkSEpoZG1WeWMyVkJiR3hEYUdsc1pISmxiaWgwYUdsekxuQnliM0J6TG14bFpuUlFZVzVsYkVOb2FXeGtjbVZ1TENBdUxpNHBZRnh1SUNwY2JpQXFJRlJvWlNCZ2RISmhkbVZ5YzJWRGIyNTBaWGgwWUNCcGN5QmhiaUJ2Y0hScGIyNWhiQ0JoY21kMWJXVnVkQ0IwYUdGMElHbHpJSEJoYzNObFpDQjBhSEp2ZFdkb0lIUm9aVnh1SUNvZ1pXNTBhWEpsSUhSeVlYWmxjbk5oYkM0Z1NYUWdZMkZ1SUdKbElIVnpaV1FnZEc4Z2MzUnZjbVVnWVdOamRXMTFiR0YwYVc5dWN5QnZjaUJoYm5sMGFHbHVaeUJsYkhObElIUm9ZWFJjYmlBcUlIUm9aU0JqWVd4c1ltRmpheUJ0YVdkb2RDQm1hVzVrSUhKbGJHVjJZVzUwTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3UHlwOUlHTm9hV3hrY21WdUlFTm9hV3hrY21WdUlIUnlaV1VnYjJKcVpXTjBMbHh1SUNvZ1FIQmhjbUZ0SUhzaFpuVnVZM1JwYjI1OUlHTmhiR3hpWVdOcklGUnZJR2x1ZG05clpTQjFjRzl1SUhSeVlYWmxjbk5wYm1jZ1pXRmphQ0JqYUdsc1pDNWNiaUFxSUVCd1lYSmhiU0I3UHlwOUlIUnlZWFpsY25ObFEyOXVkR1Y0ZENCRGIyNTBaWGgwSUdadmNpQjBjbUYyWlhKellXd3VYRzRnS2lCQWNtVjBkWEp1SUhzaGJuVnRZbVZ5ZlNCVWFHVWdiblZ0WW1WeUlHOW1JR05vYVd4a2NtVnVJR2x1SUhSb2FYTWdjM1ZpZEhKbFpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2RISmhkbVZ5YzJWQmJHeERhR2xzWkhKbGJpaGphR2xzWkhKbGJpd2dZMkZzYkdKaFkyc3NJSFJ5WVhabGNuTmxRMjl1ZEdWNGRDa2dlMXh1SUNCcFppQW9ZMmhwYkdSeVpXNGdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUnlZWFpsY25ObFFXeHNRMmhwYkdSeVpXNUpiWEJzS0dOb2FXeGtjbVZ1TENBbkp5d2dZMkZzYkdKaFkyc3NJSFJ5WVhabGNuTmxRMjl1ZEdWNGRDazdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2RISmhkbVZ5YzJWQmJHeERhR2xzWkhKbGJqc2lYWDA9IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdmFsaWRhdGVET01OZXN0aW5nXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gZW1wdHlGdW5jdGlvbjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gVGhpcyB2YWxpZGF0aW9uIGNvZGUgd2FzIHdyaXR0ZW4gYmFzZWQgb24gdGhlIEhUTUw1IHBhcnNpbmcgc3BlYzpcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tc2NvcGVcbiAgLy9cbiAgLy8gTm90ZTogdGhpcyBkb2VzIG5vdCBjYXRjaCBhbGwgaW52YWxpZCBuZXN0aW5nLCBub3IgZG9lcyBpdCB0cnkgdG8gKGFzIGl0J3NcbiAgLy8gbm90IGNsZWFyIHdoYXQgcHJhY3RpY2FsIGJlbmVmaXQgZG9pbmcgc28gcHJvdmlkZXMpOyBpbnN0ZWFkLCB3ZSB3YXJuIG9ubHlcbiAgLy8gZm9yIGNhc2VzIHdoZXJlIHRoZSBwYXJzZXIgd2lsbCBnaXZlIGEgcGFyc2UgdHJlZSBkaWZmZXJpbmcgZnJvbSB3aGF0IFJlYWN0XG4gIC8vIGludGVuZGVkLiBGb3IgZXhhbXBsZSwgPGI+PGRpdj48L2Rpdj48L2I+IGlzIGludmFsaWQgYnV0IHdlIGRvbid0IHdhcm5cbiAgLy8gYmVjYXVzZSBpdCBzdGlsbCBwYXJzZXMgY29ycmVjdGx5OyB3ZSBkbyB3YXJuIGZvciBvdGhlciBjYXNlcyBsaWtlIG5lc3RlZFxuICAvLyA8cD4gdGFncyB3aGVyZSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBpbXBsaWNpdGx5IGNsb3NlcyB0aGVcbiAgLy8gZmlyc3QsIGNhdXNpbmcgYSBjb25mdXNpbmcgbWVzcy5cblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNzcGVjaWFsXG4gIHZhciBzcGVjaWFsVGFncyA9IFsnYWRkcmVzcycsICdhcHBsZXQnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2Jhc2UnLCAnYmFzZWZvbnQnLCAnYmdzb3VuZCcsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnY2VudGVyJywgJ2NvbCcsICdjb2xncm91cCcsICdkZCcsICdkZXRhaWxzJywgJ2RpcicsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnZnJhbWUnLCAnZnJhbWVzZXQnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpc2luZGV4JywgJ2xpJywgJ2xpbmsnLCAnbGlzdGluZycsICdtYWluJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ25hdicsICdub2VtYmVkJywgJ25vZnJhbWVzJywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdwJywgJ3BhcmFtJywgJ3BsYWludGV4dCcsICdwcmUnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NvdXJjZScsICdzdHlsZScsICdzdW1tYXJ5JywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RlbXBsYXRlJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3VsJywgJ3dicicsICd4bXAnXTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1zY29wZVxuICB2YXIgaW5TY29wZVRhZ3MgPSBbJ2FwcGxldCcsICdjYXB0aW9uJywgJ2h0bWwnLCAndGFibGUnLCAndGQnLCAndGgnLCAnbWFycXVlZScsICdvYmplY3QnLCAndGVtcGxhdGUnLFxuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2h0bWwtaW50ZWdyYXRpb24tcG9pbnRcbiAgLy8gVE9ETzogRGlzdGluZ3Vpc2ggYnkgbmFtZXNwYWNlIGhlcmUgLS0gZm9yIDx0aXRsZT4sIGluY2x1ZGluZyBpdCBoZXJlXG4gIC8vIGVycnMgb24gdGhlIHNpZGUgb2YgZmV3ZXIgd2FybmluZ3NcbiAgJ2ZvcmVpZ25PYmplY3QnLCAnZGVzYycsICd0aXRsZSddO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLWJ1dHRvbi1zY29wZVxuICB2YXIgYnV0dG9uU2NvcGVUYWdzID0gaW5TY29wZVRhZ3MuY29uY2F0KFsnYnV0dG9uJ10pO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2dlbmVyYXRlLWltcGxpZWQtZW5kLXRhZ3NcbiAgdmFyIGltcGxpZWRFbmRUYWdzID0gWydkZCcsICdkdCcsICdsaScsICdvcHRpb24nLCAnb3B0Z3JvdXAnLCAncCcsICdycCcsICdydCddO1xuXG4gIHZhciBlbXB0eUFuY2VzdG9ySW5mbyA9IHtcbiAgICBwYXJlbnRUYWc6IG51bGwsXG5cbiAgICBmb3JtVGFnOiBudWxsLFxuICAgIGFUYWdJblNjb3BlOiBudWxsLFxuICAgIGJ1dHRvblRhZ0luU2NvcGU6IG51bGwsXG4gICAgbm9iclRhZ0luU2NvcGU6IG51bGwsXG4gICAgcFRhZ0luQnV0dG9uU2NvcGU6IG51bGwsXG5cbiAgICBsaXN0SXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsLFxuICAgIGRsSXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsXG4gIH07XG5cbiAgdmFyIHVwZGF0ZWRBbmNlc3RvckluZm8gPSBmdW5jdGlvbiAob2xkSW5mbywgdGFnLCBpbnN0YW5jZSkge1xuICAgIHZhciBhbmNlc3RvckluZm8gPSBhc3NpZ24oe30sIG9sZEluZm8gfHwgZW1wdHlBbmNlc3RvckluZm8pO1xuICAgIHZhciBpbmZvID0geyB0YWc6IHRhZywgaW5zdGFuY2U6IGluc3RhbmNlIH07XG5cbiAgICBpZiAoaW5TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChidXR0b25TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZWUgcnVsZXMgZm9yICdsaScsICdkZCcsICdkdCcgc3RhcnQgdGFncyBpblxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBpZiAoc3BlY2lhbFRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSAmJiB0YWcgIT09ICdhZGRyZXNzJyAmJiB0YWcgIT09ICdkaXYnICYmIHRhZyAhPT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGFuY2VzdG9ySW5mby5wYXJlbnRUYWcgPSBpbmZvO1xuXG4gICAgaWYgKHRhZyA9PT0gJ2Zvcm0nKSB7XG4gICAgICBhbmNlc3RvckluZm8uZm9ybVRhZyA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdhJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2J1dHRvbicpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ25vYnInKSB7XG4gICAgICBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAncCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdsaScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2RkJyB8fCB0YWcgPT09ICdkdCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuY2VzdG9ySW5mbztcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyXG4gICAqL1xuICB2YXIgaXNUYWdWYWxpZFdpdGhQYXJlbnQgPSBmdW5jdGlvbiAodGFnLCBwYXJlbnRUYWcpIHtcbiAgICAvLyBGaXJzdCwgbGV0J3MgY2hlY2sgaWYgd2UncmUgaW4gYW4gdW51c3VhbCBwYXJzaW5nIG1vZGUuLi5cbiAgICBzd2l0Y2ggKHBhcmVudFRhZykge1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluc2VsZWN0XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICdvcHRncm91cCcgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgY2FzZSAnb3B0Z3JvdXAnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAvLyBTdHJpY3RseSBzcGVha2luZywgc2VlaW5nIGFuIDxvcHRpb24+IGRvZXNuJ3QgbWVhbiB3ZSdyZSBpbiBhIDxzZWxlY3Q+XG4gICAgICAvLyBidXRcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICcjdGV4dCc7XG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRkXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5jYXB0aW9uXG4gICAgICAvLyBObyBzcGVjaWFsIGJlaGF2aW9yIHNpbmNlIHRoZXNlIHJ1bGVzIGZhbGwgYmFjayB0byBcImluIGJvZHlcIiBtb2RlIGZvclxuICAgICAgLy8gYWxsIGV4Y2VwdCBzcGVjaWFsIHRhYmxlIG5vZGVzIHdoaWNoIGNhdXNlIGJhZCBwYXJzaW5nIGJlaGF2aW9yIGFueXdheS5cblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludHJcbiAgICAgIGNhc2UgJ3RyJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ3RoJyB8fCB0YWcgPT09ICd0ZCcgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50Ym9keVxuICAgICAgY2FzZSAndGJvZHknOlxuICAgICAgY2FzZSAndGhlYWQnOlxuICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAndHInIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY29sZ3JvdXBcbiAgICAgIGNhc2UgJ2NvbGdyb3VwJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2NvbCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50YWJsZVxuICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnY2FwdGlvbicgfHwgdGFnID09PSAnY29sZ3JvdXAnIHx8IHRhZyA9PT0gJ3Rib2R5JyB8fCB0YWcgPT09ICd0Zm9vdCcgfHwgdGFnID09PSAndGhlYWQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluaGVhZFxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdiYXNlJyB8fCB0YWcgPT09ICdiYXNlZm9udCcgfHwgdGFnID09PSAnYmdzb3VuZCcgfHwgdGFnID09PSAnbGluaycgfHwgdGFnID09PSAnbWV0YScgfHwgdGFnID09PSAndGl0bGUnIHx8IHRhZyA9PT0gJ25vc2NyaXB0JyB8fCB0YWcgPT09ICdub2ZyYW1lcycgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3MuaHRtbCN0aGUtaHRtbC1lbGVtZW50XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2hlYWQnIHx8IHRhZyA9PT0gJ2JvZHknO1xuICAgIH1cblxuICAgIC8vIFByb2JhYmx5IGluIHRoZSBcImluIGJvZHlcIiBwYXJzaW5nIG1vZGUsIHNvIHdlIG91dGxhdyBvbmx5IHRhZyBjb21ib3NcbiAgICAvLyB3aGVyZSB0aGUgcGFyc2luZyBydWxlcyBjYXVzZSBpbXBsaWNpdCBvcGVucyBvciBjbG9zZXMgdG8gYmUgYWRkZWQuXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlICdoMSc6XG4gICAgICBjYXNlICdoMic6XG4gICAgICBjYXNlICdoMyc6XG4gICAgICBjYXNlICdoNCc6XG4gICAgICBjYXNlICdoNSc6XG4gICAgICBjYXNlICdoNic6XG4gICAgICAgIHJldHVybiBwYXJlbnRUYWcgIT09ICdoMScgJiYgcGFyZW50VGFnICE9PSAnaDInICYmIHBhcmVudFRhZyAhPT0gJ2gzJyAmJiBwYXJlbnRUYWcgIT09ICdoNCcgJiYgcGFyZW50VGFnICE9PSAnaDUnICYmIHBhcmVudFRhZyAhPT0gJ2g2JztcblxuICAgICAgY2FzZSAncnAnOlxuICAgICAgY2FzZSAncnQnOlxuICAgICAgICByZXR1cm4gaW1wbGllZEVuZFRhZ3MuaW5kZXhPZihwYXJlbnRUYWcpID09PSAtMTtcblxuICAgICAgY2FzZSAnY2FwdGlvbic6XG4gICAgICBjYXNlICdjb2wnOlxuICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgY2FzZSAnZnJhbWUnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICd0Ym9keSc6XG4gICAgICBjYXNlICd0ZCc6XG4gICAgICBjYXNlICd0Zm9vdCc6XG4gICAgICBjYXNlICd0aCc6XG4gICAgICBjYXNlICd0aGVhZCc6XG4gICAgICBjYXNlICd0cic6XG4gICAgICAgIC8vIFRoZXNlIHRhZ3MgYXJlIG9ubHkgdmFsaWQgd2l0aCBhIGZldyBwYXJlbnRzIHRoYXQgaGF2ZSBzcGVjaWFsIGNoaWxkXG4gICAgICAgIC8vIHBhcnNpbmcgcnVsZXMgLS0gaWYgd2UncmUgZG93biBoZXJlLCB0aGVuIG5vbmUgb2YgdGhvc2UgbWF0Y2hlZCBhbmRcbiAgICAgICAgLy8gc28gd2UgYWxsb3cgaXQgb25seSBpZiB3ZSBkb24ndCBrbm93IHdoYXQgdGhlIHBhcmVudCBpcywgYXMgYWxsIG90aGVyXG4gICAgICAgIC8vIGNhc2VzIGFyZSBpbnZhbGlkLlxuICAgICAgICByZXR1cm4gcGFyZW50VGFnID09IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlclxuICAgKi9cbiAgdmFyIGZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcgPSBmdW5jdGlvbiAodGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnYWRkcmVzcyc6XG4gICAgICBjYXNlICdhcnRpY2xlJzpcbiAgICAgIGNhc2UgJ2FzaWRlJzpcbiAgICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOlxuICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIGNhc2UgJ2RldGFpbHMnOlxuICAgICAgY2FzZSAnZGlhbG9nJzpcbiAgICAgIGNhc2UgJ2Rpcic6XG4gICAgICBjYXNlICdkaXYnOlxuICAgICAgY2FzZSAnZGwnOlxuICAgICAgY2FzZSAnZmllbGRzZXQnOlxuICAgICAgY2FzZSAnZmlnY2FwdGlvbic6XG4gICAgICBjYXNlICdmaWd1cmUnOlxuICAgICAgY2FzZSAnZm9vdGVyJzpcbiAgICAgIGNhc2UgJ2hlYWRlcic6XG4gICAgICBjYXNlICdoZ3JvdXAnOlxuICAgICAgY2FzZSAnbWFpbic6XG4gICAgICBjYXNlICdtZW51JzpcbiAgICAgIGNhc2UgJ25hdic6XG4gICAgICBjYXNlICdvbCc6XG4gICAgICBjYXNlICdwJzpcbiAgICAgIGNhc2UgJ3NlY3Rpb24nOlxuICAgICAgY2FzZSAnc3VtbWFyeSc6XG4gICAgICBjYXNlICd1bCc6XG5cbiAgICAgIGNhc2UgJ3ByZSc6XG4gICAgICBjYXNlICdsaXN0aW5nJzpcblxuICAgICAgY2FzZSAndGFibGUnOlxuXG4gICAgICBjYXNlICdocic6XG5cbiAgICAgIGNhc2UgJ3htcCc6XG5cbiAgICAgIGNhc2UgJ2gxJzpcbiAgICAgIGNhc2UgJ2gyJzpcbiAgICAgIGNhc2UgJ2gzJzpcbiAgICAgIGNhc2UgJ2g0JzpcbiAgICAgIGNhc2UgJ2g1JzpcbiAgICAgIGNhc2UgJ2g2JzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcblxuICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZm9ybVRhZyB8fCBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2xpJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nO1xuXG4gICAgICBjYXNlICdkZCc6XG4gICAgICBjYXNlICdkdCc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3Npbmc7XG5cbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZTtcblxuICAgICAgY2FzZSAnYSc6XG4gICAgICAgIC8vIFNwZWMgc2F5cyBzb21ldGhpbmcgYWJvdXQgc3RvcmluZyBhIGxpc3Qgb2YgbWFya2VycywgYnV0IGl0IHNvdW5kc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIHRoaXMgY2hlY2suXG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGU7XG5cbiAgICAgIGNhc2UgJ25vYnInOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHaXZlbiBhIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IGluc3RhbmNlLCByZXR1cm4gYSBsaXN0IG9mIGl0cyByZWN1cnNpdmVcbiAgICogb3duZXJzLCBzdGFydGluZyBhdCB0aGUgcm9vdCBhbmQgZW5kaW5nIHdpdGggdGhlIGluc3RhbmNlIGl0c2VsZi5cbiAgICovXG4gIHZhciBmaW5kT3duZXJTdGFjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICAvKmVzbGludC1kaXNhYmxlIHNwYWNlLWFmdGVyLWtleXdvcmRzICovXG4gICAgZG8ge1xuICAgICAgLyplc2xpbnQtZW5hYmxlIHNwYWNlLWFmdGVyLWtleXdvcmRzICovXG4gICAgICBzdGFjay5wdXNoKGluc3RhbmNlKTtcbiAgICB9IHdoaWxlIChpbnN0YW5jZSA9IGluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgIHN0YWNrLnJldmVyc2UoKTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG5cbiAgdmFyIGRpZFdhcm4gPSB7fTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcgPSBmdW5jdGlvbiAoY2hpbGRUYWcsIGNoaWxkSW5zdGFuY2UsIGFuY2VzdG9ySW5mbykge1xuICAgIGFuY2VzdG9ySW5mbyA9IGFuY2VzdG9ySW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbztcbiAgICB2YXIgcGFyZW50SW5mbyA9IGFuY2VzdG9ySW5mby5wYXJlbnRUYWc7XG4gICAgdmFyIHBhcmVudFRhZyA9IHBhcmVudEluZm8gJiYgcGFyZW50SW5mby50YWc7XG5cbiAgICB2YXIgaW52YWxpZFBhcmVudCA9IGlzVGFnVmFsaWRXaXRoUGFyZW50KGNoaWxkVGFnLCBwYXJlbnRUYWcpID8gbnVsbCA6IHBhcmVudEluZm87XG4gICAgdmFyIGludmFsaWRBbmNlc3RvciA9IGludmFsaWRQYXJlbnQgPyBudWxsIDogZmluZEludmFsaWRBbmNlc3RvckZvclRhZyhjaGlsZFRhZywgYW5jZXN0b3JJbmZvKTtcbiAgICB2YXIgcHJvYmxlbWF0aWMgPSBpbnZhbGlkUGFyZW50IHx8IGludmFsaWRBbmNlc3RvcjtcblxuICAgIGlmIChwcm9ibGVtYXRpYykge1xuICAgICAgdmFyIGFuY2VzdG9yVGFnID0gcHJvYmxlbWF0aWMudGFnO1xuICAgICAgdmFyIGFuY2VzdG9ySW5zdGFuY2UgPSBwcm9ibGVtYXRpYy5pbnN0YW5jZTtcblxuICAgICAgdmFyIGNoaWxkT3duZXIgPSBjaGlsZEluc3RhbmNlICYmIGNoaWxkSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBhbmNlc3Rvck93bmVyID0gYW5jZXN0b3JJbnN0YW5jZSAmJiBhbmNlc3Rvckluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG5cbiAgICAgIHZhciBjaGlsZE93bmVycyA9IGZpbmRPd25lclN0YWNrKGNoaWxkT3duZXIpO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXJzID0gZmluZE93bmVyU3RhY2soYW5jZXN0b3JPd25lcik7XG5cbiAgICAgIHZhciBtaW5TdGFja0xlbiA9IE1hdGgubWluKGNoaWxkT3duZXJzLmxlbmd0aCwgYW5jZXN0b3JPd25lcnMubGVuZ3RoKTtcbiAgICAgIHZhciBpO1xuXG4gICAgICB2YXIgZGVlcGVzdENvbW1vbiA9IC0xO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG1pblN0YWNrTGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkT3duZXJzW2ldID09PSBhbmNlc3Rvck93bmVyc1tpXSkge1xuICAgICAgICAgIGRlZXBlc3RDb21tb24gPSBpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBVTktOT1dOID0gJyh1bmtub3duKSc7XG4gICAgICB2YXIgY2hpbGRPd25lck5hbWVzID0gY2hpbGRPd25lcnMuc2xpY2UoZGVlcGVzdENvbW1vbiArIDEpLm1hcChmdW5jdGlvbiAoaW5zdCkge1xuICAgICAgICByZXR1cm4gaW5zdC5nZXROYW1lKCkgfHwgVU5LTk9XTjtcbiAgICAgIH0pO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXJOYW1lcyA9IGFuY2VzdG9yT3duZXJzLnNsaWNlKGRlZXBlc3RDb21tb24gKyAxKS5tYXAoZnVuY3Rpb24gKGluc3QpIHtcbiAgICAgICAgcmV0dXJuIGluc3QuZ2V0TmFtZSgpIHx8IFVOS05PV047XG4gICAgICB9KTtcbiAgICAgIHZhciBvd25lckluZm8gPSBbXS5jb25jYXQoXG4gICAgICAvLyBJZiB0aGUgcGFyZW50IGFuZCBjaGlsZCBpbnN0YW5jZXMgaGF2ZSBhIGNvbW1vbiBvd25lciBhbmNlc3Rvciwgc3RhcnRcbiAgICAgIC8vIHdpdGggdGhhdCAtLSBvdGhlcndpc2Ugd2UganVzdCBzdGFydCB3aXRoIHRoZSBwYXJlbnQncyBvd25lcnMuXG4gICAgICBkZWVwZXN0Q29tbW9uICE9PSAtMSA/IGNoaWxkT3duZXJzW2RlZXBlc3RDb21tb25dLmdldE5hbWUoKSB8fCBVTktOT1dOIDogW10sIGFuY2VzdG9yT3duZXJOYW1lcywgYW5jZXN0b3JUYWcsXG4gICAgICAvLyBJZiB3ZSdyZSB3YXJuaW5nIGFib3V0IGFuIGludmFsaWQgKG5vbi1wYXJlbnQpIGFuY2VzdHJ5LCBhZGQgJy4uLidcbiAgICAgIGludmFsaWRBbmNlc3RvciA/IFsnLi4uJ10gOiBbXSwgY2hpbGRPd25lck5hbWVzLCBjaGlsZFRhZykuam9pbignID4gJyk7XG5cbiAgICAgIHZhciB3YXJuS2V5ID0gISFpbnZhbGlkUGFyZW50ICsgJ3wnICsgY2hpbGRUYWcgKyAnfCcgKyBhbmNlc3RvclRhZyArICd8JyArIG93bmVySW5mbztcbiAgICAgIGlmIChkaWRXYXJuW3dhcm5LZXldKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRpZFdhcm5bd2FybktleV0gPSB0cnVlO1xuXG4gICAgICBpZiAoaW52YWxpZFBhcmVudCkge1xuICAgICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgICBpZiAoYW5jZXN0b3JUYWcgPT09ICd0YWJsZScgJiYgY2hpbGRUYWcgPT09ICd0cicpIHtcbiAgICAgICAgICBpbmZvICs9ICcgQWRkIGEgPHRib2R5PiB0byB5b3VyIGNvZGUgdG8gbWF0Y2ggdGhlIERPTSB0cmVlIGdlbmVyYXRlZCBieSAnICsgJ3RoZSBicm93c2VyLic7XG4gICAgICAgIH1cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogPCVzPiBjYW5ub3QgYXBwZWFyIGFzIGEgY2hpbGQgb2YgPCVzPi4gJyArICdTZWUgJXMuJXMnLCBjaGlsZFRhZywgYW5jZXN0b3JUYWcsIG93bmVySW5mbywgaW5mbykgOiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ3ZhbGlkYXRlRE9NTmVzdGluZyguLi4pOiA8JXM+IGNhbm5vdCBhcHBlYXIgYXMgYSBkZXNjZW5kYW50IG9mICcgKyAnPCVzPi4gU2VlICVzLicsIGNoaWxkVGFnLCBhbmNlc3RvclRhZywgb3duZXJJbmZvKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFsaWRhdGVET01OZXN0aW5nLmFuY2VzdG9ySW5mb0NvbnRleHRLZXkgPSAnX192YWxpZGF0ZURPTU5lc3RpbmdfYW5jZXN0b3JJbmZvJCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm87XG5cbiAgLy8gRm9yIHRlc3RpbmdcbiAgdmFsaWRhdGVET01OZXN0aW5nLmlzVGFnVmFsaWRJbkNvbnRleHQgPSBmdW5jdGlvbiAodGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8ucGFyZW50VGFnO1xuICAgIHZhciBwYXJlbnRUYWcgPSBwYXJlbnRJbmZvICYmIHBhcmVudEluZm8udGFnO1xuICAgIHJldHVybiBpc1RhZ1ZhbGlkV2l0aFBhcmVudCh0YWcsIHBhcmVudFRhZykgJiYgIWZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcodGFnLCBhbmNlc3RvckluZm8pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkYXRlRE9NTmVzdGluZztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZkbUZzYVdSaGRHVkVUMDFPWlhOMGFXNW5MbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnZG1Gc2FXUmhkR1ZFVDAxT1pYTjBhVzVuWEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1lYTnphV2R1SUQwZ2NtVnhkV2x5WlNnbkxpOVBZbXBsWTNRdVlYTnphV2R1SnlrN1hHNTJZWElnWlcxd2RIbEdkVzVqZEdsdmJpQTlJSEpsY1hWcGNtVW9KMlppYW5NdmJHbGlMMlZ0Y0hSNVJuVnVZM1JwYjI0bktUdGNiblpoY2lCM1lYSnVhVzVuSUQwZ2NtVnhkV2x5WlNnblptSnFjeTlzYVdJdmQyRnlibWx1WnljcE8xeHVYRzUyWVhJZ2RtRnNhV1JoZEdWRVQwMU9aWE4wYVc1bklEMGdaVzF3ZEhsR2RXNWpkR2x2Ymp0Y2JseHVhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnTHk4Z1ZHaHBjeUIyWVd4cFpHRjBhVzl1SUdOdlpHVWdkMkZ6SUhkeWFYUjBaVzRnWW1GelpXUWdiMjRnZEdobElFaFVUVXcxSUhCaGNuTnBibWNnYzNCbFl6cGNiaUFnTHk4Z2FIUjBjSE02THk5b2RHMXNMbk53WldNdWQyaGhkSGRuTG05eVp5OXRkV3gwYVhCaFoyVXZjM2x1ZEdGNExtaDBiV3dqYUdGekxXRnVMV1ZzWlcxbGJuUXRhVzR0YzJOdmNHVmNiaUFnTHk5Y2JpQWdMeThnVG05MFpUb2dkR2hwY3lCa2IyVnpJRzV2ZENCallYUmphQ0JoYkd3Z2FXNTJZV3hwWkNCdVpYTjBhVzVuTENCdWIzSWdaRzlsY3lCcGRDQjBjbmtnZEc4Z0tHRnpJR2wwSjNOY2JpQWdMeThnYm05MElHTnNaV0Z5SUhkb1lYUWdjSEpoWTNScFkyRnNJR0psYm1WbWFYUWdaRzlwYm1jZ2MyOGdjSEp2ZG1sa1pYTXBPeUJwYm5OMFpXRmtMQ0IzWlNCM1lYSnVJRzl1YkhsY2JpQWdMeThnWm05eUlHTmhjMlZ6SUhkb1pYSmxJSFJvWlNCd1lYSnpaWElnZDJsc2JDQm5hWFpsSUdFZ2NHRnljMlVnZEhKbFpTQmthV1ptWlhKcGJtY2dabkp2YlNCM2FHRjBJRkpsWVdOMFhHNGdJQzh2SUdsdWRHVnVaR1ZrTGlCR2IzSWdaWGhoYlhCc1pTd2dQR0krUEdScGRqNDhMMlJwZGo0OEwySStJR2x6SUdsdWRtRnNhV1FnWW5WMElIZGxJR1J2YmlkMElIZGhjbTVjYmlBZ0x5OGdZbVZqWVhWelpTQnBkQ0J6ZEdsc2JDQndZWEp6WlhNZ1kyOXljbVZqZEd4NU95QjNaU0JrYnlCM1lYSnVJR1p2Y2lCdmRHaGxjaUJqWVhObGN5QnNhV3RsSUc1bGMzUmxaRnh1SUNBdkx5QThjRDRnZEdGbmN5QjNhR1Z5WlNCMGFHVWdZbVZuYVc1dWFXNW5JRzltSUhSb1pTQnpaV052Ym1RZ1pXeGxiV1Z1ZENCcGJYQnNhV05wZEd4NUlHTnNiM05sY3lCMGFHVmNiaUFnTHk4Z1ptbHljM1FzSUdOaGRYTnBibWNnWVNCamIyNW1kWE5wYm1jZ2JXVnpjeTVjYmx4dUlDQXZMeUJvZEhSd2N6b3ZMMmgwYld3dWMzQmxZeTUzYUdGMGQyY3ViM0puTDIxMWJIUnBjR0ZuWlM5emVXNTBZWGd1YUhSdGJDTnpjR1ZqYVdGc1hHNGdJSFpoY2lCemNHVmphV0ZzVkdGbmN5QTlJRnNuWVdSa2NtVnpjeWNzSUNkaGNIQnNaWFFuTENBbllYSmxZU2NzSUNkaGNuUnBZMnhsSnl3Z0oyRnphV1JsSnl3Z0oySmhjMlVuTENBblltRnpaV1p2Ym5RbkxDQW5ZbWR6YjNWdVpDY3NJQ2RpYkc5amEzRjFiM1JsSnl3Z0oySnZaSGtuTENBblluSW5MQ0FuWW5WMGRHOXVKeXdnSjJOaGNIUnBiMjRuTENBblkyVnVkR1Z5Snl3Z0oyTnZiQ2NzSUNkamIyeG5jbTkxY0Njc0lDZGtaQ2NzSUNka1pYUmhhV3h6Snl3Z0oyUnBjaWNzSUNka2FYWW5MQ0FuWkd3bkxDQW5aSFFuTENBblpXMWlaV1FuTENBblptbGxiR1J6WlhRbkxDQW5abWxuWTJGd2RHbHZiaWNzSUNkbWFXZDFjbVVuTENBblptOXZkR1Z5Snl3Z0oyWnZjbTBuTENBblpuSmhiV1VuTENBblpuSmhiV1Z6WlhRbkxDQW5hREVuTENBbmFESW5MQ0FuYURNbkxDQW5hRFFuTENBbmFEVW5MQ0FuYURZbkxDQW5hR1ZoWkNjc0lDZG9aV0ZrWlhJbkxDQW5hR2R5YjNWd0p5d2dKMmh5Snl3Z0oyaDBiV3duTENBbmFXWnlZVzFsSnl3Z0oybHRaeWNzSUNkcGJuQjFkQ2NzSUNkcGMybHVaR1Y0Snl3Z0oyeHBKeXdnSjJ4cGJtc25MQ0FuYkdsemRHbHVaeWNzSUNkdFlXbHVKeXdnSjIxaGNuRjFaV1VuTENBbmJXVnVkU2NzSUNkdFpXNTFhWFJsYlNjc0lDZHRaWFJoSnl3Z0oyNWhkaWNzSUNkdWIyVnRZbVZrSnl3Z0oyNXZabkpoYldWekp5d2dKMjV2YzJOeWFYQjBKeXdnSjI5aWFtVmpkQ2NzSUNkdmJDY3NJQ2R3Snl3Z0ozQmhjbUZ0Snl3Z0ozQnNZV2x1ZEdWNGRDY3NJQ2R3Y21VbkxDQW5jMk55YVhCMEp5d2dKM05sWTNScGIyNG5MQ0FuYzJWc1pXTjBKeXdnSjNOdmRYSmpaU2NzSUNkemRIbHNaU2NzSUNkemRXMXRZWEo1Snl3Z0ozUmhZbXhsSnl3Z0ozUmliMlI1Snl3Z0ozUmtKeXdnSjNSbGJYQnNZWFJsSnl3Z0ozUmxlSFJoY21WaEp5d2dKM1JtYjI5MEp5d2dKM1JvSnl3Z0ozUm9aV0ZrSnl3Z0ozUnBkR3hsSnl3Z0ozUnlKeXdnSjNSeVlXTnJKeXdnSjNWc0p5d2dKM2RpY2ljc0lDZDRiWEFuWFR0Y2JseHVJQ0F2THlCb2RIUndjem92TDJoMGJXd3VjM0JsWXk1M2FHRjBkMmN1YjNKbkwyMTFiSFJwY0dGblpTOXplVzUwWVhndWFIUnRiQ05vWVhNdFlXNHRaV3hsYldWdWRDMXBiaTF6WTI5d1pWeHVJQ0IyWVhJZ2FXNVRZMjl3WlZSaFozTWdQU0JiSjJGd2NHeGxkQ2NzSUNkallYQjBhVzl1Snl3Z0oyaDBiV3duTENBbmRHRmliR1VuTENBbmRHUW5MQ0FuZEdnbkxDQW5iV0Z5Y1hWbFpTY3NJQ2R2WW1wbFkzUW5MQ0FuZEdWdGNHeGhkR1VuTEZ4dVhHNGdJQzh2SUdoMGRIQnpPaTh2YUhSdGJDNXpjR1ZqTG5kb1lYUjNaeTV2Y21jdmJYVnNkR2x3WVdkbEwzTjViblJoZUM1b2RHMXNJMmgwYld3dGFXNTBaV2R5WVhScGIyNHRjRzlwYm5SY2JpQWdMeThnVkU5RVR6b2dSR2x6ZEdsdVozVnBjMmdnWW5rZ2JtRnRaWE53WVdObElHaGxjbVVnTFMwZ1ptOXlJRHgwYVhSc1pUNHNJR2x1WTJ4MVpHbHVaeUJwZENCb1pYSmxYRzRnSUM4dklHVnljbk1nYjI0Z2RHaGxJSE5wWkdVZ2IyWWdabVYzWlhJZ2QyRnlibWx1WjNOY2JpQWdKMlp2Y21WcFoyNVBZbXBsWTNRbkxDQW5aR1Z6WXljc0lDZDBhWFJzWlNkZE8xeHVYRzRnSUM4dklHaDBkSEJ6T2k4dmFIUnRiQzV6Y0dWakxuZG9ZWFIzWnk1dmNtY3ZiWFZzZEdsd1lXZGxMM041Ym5SaGVDNW9kRzFzSTJoaGN5MWhiaTFsYkdWdFpXNTBMV2x1TFdKMWRIUnZiaTF6WTI5d1pWeHVJQ0IyWVhJZ1luVjBkRzl1VTJOdmNHVlVZV2R6SUQwZ2FXNVRZMjl3WlZSaFozTXVZMjl1WTJGMEtGc25ZblYwZEc5dUoxMHBPMXh1WEc0Z0lDOHZJR2gwZEhCek9pOHZhSFJ0YkM1emNHVmpMbmRvWVhSM1p5NXZjbWN2YlhWc2RHbHdZV2RsTDNONWJuUmhlQzVvZEcxc0kyZGxibVZ5WVhSbExXbHRjR3hwWldRdFpXNWtMWFJoWjNOY2JpQWdkbUZ5SUdsdGNHeHBaV1JGYm1SVVlXZHpJRDBnV3lka1pDY3NJQ2RrZENjc0lDZHNhU2NzSUNkdmNIUnBiMjRuTENBbmIzQjBaM0p2ZFhBbkxDQW5jQ2NzSUNkeWNDY3NJQ2R5ZENkZE8xeHVYRzRnSUhaaGNpQmxiWEIwZVVGdVkyVnpkRzl5U1c1bWJ5QTlJSHRjYmlBZ0lDQndZWEpsYm5SVVlXYzZJRzUxYkd3c1hHNWNiaUFnSUNCbWIzSnRWR0ZuT2lCdWRXeHNMRnh1SUNBZ0lHRlVZV2RKYmxOamIzQmxPaUJ1ZFd4c0xGeHVJQ0FnSUdKMWRIUnZibFJoWjBsdVUyTnZjR1U2SUc1MWJHd3NYRzRnSUNBZ2JtOWljbFJoWjBsdVUyTnZjR1U2SUc1MWJHd3NYRzRnSUNBZ2NGUmhaMGx1UW5WMGRHOXVVMk52Y0dVNklHNTFiR3dzWEc1Y2JpQWdJQ0JzYVhOMFNYUmxiVlJoWjBGMWRHOWpiRzl6YVc1bk9pQnVkV3hzTEZ4dUlDQWdJR1JzU1hSbGJWUmhaMEYxZEc5amJHOXphVzVuT2lCdWRXeHNYRzRnSUgwN1hHNWNiaUFnZG1GeUlIVndaR0YwWldSQmJtTmxjM1J2Y2tsdVptOGdQU0JtZFc1amRHbHZiaUFvYjJ4a1NXNW1ieXdnZEdGbkxDQnBibk4wWVc1alpTa2dlMXh1SUNBZ0lIWmhjaUJoYm1ObGMzUnZja2x1Wm04Z1BTQmhjM05wWjI0b2UzMHNJRzlzWkVsdVptOGdmSHdnWlcxd2RIbEJibU5sYzNSdmNrbHVabThwTzF4dUlDQWdJSFpoY2lCcGJtWnZJRDBnZXlCMFlXYzZJSFJoWnl3Z2FXNXpkR0Z1WTJVNklHbHVjM1JoYm1ObElIMDdYRzVjYmlBZ0lDQnBaaUFvYVc1VFkyOXdaVlJoWjNNdWFXNWtaWGhQWmloMFlXY3BJQ0U5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdZVzVqWlhOMGIzSkpibVp2TG1GVVlXZEpibE5qYjNCbElEMGdiblZzYkR0Y2JpQWdJQ0FnSUdGdVkyVnpkRzl5U1c1bWJ5NWlkWFIwYjI1VVlXZEpibE5qYjNCbElEMGdiblZzYkR0Y2JpQWdJQ0FnSUdGdVkyVnpkRzl5U1c1bWJ5NXViMkp5VkdGblNXNVRZMjl3WlNBOUlHNTFiR3c3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hpZFhSMGIyNVRZMjl3WlZSaFozTXVhVzVrWlhoUFppaDBZV2NwSUNFOVBTQXRNU2tnZTF4dUlDQWdJQ0FnWVc1alpYTjBiM0pKYm1adkxuQlVZV2RKYmtKMWRIUnZibE5qYjNCbElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVFpXVWdjblZzWlhNZ1ptOXlJQ2RzYVNjc0lDZGtaQ2NzSUNka2RDY2djM1JoY25RZ2RHRm5jeUJwYmx4dUlDQWdJQzh2SUdoMGRIQnpPaTh2YUhSdGJDNXpjR1ZqTG5kb1lYUjNaeTV2Y21jdmJYVnNkR2x3WVdkbEwzTjViblJoZUM1b2RHMXNJM0JoY25OcGJtY3RiV0ZwYmkxcGJtSnZaSGxjYmlBZ0lDQnBaaUFvYzNCbFkybGhiRlJoWjNNdWFXNWtaWGhQWmloMFlXY3BJQ0U5UFNBdE1TQW1KaUIwWVdjZ0lUMDlJQ2RoWkdSeVpYTnpKeUFtSmlCMFlXY2dJVDA5SUNka2FYWW5JQ1ltSUhSaFp5QWhQVDBnSjNBbktTQjdYRzRnSUNBZ0lDQmhibU5sYzNSdmNrbHVabTh1YkdsemRFbDBaVzFVWVdkQmRYUnZZMnh2YzJsdVp5QTlJRzUxYkd3N1hHNGdJQ0FnSUNCaGJtTmxjM1J2Y2tsdVptOHVaR3hKZEdWdFZHRm5RWFYwYjJOc2IzTnBibWNnUFNCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHRnVZMlZ6ZEc5eVNXNW1ieTV3WVhKbGJuUlVZV2NnUFNCcGJtWnZPMXh1WEc0Z0lDQWdhV1lnS0hSaFp5QTlQVDBnSjJadmNtMG5LU0I3WEc0Z0lDQWdJQ0JoYm1ObGMzUnZja2x1Wm04dVptOXliVlJoWnlBOUlHbHVabTg3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwWVdjZ1BUMDlJQ2RoSnlrZ2UxeHVJQ0FnSUNBZ1lXNWpaWE4wYjNKSmJtWnZMbUZVWVdkSmJsTmpiM0JsSUQwZ2FXNW1ienRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJoWnlBOVBUMGdKMkoxZEhSdmJpY3BJSHRjYmlBZ0lDQWdJR0Z1WTJWemRHOXlTVzVtYnk1aWRYUjBiMjVVWVdkSmJsTmpiM0JsSUQwZ2FXNW1ienRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJoWnlBOVBUMGdKMjV2WW5JbktTQjdYRzRnSUNBZ0lDQmhibU5sYzNSdmNrbHVabTh1Ym05aWNsUmhaMGx1VTJOdmNHVWdQU0JwYm1adk8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RHRm5JRDA5UFNBbmNDY3BJSHRjYmlBZ0lDQWdJR0Z1WTJWemRHOXlTVzVtYnk1d1ZHRm5TVzVDZFhSMGIyNVRZMjl3WlNBOUlHbHVabTg3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwWVdjZ1BUMDlJQ2RzYVNjcElIdGNiaUFnSUNBZ0lHRnVZMlZ6ZEc5eVNXNW1ieTVzYVhOMFNYUmxiVlJoWjBGMWRHOWpiRzl6YVc1bklEMGdhVzVtYnp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSaFp5QTlQVDBnSjJSa0p5QjhmQ0IwWVdjZ1BUMDlJQ2RrZENjcElIdGNiaUFnSUNBZ0lHRnVZMlZ6ZEc5eVNXNW1ieTVrYkVsMFpXMVVZV2RCZFhSdlkyeHZjMmx1WnlBOUlHbHVabTg3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHRnVZMlZ6ZEc5eVNXNW1ienRjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCM2FHVjBhR1Z5WEc0Z0lDQXFMMXh1SUNCMllYSWdhWE5VWVdkV1lXeHBaRmRwZEdoUVlYSmxiblFnUFNCbWRXNWpkR2x2YmlBb2RHRm5MQ0J3WVhKbGJuUlVZV2NwSUh0Y2JpQWdJQ0F2THlCR2FYSnpkQ3dnYkdWMEozTWdZMmhsWTJzZ2FXWWdkMlVuY21VZ2FXNGdZVzRnZFc1MWMzVmhiQ0J3WVhKemFXNW5JRzF2WkdVdUxpNWNiaUFnSUNCemQybDBZMmdnS0hCaGNtVnVkRlJoWnlrZ2UxeHVJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OW9kRzFzTG5Od1pXTXVkMmhoZEhkbkxtOXlaeTl0ZFd4MGFYQmhaMlV2YzNsdWRHRjRMbWgwYld3amNHRnljMmx1WnkxdFlXbHVMV2x1YzJWc1pXTjBYRzRnSUNBZ0lDQmpZWE5sSUNkelpXeGxZM1FuT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdGbklEMDlQU0FuYjNCMGFXOXVKeUI4ZkNCMFlXY2dQVDA5SUNkdmNIUm5jbTkxY0NjZ2ZId2dkR0ZuSUQwOVBTQW5JM1JsZUhRbk8xeHVJQ0FnSUNBZ1kyRnpaU0FuYjNCMFozSnZkWEFuT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdGbklEMDlQU0FuYjNCMGFXOXVKeUI4ZkNCMFlXY2dQVDA5SUNjamRHVjRkQ2M3WEc0Z0lDQWdJQ0F2THlCVGRISnBZM1JzZVNCemNHVmhhMmx1Wnl3Z2MyVmxhVzVuSUdGdUlEeHZjSFJwYjI0K0lHUnZaWE51SjNRZ2JXVmhiaUIzWlNkeVpTQnBiaUJoSUR4elpXeGxZM1ErWEc0Z0lDQWdJQ0F2THlCaWRYUmNiaUFnSUNBZ0lHTmhjMlVnSjI5d2RHbHZiaWM2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwWVdjZ1BUMDlJQ2NqZEdWNGRDYzdYRzVjYmlBZ0lDQWdJQzh2SUdoMGRIQnpPaTh2YUhSdGJDNXpjR1ZqTG5kb1lYUjNaeTV2Y21jdmJYVnNkR2x3WVdkbEwzTjViblJoZUM1b2RHMXNJM0JoY25OcGJtY3RiV0ZwYmkxcGJuUmtYRzRnSUNBZ0lDQXZMeUJvZEhSd2N6b3ZMMmgwYld3dWMzQmxZeTUzYUdGMGQyY3ViM0puTDIxMWJIUnBjR0ZuWlM5emVXNTBZWGd1YUhSdGJDTndZWEp6YVc1bkxXMWhhVzR0YVc1allYQjBhVzl1WEc0Z0lDQWdJQ0F2THlCT2J5QnpjR1ZqYVdGc0lHSmxhR0YyYVc5eUlITnBibU5sSUhSb1pYTmxJSEoxYkdWeklHWmhiR3dnWW1GamF5QjBieUJjSW1sdUlHSnZaSGxjSWlCdGIyUmxJR1p2Y2x4dUlDQWdJQ0FnTHk4Z1lXeHNJR1Y0WTJWd2RDQnpjR1ZqYVdGc0lIUmhZbXhsSUc1dlpHVnpJSGRvYVdOb0lHTmhkWE5sSUdKaFpDQndZWEp6YVc1bklHSmxhR0YyYVc5eUlHRnVlWGRoZVM1Y2JseHVJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OW9kRzFzTG5Od1pXTXVkMmhoZEhkbkxtOXlaeTl0ZFd4MGFYQmhaMlV2YzNsdWRHRjRMbWgwYld3amNHRnljMmx1WnkxdFlXbHVMV2x1ZEhKY2JpQWdJQ0FnSUdOaGMyVWdKM1J5SnpwY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSaFp5QTlQVDBnSjNSb0p5QjhmQ0IwWVdjZ1BUMDlJQ2QwWkNjZ2ZId2dkR0ZuSUQwOVBTQW5jM1I1YkdVbklIeDhJSFJoWnlBOVBUMGdKM05qY21sd2RDY2dmSHdnZEdGbklEMDlQU0FuZEdWdGNHeGhkR1VuTzF4dVhHNGdJQ0FnSUNBdkx5Qm9kSFJ3Y3pvdkwyaDBiV3d1YzNCbFl5NTNhR0YwZDJjdWIzSm5MMjExYkhScGNHRm5aUzl6ZVc1MFlYZ3VhSFJ0YkNOd1lYSnphVzVuTFcxaGFXNHRhVzUwWW05a2VWeHVJQ0FnSUNBZ1kyRnpaU0FuZEdKdlpIa25PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRHaGxZV1FuT2x4dUlDQWdJQ0FnWTJGelpTQW5kR1p2YjNRbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHRm5JRDA5UFNBbmRISW5JSHg4SUhSaFp5QTlQVDBnSjNOMGVXeGxKeUI4ZkNCMFlXY2dQVDA5SUNkelkzSnBjSFFuSUh4OElIUmhaeUE5UFQwZ0ozUmxiWEJzWVhSbEp6dGNibHh1SUNBZ0lDQWdMeThnYUhSMGNITTZMeTlvZEcxc0xuTndaV011ZDJoaGRIZG5MbTl5Wnk5dGRXeDBhWEJoWjJVdmMzbHVkR0Y0TG1oMGJXd2pjR0Z5YzJsdVp5MXRZV2x1TFdsdVkyOXNaM0p2ZFhCY2JpQWdJQ0FnSUdOaGMyVWdKMk52YkdkeWIzVndKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJoWnlBOVBUMGdKMk52YkNjZ2ZId2dkR0ZuSUQwOVBTQW5kR1Z0Y0d4aGRHVW5PMXh1WEc0Z0lDQWdJQ0F2THlCb2RIUndjem92TDJoMGJXd3VjM0JsWXk1M2FHRjBkMmN1YjNKbkwyMTFiSFJwY0dGblpTOXplVzUwWVhndWFIUnRiQ053WVhKemFXNW5MVzFoYVc0dGFXNTBZV0pzWlZ4dUlDQWdJQ0FnWTJGelpTQW5kR0ZpYkdVbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHRm5JRDA5UFNBblkyRndkR2x2YmljZ2ZId2dkR0ZuSUQwOVBTQW5ZMjlzWjNKdmRYQW5JSHg4SUhSaFp5QTlQVDBnSjNSaWIyUjVKeUI4ZkNCMFlXY2dQVDA5SUNkMFptOXZkQ2NnZkh3Z2RHRm5JRDA5UFNBbmRHaGxZV1FuSUh4OElIUmhaeUE5UFQwZ0ozTjBlV3hsSnlCOGZDQjBZV2NnUFQwOUlDZHpZM0pwY0hRbklIeDhJSFJoWnlBOVBUMGdKM1JsYlhCc1lYUmxKenRjYmx4dUlDQWdJQ0FnTHk4Z2FIUjBjSE02THk5b2RHMXNMbk53WldNdWQyaGhkSGRuTG05eVp5OXRkV3gwYVhCaFoyVXZjM2x1ZEdGNExtaDBiV3dqY0dGeWMybHVaeTF0WVdsdUxXbHVhR1ZoWkZ4dUlDQWdJQ0FnWTJGelpTQW5hR1ZoWkNjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMFlXY2dQVDA5SUNkaVlYTmxKeUI4ZkNCMFlXY2dQVDA5SUNkaVlYTmxabTl1ZENjZ2ZId2dkR0ZuSUQwOVBTQW5ZbWR6YjNWdVpDY2dmSHdnZEdGbklEMDlQU0FuYkdsdWF5Y2dmSHdnZEdGbklEMDlQU0FuYldWMFlTY2dmSHdnZEdGbklEMDlQU0FuZEdsMGJHVW5JSHg4SUhSaFp5QTlQVDBnSjI1dmMyTnlhWEIwSnlCOGZDQjBZV2NnUFQwOUlDZHViMlp5WVcxbGN5Y2dmSHdnZEdGbklEMDlQU0FuYzNSNWJHVW5JSHg4SUhSaFp5QTlQVDBnSjNOamNtbHdkQ2NnZkh3Z2RHRm5JRDA5UFNBbmRHVnRjR3hoZEdVbk8xeHVYRzRnSUNBZ0lDQXZMeUJvZEhSd2N6b3ZMMmgwYld3dWMzQmxZeTUzYUdGMGQyY3ViM0puTDIxMWJIUnBjR0ZuWlM5elpXMWhiblJwWTNNdWFIUnRiQ04wYUdVdGFIUnRiQzFsYkdWdFpXNTBYRzRnSUNBZ0lDQmpZWE5sSUNkb2RHMXNKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJoWnlBOVBUMGdKMmhsWVdRbklIeDhJSFJoWnlBOVBUMGdKMkp2Wkhrbk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklGQnliMkpoWW14NUlHbHVJSFJvWlNCY0ltbHVJR0p2WkhsY0lpQndZWEp6YVc1bklHMXZaR1VzSUhOdklIZGxJRzkxZEd4aGR5QnZibXg1SUhSaFp5QmpiMjFpYjNOY2JpQWdJQ0F2THlCM2FHVnlaU0IwYUdVZ2NHRnljMmx1WnlCeWRXeGxjeUJqWVhWelpTQnBiWEJzYVdOcGRDQnZjR1Z1Y3lCdmNpQmpiRzl6WlhNZ2RHOGdZbVVnWVdSa1pXUXVYRzRnSUNBZ0x5OGdhSFIwY0hNNkx5OW9kRzFzTG5Od1pXTXVkMmhoZEhkbkxtOXlaeTl0ZFd4MGFYQmhaMlV2YzNsdWRHRjRMbWgwYld3amNHRnljMmx1WnkxdFlXbHVMV2x1WW05a2VWeHVJQ0FnSUhOM2FYUmphQ0FvZEdGbktTQjdYRzRnSUNBZ0lDQmpZWE5sSUNkb01TYzZYRzRnSUNBZ0lDQmpZWE5sSUNkb01pYzZYRzRnSUNBZ0lDQmpZWE5sSUNkb015YzZYRzRnSUNBZ0lDQmpZWE5sSUNkb05DYzZYRzRnSUNBZ0lDQmpZWE5sSUNkb05TYzZYRzRnSUNBZ0lDQmpZWE5sSUNkb05pYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndZWEpsYm5SVVlXY2dJVDA5SUNkb01TY2dKaVlnY0dGeVpXNTBWR0ZuSUNFOVBTQW5hREluSUNZbUlIQmhjbVZ1ZEZSaFp5QWhQVDBnSjJnekp5QW1KaUJ3WVhKbGJuUlVZV2NnSVQwOUlDZG9OQ2NnSmlZZ2NHRnlaVzUwVkdGbklDRTlQU0FuYURVbklDWW1JSEJoY21WdWRGUmhaeUFoUFQwZ0oyZzJKenRjYmx4dUlDQWdJQ0FnWTJGelpTQW5jbkFuT2x4dUlDQWdJQ0FnWTJGelpTQW5jblFuT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYVcxd2JHbGxaRVZ1WkZSaFozTXVhVzVrWlhoUFppaHdZWEpsYm5SVVlXY3BJRDA5UFNBdE1UdGNibHh1SUNBZ0lDQWdZMkZ6WlNBblkyRndkR2x2YmljNlhHNGdJQ0FnSUNCallYTmxJQ2RqYjJ3bk9seHVJQ0FnSUNBZ1kyRnpaU0FuWTI5c1ozSnZkWEFuT2x4dUlDQWdJQ0FnWTJGelpTQW5abkpoYldVbk9seHVJQ0FnSUNBZ1kyRnpaU0FuYUdWaFpDYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMFltOWtlU2M2WEc0Z0lDQWdJQ0JqWVhObElDZDBaQ2M2WEc0Z0lDQWdJQ0JqWVhObElDZDBabTl2ZENjNlhHNGdJQ0FnSUNCallYTmxJQ2QwYUNjNlhHNGdJQ0FnSUNCallYTmxJQ2QwYUdWaFpDYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMGNpYzZYRzRnSUNBZ0lDQWdJQzh2SUZSb1pYTmxJSFJoWjNNZ1lYSmxJRzl1YkhrZ2RtRnNhV1FnZDJsMGFDQmhJR1psZHlCd1lYSmxiblJ6SUhSb1lYUWdhR0YyWlNCemNHVmphV0ZzSUdOb2FXeGtYRzRnSUNBZ0lDQWdJQzh2SUhCaGNuTnBibWNnY25Wc1pYTWdMUzBnYVdZZ2QyVW5jbVVnWkc5M2JpQm9aWEpsTENCMGFHVnVJRzV2Ym1VZ2IyWWdkR2h2YzJVZ2JXRjBZMmhsWkNCaGJtUmNiaUFnSUNBZ0lDQWdMeThnYzI4Z2QyVWdZV3hzYjNjZ2FYUWdiMjVzZVNCcFppQjNaU0JrYjI0bmRDQnJibTkzSUhkb1lYUWdkR2hsSUhCaGNtVnVkQ0JwY3l3Z1lYTWdZV3hzSUc5MGFHVnlYRzRnSUNBZ0lDQWdJQzh2SUdOaGMyVnpJR0Z5WlNCcGJuWmhiR2xrTGx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0dGeVpXNTBWR0ZuSUQwOUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2x4dUlDQWdLaTljYmlBZ2RtRnlJR1pwYm1SSmJuWmhiR2xrUVc1alpYTjBiM0pHYjNKVVlXY2dQU0JtZFc1amRHbHZiaUFvZEdGbkxDQmhibU5sYzNSdmNrbHVabThwSUh0Y2JpQWdJQ0J6ZDJsMFkyZ2dLSFJoWnlrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0FuWVdSa2NtVnpjeWM2WEc0Z0lDQWdJQ0JqWVhObElDZGhjblJwWTJ4bEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJGemFXUmxKenBjYmlBZ0lDQWdJR05oYzJVZ0oySnNiMk5yY1hWdmRHVW5PbHh1SUNBZ0lDQWdZMkZ6WlNBblkyVnVkR1Z5SnpwY2JpQWdJQ0FnSUdOaGMyVWdKMlJsZEdGcGJITW5PbHh1SUNBZ0lDQWdZMkZ6WlNBblpHbGhiRzluSnpwY2JpQWdJQ0FnSUdOaGMyVWdKMlJwY2ljNlhHNGdJQ0FnSUNCallYTmxJQ2RrYVhZbk9seHVJQ0FnSUNBZ1kyRnpaU0FuWkd3bk9seHVJQ0FnSUNBZ1kyRnpaU0FuWm1sbGJHUnpaWFFuT2x4dUlDQWdJQ0FnWTJGelpTQW5abWxuWTJGd2RHbHZiaWM2WEc0Z0lDQWdJQ0JqWVhObElDZG1hV2QxY21Vbk9seHVJQ0FnSUNBZ1kyRnpaU0FuWm05dmRHVnlKenBjYmlBZ0lDQWdJR05oYzJVZ0oyaGxZV1JsY2ljNlhHNGdJQ0FnSUNCallYTmxJQ2RvWjNKdmRYQW5PbHh1SUNBZ0lDQWdZMkZ6WlNBbmJXRnBiaWM2WEc0Z0lDQWdJQ0JqWVhObElDZHRaVzUxSnpwY2JpQWdJQ0FnSUdOaGMyVWdKMjVoZGljNlhHNGdJQ0FnSUNCallYTmxJQ2R2YkNjNlhHNGdJQ0FnSUNCallYTmxJQ2R3SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM05sWTNScGIyNG5PbHh1SUNBZ0lDQWdZMkZ6WlNBbmMzVnRiV0Z5ZVNjNlhHNGdJQ0FnSUNCallYTmxJQ2QxYkNjNlhHNWNiaUFnSUNBZ0lHTmhjMlVnSjNCeVpTYzZYRzRnSUNBZ0lDQmpZWE5sSUNkc2FYTjBhVzVuSnpwY2JseHVJQ0FnSUNBZ1kyRnpaU0FuZEdGaWJHVW5PbHh1WEc0Z0lDQWdJQ0JqWVhObElDZG9jaWM2WEc1Y2JpQWdJQ0FnSUdOaGMyVWdKM2h0Y0NjNlhHNWNiaUFnSUNBZ0lHTmhjMlVnSjJneEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJneUp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJnekp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJnMEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJnMUp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJnMkp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRnVZMlZ6ZEc5eVNXNW1ieTV3VkdGblNXNUNkWFIwYjI1VFkyOXdaVHRjYmx4dUlDQWdJQ0FnWTJGelpTQW5abTl5YlNjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGJtTmxjM1J2Y2tsdVptOHVabTl5YlZSaFp5QjhmQ0JoYm1ObGMzUnZja2x1Wm04dWNGUmhaMGx1UW5WMGRHOXVVMk52Y0dVN1hHNWNiaUFnSUNBZ0lHTmhjMlVnSjJ4cEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRnVZMlZ6ZEc5eVNXNW1ieTVzYVhOMFNYUmxiVlJoWjBGMWRHOWpiRzl6YVc1bk8xeHVYRzRnSUNBZ0lDQmpZWE5sSUNka1pDYzZYRzRnSUNBZ0lDQmpZWE5sSUNka2RDYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhibU5sYzNSdmNrbHVabTh1Wkd4SmRHVnRWR0ZuUVhWMGIyTnNiM05wYm1jN1hHNWNiaUFnSUNBZ0lHTmhjMlVnSjJKMWRIUnZiaWM2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoYm1ObGMzUnZja2x1Wm04dVluVjBkRzl1VkdGblNXNVRZMjl3WlR0Y2JseHVJQ0FnSUNBZ1kyRnpaU0FuWVNjNlhHNGdJQ0FnSUNBZ0lDOHZJRk53WldNZ2MyRjVjeUJ6YjIxbGRHaHBibWNnWVdKdmRYUWdjM1J2Y21sdVp5QmhJR3hwYzNRZ2IyWWdiV0Z5YTJWeWN5d2dZblYwSUdsMElITnZkVzVrYzF4dUlDQWdJQ0FnSUNBdkx5QmxjWFZwZG1Gc1pXNTBJSFJ2SUhSb2FYTWdZMmhsWTJzdVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGJtTmxjM1J2Y2tsdVptOHVZVlJoWjBsdVUyTnZjR1U3WEc1Y2JpQWdJQ0FnSUdOaGMyVWdKMjV2WW5Jbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXNWpaWE4wYjNKSmJtWnZMbTV2WW5KVVlXZEpibE5qYjNCbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJIYVhabGJpQmhJRkpsWVdOMFEyOXRjRzl6YVhSbFEyOXRjRzl1Wlc1MElHbHVjM1JoYm1ObExDQnlaWFIxY200Z1lTQnNhWE4wSUc5bUlHbDBjeUJ5WldOMWNuTnBkbVZjYmlBZ0lDb2diM2R1WlhKekxDQnpkR0Z5ZEdsdVp5QmhkQ0IwYUdVZ2NtOXZkQ0JoYm1RZ1pXNWthVzVuSUhkcGRHZ2dkR2hsSUdsdWMzUmhibU5sSUdsMGMyVnNaaTVjYmlBZ0lDb3ZYRzRnSUhaaGNpQm1hVzVrVDNkdVpYSlRkR0ZqYXlBOUlHWjFibU4wYVc5dUlDaHBibk4wWVc1alpTa2dlMXh1SUNBZ0lHbG1JQ2doYVc1emRHRnVZMlVwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJiWFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2MzUmhZMnNnUFNCYlhUdGNiaUFnSUNBdkttVnpiR2x1ZEMxa2FYTmhZbXhsSUhOd1lXTmxMV0ZtZEdWeUxXdGxlWGR2Y21SeklDb3ZYRzRnSUNBZ1pHOGdlMXh1SUNBZ0lDQWdMeXBsYzJ4cGJuUXRaVzVoWW14bElITndZV05sTFdGbWRHVnlMV3RsZVhkdmNtUnpJQ292WEc0Z0lDQWdJQ0J6ZEdGamF5NXdkWE5vS0dsdWMzUmhibU5sS1R0Y2JpQWdJQ0I5SUhkb2FXeGxJQ2hwYm5OMFlXNWpaU0E5SUdsdWMzUmhibU5sTGw5amRYSnlaVzUwUld4bGJXVnVkQzVmYjNkdVpYSXBPMXh1SUNBZ0lITjBZV05yTG5KbGRtVnljMlVvS1R0Y2JpQWdJQ0J5WlhSMWNtNGdjM1JoWTJzN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUdScFpGZGhjbTRnUFNCN2ZUdGNibHh1SUNCMllXeHBaR0YwWlVSUFRVNWxjM1JwYm1jZ1BTQm1kVzVqZEdsdmJpQW9ZMmhwYkdSVVlXY3NJR05vYVd4a1NXNXpkR0Z1WTJVc0lHRnVZMlZ6ZEc5eVNXNW1ieWtnZTF4dUlDQWdJR0Z1WTJWemRHOXlTVzVtYnlBOUlHRnVZMlZ6ZEc5eVNXNW1ieUI4ZkNCbGJYQjBlVUZ1WTJWemRHOXlTVzVtYnp0Y2JpQWdJQ0IyWVhJZ2NHRnlaVzUwU1c1bWJ5QTlJR0Z1WTJWemRHOXlTVzVtYnk1d1lYSmxiblJVWVdjN1hHNGdJQ0FnZG1GeUlIQmhjbVZ1ZEZSaFp5QTlJSEJoY21WdWRFbHVabThnSmlZZ2NHRnlaVzUwU1c1bWJ5NTBZV2M3WEc1Y2JpQWdJQ0IyWVhJZ2FXNTJZV3hwWkZCaGNtVnVkQ0E5SUdselZHRm5WbUZzYVdSWGFYUm9VR0Z5Wlc1MEtHTm9hV3hrVkdGbkxDQndZWEpsYm5SVVlXY3BJRDhnYm5Wc2JDQTZJSEJoY21WdWRFbHVabTg3WEc0Z0lDQWdkbUZ5SUdsdWRtRnNhV1JCYm1ObGMzUnZjaUE5SUdsdWRtRnNhV1JRWVhKbGJuUWdQeUJ1ZFd4c0lEb2dabWx1WkVsdWRtRnNhV1JCYm1ObGMzUnZja1p2Y2xSaFp5aGphR2xzWkZSaFp5d2dZVzVqWlhOMGIzSkpibVp2S1R0Y2JpQWdJQ0IyWVhJZ2NISnZZbXhsYldGMGFXTWdQU0JwYm5aaGJHbGtVR0Z5Wlc1MElIeDhJR2x1ZG1Gc2FXUkJibU5sYzNSdmNqdGNibHh1SUNBZ0lHbG1JQ2h3Y205aWJHVnRZWFJwWXlrZ2UxeHVJQ0FnSUNBZ2RtRnlJR0Z1WTJWemRHOXlWR0ZuSUQwZ2NISnZZbXhsYldGMGFXTXVkR0ZuTzF4dUlDQWdJQ0FnZG1GeUlHRnVZMlZ6ZEc5eVNXNXpkR0Z1WTJVZ1BTQndjbTlpYkdWdFlYUnBZeTVwYm5OMFlXNWpaVHRjYmx4dUlDQWdJQ0FnZG1GeUlHTm9hV3hrVDNkdVpYSWdQU0JqYUdsc1pFbHVjM1JoYm1ObElDWW1JR05vYVd4a1NXNXpkR0Z1WTJVdVgyTjFjbkpsYm5SRmJHVnRaVzUwTGw5dmQyNWxjanRjYmlBZ0lDQWdJSFpoY2lCaGJtTmxjM1J2Y2s5M2JtVnlJRDBnWVc1alpYTjBiM0pKYm5OMFlXNWpaU0FtSmlCaGJtTmxjM1J2Y2tsdWMzUmhibU5sTGw5amRYSnlaVzUwUld4bGJXVnVkQzVmYjNkdVpYSTdYRzVjYmlBZ0lDQWdJSFpoY2lCamFHbHNaRTkzYm1WeWN5QTlJR1pwYm1SUGQyNWxjbE4wWVdOcktHTm9hV3hrVDNkdVpYSXBPMXh1SUNBZ0lDQWdkbUZ5SUdGdVkyVnpkRzl5VDNkdVpYSnpJRDBnWm1sdVpFOTNibVZ5VTNSaFkyc29ZVzVqWlhOMGIzSlBkMjVsY2lrN1hHNWNiaUFnSUNBZ0lIWmhjaUJ0YVc1VGRHRmphMHhsYmlBOUlFMWhkR2d1YldsdUtHTm9hV3hrVDNkdVpYSnpMbXhsYm1kMGFDd2dZVzVqWlhOMGIzSlBkMjVsY25NdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUhaaGNpQnBPMXh1WEc0Z0lDQWdJQ0IyWVhJZ1pHVmxjR1Z6ZEVOdmJXMXZiaUE5SUMweE8xeHVJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUcxcGJsTjBZV05yVEdWdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05vYVd4a1QzZHVaWEp6VzJsZElEMDlQU0JoYm1ObGMzUnZjazkzYm1WeWMxdHBYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHUmxaWEJsYzNSRGIyMXRiMjRnUFNCcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFpoY2lCVlRrdE9UMWRPSUQwZ0p5aDFibXR1YjNkdUtTYzdYRzRnSUNBZ0lDQjJZWElnWTJocGJHUlBkMjVsY2s1aGJXVnpJRDBnWTJocGJHUlBkMjVsY25NdWMyeHBZMlVvWkdWbGNHVnpkRU52YlcxdmJpQXJJREVwTG0xaGNDaG1kVzVqZEdsdmJpQW9hVzV6ZENrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXNXpkQzVuWlhST1lXMWxLQ2tnZkh3Z1ZVNUxUazlYVGp0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2RtRnlJR0Z1WTJWemRHOXlUM2R1WlhKT1lXMWxjeUE5SUdGdVkyVnpkRzl5VDNkdVpYSnpMbk5zYVdObEtHUmxaWEJsYzNSRGIyMXRiMjRnS3lBeEtTNXRZWEFvWm5WdVkzUnBiMjRnS0dsdWMzUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1YzNRdVoyVjBUbUZ0WlNncElIeDhJRlZPUzA1UFYwNDdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSFpoY2lCdmQyNWxja2x1Wm04Z1BTQmJYUzVqYjI1allYUW9YRzRnSUNBZ0lDQXZMeUJKWmlCMGFHVWdjR0Z5Wlc1MElHRnVaQ0JqYUdsc1pDQnBibk4wWVc1alpYTWdhR0YyWlNCaElHTnZiVzF2YmlCdmQyNWxjaUJoYm1ObGMzUnZjaXdnYzNSaGNuUmNiaUFnSUNBZ0lDOHZJSGRwZEdnZ2RHaGhkQ0F0TFNCdmRHaGxjbmRwYzJVZ2QyVWdhblZ6ZENCemRHRnlkQ0IzYVhSb0lIUm9aU0J3WVhKbGJuUW5jeUJ2ZDI1bGNuTXVYRzRnSUNBZ0lDQmtaV1Z3WlhOMFEyOXRiVzl1SUNFOVBTQXRNU0EvSUdOb2FXeGtUM2R1WlhKelcyUmxaWEJsYzNSRGIyMXRiMjVkTG1kbGRFNWhiV1VvS1NCOGZDQlZUa3RPVDFkT0lEb2dXMTBzSUdGdVkyVnpkRzl5VDNkdVpYSk9ZVzFsY3l3Z1lXNWpaWE4wYjNKVVlXY3NYRzRnSUNBZ0lDQXZMeUJKWmlCM1pTZHlaU0IzWVhKdWFXNW5JR0ZpYjNWMElHRnVJR2x1ZG1Gc2FXUWdLRzV2Ymkxd1lYSmxiblFwSUdGdVkyVnpkSEo1TENCaFpHUWdKeTR1TGlkY2JpQWdJQ0FnSUdsdWRtRnNhV1JCYm1ObGMzUnZjaUEvSUZzbkxpNHVKMTBnT2lCYlhTd2dZMmhwYkdSUGQyNWxjazVoYldWekxDQmphR2xzWkZSaFp5a3VhbTlwYmlnbklENGdKeWs3WEc1Y2JpQWdJQ0FnSUhaaGNpQjNZWEp1UzJWNUlEMGdJU0ZwYm5aaGJHbGtVR0Z5Wlc1MElDc2dKM3duSUNzZ1kyaHBiR1JVWVdjZ0t5QW5mQ2NnS3lCaGJtTmxjM1J2Y2xSaFp5QXJJQ2Q4SnlBcklHOTNibVZ5U1c1bWJ6dGNiaUFnSUNBZ0lHbG1JQ2hrYVdSWFlYSnVXM2RoY201TFpYbGRLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1JwWkZkaGNtNWJkMkZ5Ymt0bGVWMGdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQnBaaUFvYVc1MllXeHBaRkJoY21WdWRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FXNW1ieUE5SUNjbk8xeHVJQ0FnSUNBZ0lDQnBaaUFvWVc1alpYTjBiM0pVWVdjZ1BUMDlJQ2QwWVdKc1pTY2dKaVlnWTJocGJHUlVZV2NnUFQwOUlDZDBjaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBibVp2SUNzOUlDY2dRV1JrSUdFZ1BIUmliMlI1UGlCMGJ5QjViM1Z5SUdOdlpHVWdkRzhnYldGMFkyZ2dkR2hsSUVSUFRTQjBjbVZsSUdkbGJtVnlZWFJsWkNCaWVTQW5JQ3NnSjNSb1pTQmljbTkzYzJWeUxpYzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIZGhjbTVwYm1jb1ptRnNjMlVzSUNkMllXeHBaR0YwWlVSUFRVNWxjM1JwYm1jb0xpNHVLVG9nUENWelBpQmpZVzV1YjNRZ1lYQndaV0Z5SUdGeklHRWdZMmhwYkdRZ2IyWWdQQ1Z6UGk0Z0p5QXJJQ2RUWldVZ0pYTXVKWE1uTENCamFHbHNaRlJoWnl3Z1lXNWpaWE4wYjNKVVlXY3NJRzkzYm1WeVNXNW1ieXdnYVc1bWJ5a2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2QyRnlibWx1WnlobVlXeHpaU3dnSjNaaGJHbGtZWFJsUkU5TlRtVnpkR2x1WnlndUxpNHBPaUE4SlhNK0lHTmhibTV2ZENCaGNIQmxZWElnWVhNZ1lTQmtaWE5qWlc1a1lXNTBJRzltSUNjZ0t5QW5QQ1Z6UGk0Z1UyVmxJQ1Z6TGljc0lHTm9hV3hrVkdGbkxDQmhibU5sYzNSdmNsUmhaeXdnYjNkdVpYSkpibVp2S1NBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdkbUZzYVdSaGRHVkVUMDFPWlhOMGFXNW5MbUZ1WTJWemRHOXlTVzVtYjBOdmJuUmxlSFJMWlhrZ1BTQW5YMTkyWVd4cFpHRjBaVVJQVFU1bGMzUnBibWRmWVc1alpYTjBiM0pKYm1adkpDY2dLeUJOWVhSb0xuSmhibVJ2YlNncExuUnZVM1J5YVc1bktETTJLUzV6YkdsalpTZ3lLVHRjYmx4dUlDQjJZV3hwWkdGMFpVUlBUVTVsYzNScGJtY3VkWEJrWVhSbFpFRnVZMlZ6ZEc5eVNXNW1ieUE5SUhWd1pHRjBaV1JCYm1ObGMzUnZja2x1Wm04N1hHNWNiaUFnTHk4Z1JtOXlJSFJsYzNScGJtZGNiaUFnZG1Gc2FXUmhkR1ZFVDAxT1pYTjBhVzVuTG1selZHRm5WbUZzYVdSSmJrTnZiblJsZUhRZ1BTQm1kVzVqZEdsdmJpQW9kR0ZuTENCaGJtTmxjM1J2Y2tsdVptOHBJSHRjYmlBZ0lDQmhibU5sYzNSdmNrbHVabThnUFNCaGJtTmxjM1J2Y2tsdVptOGdmSHdnWlcxd2RIbEJibU5sYzNSdmNrbHVabTg3WEc0Z0lDQWdkbUZ5SUhCaGNtVnVkRWx1Wm04Z1BTQmhibU5sYzNSdmNrbHVabTh1Y0dGeVpXNTBWR0ZuTzF4dUlDQWdJSFpoY2lCd1lYSmxiblJVWVdjZ1BTQndZWEpsYm5SSmJtWnZJQ1ltSUhCaGNtVnVkRWx1Wm04dWRHRm5PMXh1SUNBZ0lISmxkSFZ5YmlCcGMxUmhaMVpoYkdsa1YybDBhRkJoY21WdWRDaDBZV2NzSUhCaGNtVnVkRlJoWnlrZ0ppWWdJV1pwYm1SSmJuWmhiR2xrUVc1alpYTjBiM0pHYjNKVVlXY29kR0ZuTENCaGJtTmxjM1J2Y2tsdVptOHBPMXh1SUNCOU8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhaaGJHbGtZWFJsUkU5TlRtVnpkR2x1WnpzaVhYMD0iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3QnKTtcbiIsIi8qZXNsaW50LWVudiBicm93c2VyICovXG5cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5mdW5jdGlvbiBnZXRIZWFkKCkge1xuICByZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xufVxuXG5mdW5jdGlvbiBhdHRhY2hBdHRyaWJ1dGVzKHRhZywgYXR0cmlidXRlcykge1xuICBmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgIGlmICghYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1trZXldO1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbnZhciBpbnNlcnRDU1MgPSB7XG4gIC8vIENyZWF0ZSBhIDxsaW5rPiB0YWcgd2l0aCBvcHRpb25hbCBkYXRhIGF0dHJpYnV0ZXNcbiAgY3JlYXRlTGluazogZnVuY3Rpb24gY3JlYXRlTGluayhocmVmKSB7XG4gICAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG4gICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG5cbiAgICBsaW5rLmhyZWYgPSBocmVmO1xuICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuXG4gICAgYXR0YWNoQXR0cmlidXRlcyhsaW5rKTtcblxuICAgIGhlYWQuYXBwZW5kQ2hpbGQobGluayk7XG5cbiAgICByZXR1cm4gbGluaztcbiAgfSxcbiAgLy8gQ3JlYXRlIGEgPHN0eWxlPiB0YWcgd2l0aCBvcHRpb25hbCBkYXRhIGF0dHJpYnV0ZXNcbiAgY3JlYXRlU3R5bGU6IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlKGNzc1RleHQsIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgaGVhZCA9IGdldEhlYWQoKTtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgICBhdHRhY2hBdHRyaWJ1dGVzKHN0eWxlLCBhdHRyaWJ1dGVzKTtcblxuICAgIGlmIChzdHlsZS5zaGVldCkge1xuICAgICAgLy8gZm9yIGpzZG9tIGFuZCBJRTkrXG4gICAgICBzdHlsZS5pbm5lckhUTUwgPSBjc3NUZXh0O1xuICAgICAgc3R5bGUuc2hlZXQuY3NzVGV4dCA9IGNzc1RleHQ7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9IGVsc2UgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgIC8vIGZvciBJRTggYW5kIGJlbG93XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1RleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmlcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzc1RleHQpKTtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gaW5zZXJ0Q1NTO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwIGZyb20gJ3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cCdcblxuaW1wb3J0ICcuL2luZGV4LnNjc3MnXG5cbi8qKlxuICpcbiAqIOWkhOeQhuaVsOWtl+avj+malDPkvY3liqDkuIDkuKrpgJflj7dcbiAqXG4gKi9cbmZ1bmN0aW9uIG51bVRvU3RyKG51bSl7XG4gICAgcmV0dXJuIG51bS50b1N0cmluZygpLnJlcGxhY2UoLyhcXGR7MSwzfSkoPz0oPzpcXGR7M30pKyg/IVxcZCkpL2csJyQxLCcpO1xufVxuY29uc3QgQSA9IFswLCAxLCAyLCAzLCA0XTtcbmNvbnN0IEFMTENBUkRTID0gW1xuICAgICdhLTEnLCdhLTInLCdhLTMnLCdhLTQnLCdhLTUnLCdhLTYnLCdhLTcnLCdhLTgnLCdhLTknLCdhLTEwJywnYS0xMScsJ2EtMTInLCdhLTEzJyxcbiAgICAnYi0xJywnYi0yJywnYi0zJywnYi00JywnYi01JywnYi02JywnYi03JywnYi04JywnYi05JywnYi0xMCcsJ2ItMTEnLCdiLTEyJywnYi0xMycsXG4gICAgJ2MtMScsJ2MtMicsJ2MtMycsJ2MtNCcsJ2MtNScsJ2MtNicsJ2MtNycsJ2MtOCcsJ2MtOScsJ2MtMTAnLCdjLTExJywnYy0xMicsJ2MtMTMnLFxuICAgICdkLTEnLCdkLTInLCdkLTMnLCdkLTQnLCdkLTUnLCdkLTYnLCdkLTcnLCdkLTgnLCdkLTknLCdkLTEwJywnZC0xMScsJ2QtMTInLCdkLTEzJ1xuXTtcbmNvbnN0IExTS0VZID0gJ19fcG9rZXJfX3N0b3JhZ2UnO1xuY29uc3QgUG9rZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgICAgICBjb25zdCBzdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShMU0tFWSk7XG4gICAgICAgIGxldCBqc29uO1xuICAgICAgICBpZihzdHIpe1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICAgICAganNvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG90YWwgOiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICBiZXQgOiAxMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBqc29uID0ge1xuICAgICAgICAgICAgICAgIHRvdGFsIDogMTAwMCxcbiAgICAgICAgICAgICAgICBiZXQgOiAxMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybntcbiAgICAgICAgICAgIHRvdGFsIDoganNvbi50b3RhbCxcbiAgICAgICAgICAgIGJldCA6IGpzb24uYmV0LFxuICAgICAgICAgICAgd2luIDogMCxcbiAgICAgICAgICAgIGRlYWxpbmcgOiBmYWxzZSxcbiAgICAgICAgICAgIGNhcmRzIDogWycnLCAnJywgJycsICcnLCAnJ10sXG4gICAgICAgICAgICBob2xkcyA6IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdLFxuICAgICAgICAgICAgc3RlcCA6IDAsXG4gICAgICAgICAgICBnYW1pbmcgOiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVzIDogMCxcbiAgICAgICAgICAgIHRleHQgOiBudWxsLFxuICAgICAgICAgICAgcmFuZG9tIDogMCxcbiAgICAgICAgICAgIHJhbmRvbVJlc3VsdCA6ICcnLFxuICAgICAgICAgICAgd2FpdGluZyA6IGZhbHNlLFxuICAgICAgICAgICAgaGVscCA6ICFzdHIsXG4gICAgICAgICAgICBpbnB1dFRleHQgOiAnJyxcbiAgICAgICAgICAgIHJ1bk91dCA6IGpzb24udG90YWwgPCBqc29uLmJldFxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIHRoaXMucHJlTG9hZEltYWdlcygpO1xuICAgIH0sXG4gICAgcHJlTG9hZEltYWdlcygpIHtcbiAgICAgICAgbGV0IGltYWdlcyA9IFsnLi9pbWcvaGVpdGFvLmpwZycsICcuL2ltZy9ob25ndGFvLmpwZycsICcuL2ltZy9tZWlodWEuanBnJywgJy4vaW1nL2ZhbmdrdWFpLmpwZyddO1xuICAgICAgICBpbWFnZXMuZm9yRWFjaCgodXJsKSA9PiB7XG4gICAgICAgICAgICBsZXQgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGlucHV0VGV4dENoYW5nZShlKSB7XG4gICAgICAgIGxldCBpbnB1dFRleHQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpbnB1dFRleHRcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBoaWRlSW5wdXQoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaW5wdXRUZXh0IDogJycsXG4gICAgICAgICAgICBydW5PdXQgOiBmYWxzZSxcbiAgICAgICAgICAgIHRvdGFsIDogMTAwMCxcbiAgICAgICAgICAgIGJldCA6IDEwXG4gICAgICAgIH0sIHRoaXMucGVyc2lzdERhdGEpO1xuICAgIH0sXG4gICAgY2hlY2tSdW5PdXQoKSB7XG4gICAgICAgIGlmKHRoaXMuc3RhdGUudG90YWwgPCB0aGlzLnN0YXRlLmJldCl7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBydW5PdXQgOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0hlbHAoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaGVscCA6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBoaWRlSGVscCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBoZWxwIDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBwZXJzaXN0RGF0YSgpIHtcbiAgICAgICAgbGV0IHN0ciA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHRvdGFsIDogdGhpcy5zdGF0ZS50b3RhbCxcbiAgICAgICAgICAgIGJldCA6IHRoaXMuc3RhdGUuYmV0XG4gICAgICAgIH0pO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShMU0tFWSwgc3RyKTtcbiAgICB9LFxuICAgIHdpbk1vbmV5KCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHRvdGFsIDogdGhpcy5zdGF0ZS50b3RhbCArIHRoaXMuc3RhdGUud2luLFxuICAgICAgICAgICAgd2luIDogMFxuICAgICAgICB9LCAoKSA9PiB0aGlzLnJlc2V0T25lQ2FyZCgwKSk7XG4gICAgfSxcbiAgICByZXNldFN0YXRlKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGRlYWxpbmcgOiBmYWxzZSxcbiAgICAgICAgICAgIGNhcmRzIDogWycnLCAnJywgJycsICcnLCAnJ10sXG4gICAgICAgICAgICBob2xkcyA6IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdLFxuICAgICAgICAgICAgc3RlcCA6IDAsXG4gICAgICAgICAgICBnYW1pbmcgOiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVzIDogMCxcbiAgICAgICAgICAgIHRleHQgOiBudWxsLFxuICAgICAgICAgICAgcmFuZG9tIDogMCxcbiAgICAgICAgICAgIHJhbmRvbVJlc3VsdCA6ICcnLFxuICAgICAgICAgICAgd2FpdGluZyA6IGZhbHNlXG4gICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0aGlzLnBlcnNpc3REYXRhKCk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBjbGVhclRpbWVyKCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgIH0sXG4gICAgY2xlYXJSYW5kb20oKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcmFuZG9tIDogMCxcbiAgICAgICAgICAgIHJhbmRvbVJlc3VsdCA6ICcnXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgc3RhcnRSYW5kb20oKSB7XG4gICAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgbGV0IHJhbmRvbSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogNik7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICByYW5kb21cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LmJpbmQodGhpcyksIDEyNSk7XG4gICAgfSxcbiAgICByYW5kb21HdWVzc0JpZygpIHtcbiAgICAgICAgaWYodGhpcy5zdGF0ZS5yYW5kb20gPj0gNCl7XG4gICAgICAgICAgICB0aGlzLnJhbmRvbVdpbigpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMucmFuZG9tTG9zZSgpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByYW5kb21HdWVzc1NtYWxsKCkge1xuICAgICAgICBpZih0aGlzLnN0YXRlLnJhbmRvbSA8PSAzKXtcbiAgICAgICAgICAgIHRoaXMucmFuZG9tV2luKCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5yYW5kb21Mb3NlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJhbmRvbVdpbigpIHtcbiAgICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcmFuZG9tUmVzdWx0IDogJ1dpbicsXG4gICAgICAgICAgICB3aW4gOiB0aGlzLnN0YXRlLndpbiAqIDIsXG4gICAgICAgICAgICB3YWl0aW5nIDogdHJ1ZVxuICAgICAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRSYW5kb20oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tUmVzdWx0IDogJycsXG4gICAgICAgICAgICAgICAgICAgIHdhaXRpbmcgOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCAxMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICByYW5kb21Mb3NlKCkge1xuICAgICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICByYW5kb21SZXN1bHQgOiAnTG9zZScsXG4gICAgICAgICAgICB3YWl0aW5nIDogdHJ1ZVxuICAgICAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJSYW5kb20oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgd2luIDogMCxcbiAgICAgICAgICAgICAgICAgICAgd2FpdGluZyA6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1J1bk91dCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0T25lQ2FyZCgwKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMTIwMCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgYmV0TWludXMoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgYmV0IDogLS10aGlzLnN0YXRlLmJldFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGJldFBsdXMoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgYmV0IDogKyt0aGlzLnN0YXRlLmJldFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHJvbGxHYW1lKCkge1xuICAgICAgICBpZih0aGlzLnN0YXRlLnN0ZXAgPT09IDApe1xuICAgICAgICAgICAgdGhpcy5taW51c1RvdGFsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzdGVwIDogKyt0aGlzLnN0YXRlLnN0ZXAsXG4gICAgICAgICAgICBkZWFsaW5nIDogdHJ1ZSxcbiAgICAgICAgICAgIGdhbWluZyA6IHRydWVcbiAgICAgICAgfSwgdGhpcy5kZWFsQ2FyZHMpO1xuICAgIH0sXG4gICAgbWludXNUb3RhbCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB0b3RhbCA6IHRoaXMuc3RhdGUudG90YWwgLSB0aGlzLnN0YXRlLmJldFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHRvZ2dsZUhvbGQoaW5kZXgpIHtcbiAgICAgICAgaWYodGhpcy5zdGF0ZS5zdGVwICE9PSAyIHx8IHRoaXMuc3RhdGUuZGVhbGluZykgcmV0dXJuO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGhvbGRzIDogWy4uLnRoaXMuc3RhdGUuaG9sZHMuc2xpY2UoMCwgaW5kZXgpLCAhdGhpcy5zdGF0ZS5ob2xkc1tpbmRleF0sIC4uLnRoaXMuc3RhdGUuaG9sZHMuc2xpY2UoaW5kZXggKyAxKV1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBkZWFsQ2FyZHMoKSB7XG4gICAgICAgIHRoaXMuZGVhbE9uZUNhcmQoMCk7XG4gICAgfSxcbiAgICByZXNldE9uZUNhcmQoaW5kZXgpIHtcbiAgICAgICAgaWYoaW5kZXggPj0gNSl7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U3RhdGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsZXQge2NhcmRzLCBob2xkc30gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2FyZHMgOiBbLi4uY2FyZHMuc2xpY2UoMCwgaW5kZXgpLCAnJywgLi4uY2FyZHMuc2xpY2UoaW5kZXggKyAxKV0sXG4gICAgICAgICAgICAgICAgaG9sZHMgOiBbLi4uaG9sZHMuc2xpY2UoMCwgaW5kZXgpLCBmYWxzZSwgLi4uaG9sZHMuc2xpY2UoaW5kZXggKyAxKV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZXNldE9uZUNhcmQoKytpbmRleCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSwgMjUwKTtcbiAgICB9LFxuICAgIGRlYWxPbmVDYXJkKGluZGV4KSB7XG4gICAgICAgIGlmKGluZGV4ID49IDUpe1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc3RlcCA6ICsrdGhpcy5zdGF0ZS5zdGVwLFxuICAgICAgICAgICAgICAgIGRlYWxpbmcgOiBmYWxzZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnN0YXRlLnN0ZXAgPT09IDQpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGltZXMgPSB0aGlzLmdhbWVSZXN1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGltZXMgPT09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0IDogJ1lvdSBMb3NlISEhJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tSdW5PdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0T25lQ2FyZCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksIDEyMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCAxMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0IDogJ1lvdSBXaW4hISEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbiA6IHRoaXMuc3RhdGUuYmV0ICogdGltZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXMgOiB0aW1lc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0UmFuZG9tKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMTIwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5zdGF0ZS5ob2xkc1tpbmRleF0pe1xuICAgICAgICAgICAgdGhpcy5kZWFsT25lQ2FyZCgrK2luZGV4KTtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxldCBjYXJkID0gdGhpcy5nZXRPbmVTaHVmZmxlQ2FyZCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2FyZHMgOiBbLi4udGhpcy5zdGF0ZS5jYXJkcy5zbGljZSgwLCBpbmRleCksIGNhcmQsIC4uLnRoaXMuc3RhdGUuY2FyZHMuc2xpY2UoaW5kZXggKyAxKV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5kZWFsT25lQ2FyZCgrK2luZGV4KTtcbiAgICAgICAgfS5iaW5kKHRoaXMpLCAyNTApO1xuICAgIH0sXG4gICAgZ2V0T25lU2h1ZmZsZUNhcmQoKSB7XG4gICAgICAgIGxldCByYW4gPSBwYXJzZUludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MSkpO1xuICAgICAgICB3aGlsZSh0aGlzLnN0YXRlLmNhcmRzLmluZGV4T2YoQUxMQ0FSRFNbcmFuXSkgPj0gMCl7XG4gICAgICAgICAgICByYW4gPSBwYXJzZUludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBTExDQVJEU1tyYW5dO1xuICAgIH0sXG4gICAgZ2FtZVJlc3VsdCgpIHtcbiAgICAgICAgbGV0IHRzID0gW107XG4gICAgICAgIGxldCBucyA9IFtdO1xuICAgICAgICBsZXQgY2FyZCwgY0FycjtcbiAgICAgICAgQS5mb3JFYWNoKGZ1bmN0aW9uKGkpe1xuICAgICAgICAgICAgY2FyZCA9IHRoaXMuc3RhdGUuY2FyZHNbaV07XG4gICAgICAgICAgICBjQXJyID0gY2FyZC5zcGxpdCgnLScpO1xuICAgICAgICAgICAgdHMucHVzaChjQXJyWzBdKTtcbiAgICAgICAgICAgIG5zLnB1c2gocGFyc2VJbnQoY0FyclsxXSkpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICBucy5zb3J0KGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYodHNbMF0gPT0gdHNbMV0gJiYgdHNbMF0gPT0gdHNbMl0gJiYgdHNbMF0gPT0gdHNbM10gJiYgdHNbMF0gPT0gdHNbNF0pe1xuICAgICAgICAgICAgaWYobnNbNF0gLSBuc1swXSA9PSA0KSByZXR1cm4gMjUwOyAvL+WQjOiKsemhulxuICAgICAgICAgICAgcmV0dXJuIDc7IC8v5ZCM6IqxXG4gICAgICAgIH1cbiAgICAgICAgaWYobnNbMF0gIT0gbnNbMV0gJiYgbnNbMV0gIT0gbnNbMl0gJiYgbnNbMl0gIT0gbnNbM10gJiYgbnNbM10gIT0gbnNbNF0pe1xuICAgICAgICAgICAgaWYoKG5zWzRdIC0gbnNbMF0gPT0gNCkgfHwgKG5zWzBdID09IDEgJiYgbnNbMV0gPT0gMTApKSByZXR1cm4gMTA7IC8v6aG65a2QXG4gICAgICAgICAgICByZXR1cm4gMDsgLy/ku4DkuYjkuZ/kuI3mmK9cbiAgICAgICAgfVxuICAgICAgICBpZihuc1swXSA9PSBuc1szXSB8fCBuc1sxXSA9PSBuc1s0XSkgcmV0dXJuIDYwOyAvL+Wbm+adoVxuICAgICAgICBpZigobnNbMF0gPT0gbnNbMl0gJiYgbnNbM10gPT0gbnNbNF0pIHx8IChuc1swXSA9PSBuc1sxXSAmJiBuc1syXSA9PSBuc1s0XSkpIHJldHVybiAyMDsgLy/okavoiqZcbiAgICAgICAgaWYobnNbMF0gPT0gbnNbMl0gfHwgbnNbMV0gPT0gbnNbM10gfHwgbnNbMl0gPT0gbnNbNF0pIHJldHVybiA1OyAvL+S4ieadoVxuICAgICAgICBpZigobnNbMF0gPT0gbnNbMV0gJiYgKG5zWzJdID09IG5zWzNdIHx8IG5zWzNdID09IG5zWzRdKSkgfHwgKG5zWzFdID09IG5zWzJdICYmIG5zWzNdID09IG5zWzRdKSkgcmV0dXJuIDI7IC8v5Lik5a+5XG4gICAgICAgIGlmKChuc1sxXSA9PSAxKSB8fCAobnNbMF0gPT0gbnNbMV0gJiYgbnNbMF0gPj0gOCkgfHwgKG5zWzFdID09IG5zWzJdICYmIG5zWzFdID49IDgpIHx8IChuc1syXSA9PSBuc1szXSAmJiBuc1syXSA+PSA4KSB8fCAobnNbM10gPT0gbnNbNF0gJiYgbnNbM10gPj0gOCkpIHJldHVybiAxOyAvL+Wkp+S6jjjkuIDlr7lcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgbGV0IGNhcmRzQXJyID0gW107XG4gICAgICAgIEEuZm9yRWFjaChmdW5jdGlvbihpbmRleCl7XG4gICAgICAgICAgICBsZXQgY2FyZCA9IHN0YXRlLmNhcmRzW2luZGV4XTtcbiAgICAgICAgICAgIGlmKGNhcmQpe1xuICAgICAgICAgICAgICAgIGxldCByID0gY2FyZC5zcGxpdCgnLScpO1xuICAgICAgICAgICAgICAgIGxldCBjID0gclswXSArICctY2FyZCBwLScgKyByWzFdO1xuICAgICAgICAgICAgICAgIGNhcmRzQXJyLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BjYXJkICR7Y30gJHtzdGF0ZS5ob2xkc1tpbmRleF0/ICdob2xkJyA6ICcnfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUhvbGQuYmluZCh0aGlzLCBpbmRleCl9XG4gICAgICAgICAgICAgICAgICAgID48L2Rpdj5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBjYXJkc0Fyci5wdXNoKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgY2FyZCBiYWNrICR7c3RhdGUuaG9sZHNbaW5kZXhdPyAnaG9sZCcgOiAnJ31gfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVIb2xkLmJpbmQodGhpcywgaW5kZXgpfVxuICAgICAgICAgICAgICAgICAgICA+PC9kaXY+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ1aSBjZW50ZXIgYWxpZ25lZCBoZWFkZXJcIj5Qb2tlciBHYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdWIgaGVhZGVyXCI+VGhhbmtzIHRvIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9cIj5SZWFjdDwvYT4gYW5kIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vc2VtYW50aWMtdWkuY29tL1wiPlNlbWFudGljLVVJPC9hPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSB2ZXJ0aWNhbCBtZW51XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BpdGVtICR7c3RhdGUudGltZXMgPT09IDI1MCA/ICdibGluaycgOiAnJ31gfT7lkIzoirHpobo8ZGl2IGNsYXNzTmFtZT1cInVpIHRlYWwgbGFiZWxcIj4yNTA8L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGl0ZW0gJHtzdGF0ZS50aW1lcyA9PT0gNjAgPyAnYmxpbmsnIDogJyd9YH0+5Zub5p2hPGRpdiBjbGFzc05hbWU9XCJ1aSB0ZWFsIGxhYmVsXCI+NjA8L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGl0ZW0gJHtzdGF0ZS50aW1lcyA9PT0gMjAgPyAnYmxpbmsnIDogJyd9YH0+6JGr6IqmPGRpdiBjbGFzc05hbWU9XCJ1aSB0ZWFsIGxhYmVsXCI+MjA8L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGl0ZW0gJHtzdGF0ZS50aW1lcyA9PT0gMTAgPyAnYmxpbmsnIDogJyd9YH0+6aG65a2QPGRpdiBjbGFzc05hbWU9XCJ1aSB0ZWFsIGxhYmVsXCI+MTA8L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGl0ZW0gJHtzdGF0ZS50aW1lcyA9PT0gNyA/ICdibGluaycgOiAnJ31gfT7lkIzoirE8ZGl2IGNsYXNzTmFtZT1cInVpIHRlYWwgbGFiZWxcIj43PC9kaXY+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BpdGVtICR7c3RhdGUudGltZXMgPT09IDUgPyAnYmxpbmsnIDogJyd9YH0+5LiJ5p2hPGRpdiBjbGFzc05hbWU9XCJ1aSB0ZWFsIGxhYmVsXCI+NTwvZGl2PjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgaXRlbSAke3N0YXRlLnRpbWVzID09PSAyID8gJ2JsaW5rJyA6ICcnfWB9PuS4pOWvuTxkaXYgY2xhc3NOYW1lPVwidWkgdGVhbCBsYWJlbFwiPjI8L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGl0ZW0gJHtzdGF0ZS50aW1lcyA9PT0gMSA/ICdibGluaycgOiAnJ31gfT7lpKfkuo445LiA5a+5PGRpdiBjbGFzc05hbWU9XCJ1aSB0ZWFsIGxhYmVsXCI+MTwvZGl2PjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidWkgZm9ybVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpZWxkc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXZlIHdpZGUgZmllbGRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VG90YWw8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidWkgdGlueSBzdGF0aXN0aWNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2YWx1ZVwiPu+/pXtudW1Ub1N0cihzdGF0ZS50b3RhbCl9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm91ciB3aWRlIGZpZWxkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPldpbjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSB0aW55IHN0YXRpc3RpY1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZhbHVlXCI+77+le251bVRvU3RyKHN0YXRlLndpbil9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+QmV0PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVpIGJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidWkgaWNvbiByZWQgYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuYmV0TWludXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17c3RhdGUuYmV0IDw9IDEgfHwgc3RhdGUuZ2FtaW5nfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImljb24gbWludXNcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInVpIGJsdWUgYmFzaWMgYnV0dG9uXCIgZGlzYWJsZWQ9XCJkaXNhYmxlZFwiPntzdGF0ZS5iZXR9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInVpIGljb24gZ3JlZW4gYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuYmV0UGx1c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtzdGF0ZS5iZXQgPj0gMTAwIHx8IHN0YXRlLmJldCA+PSBzdGF0ZS50b3RhbCB8fCBzdGF0ZS5nYW1pbmd9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiaWNvbiBwbHVzXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4mbmJzcDs8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwidWkgaWNvbiBidXR0b24gdGVhbFwiIG9uQ2xpY2s9e3RoaXMuc2hvd0hlbHB9PkhlbHA8aSBjbGFzc05hbWU9XCJpY29uIGhlbHBcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWlkZGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0YXRlLnRleHQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVpIHJlZCBmbG9hdGluZyBtZXNzYWdlIG1hc3NpdmVcIj48cD57c3RhdGUudGV4dH08L3A+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjYXJkc0FyclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3R0b21cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVpIGZvcm1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZml2ZSB3aWRlIGZpZWxkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBsYXJnZSBidXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInVpIHJlZCBidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3N0YXRlLnN0ZXAgIT09IDQgfHwgc3RhdGUud2luID09PSAwIHx8IHN0YXRlLndhaXRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnJhbmRvbUd1ZXNzQmlnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+QmlnPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3JcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidWkgZ3JlZW4gYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtzdGF0ZS5zdGVwICE9PSA0IHx8IHN0YXRlLndpbiA9PT0gMCB8fCBzdGF0ZS53YWl0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5yYW5kb21HdWVzc1NtYWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+U21hbGw8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXZlIHdpZGUgZmllbGQgcmFuZG9tLWFyZWFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3RhdGUud2luID09PSAwID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJhbmRvbS1udW1iZXJcIj57c3RhdGUucmFuZG9tfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJhbmRvbS1yZXN1bHRcIj57c3RhdGUucmFuZG9tUmVzdWx0fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpeCB3aWRlIGZpZWxkIHJpZ2h0LWFyZWFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVpIGxhcmdlIGJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidWkgcmVkIGJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17c3RhdGUud2luID09PSAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy53aW5Nb25leX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkNoZWNrPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3JcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJ1aSBncmVlbiBidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5yb2xsR2FtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtzdGF0ZS5kZWFsaW5nIHx8IHN0YXRlLnN0ZXAgPj0gM31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7WzAsIDFdLmluZGV4T2Yoc3RhdGUuc3RlcCkgPj0gMCA/ICdSb2xsJyA6ICdHbyBvbid9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHtzdGF0ZS5oZWxwID9cbiAgICAgICAgICAgICAgICAgICAgPFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwIHRyYW5zaXRpb25OYW1lPVwiaGVscFwiIHRyYW5zaXRpb25BcHBlYXI9e3RydWV9IHRyYW5zaXRpb25BcHBlYXJUaW1lb3V0PXs1MDB9IHRyYW5zaXRpb25FbnRlcj17ZmFsc2V9IHRyYW5zaXRpb25MZWF2ZT17ZmFsc2V9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBkaW1tZXIgbW9kYWxzIHBhZ2UgYWN0aXZlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBzbWFsbCBiYXNpYyBtb2RhbCBhY3RpdmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBpY29uIGhlYWRlciBvcmFuZ2VcIj48aSBjbGFzc05hbWU9XCJoZWxwIGNpcmNsZSBpY29uXCI+PC9pPiDmuLjmiI/op4TliJkgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+54K55Ye7IFJvbGwg5oyJ6ZKu5Y+R54mM77yM56ys5LiA5qyh5Y+R54mM5ZCO54K55Ye754mM5Y+v5Lul6YCJ5oup5L+d55WZ6K+l54mM77yM5YaN5qyh54K55Ye76K+l5oyJ6ZKu5Lya5pu/5o2i5o6J5pyq6KKr5L+d55WZ55qE54mM77yM5b2i5oiQ5pyA57uI54mM5Z6L77yM5b2T5pyJ5Zub5p2h77yM5oiW5ZCM6Iqx77yM5oiW6JGr6Iqm77yM5oiW6aG65a2Q77yM5oiW5LiJ5p2h77yM5oiW5Lik5a+577yM5oiW5aSn5LqO5LiA5a+5OOeahOeJjOWei+aXtuiDnOWIqe+8jOWPr+mAieaLqee7p+e7reeMnOWkp+Wwj++8jOeMnOWvueWImeWllumHkeWKoOWAje+8jOeMnOmUmeWImeWllumHkea4hembtu+8jOS5n+WPr+S7pemaj+aXtueCueWHuyBDaGVjayDmjInpkq7nu5PnrpflpZbph5HjgII8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVpIGxpc3RcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48aSBjbGFzc05hbWU9XCJpbmZvIGNpcmNsZSBpY29uIG9saXZlXCI+PC9pPjxkaXYgY2xhc3NOYW1lPVwiY29udGVudFwiPuaKleazqOiMg+WbtCAxLTEwMDwvZGl2PjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPjxpIGNsYXNzTmFtZT1cImluZm8gY2lyY2xlIGljb24gb2xpdmVcIj48L2k+PGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+54mM5Z6L5a+55bqU5YCN5pWw6KeB5bem5L6n5qCPPC9kaXY+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+PGkgY2xhc3NOYW1lPVwiaW5mbyBjaXJjbGUgaWNvbiBvbGl2ZVwiPjwvaT48ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj7njJzlpKflsI/mlbDlrZcgMeOAgTLjgIEzIOS4uuWwj++8jDTjgIE144CBNiDkuLrlpKc8L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBncmVlbiBvayBpbnZlcnRlZCBidXR0b25cIiBvbkNsaWNrPXt0aGlzLmhpZGVIZWxwfT48aSBjbGFzc05hbWU9XCJjaGVja21hcmsgaWNvblwiPjwvaT4gT0ssIEkgU2VlIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA6bnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB7c3RhdGUucnVuT3V0ID9cbiAgICAgICAgICAgICAgICAgICAgPFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwIHRyYW5zaXRpb25OYW1lPVwiaGVscFwiIHRyYW5zaXRpb25BcHBlYXI9e3RydWV9IHRyYW5zaXRpb25BcHBlYXJUaW1lb3V0PXs1MDB9IHRyYW5zaXRpb25FbnRlcj17ZmFsc2V9IHRyYW5zaXRpb25MZWF2ZT17ZmFsc2V9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBkaW1tZXIgbW9kYWxzIHBhZ2UgYWN0aXZlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBzbWFsbCBiYXNpYyBtb2RhbCBhY3RpdmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBpY29uIGhlYWRlciByZWRcIj48aSBjbGFzc05hbWU9XCJ3YXJuaW5nIGNpcmNsZSBpY29uXCI+PC9pPiDog5zotKXkuYPlhbXlrrbluLjkuovvvIzlpKfkvqDor7fph43mlrDmnaXov4cgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+5rKh6ZKx5LqG77yM55yL6LW35p2l6L+Q5rCU5LiN5aSq5aW95ZWK44CC5Zyo5LiL6L6555qE5qGG6YeM6L6T5YWl44CO5L2c6ICF55yf5biF44CP6YeN5paw5p2l6L+H5ZCn77yBPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBmb3JtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlwiIHZhbHVlPXtzdGF0ZS5pbnB1dFRleHQgfHwgJyd9IG9uQ2hhbmdlPXt0aGlzLmlucHV0VGV4dENoYW5nZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidWkgZ3JlZW4gb2sgaW52ZXJ0ZWQgYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhpZGVJbnB1dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17c3RhdGUuaW5wdXRUZXh0ICE9PSAn5L2c6ICF55yf5biFJ30+PGkgY2xhc3NOYW1lPVwiY2hlY2ttYXJrIGljb25cIj48L2k+IEZpZ2h0IEFnYWluIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA6bnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFBva2VyXG5cbiIsIm1vZHVsZS5leHBvcnRzLnRhZyA9IHJlcXVpcmUoJ3Njc3NpZnknKS5jcmVhdGVMaW5rKFwiZGF0YTp0ZXh0L2NzcztiYXNlNjQsS250aWIzZ3RjMmw2YVc1bk9tSnZjbVJsY2kxaWIzaDlMbU52Ym5SaGFXNWxjbnQzYVdSMGFEb3hNREFsTzIxaGVDMTNhV1IwYURvNE1EQndlRHR3YjNOcGRHbHZianBoWW5OdmJIVjBaVHRzWldaME9qVXdKVHQwYjNBNk5UQWxPM1J5WVc1elptOXliVHAwY21GdWMyeGhkR1VvTFRVd0pTd2dMVFV3SlNrN1ltOXlaR1Z5T2pGd2VDQnpiMnhwWkNBalpqRm1NV1l4TzNCaFpHUnBibWM2TlhCNElEQTdaR2x6Y0d4aGVUcG1iR1Y0TzJac1pYZ3RkM0poY0RwM2NtRndmUzVqYjI1MFlXbHVaWElnTG5ScGRHeGxlMlpzWlhnNk1UQXdKVHR3YjNOcGRHbHZianBoWW5OdmJIVjBaVHQwYjNBNkxUWXdjSGc3YkdWbWREb3dPM2RwWkhSb09qRXdNQ1Y5TG1OdmJuUmhhVzVsY2lBdWJHVm1kSHRrYVhOd2JHRjVPbVpzWlhnN1pteGxlRG95TUNVN2JXbHVMV2hsYVdkb2REb3pNREJ3ZUR0d1lXUmthVzVuT2pWd2VEdGliM0prWlhJdGNtbG5hSFE2TVhCNElHUnZkSFJsWkNBalpXVmxmUzVqYjI1MFlXbHVaWElnTG14bFpuUWdMblZwTG0xbGJuVjdaR2x6Y0d4aGVUcG1iR1Y0TzNkcFpIUm9PakV3TUNVN1pteGxlQzFrYVhKbFkzUnBiMjQ2WTI5c2RXMXVPMnAxYzNScFpua3RZMjl1ZEdWdWREcHpjR0ZqWlMxaGNtOTFibVE3WW05eVpHVnlPakFnYm05dVpUdGliM2d0YzJoaFpHOTNPbTV2Ym1WOUxtTnZiblJoYVc1bGNpQXViR1ZtZENBdWRXa3ViV1Z1ZFNBdWFYUmxiWHR3WVdSa2FXNW5MV3hsWm5RNk5YQjRPM0JoWkdScGJtY3RjbWxuYUhRNk5YQjRmUzVqYjI1MFlXbHVaWElnTG14bFpuUWdMblZwTG0xbGJuVWdMbWwwWlcwNlltVm1iM0psZTJScGMzQnNZWGs2Ym05dVpYMHVZMjl1ZEdGcGJtVnlJQzVzWldaMElDNTFhUzV0Wlc1MUlDNXBkR1Z0TG1Kc2FXNXJlMkZ1YVcxaGRHbHZianBpYkdsdWF5QXVPSE1nU1c1bWFXNXBkR1Y5TG1OdmJuUmhhVzVsY2lBdWNtbG5hSFI3WkdsemNHeGhlVHBtYkdWNE8yWnNaWGc2T0RBbE8yWnNaWGd0WkdseVpXTjBhVzl1T21OdmJIVnRianR0YVc0dGFHVnBaMmgwT2pNd01IQjRPM0JoWkdScGJtYzZOWEI0ZlM1amIyNTBZV2x1WlhJZ0xuSnBaMmgwSUM1MGIzQjdaR2x6Y0d4aGVUcG1iR1Y0ZlM1amIyNTBZV2x1WlhJZ0xuSnBaMmgwSUM1MGIzQWdMblZwTG5ScGJua3VjM1JoZEdsemRHbGplMjFoY21kcGJqbzJjSGdnTUNBd2ZTNWpiMjUwWVdsdVpYSWdMbkpwWjJoMElDNXRhV1JrYkdWN1pHbHpjR3hoZVRwbWJHVjRPMlpzWlhnNk5qQWxPMnAxYzNScFpua3RZMjl1ZEdWdWREcHpjR0ZqWlMxaGNtOTFibVE3WVd4cFoyNHRhWFJsYlhNNlkyVnVkR1Z5TzIxaGNtZHBiam94TUhCNElEQTdZbTl5WkdWeUxYUnZjRG94Y0hnZ1pHOTBkR1ZrSUNObFpXVTdZbTl5WkdWeUxXSnZkSFJ2YlRveGNIZ2daRzkwZEdWa0lDTmxaV1Y5TG1OdmJuUmhhVzVsY2lBdWNtbG5hSFFnTG0xcFpHUnNaU0F1WTJGeVpIdGpkWEp6YjNJNmNHOXBiblJsY2p0M2FXUjBhRG94TURCd2VEdG9aV2xuYUhRNk1UTTVjSGc3YldGeVoybHVPalZ3ZUR0aWIzSmtaWEl0Y21Ga2FYVnpPamx3ZUR0d2IzTnBkR2x2YmpweVpXeGhkR2wyWlgwdVkyOXVkR0ZwYm1WeUlDNXlhV2RvZENBdWJXbGtaR3hsSUM1allYSmtMbWh2YkdSN1ltOTRMWE5vWVdSdmR6b3ROSEI0SUMwMGNIZ2dNVEJ3ZUNBalpqRXhJR2x1YzJWMGZTNWpiMjUwWVdsdVpYSWdMbkpwWjJoMElDNXRhV1JrYkdVZ0xtTmhjbVF1YUc5c1pEcGhablJsY250amIyNTBaVzUwT2lKb2IyeGtJanQzYVdSMGFEb3hNREJ3ZUR0b1pXbG5hSFE2TVRNNWNIZzdlaTFwYm1SbGVEb3hPMkpoWTJ0bmNtOTFibVE2Y21kaVlTZ3lNREFzTlRBc05UQXNNQzR6S1R0amIyeHZjam9qWmpFeE8zQnZjMmwwYVc5dU9tRmljMjlzZFhSbE8yeGxablE2TUR0MGIzQTZNRHRzYVc1bExXaGxhV2RvZERveE16bHdlRHQwWlhoMExXRnNhV2R1T21ObGJuUmxjanRtYjI1MExYTnBlbVU2TXpad2VEdGliM0prWlhJdGNtRmthWFZ6T2psd2VIMHVZMjl1ZEdGcGJtVnlJQzV5YVdkb2RDQXVZbTkwZEc5dGUyUnBjM0JzWVhrNlpteGxlSDB1WTI5dWRHRnBibVZ5SUM1eWFXZG9kQ0F1ZFdrdVptOXliWHQzYVdSMGFEb3hNREFsZlM1amIyNTBZV2x1WlhJZ0xuSnBaMmgwSUM1MWFTNW1iM0p0SUM1eWFXZG9kQzFoY21WaGUzUmxlSFF0WVd4cFoyNDZjbWxuYUhSOUxtTnZiblJoYVc1bGNpQXVjbWxuYUhRZ0xuVnBMbVp2Y20wZ0xuSmhibVJ2YlMxaGNtVmhlMnhwYm1VdGFHVnBaMmgwT2pRd2NIaDlMbU52Ym5SaGFXNWxjaUF1Y21sbmFIUWdMblZwTG1admNtMGdMbkpoYm1SdmJTMWhjbVZoSUM1eVlXNWtiMjB0Ym5WdFltVnllMjFoY21kcGJpMXlhV2RvZERveU1IQjRPMlJwYzNCc1lYazZhVzVzYVc1bExXSnNiMk5yTzNkcFpIUm9PalV3Y0hnN2RHVjRkQzFoYkdsbmJqcGpaVzUwWlhKOUxtTnZiblJoYVc1bGNpQXVjbWxuYUhRZ0xuVnBMbVp2Y20wZ0xuSmhibVJ2YlMxaGNtVmhJQzV5WVc1a2IyMHRjbVZ6ZFd4MGUyTnZiRzl5T2lNeU1VSkJORFY5TG1OdmJuUmhhVzVsY2lBdWNtbG5hSFFnTG5WcExtWnZjbTBnTG5KaGJtUnZiUzFoY21WaElDNXlZVzVrYjIwdGNtVnpkV3gwTG14dmMyVjdZMjlzYjNJNkkwTkRNVGd4UlgwdWNDMHhlMkpoWTJ0bmNtOTFibVF0Y0c5emFYUnBiMjQ2TUNBd2ZTNXdMVEo3WW1GamEyZHliM1Z1WkMxd2IzTnBkR2x2YmpvdE1URXljSGdnTUgwdWNDMHplMkpoWTJ0bmNtOTFibVF0Y0c5emFYUnBiMjQ2TFRJeU5YQjRJREI5TG5BdE5IdGlZV05yWjNKdmRXNWtMWEJ2YzJsMGFXOXVPaTB6TXpod2VDQXdmUzV3TFRWN1ltRmphMmR5YjNWdVpDMXdiM05wZEdsdmJqb3RORFV3Y0hnZ01IMHVjQzAyZTJKaFkydG5jbTkxYm1RdGNHOXphWFJwYjI0Nk1DQXRNVFEzY0hoOUxuQXROM3RpWVdOclozSnZkVzVrTFhCdmMybDBhVzl1T2kweE1USndlQ0F0TVRRM2NIaDlMbkF0T0h0aVlXTnJaM0p2ZFc1a0xYQnZjMmwwYVc5dU9pMHlNalZ3ZUNBdE1UUTNjSGg5TG5BdE9YdGlZV05yWjNKdmRXNWtMWEJ2YzJsMGFXOXVPaTB6TXpod2VDQXRNVFEzY0hoOUxuQXRNVEI3WW1GamEyZHliM1Z1WkMxd2IzTnBkR2x2YmpvdE5EVXdjSGdnTFRFME4zQjRmUzV3TFRFeGUySmhZMnRuY205MWJtUXRjRzl6YVhScGIyNDZNQ0F0TWprMWNIaDlMbkF0TVRKN1ltRmphMmR5YjNWdVpDMXdiM05wZEdsdmJqb3RNVEV5Y0hnZ0xUSTVOWEI0ZlM1d0xURXplMkpoWTJ0bmNtOTFibVF0Y0c5emFYUnBiMjQ2TFRJeU5YQjRJQzB5T1RWd2VIMHVZbUZqYTN0aVlXTnJaM0p2ZFc1a0xYQnZjMmwwYVc5dU9pMDBOVEJ3ZUNBdE1qazFjSGg5UUd0bGVXWnlZVzFsY3lCaWJHbHVhM3RtY205dGUyOXdZV05wZEhrNk1YMTBiM3R2Y0dGamFYUjVPakF1TURWOWZTNTFhUzVrYVcxdFpYSXViVzlrWVd4eklDNTFhUzV6YldGc2JDNXRiMlJoYkh0MGNtRnVjMlp2Y20wNmRISmhibk5zWVhSbEtEQXNJQzAxTUNVcGZTNTFhUzVrYVcxdFpYSXViVzlrWVd4ekxtaGxiSEF0WVhCd1pXRnlJQzUxYVM1emJXRnNiQzV0YjJSaGJIdDBjbUZ1YzJadmNtMDZjMk5oYkdVb01DNHhLU0IwY21GdWMyeGhkR1VvTUN3Z0xUVXdKU2w5TG5WcExtUnBiVzFsY2k1dGIyUmhiSE11YUdWc2NDMWhjSEJsWVhJdFlXTjBhWFpsSUM1MWFTNXpiV0ZzYkM1dGIyUmhiSHQwY21GdWMyWnZjbTA2YzJOaGJHVW9NU2tnZEhKaGJuTnNZWFJsS0RBc0lDMDFNQ1VwTzNSeVlXNXphWFJwYjI0NmRISmhibk5tYjNKdElEQXVNM01nWTNWaWFXTXRZbVY2YVdWeUtEQXVOamdzSURBc0lEQXVNamNzSURFdU5UVXBJREJ6ZlFvPVwiKTsgbW9kdWxlLmV4cG9ydHMuY3NzID0gXCIqe2JveC1zaXppbmc6Ym9yZGVyLWJveH0uY29udGFpbmVye3dpZHRoOjEwMCU7bWF4LXdpZHRoOjgwMHB4O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtib3JkZXI6MXB4IHNvbGlkICNmMWYxZjE7cGFkZGluZzo1cHggMDtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXB9LmNvbnRhaW5lciAudGl0bGV7ZmxleDoxMDAlO3Bvc2l0aW9uOmFic29sdXRlO3RvcDotNjBweDtsZWZ0OjA7d2lkdGg6MTAwJX0uY29udGFpbmVyIC5sZWZ0e2Rpc3BsYXk6ZmxleDtmbGV4OjIwJTttaW4taGVpZ2h0OjMwMHB4O3BhZGRpbmc6NXB4O2JvcmRlci1yaWdodDoxcHggZG90dGVkICNlZWV9LmNvbnRhaW5lciAubGVmdCAudWkubWVudXtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZDtib3JkZXI6MCBub25lO2JveC1zaGFkb3c6bm9uZX0uY29udGFpbmVyIC5sZWZ0IC51aS5tZW51IC5pdGVte3BhZGRpbmctbGVmdDo1cHg7cGFkZGluZy1yaWdodDo1cHh9LmNvbnRhaW5lciAubGVmdCAudWkubWVudSAuaXRlbTpiZWZvcmV7ZGlzcGxheTpub25lfS5jb250YWluZXIgLmxlZnQgLnVpLm1lbnUgLml0ZW0uYmxpbmt7YW5pbWF0aW9uOmJsaW5rIC44cyBJbmZpbml0ZX0uY29udGFpbmVyIC5yaWdodHtkaXNwbGF5OmZsZXg7ZmxleDo4MCU7ZmxleC1kaXJlY3Rpb246Y29sdW1uO21pbi1oZWlnaHQ6MzAwcHg7cGFkZGluZzo1cHh9LmNvbnRhaW5lciAucmlnaHQgLnRvcHtkaXNwbGF5OmZsZXh9LmNvbnRhaW5lciAucmlnaHQgLnRvcCAudWkudGlueS5zdGF0aXN0aWN7bWFyZ2luOjZweCAwIDB9LmNvbnRhaW5lciAucmlnaHQgLm1pZGRsZXtkaXNwbGF5OmZsZXg7ZmxleDo2MCU7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZDthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luOjEwcHggMDtib3JkZXItdG9wOjFweCBkb3R0ZWQgI2VlZTtib3JkZXItYm90dG9tOjFweCBkb3R0ZWQgI2VlZX0uY29udGFpbmVyIC5yaWdodCAubWlkZGxlIC5jYXJke2N1cnNvcjpwb2ludGVyO3dpZHRoOjEwMHB4O2hlaWdodDoxMzlweDttYXJnaW46NXB4O2JvcmRlci1yYWRpdXM6OXB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5jb250YWluZXIgLnJpZ2h0IC5taWRkbGUgLmNhcmQuaG9sZHtib3gtc2hhZG93Oi00cHggLTRweCAxMHB4ICNmMTEgaW5zZXR9LmNvbnRhaW5lciAucmlnaHQgLm1pZGRsZSAuY2FyZC5ob2xkOmFmdGVye2NvbnRlbnQ6XFxcImhvbGRcXFwiO3dpZHRoOjEwMHB4O2hlaWdodDoxMzlweDt6LWluZGV4OjE7YmFja2dyb3VuZDpyZ2JhKDIwMCw1MCw1MCwwLjMpO2NvbG9yOiNmMTE7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO2xpbmUtaGVpZ2h0OjEzOXB4O3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZTozNnB4O2JvcmRlci1yYWRpdXM6OXB4fS5jb250YWluZXIgLnJpZ2h0IC5ib3R0b217ZGlzcGxheTpmbGV4fS5jb250YWluZXIgLnJpZ2h0IC51aS5mb3Jte3dpZHRoOjEwMCV9LmNvbnRhaW5lciAucmlnaHQgLnVpLmZvcm0gLnJpZ2h0LWFyZWF7dGV4dC1hbGlnbjpyaWdodH0uY29udGFpbmVyIC5yaWdodCAudWkuZm9ybSAucmFuZG9tLWFyZWF7bGluZS1oZWlnaHQ6NDBweH0uY29udGFpbmVyIC5yaWdodCAudWkuZm9ybSAucmFuZG9tLWFyZWEgLnJhbmRvbS1udW1iZXJ7bWFyZ2luLXJpZ2h0OjIwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6NTBweDt0ZXh0LWFsaWduOmNlbnRlcn0uY29udGFpbmVyIC5yaWdodCAudWkuZm9ybSAucmFuZG9tLWFyZWEgLnJhbmRvbS1yZXN1bHR7Y29sb3I6IzIxQkE0NX0uY29udGFpbmVyIC5yaWdodCAudWkuZm9ybSAucmFuZG9tLWFyZWEgLnJhbmRvbS1yZXN1bHQubG9zZXtjb2xvcjojQ0MxODFFfS5wLTF7YmFja2dyb3VuZC1wb3NpdGlvbjowIDB9LnAtMntiYWNrZ3JvdW5kLXBvc2l0aW9uOi0xMTJweCAwfS5wLTN7YmFja2dyb3VuZC1wb3NpdGlvbjotMjI1cHggMH0ucC00e2JhY2tncm91bmQtcG9zaXRpb246LTMzOHB4IDB9LnAtNXtiYWNrZ3JvdW5kLXBvc2l0aW9uOi00NTBweCAwfS5wLTZ7YmFja2dyb3VuZC1wb3NpdGlvbjowIC0xNDdweH0ucC03e2JhY2tncm91bmQtcG9zaXRpb246LTExMnB4IC0xNDdweH0ucC04e2JhY2tncm91bmQtcG9zaXRpb246LTIyNXB4IC0xNDdweH0ucC05e2JhY2tncm91bmQtcG9zaXRpb246LTMzOHB4IC0xNDdweH0ucC0xMHtiYWNrZ3JvdW5kLXBvc2l0aW9uOi00NTBweCAtMTQ3cHh9LnAtMTF7YmFja2dyb3VuZC1wb3NpdGlvbjowIC0yOTVweH0ucC0xMntiYWNrZ3JvdW5kLXBvc2l0aW9uOi0xMTJweCAtMjk1cHh9LnAtMTN7YmFja2dyb3VuZC1wb3NpdGlvbjotMjI1cHggLTI5NXB4fS5iYWNre2JhY2tncm91bmQtcG9zaXRpb246LTQ1MHB4IC0yOTVweH1Aa2V5ZnJhbWVzIGJsaW5re2Zyb217b3BhY2l0eToxfXRve29wYWNpdHk6MC4wNX19LnVpLmRpbW1lci5tb2RhbHMgLnVpLnNtYWxsLm1vZGFse3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwgLTUwJSl9LnVpLmRpbW1lci5tb2RhbHMuaGVscC1hcHBlYXIgLnVpLnNtYWxsLm1vZGFse3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZSgwLCAtNTAlKX0udWkuZGltbWVyLm1vZGFscy5oZWxwLWFwcGVhci1hY3RpdmUgLnVpLnNtYWxsLm1vZGFse3RyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoMCwgLTUwJSk7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMC4zcyBjdWJpYy1iZXppZXIoMC42OCwgMCwgMC4yNywgMS41NSkgMHN9XFxuXCI7Il19\n"]}